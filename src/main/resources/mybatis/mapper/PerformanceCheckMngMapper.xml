<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 * 2019.01.04
-->
<mapper namespace="omc.spop.dao.PerformanceCheckMngDao">
	<select id="getPerfCheckStep" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerfCheckStep */
		SELECT  /* DISPLAY */
		        A.PERF_CHECK_STEP_NM AS PERF_CHECK_STEP_NM                    -- 성능점검단계명

		        /* HIDEN */
		      , A.PERF_CHECK_STEP_ID AS PERF_CHECK_STEP_ID                    -- 성능점검단계ID
		      , A.PERF_CHECK_AUTO_EXEC_YN AS PERF_CHECK_AUTO_EXEC_YN          -- 성능점검자동실행여부
		      , A.STEP_ORDERING AS STEP_ORDERING                              -- 단계순서
		  FROM DEPLOY_PERF_CHK_STEP A         -- 배포성능점점단계기본
		      ,DEPLOY_PERF_CHK_STEP_TEST_DB B -- 배포성능점검단계별테스트DB기본
		 WHERE A.PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID
		   AND B.WRKJOB_CD  = #{wrkjob_cd}
		   AND B.DEL_YN = 'N'
		 ORDER BY  A.STEP_ORDERING
	</select>

	<sql id="getPerformanceCheckMngListRefIdEspc">
		/* PerformanceCheckMngDao.getPerformanceCheckMngListRefIdEspc */
		SELECT  /* DISPLAY */
				A.DEPLOY_ID AS DEPLOY_ID									-- 배포ID
			  , A.DEPLOY_NM AS DEPLOY_NM									-- 배포명
			  , WC1.WRKJOB_CD_NM  AS WRKJOB_CD_NM							-- 업무명
			  , CASE WHEN B.PERF_CHECK_EVALUATION_METH_CD IN ('2', '3') THEN
						  CD1.REF_VL_2
					 ELSE   
						  CD1.CD_NM
				END AS DEPLOY_CHECK_STATUS_NM								-- 검증상태
			  , C.PERF_CHECK_STEP_NM	|| '(' ||
				(SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S2
				 WHERE S2.PERF_CHECK_ID = A.PERF_CHECK_ID
				 AND S2.PERF_CHECK_STEP_ID <![CDATA[<=]]> A.LAST_PERF_CHECK_STEP_ID) || '/' ||
				(SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S1
				 WHERE S1.PERF_CHECK_ID = A.PERF_CHECK_ID) || ')' AS PERF_CHECK_STEP_NM  -- 최종검증단계
			  , (CASE
					WHEN CD2.CD_NM IS NOT NULL THEN CD2.CD_NM
					ELSE (CASE
							 WHEN (SELECT COUNT(*)
									 FROM DEPLOY_PERF_CHK_RESULT S3
									WHERE S3.PERF_CHECK_ID = A.PERF_CHECK_ID
									  AND S3.PERF_CHECK_STEP_ID = A.LAST_PERF_CHECK_STEP_ID
									  AND ROWNUM = 1) > 0 THEN '수행중'
							  ELSE '미수행'
						  END)
				 END) AS PERF_CHECK_RESULT_DIV_NM							-- 최종검증단계결과
			  , NVL(D.TOT,0)||'('||NVL(D.N,0)||'/'||NVL(D.C,0)||'/'||NVL(D.S,0)||')' AS CHECK_TGT_CNT	--전체(신규/변경/동일)
			  , CD3.CD_NM AS PERF_CHECK_COMPLETE_METH_NM					-- 완료방법
			  , U1.USER_NM  AS DEPLOY_REQUESTER_NM							-- 배포요청자
			  , A.DEPLOY_REQUEST_DT AS DEPLOY_REQUEST_DT					-- 배포요청일시
			  , HIST.DEPLOY_CHECK_STATUS_UPDATE_DT							-- 검증요청일시 
			  , TO_CHAR(A.PERF_CHECK_COMPLETE_DT , 'YYYY-MM-DD HH24:MI:SS') AS PERF_CHECK_COMPLETE_DT  -- 검증완료일시
			  , A.CHECK_RESULT_ANC_YN										-- 검증결과통보여부
			  , TO_CHAR(A.LAST_CHECK_RESULT_ANC_DT, 'YYYY-MM-DD HH24:MI:SS') LAST_CHECK_RESULT_ANC_DT  -- 검증결과통보일시 
			  , A.CHECK_RESULT_ANC_CNT										-- 검증결과통보횟수 
			  , A.PERF_CHECK_ID AS PERF_CHECK_ID							-- 성능검증ID
			  , (SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S1
				 WHERE S1.PERF_CHECK_ID = A.PERF_CHECK_ID) AS FINAL_PERF_CHECK_STEP		-- 최종성능검증단계

			  /* HIDDEN */
			  , NVL2(A.DEPLOY_EXPECTED_DAY,
					 SUBSTR(A.DEPLOY_EXPECTED_DAY, 1, 4) || '-' ||
					 SUBSTR(A.DEPLOY_EXPECTED_DAY, 5, 2) || '-' ||
					 SUBSTR(A.DEPLOY_EXPECTED_DAY, 7, 2),
					 '')  AS DEPLOY_EXPECTED_DAY							-- 배포예정일
			  , A.DEPLOY_UPDATE_SBST AS DEPLOY_UPDATE_SBST					-- 배포변경내용
			  , A.LAST_PERF_CHECK_STEP_ID AS LAST_PERF_CHECK_STEP_ID		-- 최종성능검증단계ID
			  , A.WRKJOB_CD AS WRKJOB_CD									-- 업무코드
			  , A.BEFORE_PERF_CHECK_ID AS BEFORE_PERF_CHECK_ID				-- 이전성능검증ID
			  , A.DEPLOY_CHECK_STATUS_CD AS DEPLOY_CHECK_STATUS_CD			-- 배포성능검증상태코드
			  , B.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD		-- 성능검증결과구분코드
			  , A.DEPLOY_REQUESTER_ID AS DEPLOY_REQUESTER_ID				-- 배포요청자ID
			  
			  
		FROM	DEPLOY_PERF_CHK A
			  , DEPLOY_PERF_CHK_STEP_EXEC B
			  , DEPLOY_PERF_CHK_STEP C
			  , WRKJOB_CD WC1
			  , CD CD1
			  , CD CD2
			  , CD CD3
			  , USERS U1
			  , DEPLOY_PERF_CHK_STATUS_HISTORY HIST
			  ,(
				SELECT PERF_CHECK_ID, TOT, SUM(N) N,SUM(C) C,SUM(S) S
				FROM
				(
					SELECT 
					PERF_CHECK_ID
					, COUNT(*) OVER ( PARTITION BY PERF_CHECK_ID ) TOT
					,CASE WHEN PROGRAM_DVLP_DIV_CD = 'N' THEN 1 ELSE 0 END N
					,CASE WHEN PROGRAM_DVLP_DIV_CD = 'C' THEN 1 ELSE 0 END C
					,CASE WHEN PROGRAM_DVLP_DIV_CD = 'S' THEN 1 ELSE 0 END S
					FROM DEPLOY_PERF_CHK_TARGET_PGM
				)
				GROUP BY PERF_CHECK_ID, TOT
			  )D
		WHERE A.PERF_CHECK_ID  = B.PERF_CHECK_ID (+)
		  AND A.LAST_PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID (+)
		  AND A.LAST_PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
		  AND A.WRKJOB_CD = WC1.WRKJOB_CD
		  AND A.DEPLOY_CHECK_STATUS_CD = CD1.CD
		  AND CD1.GRP_CD_ID = '1056'
		  AND B.PERF_CHECK_RESULT_DIV_CD = CD2.CD(+)
		  AND CD2.GRP_CD_ID (+)= '1055'
		  AND A.PERF_CHECK_COMPLETE_METH_CD = CD3.CD(+)
		  AND CD3.GRP_CD_ID (+)= '1071'
		  AND A.DEPLOY_REQUESTER_ID = U1.USER_ID(+)
		  AND A.PERF_CHECK_ID=HIST.PERF_CHECK_ID(+)
		  AND '00' = HIST.DEPLOY_CHECK_STATUS_CD(+)
		  AND A.PERF_CHECK_ID = D.PERF_CHECK_ID(+)
	   	<if test="check_result_anc_yn eq 'Y'.toString()">
			  AND CHECK_RESULT_ANC_YN = 'Y'
	   	</if>
	   	<if test="check_result_anc_yn eq 'N'.toString()">
			  AND (CHECK_RESULT_ANC_YN = 'N' OR CHECK_RESULT_ANC_YN IS NULL)
	   	</if>
	   	<!-- 완료방법 -->
	   	<if test="perf_check_complete_meth_cd != null and perf_check_complete_meth_cd != ''">
			  AND A.PERF_CHECK_COMPLETE_METH_CD = #{perf_check_complete_meth_cd}
	   	</if>

		  /* 로그인한 사용자가 개발자(ROLE_DEV) 인경우 조건 추가 */
		<choose>
		<when test="auth_cd eq 'ROLE_DEV'">
			AND A.DEPLOY_REQUESTER_ID = #{user_id}
		</when>
		<otherwise>
			<if test="deploy_requester_nm != null and deploy_requester_nm != ''">
				AND U1.USER_NM LIKE #{deploy_requester_nm} || '%'
			</if>
		</otherwise>
		</choose>

		  /* 검색조건 */
		  -- Mandatory
		  AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
								 FROM WRKJOB_CD
								START WITH WRKJOB_CD = #{wrkjob_cd}
							  CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)											-- 업무
		  AND A.DEPLOY_REQUEST_DT BETWEEN TO_DATE(#{deploy_request_dt_1} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
									  AND TO_DATE(#{deploy_request_dt_2} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')	-- 배포요청일시
		-- Optional
		<if test="deploy_check_status_cd != null and deploy_check_status_cd != ''">
			AND A.DEPLOY_CHECK_STATUS_CD = #{deploy_check_status_cd}	-- 검증상태
		</if>
		<if test="last_perf_check_step_id != null and last_perf_check_step_id != ''">
			AND A.LAST_PERF_CHECK_STEP_ID = #{last_perf_check_step_id}	-- 최종검증단계
		</if>
		<if test="user_nm != null and user_nm != ''">
			AND U1.USER_NM LIKE '%' || #{user_nm} || '%'
		</if>
		<if test="deploy_id != null and deploy_id != ''">
			AND UPPER(A.DEPLOY_ID) LIKE UPPER(#{deploy_id}) || '%'
		</if>
		 ORDER BY A.PERF_CHECK_ID DESC
	</sql>
	
	<sql id="getPerformanceCheckMngListRefId">
		/* PerformanceCheckMngDao.getPerformanceCheckMngListRefId */
        SELECT  /* DISPLAY */
                A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
              , WC1.WRKJOB_CD_NM  AS WRKJOB_CD_NM                             -- 업무명
              , CD1.CD_NM AS DEPLOY_CHECK_STATUS_NM                           -- 점검상태
              , CD3.CD_NM AS PERF_CHECK_COMPLETE_METH_NM                           -- 완료방법
              , C.PERF_CHECK_STEP_NM    || '(' ||
                (SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S2
                 WHERE S2.PERF_CHECK_ID = A.PERF_CHECK_ID
                 AND S2.PERF_CHECK_STEP_ID <![CDATA[<=]]> A.LAST_PERF_CHECK_STEP_ID) || '/' ||
                (SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S1
                 WHERE S1.PERF_CHECK_ID = A.PERF_CHECK_ID) || ')' AS PERF_CHECK_STEP_NM  -- 성능점검단계명
              , (SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S1
                 WHERE S1.PERF_CHECK_ID = A.PERF_CHECK_ID) AS FINAL_PERF_CHECK_STEP  -- 최종성능점검단계
              , (CASE
                    WHEN CD2.CD_NM IS NOT NULL THEN CD2.CD_NM
                    ELSE (CASE
                             WHEN (SELECT COUNT(*)
                                     FROM DEPLOY_PERF_CHK_RESULT S3
                                    WHERE S3.PERF_CHECK_ID = A.PERF_CHECK_ID
                                      AND S3.PERF_CHECK_STEP_ID = A.LAST_PERF_CHECK_STEP_ID) > 0 THEN '수행중'
                              ELSE '미수행'
                          END)
                 END) AS PERF_CHECK_RESULT_DIV_NM         -- 최종점검단계결과
              , A.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID
              , A.DEPLOY_NM AS DEPLOY_NM                                      -- 배포명
              , U1.USER_NM  AS DEPLOY_REQUESTER_NM                            -- 배포요청자
<!--                                      배포요청일시 -->
<!--               , TO_CHAR(A.DEPLOY_REQUEST_DT, 'YYYY-MM-DD HH24:MI:SS') AS DEPLOY_REQUEST_DT -->
              , A.DEPLOY_REQUEST_DT AS DEPLOY_REQUEST_DT
              , NVL2(A.DEPLOY_EXPECTED_DAY,
                     SUBSTR(A.DEPLOY_EXPECTED_DAY, 1, 4) || '-' ||
                     SUBSTR(A.DEPLOY_EXPECTED_DAY, 5, 2) || '-' ||
                     SUBSTR(A.DEPLOY_EXPECTED_DAY, 7, 2),
                     '')  AS DEPLOY_EXPECTED_DAY                              -- 배포예정일
              , TO_CHAR(A.PERF_CHECK_COMPLETE_DT , 'YYYY-MM-DD HH24:MI:SS') AS PERF_CHECK_COMPLETE_DT                 -- 점검완료일시
<!-- 점검결과통보여부 -->
<!--               , (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') THEN A.CHECK_RESULT_ANC_YN ELSE '' END ) AS CHECK_RESULT_ANC_YN          -->
<!-- 점검결과통보일시 -->
<!--               , (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') THEN TO_CHAR(A.LAST_CHECK_RESULT_ANC_DT, 'YYYY-MM-DD HH24:MI:SS') ELSE '' END) AS LAST_CHECK_RESULT_ANC_DT                 -->
<!-- 점검결과통보횟수 -->
<!--               , (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') THEN A.CHECK_RESULT_ANC_CNT ELSE NULL END ) AS CHECK_RESULT_ANC_CNT                  -->
              <!-- 점검결과통보여부 -->
              , A.CHECK_RESULT_ANC_YN
              <!-- 점검결과통보일시 -->
              , TO_CHAR(A.LAST_CHECK_RESULT_ANC_DT, 'YYYY-MM-DD HH24:MI:SS') LAST_CHECK_RESULT_ANC_DT
              <!-- 점검결과통보횟수 -->
              , A.CHECK_RESULT_ANC_CNT
              /* HIDDEN */
              , A.DEPLOY_UPDATE_SBST AS DEPLOY_UPDATE_SBST                    -- 배포변경내용
              , A.LAST_PERF_CHECK_STEP_ID AS LAST_PERF_CHECK_STEP_ID          -- 최종성능점검단계ID
              , A.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드
              , A.BEFORE_PERF_CHECK_ID AS BEFORE_PERF_CHECK_ID                -- 이전성능점검ID
              , A.DEPLOY_CHECK_STATUS_CD AS DEPLOY_CHECK_STATUS_CD            -- 배포성능점검상태코드
              , B.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD        -- 성능점검결과구분코드
              , A.DEPLOY_REQUESTER_ID AS DEPLOY_REQUESTER_ID                  -- 배포요청자ID
              ,HIST.DEPLOY_CHECK_STATUS_UPDATE_DT                             -- 점검요청일시 
              ,NVL(D.TOT,0)||'('||NVL(D.N,0)||'/'||NVL(D.C,0)||'/'||NVL(D.S,0)||')' AS CHECK_TGT_CNT --점점대상건수
        FROM    DEPLOY_PERF_CHK A                                             -- 배포성능점검기본
              , DEPLOY_PERF_CHK_STEP_EXEC B                                   -- 배포성능점검단계별수행내역
              , DEPLOY_PERF_CHK_STEP C                                        -- 배포성능점점단계기본
              , WRKJOB_CD WC1                                                 -- 업무코드
              , CD CD1                                                        -- 공통코드(배포성능점검상태코드)
              , CD CD2                                                        -- 공통코드(성능점검결과구분코드)
              , CD CD3                                                        -- 공통코드(성능점검완료방법코드)
              , USERS U1                                                      -- 사용자
              , DEPLOY_PERF_CHK_STATUS_HISTORY HIST
              ,(
				SELECT PERF_CHECK_ID, TOT, SUM(N) N,SUM(C) C,SUM(S) S
				FROM
				(
					SELECT 
					PERF_CHECK_ID
					, COUNT(*) OVER ( PARTITION BY PERF_CHECK_ID ) TOT
					,CASE WHEN PROGRAM_DVLP_DIV_CD = 'N' THEN 1 ELSE 0 END N
					,CASE WHEN PROGRAM_DVLP_DIV_CD = 'C' THEN 1 ELSE 0 END C
					,CASE WHEN PROGRAM_DVLP_DIV_CD = 'S' THEN 1 ELSE 0 END S
					FROM DEPLOY_PERF_CHK_TARGET_PGM
				)
				GROUP BY PERF_CHECK_ID, TOT
              )D
        WHERE A.PERF_CHECK_ID  = B.PERF_CHECK_ID (+)
          AND A.LAST_PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID (+)
          AND A.LAST_PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
          AND A.WRKJOB_CD = WC1.WRKJOB_CD
          AND A.DEPLOY_CHECK_STATUS_CD = CD1.CD
          AND CD1.GRP_CD_ID = '1056'
          AND B.PERF_CHECK_RESULT_DIV_CD = CD2.CD(+)
          AND CD2.GRP_CD_ID (+)= '1055'
          AND A.PERF_CHECK_COMPLETE_METH_CD = CD3.CD(+)
          AND CD3.GRP_CD_ID (+)= '1071'
          AND A.DEPLOY_REQUESTER_ID = U1.USER_ID(+)
          AND A.PERF_CHECK_ID=HIST.PERF_CHECK_ID(+)
          AND '00' = HIST.DEPLOY_CHECK_STATUS_CD(+)
          AND A.PERF_CHECK_ID = D.PERF_CHECK_ID(+)
       	<if test="check_result_anc_yn eq 'Y'.toString()">
	          AND CHECK_RESULT_ANC_YN = 'Y'
       	</if>
       	<if test="check_result_anc_yn eq 'N'.toString()">
	          AND (CHECK_RESULT_ANC_YN = 'N' OR CHECK_RESULT_ANC_YN IS NULL)
       	</if>
       	<!-- 완료방법 -->
       	<if test="perf_check_complete_meth_cd != null and perf_check_complete_meth_cd != ''">
	          AND A.PERF_CHECK_COMPLETE_METH_CD = #{perf_check_complete_meth_cd}
       	</if>

          /* 로그인한 사용자가 개발자(ROLE_DEV) 인경우 조건 추가 */
        <choose>
        <when test="auth_cd eq 'ROLE_DEV'">
        	AND A.DEPLOY_REQUESTER_ID = #{user_id}
        </when>
        <otherwise>
        	<if test="deploy_requester_nm != null and deploy_requester_nm != ''">
	        	AND U1.USER_NM LIKE #{deploy_requester_nm} || '%'
        	</if>
        </otherwise>
        </choose>

          /* 검색조건 */
          -- Mandatory
          AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                                 FROM WRKJOB_CD
                                START WITH WRKJOB_CD = #{wrkjob_cd}
                              CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)                                       -- 업무
          AND A.DEPLOY_REQUEST_DT BETWEEN TO_DATE(#{deploy_request_dt_1} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
                                      AND TO_DATE(#{deploy_request_dt_2} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')   -- 배포요청일시
        --  -- Optional
        <if test="deploy_check_status_cd != null and deploy_check_status_cd != ''">
	        AND A.DEPLOY_CHECK_STATUS_CD = #{deploy_check_status_cd}     -- 점검상태
        </if>
        <if test="last_perf_check_step_id != null and last_perf_check_step_id != ''">
        	AND A.LAST_PERF_CHECK_STEP_ID = #{last_perf_check_step_id}   -- 최종점검단계
        </if>
        <if test="user_nm != null and user_nm != ''">
        	AND U1.USER_NM LIKE '%' || #{user_nm} || '%'
        </if>
        <if test="deploy_id != null and deploy_id != ''">
        	AND UPPER(A.DEPLOY_ID) LIKE UPPER(#{deploy_id}) || '%'
        </if>
         ORDER BY A.PERF_CHECK_ID DESC
	</sql>

	<select id="getPerformanceCheckMngList" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerformanceCheckMngList */
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM, A.*
		    FROM (
				<include refid="getPerformanceCheckMngListRefId"/>
		    ) A
		    WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
		) A
		WHERE A.RNUM > ${pagePerCount} * (${currentPage} - 1)
	</select>
	
	<select id="getPerformanceCheckMngListExpc" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerformanceCheckMngList */
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM, A.*
		    FROM (
				<include refid="getPerformanceCheckMngListRefIdEspc"/>
		    ) A
		    WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
		) A
		WHERE A.RNUM > ${pagePerCount} * (${currentPage} - 1)
	</select>

	<select id="getPerformanceCheckMngList4Excel" parameterType="performanceCheckMng" resultType="java.util.LinkedHashMap">
		/* PerformanceCheckMngDao.getPerformanceCheckMngList4Excel */
		<include refid="getPerformanceCheckMngListRefId"/>
	</select>
	
	<select id="getPerformanceCheckMngListExpcExcel" parameterType="performanceCheckMng" resultType="java.util.LinkedHashMap">
		/* PerformanceCheckMngDao.getPerformanceCheckMngList4Excel */
		<include refid="getPerformanceCheckMngListRefIdEspc"/>
	</select>
	
	<sql id="getPerformanceCheckStageBasicInfoRefId">
		/* PerformanceCheckMngDao.getPerformanceCheckStageBasicInfoRefId */
		SELECT  /* DISPLAY */
		        (CASE
		            WHEN LVL = 1 THEN WC1.WRKJOB_CD_NM
		            ELSE WC2.WRKJOB_CD_NM || '/' || WC1.WRKJOB_CD_NM
		        END ) AS WRKJOB_CD_NM  -- 업무
		      , A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
		      , A.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID
		      , A.DEPLOY_NM AS DEPLOY_NM                                      -- 배포명
		      , U1.USER_NM  AS DEPLOY_REQUESTER_NM                            -- 배포요청자
		      , TO_CHAR(A.DEPLOY_REQUEST_DT, 'YYYY-MM-DD HH24:MI:SS')
		                            AS DEPLOY_REQUEST_DT                      -- 배포요청일시
		        /* HIDDEN */
		      , WC1.WJ_CD AS TOP_WRKJOB_CD                                    -- 최상위 업무코드
		FROM    DEPLOY_PERF_CHK A                                             -- 배포성능점검기본
		      , (SELECT CONNECT_BY_ROOT WRKJOB_CD AS WJ_CD
		              , WRKJOB_CD
		              , WRKJOB_CD_NM AS WRKJOB_CD_NM
		              , LEVEL AS LVL
		           FROM WRKJOB_CD                                                 -- 업무코드
		          START WITH UPPER_WRKJOB_CD IS NULL
		        CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
				  ORDER SIBLINGS BY WRKJOB_CD) WC1
		      , WRKJOB_CD WC2
		      , USERS U1                                                      -- 사용자
		WHERE A.WRKJOB_CD = WC1.WRKJOB_CD
		  AND WC1.WJ_CD = WC2.WRKJOB_CD
		  AND A.DEPLOY_REQUESTER_ID = U1.USER_ID(+)
		  AND A.PERF_CHECK_ID = #{perf_check_id}
	</sql>

	<!-- 성능점검단계 기본정보 -->
	<select id="getPerformanceCheckStageBasicInfo" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerformanceCheckStageBasicInfo */
		<include refid="getPerformanceCheckStageBasicInfoRefId"/>
	</select>
	
	<select id="getPerformanceCheckStageBasicInfoList" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerformanceCheckStageBasicInfoList */
		<include refid="getPerformanceCheckStageBasicInfoRefId"/>
	</select>

	<!-- 성능점검단계 목록 -->
	<sql id="getPerformanceCheckStageListRefId">
		/* PerformanceCheckMngDao.getPerformanceCheckStageListRefId */
		SELECT  /* DISPLAY */
		        A.PERF_CHECK_STEP_ID                                          -- 점검단계ID
		      , A.PERF_CHECK_STEP_NM                                          -- 점검단계
		      , NVL(B.PERF_TEST_COMPLETE_YN, 'N') AS PERF_TEST_COMPLETE_YN    -- 점검완료
		      , A.DB_NAME AS PERF_TEST_DB_NAME                                -- 테스트DB
		      , TO_CHAR(B.PERF_CHECK_REQUEST_DT, 'YYYY-MM-DD HH24:MI:SS') AS PERF_CHECK_REQUEST_DT              -- 점검요청일시
		      , TO_CHAR(B.PERF_CHECK_COMPLETE_DT, 'YYYY-MM-DD HH24:MI:SS') AS PERF_CHECK_COMPLETE_DT            -- 점검완료일시
		      , (CASE
		            WHEN CD1.CD_NM IS NOT NULL THEN CD1.CD_NM
		            ELSE (CASE
		                     WHEN (SELECT COUNT(*)
		                             FROM DEPLOY_PERF_CHK_RESULT S3
		                            WHERE S3.PERF_CHECK_ID = B.PERF_CHECK_ID
		                              AND S3.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID) > 0 THEN '수행중'
		                      ELSE '미수행'
		                  END)
		         END) AS PERF_CHECK_RESULT_DIV_NM         -- 최종점검단계결과

		      , NVL(C.TOTAL_CNT, 0) AS TOTAL_CNT                    -- 전체건수
		      , NVL(C.EXCEPTION_CNT, 0) AS EXCEPTION_CNT                      -- 예외건수
		      , NVL(C.PASS_CNT, 0) AS PASS_CNT                                -- 적합건수
		      , NVL(C.FAIL_CNT, 0) AS FAIL_CNT                                -- 부적합건수
		      , NVL(C.ERR_CNT, 0) AS ERR_CNT                                  -- 오류건수
		      , NVL(C.TEST_MISS_CNT, 0) AS TEST_MISS_CNT                  -- 테스트누락건수

		        /* HIDDEN */
		      , B.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD        -- 성능점검결과구분코드
		      , B.PERF_CHECK_ID AS PERF_CHECK_ID
		      , (CASE
		            WHEN LAG(NVL(B.PERF_TEST_COMPLETE_YN, 'N')) OVER(ORDER BY A.PERF_CHECK_STEP_ID) IS NULL THEN 'Y'
		            WHEN LAG(NVL(B.PERF_TEST_COMPLETE_YN, 'N')) OVER(ORDER BY A.PERF_CHECK_STEP_ID) = 'Y' THEN 'Y'
		            ELSE 'N'
		        END ) PERF_TEST_TARGET_STEP_YN                                -- 성능점검대상단계여부
		 FROM   (SELECT A.PERF_CHECK_STEP_ID
		              , A.PERF_CHECK_STEP_NM
		              , A.PERF_CHECK_AUTO_EXEC_YN
		              , A.STEP_ORDERING
		              , B.DBID
		              , B.PROGRAM_DIV_CD
		              , DB.DB_NAME
		           FROM DEPLOY_PERF_CHK_STEP A                                -- 배포성능점점단계기본
		              , DEPLOY_PERF_CHK_STEP_TEST_DB B                        -- 배포성능점검단계별테스트DB기본
		              , DATABASE DB                                           -- 데이터베이스기본
		          WHERE A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
		            AND B.DBID = DB.DBID
		            AND B.WRKJOB_CD = #{top_wrkjob_cd}                           /** QUERY_1 의 TOP_WRKJOB_CD 사용 **/
		            AND B.DEL_YN = 'N'
		        ) A
		      , DEPLOY_PERF_CHK_STEP_EXEC B                                   -- 배포성능점검단계별수행내역
		      , (SELECT A.PERF_CHECK_STEP_ID
		              , COUNT(A.PROGRAM_ID) TOTAL_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 1 ELSE 0 END) EXCEPTION_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'A' THEN 1 ELSE 0 END) PASS_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'B' THEN 1 ELSE 0 END) FAIL_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'C' THEN 1 ELSE 0 END) ERR_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD IS NULL THEN 1 ELSE 0 END) TEST_MISS_CNT
		           FROM (SELECT A.PERF_CHECK_ID
                              , A.PERF_CHECK_STEP_ID
		                      , A.PROGRAM_ID
                              , (CASE
                                    WHEN A.PERF_CHECK_STEP_ID <![CDATA[<]]> D.LAST_PERF_CHECK_STEP_ID THEN C.EXCEPTION_PRC_METH_CD
                                    ELSE A.EXCEPTION_PRC_METH_CD
                                END) AS EXCEPTION_PRC_METH_CD
                           FROM (SELECT A.PERF_CHECK_ID
                                      , A.PERF_CHECK_STEP_ID
                                      , B.EXCEPTION_PRC_METH_CD
                                      , B.PROGRAM_ID
                                   FROM DEPLOY_PERF_CHK_STEP_EXEC A      -- 배포성능점검단계별수행내역
                                      , DEPLOY_PERF_CHK_TARGET_PGM B     -- 배포성능점검대상프로그램내역
                                  WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
                                    AND A.PERF_CHECK_ID =  #{perf_check_id}
                                ) A
                              , DEPLOY_PERF_CHK_TRGT_EXCPT_PGM C -- 배포성능점검대상예외프로그램내역
                              , DEPLOY_PERF_CHK D                -- 배포성능점검기본
                          WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
                            AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID(+)
                            AND A.PROGRAM_ID = C.PROGRAM_ID(+)
                            AND A.PERF_CHECK_ID = D.PERF_CHECK_ID
                            AND A.PERF_CHECK_ID = #{perf_check_id}
                         ) A
                       , (SELECT *
                            FROM (SELECT PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID, PROGRAM_EXECUTE_TMS, PERF_CHECK_RESULT_DIV_CD
                                       , MAX(PROGRAM_EXECUTE_TMS) OVER(PARTITION BY PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
                                    FROM DEPLOY_PERF_CHK_RESULT C       -- 배포성능점검결과내역
                                   WHERE PERF_CHECK_ID = #{perf_check_id}
                                     AND PERF_CHECK_RESULT_DIV_CD IS NOT NULL
                                  )
                           WHERE PROGRAM_EXECUTE_TMS = MAX_PROGRAM_EXECUTE_TMS
                         ) B
                  WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
                    AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID(+)
                    AND A.PROGRAM_ID = B.PROGRAM_ID(+)
		          GROUP BY A.PERF_CHECK_STEP_ID
		        ) C
		      , CD CD1
		WHERE A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
		  AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID(+)
		  AND B.PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		  AND CD1.GRP_CD_ID (+)= '1055'
		  AND B.PERF_CHECK_ID(+) = #{perf_check_id}                             -- 성능점검ID
	</sql>

	<select id="getPerformanceCheckStageList" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerformanceCheckStageList */
		<include refid="getPerformanceCheckStageListRefId"/>
	</select>
	<select id="getPerformanceCheckStageList4Excel" parameterType="performanceCheckMng" resultType="java.util.LinkedHashMap">
		/* PerformanceCheckMngDao.getPerformanceCheckStageList4Excel */
		<include refid="getPerformanceCheckStageListRefId"/>
	</select>
	
	<!-- 프로그램목록이 0건이거나, 모두 점검제외인 경우 성능점검완료가 가능하고 단계에 상관없이 IQMS 로 완료처리 통보함 -->
	<select id="getProgramCnt" resultType="int">
		/* PerformanceCheckMngDao.getProgramCnt */
		SELECT COUNT(*) PROGRAM_CNT
		FROM DEPLOY_PERF_CHK_TARGET_PGM
		WHERE PERF_CHECK_ID = #{perf_check_id}
		AND EXCEPTION_PRC_METH_CD IS NULL
	</select>
	
	<!-- 프로그램 미수행 건수 조회 -->
	<select id="getTestMissCnt" parameterType="performanceCheckMng" resultType="int">
		/* PerformanceCheckMngDao.getTestMissCnt */
		SELECT  /* DISPLAY */
		        SUM(CASE WHEN B.EXCEPTION_PRC_METH_CD IS NULL AND A.PERF_CHECK_ID IS NULL THEN 1 ELSE 0 END) AS TEST_MISS_CNT
		  FROM (
		        SELECT *
		          FROM(
		                SELECT  A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
		                      , A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID
		                      , A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS                -- 프로그램수행회차
		                      , MAX(A.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY A.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
		                 FROM   DEPLOY_PERF_CHK_RESULT A    -- 배포성능점검결과내역
		                WHERE A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
		                  AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
		              ) A
		          WHERE A.PROGRAM_EXECUTE_TMS = A.MAX_PROGRAM_EXECUTE_TMS
		       ) A
		     , DEPLOY_PERF_CHK_TARGET_PGM B       -- 배포성능점검대상프로그램내역
		WHERE A.PERF_CHECK_ID(+) = B.PERF_CHECK_ID
		  AND A.PROGRAM_ID(+) = B.PROGRAM_ID
		  AND B.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
	</select>

	<!-- 성능 점검 결과 건수 조회 -->
	<select id="getPerfCheckResultCount" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerfCheckResultCount */
		SELECT  /* DISPLAY */
		          SUM(CASE WHEN B.EXCEPTION_PRC_METH_CD IS NULL AND A.PERF_CHECK_ID IS NULL THEN 1 ELSE 0 END) AS TEST_MISS_CNT -- 테스트누락건수
<!-- 				, SUM(CASE WHEN B.EXCEPTION_PRC_METH_CD IS NULL AND A.PERF_CHECK_RESULT_DIV_CD IS NULL THEN 1 ELSE 0 END) TEST_MISS_CNT -->
				, SUM(CASE WHEN B.EXCEPTION_PRC_METH_CD IS NULL AND A.PERF_CHECK_RESULT_DIV_CD = 'A' THEN 1 ELSE 0 END) PASS_CNT -- 적합건수
				, SUM(CASE WHEN B.EXCEPTION_PRC_METH_CD IS NULL AND A.PERF_CHECK_RESULT_DIV_CD = 'B' THEN 1 ELSE 0 END) FAIL_CNT -- 부적합건수
				, SUM(CASE WHEN B.EXCEPTION_PRC_METH_CD IS NULL AND A.PERF_CHECK_RESULT_DIV_CD = 'C' THEN 1 ELSE 0 END) ERR_CNT  -- 오류건수
		  FROM (
		        SELECT *
		          FROM(
		                SELECT  A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
		                      , A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID
		                      , A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS                -- 프로그램수행회차
                              , A.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD        -- 성능점검결과구분코드
		                      , MAX(A.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY A.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
		                 FROM   DEPLOY_PERF_CHK_RESULT A    -- 배포성능점검결과내역
		                WHERE A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
		                  AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
		              ) A
		          WHERE A.PROGRAM_EXECUTE_TMS = A.MAX_PROGRAM_EXECUTE_TMS
		       ) A
		     , DEPLOY_PERF_CHK_TARGET_PGM B       -- 배포성능점검대상프로그램내역
		WHERE A.PERF_CHECK_ID(+) = B.PERF_CHECK_ID
		  AND A.PROGRAM_ID(+) = B.PROGRAM_ID
		  AND B.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
	</select>

	<select id="getLastPerfCheckStepYn" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* 배포성능점검기본 UPDATE(조건 : 현재 성능 점검 단계가 최종 단계인 경우) */
		/* .1 최종단계인지 확인 */
		/* PerformanceCheckMngDao.getLastPerfCheckStepYn */
		SELECT (CASE WHEN A.LAST_PERF_CHECK_STEP_ID = B.LAST_PERF_CHECK_STEP_ID THEN 'Y' ELSE 'N' END) AS LAST_PERF_CHECK_STEP_YN  -- 최종성능점검단계여부
		     , DEPLOY_REQUEST_DT  -- 배포요청일시
		     , PERF_CHECK_REQUEST_CN_DIV_CD --성능점검요청채널구분코드
		FROM DEPLOY_PERF_CHK A,
		     (SELECT MAX(PERF_CHECK_STEP_ID) AS LAST_PERF_CHECK_STEP_ID
		        FROM DEPLOY_PERF_CHK_STEP_TEST_DB
		       WHERE WRKJOB_CD = #{top_wrkjob_cd}      /** QUERY_1 의 TOP_WRKJOB_CD 사용 **/
		       AND DEL_YN = 'N'
		     ) B
		WHERE A.PERF_CHECK_ID = #{perf_check_id}
	</select>
	<select id="getPerfCheckResultDivCd" parameterType="performanceCheckMng" resultType="string">
		/* PerformanceCheckMngDao.getPerfCheckResultDivCd */
		SELECT (CASE WHEN (TOTAL_CNT-EXCEPTION_CNT) > PASS_CNT  THEN 'B' ELSE 'A' END) AS PERF_CHECK_RESULT_DIV_CD
		FROM (
		    SELECT  COUNT(*) TOTAL_CNT
		          , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 1 ELSE 0 END) EXCEPTION_CNT
		          , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'A' THEN 1 ELSE 0 END) PASS_CNT
		          , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'B' THEN 1 ELSE 0 END) FAIL_CNT
		          , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'C' THEN 1 ELSE 0 END) ERR_CNT
		          , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD IS NULL THEN 1 ELSE 0 END) TEST_MISS_CNT
		       FROM (SELECT A.PERF_CHECK_STEP_ID
		                  , C.PROGRAM_EXECUTE_TMS
		                  , B.EXCEPTION_PRC_METH_CD
		                  , C.PERF_CHECK_RESULT_DIV_CD
		                  , B.PROGRAM_ID
		                  , A.PERF_TEST_COMPLETE_YN
		                  , A.PERF_CHECK_REQUEST_DT
		                  , A.PERF_CHECK_COMPLETE_DT
		                  , MAX(C.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY C.PERF_CHECK_STEP_ID, C.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
		               FROM DEPLOY_PERF_CHK_STEP_EXEC A
		                  , DEPLOY_PERF_CHK_TARGET_PGM B   -- 배포성능점검대상프로그램내역
		                  , DEPLOY_PERF_CHK_RESULT C       -- 배포성능점검결과내역
		              WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		                AND B.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
		                AND B.PROGRAM_ID = C.PROGRAM_ID(+)
		                AND A.PERF_CHECK_ID = #{perf_check_id}
		                AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id})
		      WHERE (PROGRAM_EXECUTE_TMS = MAX_PROGRAM_EXECUTE_TMS OR PROGRAM_EXECUTE_TMS IS NULL)
		)
	</select>

	<update id="updateDeployPerfChkStepExec" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateDeployPerfChkStepExec */
		UPDATE  DEPLOY_PERF_CHK_STEP_EXEC A
		   SET  A.PERF_CHECK_REQUEST_DT = NVL(A.PERF_CHECK_REQUEST_DT, TO_DATE(#{perf_check_request_dt},'YYYY-MM-DD HH24:MI:SS'))              -- 성능점검요청일시
		      , A.PERF_CHECK_COMPLETER_ID = #{perf_check_completer_id}          -- 성능점검완료자ID
		      , A.PERF_CHECK_COMPLETE_DT =  TO_DATE(#{deploy_check_status_update_dt},'YYYY-MM-DD HH24:MI:SS')     -- 성능점검완료일시
		      , A.PERF_CHECK_RESULT_DIV_CD = #{perf_check_result_div_cd}        -- 성능점검결과구분코드
		      , A.PERF_TEST_COMPLETE_YN = #{perf_test_complete_yn}              -- 성능테스트완료여부
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
		   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
	</update>
	
	<update id="updateDeployPerfChkStepExecAll" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateDeployPerfChkStepExecAll */
		UPDATE  DEPLOY_PERF_CHK_STEP_EXEC A
		   SET  A.PERF_CHECK_REQUEST_DT = NVL(A.PERF_CHECK_REQUEST_DT, TO_DATE(#{perf_check_request_dt},'YYYY-MM-DD HH24:MI:SS'))              -- 성능점검요청일시
		      , A.PERF_CHECK_COMPLETER_ID = #{perf_check_completer_id}          -- 성능점검완료자ID
		      , A.PERF_CHECK_COMPLETE_DT =  TO_DATE(#{deploy_check_status_update_dt},'YYYY-MM-DD HH24:MI:SS')     -- 성능점검완료일시
		      , A.PERF_CHECK_RESULT_DIV_CD = #{perf_check_result_div_cd}        -- 성능점검결과구분코드
		      , A.PERF_TEST_COMPLETE_YN = #{perf_test_complete_yn}              -- 성능테스트완료여부
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
	</update>

	<update id="updateDeployPerfChkStepExec2" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateDeployPerfChkStepExec2 */
		UPDATE  DEPLOY_PERF_CHK_STEP_EXEC A
		   SET  A.PERF_CHECK_REQUEST_DT = NVL(A.PERF_CHECK_REQUEST_DT, SYSDATE)  -- 성능점검요청일시
		      , A.PERF_CHECK_COMPLETER_ID = #{user_id}                             -- 성능점검완료자ID
		      , A.PERF_CHECK_COMPLETE_DT =  SYSDATE                              -- 성능점검완료일시
		      , A.PERF_CHECK_RESULT_DIV_CD = 'A'                                 -- 성능점검결과구분코드 : 무조건 적합(A)
		      , A.PERF_TEST_COMPLETE_YN = 'Y'                                    -- 성능테스트완료여부
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                                 -- 성능점검ID
		   AND  A.PERF_TEST_COMPLETE_YN = 'N'                                    -- 성능테스트완료여부

	</update>

	<delete id="deleteDeployPerfChkTrgtExcptPgm_bak" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.insertDeployPerfChkTrgtExcptPgm */
		DELETE FROM DEPLOY_PERF_CHK_TRGT_EXCPT_PGM
		WHERE EXISTS(
			SELECT A.PERF_CHECK_ID                                  -- 성능점검ID
				 , B.PERF_CHECK_STEP_ID                             -- 성능점검단계ID
				 , A.PROGRAM_ID                                     -- 프로그램ID
				 , A.EXCEPTION_PRC_METH_CD                          -- 예외처리방법코드
			  FROM DEPLOY_PERF_CHK_TARGET_PGM A
				 , DEPLOY_PERF_CHK_STEP_EXEC B
			 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
			   AND A.PERF_CHECK_ID = #{perf_check_id}
			   AND A.EXCEPTION_PRC_METH_CD IS NOT NULL
			   AND B.PERF_TEST_COMPLETE_YN = 'N'
		)
	</delete>
	
	<delete id="deleteDeployPerfChkTrgtExcptPgm" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.deleteDeployPerfChkTrgtExcptPgm */
		DELETE FROM DEPLOY_PERF_CHK_TRGT_EXCPT_PGM WHERE PERF_CHECK_ID = #{perf_check_id}
	</delete>

	<!-- 성능점검 단계별 예외(영구/한시) 대상 저장(Snapshot) -->
	<insert id="insertDeployPerfChkTrgtExcptPgm" parameterType="performanceCheckMng" useGeneratedKeys="false">
		/* PerformanceCheckMngDao.insertDeployPerfChkTrgtExcptPgm */
		INSERT INTO DEPLOY_PERF_CHK_TRGT_EXCPT_PGM
			(PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID, EXCEPTION_PRC_METH_CD )
		SELECT PERF_CHECK_ID                                  -- 성능점검ID
		     , #{perf_check_step_id}                          -- 성능점검단계ID
		     , PROGRAM_ID                                     -- 프로그램ID
		     , EXCEPTION_PRC_METH_CD                          -- 예외처리방법코드
		  FROM DEPLOY_PERF_CHK_TARGET_PGM                     -- 배포성능점검대상프로그램내역
		 WHERE PERF_CHECK_ID = #{perf_check_id}               -- 성능점검ID
		   AND EXCEPTION_PRC_METH_CD IS NOT NULL
	</insert>


	<insert id="insertDeployPerfChkTrgtExcptPgm2" parameterType="performanceCheckMng" useGeneratedKeys="false">
		/* PerformanceCheckMngDao.insertDeployPerfChkTrgtExcptPgm2 */
		INSERT INTO DEPLOY_PERF_CHK_TRGT_EXCPT_PGM
		    (PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID, EXCEPTION_PRC_METH_CD )
		SELECT A.PERF_CHECK_ID                                  -- 성능점검ID
		     , B.PERF_CHECK_STEP_ID                             -- 성능점검단계ID
		     , A.PROGRAM_ID                                     -- 프로그램ID
		     , A.EXCEPTION_PRC_METH_CD                          -- 예외처리방법코드
		  FROM DEPLOY_PERF_CHK_TARGET_PGM A
		     , DEPLOY_PERF_CHK_STEP_EXEC B
		 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		   AND A.PERF_CHECK_ID = #{perf_check_id}
		   AND A.EXCEPTION_PRC_METH_CD IS NOT NULL
		   AND B.PERF_TEST_COMPLETE_YN = 'N'
	</insert>

	<!-- CM 통보 후 관련 칼럼 업데이트 -->
	<update id="updateDeployPerfChkResultNotify" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateDeployPerfChkResultNotify */
		UPDATE  DEPLOY_PERF_CHK A
		   SET
		        A.CHECK_RESULT_ANC_YN =  'Y'
		      , A.LAST_CHECK_RESULT_ANC_DT = SYSDATE
		      , A.CHECK_RESULT_ANC_CNT = (SELECT NVL(MAX(CHECK_RESULT_ANC_CNT),0) +1 FROM DEPLOY_PERF_CHK WHERE PERF_CHECK_ID = #{perf_check_id})
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}
	</update>
	<!-- 점검완료된 데이터를 점검완료 이전으로 초기화 -->
	<update id="updatePerfTestCompleteYnToN" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updatePerfTestCompleteYnToN */
		UPDATE  DEPLOY_PERF_CHK_STEP_EXEC A
		   SET  A.PERF_CHECK_REQUEST_DT = ''                                  -- 성능점검요청일시
		      , A.PERF_CHECK_COMPLETER_ID = ''                                -- 성능점검완료자ID
		      , A.PERF_CHECK_COMPLETE_DT =  ''                                -- 성능점검완료일시
		      , A.PERF_TEST_COMPLETE_YN = 'N'                                  -- 성능테스트완료여부
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
		   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
	</update>
	<!--  마지막 점검 단계에서만 업데이트 -->
	<update id="updateDeployPerfChk" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateDeployPerfChk */
	    UPDATE  DEPLOY_PERF_CHK A     -- (TABLE)
	       SET  A.DEPLOY_CHECK_STATUS_CD = #{deploy_check_status_cd}              -- 배포성능점검상태코드 : 점검완료
	          , A.PERF_CHECK_COMPLETE_METH_CD = #{perf_check_complete_meth_cd}    -- 배포성능점검완료방법코드 : 정상완료(1),강제완료(2),자동완료(3)
	          , A.PERF_CHECK_COMPLETE_DT = TO_DATE(#{perf_check_complete_dt},'YYYY-MM-DD HH24:MI:SS')       -- 성능점검완료일시
	          , A.PERF_CHECK_COMPLETER_ID = #{perf_check_completer_id}            -- 성능점검완료자ID
	          , A.PERF_CHECK_RESULT_DIV_CD = #{perf_check_result_div_cd}          -- 성능점검결과구분코드
	     WHERE  A.PERF_CHECK_ID = #{perf_check_id}
	</update>

	<insert id="insertDeployPerfChkStatusHistory" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.insertDeployPerfChkStatusHistory */
		INSERT INTO   DEPLOY_PERF_CHK_STATUS_HISTORY     -- 배포성능점검상태변경이력(TABLE)
				( PERF_CHECK_ID                                               -- 성능점검ID
				, DEPLOY_CHECK_STATUS_UPDATE_DT                               -- 배포성능점검상태변경일시
				, DEPLOY_CHECK_STATUS_UPDATER_ID                              -- 배포성능상태변경자ID
				, DEPLOY_CHECK_STATUS_CD                                      -- 배포성능점검상태코드
				, DEPLOY_CHECK_STATUS_CHG_WHY                                 -- 배포성능점검상태변경사유
		 )
		 VALUES ( #{perf_check_id}                                              -- 성능점검id
				, TO_DATE(#{deploy_check_status_update_dt},'YYYY-MM-DD HH24:MI:SS')                              -- 배포성능점검상태변경일시
				, #{deploy_check_status_updater_id}                             -- 배포성능상태변경자id
				, #{deploy_check_status_cd}                                     -- 배포성능점검상태코드
				, #{deploy_check_status_chg_why}                                -- 배포성능점검상태변경사유
				)
	</insert>

<!--
	/*****************************
	화면명 : 성능점검결과
	1) QUERY_1 : 성능점검결과 기본정보
	2) QUERY_2 : 검색영역 점검결과 조회
	3) QUERY_3 : 성능점검결과 목록 조회
	4) QUERY_4 : 성능점검 완료
	5) QUERY_5 : 성능점검기본정보 탭
	6) QUERY_6 : 성능테스트 탭
	7) QUERY_7 : 성능점검결과 탭
	******************************/
 -->

		<!-- QUERY_1 : 성능점검결과 기본정보 -->
	<select id="getPerfCheckResultBasicInfoEspc" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerfCheckResultBasicInfoEspc */
		SELECT  /* DISPLAY */
				D.WRKJOB_CD_NM  AS WRKJOB_CD_NM								  -- 업무
			  , D.PERF_CHECK_ID AS PERF_CHECK_ID							  -- 성능점검ID
			  , D.DEPLOY_ID AS DEPLOY_ID									  -- 배포ID
			  , D.DEPLOY_NM AS DEPLOY_NM									  -- 배포명
			  , D.DEPLOY_REQUESTER_NM  AS DEPLOY_REQUESTER_NM				  -- 배포요청자
			  , D.DEPLOY_REQUEST_DT AS DEPLOY_REQUEST_DT					  -- 배포요청일시
			  , A.PERF_CHECK_STEP_NM	|| '(' ||
				(SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S2
				 WHERE S2.PERF_CHECK_ID = D.PERF_CHECK_ID
				 AND S2.PERF_CHECK_STEP_ID <![CDATA[<=]]> A.PERF_CHECK_STEP_ID) || '/' ||
				(SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S1
				 WHERE S1.PERF_CHECK_ID = D.PERF_CHECK_ID) || ')' AS PERF_CHECK_STEP_NM  -- 점검단계
			  , NVL(CD1.CD_NM, (CASE PROGRAM_EXEC_CNT WHEN 0 THEN '미수행' ELSE '수행중' END)) AS PERF_CHECK_RESULT_DIV_NM -- 점검결과
			  , A.DB_NAME AS PERF_TEST_DB_NAME								-- 점검DB
			  , NVL(C.PERF_TEST_COMPLETE_YN, 'N') AS PERF_TEST_COMPLETE_YN	-- 점검완료여부
			  , TO_CHAR(C.PERF_CHECK_REQUEST_DT, 'YYYY-MM-DD HH24:MI:SS') AS PERF_CHECK_REQUEST_DT			  -- 점검요청일시
			  , TO_CHAR(C.PERF_CHECK_COMPLETE_DT, 'YYYY-MM-DD HH24:MI:SS') AS PERF_CHECK_COMPLETE_DT			-- 점검완료일시
			  , NVL(C.TOTAL_CNT, 0) AS TOTAL_CNT							  -- 전체건수
			  , NVL(C.EXCEPTION_CNT, 0) AS EXCEPTION_CNT					  -- 예외건수
			  , NVL(C.PASS_CNT, 0) AS PASS_CNT								  -- 적합건수
			  , NVL(C.FAIL_CNT, 0) AS FAIL_CNT								  -- 부적합건수
			  , NVL(C.ERR_CNT, 0) AS ERR_CNT								  -- 오류건수
			  , NVL(C.TEST_MISS_CNT, 0) AS TEST_MISS_CNT					  -- 테스트누락건수
			  , CD2.CD_NM AS PROGRAM_DIV_NM									  -- 프로그램유형
			  , A.PERF_CHECK_AUTO_EXEC_YN									  -- 자동실행여부
			  --, D.DEPLOY_CHECK_STATUS_NM									  -- 점검상태
			
			  , (CASE WHEN C.PERF_TEST_COMPLETE_YN = 'Y' THEN '검증완료'
					 WHEN D.LAST_PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID AND C.PERF_TEST_COMPLETE_YN = 'N' THEN '검증중'
					 WHEN D.LAST_PERF_CHECK_STEP_ID <![CDATA[<]]> A.PERF_CHECK_STEP_ID AND C.PERF_TEST_COMPLETE_YN = 'N' THEN '미수행'
			   END) AS DEPLOY_CHECK_STATUS_NM  -- 점검상태
			
				/* HIDDEN */
			  , A.DBID
			  , D.DEPLOY_CHECK_STATUS_CD
		 FROM   (SELECT A.PERF_CHECK_STEP_ID
					  , A.PERF_CHECK_STEP_NM
					  , A.PERF_CHECK_AUTO_EXEC_YN
					  , A.STEP_ORDERING
					  , B.DBID
					  , B.PROGRAM_DIV_CD
					  , DB.DB_NAME
				   FROM DEPLOY_PERF_CHK_STEP A								-- 배포성능점점단계기본
					  , DEPLOY_PERF_CHK_STEP_TEST_DB B						-- 배포성능점검단계별테스트DB기본
					  , DATABASE DB											-- 데이터베이스기본
				  WHERE A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
					AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
					AND B.DBID = DB.DBID
					AND B.WRKJOB_CD = #{top_wrkjob_cd}						-- 성능점검단계의 최상위 업무코드
				) A
			  , (SELECT A.PERF_CHECK_STEP_ID
					  , MAX(STEP_PERF_CHECK_RESULT_DIV_CD) AS STEP_PERF_CHECK_RESULT_DIV_CD
					  , MAX(PERF_TEST_COMPLETE_YN) AS PERF_TEST_COMPLETE_YN
					  , MAX(PERF_CHECK_REQUEST_DT) AS PERF_CHECK_REQUEST_DT
					  , MAX(PERF_CHECK_COMPLETE_DT) AS PERF_CHECK_COMPLETE_DT
					  , COUNT(*) TOTAL_CNT
					  , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 1 ELSE 0 END) EXCEPTION_CNT
					  , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'A' THEN 1 ELSE 0 END) PASS_CNT
					  , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'B' THEN 1 ELSE 0 END) FAIL_CNT
					  , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'C' THEN 1 ELSE 0 END) ERR_CNT
					  , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD IS NULL THEN 1 ELSE 0 END) TEST_MISS_CNT
				   FROM (SELECT A.PERF_CHECK_ID
							  , A.PERF_CHECK_STEP_ID
							  , A.STEP_PERF_CHECK_RESULT_DIV_CD
							  , A.PROGRAM_ID
							  , A.PERF_TEST_COMPLETE_YN
							  , A.PERF_CHECK_REQUEST_DT
							  , A.PERF_CHECK_COMPLETE_DT
							  , (CASE
									WHEN A.PERF_CHECK_STEP_ID <![CDATA[<]]> D.LAST_PERF_CHECK_STEP_ID THEN C.EXCEPTION_PRC_METH_CD
									ELSE A.EXCEPTION_PRC_METH_CD
								END) AS EXCEPTION_PRC_METH_CD
						   FROM (SELECT A.PERF_CHECK_ID
									  , A.PERF_CHECK_STEP_ID
									  , B.EXCEPTION_PRC_METH_CD
									  , A.PERF_CHECK_RESULT_DIV_CD AS STEP_PERF_CHECK_RESULT_DIV_CD
									  , B.PROGRAM_ID
									  , A.PERF_TEST_COMPLETE_YN
									  , A.PERF_CHECK_REQUEST_DT
									  , A.PERF_CHECK_COMPLETE_DT
								   FROM DEPLOY_PERF_CHK_STEP_EXEC A			 -- 배포성능점검단계별수행내역
									  , DEPLOY_PERF_CHK_TARGET_PGM B		 -- 배포성능점검대상프로그램내역
								  WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
									AND A.PERF_CHECK_ID =  #{perf_check_id}
									AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
								) A
							  , DEPLOY_PERF_CHK_TRGT_EXCPT_PGM C -- 배포성능점검대상예외프로그램내역
							  , DEPLOY_PERF_CHK D				-- 배포성능점검기본
						  WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
							AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID(+)
							AND A.PROGRAM_ID = C.PROGRAM_ID(+)
							AND A.PERF_CHECK_ID = D.PERF_CHECK_ID
							AND A.PERF_CHECK_ID = #{perf_check_id}
						 ) A
					   , (SELECT A.PERF_CHECK_ID, A.PERF_CHECK_STEP_ID, A.PROGRAM_ID, A.PROGRAM_EXECUTE_TMS, A.PERF_CHECK_RESULT_DIV_CD
							FROM DEPLOY_PERF_CHK_RESULT A
							   , DEPLOY_PERF_CHK_STEP_EXEC B
							WHERE A.PERF_CHECK_ID = #{perf_check_id}
							  AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
							  AND A.PERF_CHECK_RESULT_DIV_CD IS NOT NULL
							  AND A.PERF_CHECK_ID = B.PERF_CHECK_ID
							  AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
							  AND A.PERF_CHECK_EVALUATION_METH_CD = B.PERF_CHECK_EVALUATION_METH_CD
						  ) B
				  WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
					AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID(+)
					AND A.PROGRAM_ID = B.PROGRAM_ID(+)
				  GROUP BY A.PERF_CHECK_STEP_ID
				) C
			  , (SELECT WC1.WRKJOB_CD_NM  AS WRKJOB_CD_NM							  -- 업무
					  , A.PERF_CHECK_ID AS PERF_CHECK_ID							  -- 성능점검ID
					  , A.DEPLOY_ID AS DEPLOY_ID									  -- 배포ID
					  , A.DEPLOY_NM AS DEPLOY_NM									  -- 배포명
					  , U1.USER_NM  AS DEPLOY_REQUESTER_NM							  -- 배포요청자
					  , TO_CHAR(A.DEPLOY_REQUEST_DT, 'YYYY-MM-DD HH24:MI:SS')
											AS DEPLOY_REQUEST_DT					  -- 배포요청일시
					  , DEPLOY_CHECK_STATUS_CD AS DEPLOY_CHECK_STATUS_CD			  -- 배포성능점검상태코드
					  , CD1.CD_NM AS DEPLOY_CHECK_STATUS_NM							  -- 배포성능점검상태명
					  , A.LAST_PERF_CHECK_STEP_ID									  -- 최종성능점검단계ID
					  , (SELECT COUNT(*) FROM DEPLOY_PERF_CHK_RESULT
						  WHERE PERF_CHECK_ID = #{perf_check_id}
							AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
							AND ROWNUM = 1) AS PROGRAM_EXEC_CNT		   -- 단계별프로그램수행횟수
				FROM	DEPLOY_PERF_CHK A											  -- 배포성능점검기본
					  , WRKJOB_CD WC1												  -- 업무코드
					  , USERS U1													  -- 사용자
					  , CD CD1
				WHERE A.WRKJOB_CD = WC1.WRKJOB_CD
				  AND A.DEPLOY_REQUESTER_ID = U1.USER_ID
				  AND A.DEPLOY_CHECK_STATUS_CD = CD1.CD
				  AND CD1.GRP_CD_ID = '1056'
				  AND A.PERF_CHECK_ID = #{perf_check_id}
				) D
			  , CD CD1
			  , CD CD2
		WHERE A.PERF_CHECK_STEP_ID  = C.PERF_CHECK_STEP_ID(+)
		  AND C.STEP_PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		  AND CD1.GRP_CD_ID (+)= '1055'
		  AND A.PROGRAM_DIV_CD = CD2.CD
		  AND CD2.GRP_CD_ID = '1052'
	</select>
	
	<select id="getPerfCheckResultBasicInfo" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerfCheckResultBasicInfo */
		SELECT  /* DISPLAY */
		        D.WRKJOB_CD_NM  AS WRKJOB_CD_NM                               -- 업무
		      , D.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
		      , D.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID
		      , D.DEPLOY_NM AS DEPLOY_NM                                      -- 배포명
		      , D.DEPLOY_REQUESTER_NM  AS DEPLOY_REQUESTER_NM                 -- 배포요청자
		      , D.DEPLOY_REQUEST_DT AS DEPLOY_REQUEST_DT                      -- 배포요청일시
		      , A.PERF_CHECK_STEP_NM    || '(' ||
		        (SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S2
		         WHERE S2.PERF_CHECK_ID = D.PERF_CHECK_ID
		         AND S2.PERF_CHECK_STEP_ID <![CDATA[<=]]> A.PERF_CHECK_STEP_ID) || '/' ||
		        (SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_EXEC S1
		         WHERE S1.PERF_CHECK_ID = D.PERF_CHECK_ID) || ')' AS PERF_CHECK_STEP_NM  -- 점검단계
		      , NVL(CD1.CD_NM, (CASE PROGRAM_EXEC_CNT WHEN 0 THEN '미수행' ELSE '수행중' END)) AS PERF_CHECK_RESULT_DIV_NM -- 점검결과
		      , A.DB_NAME AS PERF_TEST_DB_NAME                                -- 점검DB
		      , NVL(C.PERF_TEST_COMPLETE_YN, 'N') AS PERF_TEST_COMPLETE_YN    -- 점검완료여부
		      , TO_CHAR(C.PERF_CHECK_REQUEST_DT, 'YYYY-MM-DD HH24:MI:SS') AS PERF_CHECK_REQUEST_DT              -- 점검요청일시
		      , TO_CHAR(C.PERF_CHECK_COMPLETE_DT, 'YYYY-MM-DD HH24:MI:SS') AS PERF_CHECK_COMPLETE_DT            -- 점검완료일시
		      , NVL(C.TOTAL_CNT, 0) AS TOTAL_CNT                              -- 전체건수
		      , NVL(C.EXCEPTION_CNT, 0) AS EXCEPTION_CNT                      -- 예외건수
		      , NVL(C.PASS_CNT, 0) AS PASS_CNT                                -- 적합건수
		      , NVL(C.FAIL_CNT, 0) AS FAIL_CNT                                -- 부적합건수
		      , NVL(C.ERR_CNT, 0) AS ERR_CNT                                  -- 오류건수
		      , NVL(C.TEST_MISS_CNT, 0) AS TEST_MISS_CNT                      -- 테스트누락건수
		      , CD2.CD_NM AS PROGRAM_DIV_NM                                   -- 프로그램유형
		      , A.PERF_CHECK_AUTO_EXEC_YN                                     -- 자동실행여부
		      --, D.DEPLOY_CHECK_STATUS_NM                                      -- 점검상태

              , (CASE WHEN C.PERF_TEST_COMPLETE_YN = 'Y' THEN '점검완료'
                     WHEN D.LAST_PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID AND C.PERF_TEST_COMPLETE_YN = 'N' THEN '점검중'
                     WHEN D.LAST_PERF_CHECK_STEP_ID <![CDATA[<]]> A.PERF_CHECK_STEP_ID AND C.PERF_TEST_COMPLETE_YN = 'N' THEN '미수행'
               END) AS DEPLOY_CHECK_STATUS_NM  -- 점검상태

		        /* HIDDEN */
		      , A.DBID
		      , D.DEPLOY_CHECK_STATUS_CD
		 FROM   (SELECT A.PERF_CHECK_STEP_ID
		              , A.PERF_CHECK_STEP_NM
		              , A.PERF_CHECK_AUTO_EXEC_YN
		              , A.STEP_ORDERING
		              , B.DBID
		              , B.PROGRAM_DIV_CD
		              , DB.DB_NAME
		           FROM DEPLOY_PERF_CHK_STEP A                                -- 배포성능점점단계기본
		              , DEPLOY_PERF_CHK_STEP_TEST_DB B                        -- 배포성능점검단계별테스트DB기본
		              , DATABASE DB                                           -- 데이터베이스기본
		          WHERE A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
		            AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
		            AND B.DBID = DB.DBID
		            AND B.WRKJOB_CD = #{top_wrkjob_cd}                              /** 성능점검단계의 최상위 업무코드 **/
		        ) A
		      , (SELECT A.PERF_CHECK_STEP_ID
		              , MAX(STEP_PERF_CHECK_RESULT_DIV_CD) AS STEP_PERF_CHECK_RESULT_DIV_CD
		              , MAX(PERF_TEST_COMPLETE_YN) AS PERF_TEST_COMPLETE_YN
		              , MAX(PERF_CHECK_REQUEST_DT) AS PERF_CHECK_REQUEST_DT
		              , MAX(PERF_CHECK_COMPLETE_DT) AS PERF_CHECK_COMPLETE_DT
		              , COUNT(*) TOTAL_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 1 ELSE 0 END) EXCEPTION_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'A' THEN 1 ELSE 0 END) PASS_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'B' THEN 1 ELSE 0 END) FAIL_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD = 'C' THEN 1 ELSE 0 END) ERR_CNT
		              , SUM(CASE WHEN EXCEPTION_PRC_METH_CD IS NULL AND PERF_CHECK_RESULT_DIV_CD IS NULL THEN 1 ELSE 0 END) TEST_MISS_CNT
		           FROM (SELECT A.PERF_CHECK_ID
                              , A.PERF_CHECK_STEP_ID
		                      , A.STEP_PERF_CHECK_RESULT_DIV_CD
		                      , A.PROGRAM_ID
		                      , A.PERF_TEST_COMPLETE_YN
		                      , A.PERF_CHECK_REQUEST_DT
		                      , A.PERF_CHECK_COMPLETE_DT
                              , (CASE
                                    WHEN A.PERF_CHECK_STEP_ID <![CDATA[<]]> D.LAST_PERF_CHECK_STEP_ID THEN C.EXCEPTION_PRC_METH_CD
                                    ELSE A.EXCEPTION_PRC_METH_CD
                                END) AS EXCEPTION_PRC_METH_CD
                           FROM (SELECT A.PERF_CHECK_ID
                                      , A.PERF_CHECK_STEP_ID
                                      , B.EXCEPTION_PRC_METH_CD
                                      , A.PERF_CHECK_RESULT_DIV_CD AS STEP_PERF_CHECK_RESULT_DIV_CD
                                      , B.PROGRAM_ID
                                      , A.PERF_TEST_COMPLETE_YN
                                      , A.PERF_CHECK_REQUEST_DT
                                      , A.PERF_CHECK_COMPLETE_DT
                                   FROM DEPLOY_PERF_CHK_STEP_EXEC A      -- 배포성능점검단계별수행내역
                                      , DEPLOY_PERF_CHK_TARGET_PGM B     -- 배포성능점검대상프로그램내역
                                  WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
                                    AND A.PERF_CHECK_ID =  #{perf_check_id}
                                    AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
                                ) A
                              , DEPLOY_PERF_CHK_TRGT_EXCPT_PGM C -- 배포성능점검대상예외프로그램내역
                              , DEPLOY_PERF_CHK D                -- 배포성능점검기본
                          WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
                            AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID(+)
                            AND A.PROGRAM_ID = C.PROGRAM_ID(+)
                            AND A.PERF_CHECK_ID = D.PERF_CHECK_ID
                            AND A.PERF_CHECK_ID = #{perf_check_id}
                         ) A
                       , (SELECT *
                            FROM (SELECT PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID, PROGRAM_EXECUTE_TMS, PERF_CHECK_RESULT_DIV_CD
                                       , MAX(PROGRAM_EXECUTE_TMS) OVER(PARTITION BY PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
                                    FROM DEPLOY_PERF_CHK_RESULT C       -- 배포성능점검결과내역
                                   WHERE PERF_CHECK_ID = #{perf_check_id}
                                     AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
                                     AND PERF_CHECK_RESULT_DIV_CD IS NOT NULL
                                  )
                           WHERE PROGRAM_EXECUTE_TMS = MAX_PROGRAM_EXECUTE_TMS
                         ) B
		          WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
                    AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID(+)
                    AND A.PROGRAM_ID = B.PROGRAM_ID(+)
		          GROUP BY A.PERF_CHECK_STEP_ID
		        ) C
		      , (SELECT WC1.WRKJOB_CD_NM  AS WRKJOB_CD_NM                             -- 업무
		              , A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
		              , A.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID
		              , A.DEPLOY_NM AS DEPLOY_NM                                      -- 배포명
		              , U1.USER_NM  AS DEPLOY_REQUESTER_NM                            -- 배포요청자
		              , TO_CHAR(A.DEPLOY_REQUEST_DT, 'YYYY-MM-DD HH24:MI:SS')
		                                    AS DEPLOY_REQUEST_DT                      -- 배포요청일시
		              , DEPLOY_CHECK_STATUS_CD AS DEPLOY_CHECK_STATUS_CD              -- 배포성능점검상태코드
		              , CD1.CD_NM AS DEPLOY_CHECK_STATUS_NM                           -- 배포성능점검상태명
                      , A.LAST_PERF_CHECK_STEP_ID                                     -- 최종성능점검단계ID
                      , (SELECT COUNT(*) FROM DEPLOY_PERF_CHK_RESULT
                          WHERE PERF_CHECK_ID = #{perf_check_id}
                            AND PERF_CHECK_STEP_ID = #{perf_check_step_id}) AS PROGRAM_EXEC_CNT           -- 단계별프로그램수행횟수
		        FROM    DEPLOY_PERF_CHK A                                             -- 배포성능점검기본
		              , WRKJOB_CD WC1                                                 -- 업무코드
		              , USERS U1                                                      -- 사용자
		              , CD CD1
		        WHERE A.WRKJOB_CD = WC1.WRKJOB_CD
		          AND A.DEPLOY_REQUESTER_ID = U1.USER_ID
		          AND A.DEPLOY_CHECK_STATUS_CD = CD1.CD
		          AND CD1.GRP_CD_ID = '1056'
		          AND A.PERF_CHECK_ID = #{perf_check_id}
		        ) D
		      , CD CD1
		      , CD CD2
		WHERE A.PERF_CHECK_STEP_ID  = C.PERF_CHECK_STEP_ID(+)
		  AND C.STEP_PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		  AND CD1.GRP_CD_ID (+)= '1055'
		  AND A.PROGRAM_DIV_CD = CD2.CD
		  AND CD2.GRP_CD_ID = '1052'
	</select>

		<!-- QUERY_2 : 검색영역 점검결과 조회 -->
		<!-- 공통코드 테이블에서 GRP_CD_ID = '1055' 조회 -->
		<!--
		A	적합	1
		B	부적합	2
		C	오류	3
		 -->

	<!-- QUERY_3 : 성능검증결과 목록 조회 -->
	<sql id="getPerfCheckResultListRefIdEspc">
		/* PerformanceCheckMngDao.getPerfCheckResultListRefIdEspc */
		SELECT  /* DISPLAY */
				B.PERF_CHECK_ID
			  , B.PROGRAM_ID AS PROGRAM_ID									-- 프로그램ID
			  , C.PROGRAM_NM AS PROGRAM_NM									-- 프로그램명
			  , C.DBIO AS DBIO												-- SQL식별자(DBIO)
			  , A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME				  -- 파싱스키마
			  , CD1.CD_NM AS PROGRAM_DVLP_DIV_NM							  -- 개발구분
			  , (CASE
					 WHEN B.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN '검증제외'
					 ELSE NVL(A.PERF_CHECK_RESULT_DIV_NM, '미수행')
				 END) AS PERF_CHECK_RESULT_DIV_NM							 -- 점검결과
			  , A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS				  -- 수행회차
			  , A.PROGRAM_EXEC_DIV_NM AS PROGRAM_EXEC_DIV_NM				  -- 수행유형
			  , A.PROGRAM_EXECUTER_NM AS PROGRAM_EXECUTER_NM				  -- 수행자
			  , TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD HH24:MI:SS') AS PROGRAM_EXEC_DT		  -- 수행일시
			  , C.FILE_NM AS FILE_NM										  -- 파일명
			  , C.DIR_NM AS DIR_NM											-- 디렉토리
			  , (SELECT D.PERF_CHECK_STEP_NM
				   FROM DEPLOY_PERF_CHK_STEP D
				  WHERE D.PERF_CHECK_STEP_ID = #{perf_check_step_id}) AS PERF_CHECK_STEP_NM	 -- 성능검증단계명
				
				/* HIDDEN */
			  , NVL2(D.PROGRAM_ID, 'Y', 'N') AS EXCEPTION_PROCESSING_YN	   -- 예외처리중여부
			  , (CASE
					 WHEN B.EXCEPTION_PRC_METH_CD IS NULL
						  AND (A.PERF_CHECK_RESULT_DIV_CD IN ('B', 'C') OR A.PERF_CHECK_ID IS NULL)
						  AND B.DEPLOY_CHECK_STATUS_CD = '01'
						  AND B.PERF_TEST_COMPLETE_YN !=  'Y'
						  AND D.PROGRAM_ID IS NULL THEN 'Y'
					 ELSE 'N'
				 END) AS EXCEPTION_BUTTON_ENABLE_YN						   -- 예외처리버튼활성화
				 ,C.PROGRAM_TYPE_CD
				 ,CD2.CD_NM AS PROGRAM_TYPE_nm
				 ,C.SQL_COMMAND_TYPE_CD
				 ,CD3.CD_NM AS SQL_COMMAND_TYPE_NM
				 ,C.DYNAMIC_SQL_YN
				 ,#{perf_check_step_id} as PERF_CHECK_STEP_ID
				 , B.DEPLOY_REQUEST_DT AS DEPLOY_REQUEST_DT
		  FROM (
				/* 성능점검결과 SET */ 
				SELECT  A.PERF_CHECK_ID AS PERF_CHECK_ID
					  , A.PROGRAM_ID AS PROGRAM_ID
					  , A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS
					  , A.PROGRAM_EXEC_DT AS PROGRAM_EXEC_DT
					  , U1.USER_NM AS PROGRAM_EXECUTER_NM
					  , A.PROGRAM_EXECUTER_ID AS PROGRAM_EXECUTER_ID
					  , CD2.CD_NM AS PROGRAM_EXEC_DIV_NM
					  , A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME
					  , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM
					  , A.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD
					  , B.DEPLOY_CHECK_STATUS_CD  AS DEPLOY_CHECK_STATUS_CD
					  , C.PERF_TEST_COMPLETE_YN
				 FROM   DEPLOY_PERF_CHK_RESULT A	
					  , DEPLOY_PERF_CHK B
					  , DEPLOY_PERF_CHK_STEP_EXEC C
					  , USERS U1
					  , CD CD1
					  , CD CD2
				WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
				  AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
				  AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
				  AND A.PERF_CHECK_EVALUATION_METH_CD = C.PERF_CHECK_EVALUATION_METH_CD
				  AND A.PROGRAM_EXECUTER_ID = U1.USER_ID
				  AND A.PERF_CHECK_RESULT_DIV_CD = CD1.CD
				  AND CD1.GRP_CD_ID = '1055'
				  AND A.PROGRAM_EXEC_DIV_CD = CD2.CD
				  AND CD2.GRP_CD_ID = '1054'
				  AND A.PERF_CHECK_ID =  #{perf_check_id}
				  AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
			   ) A
			 , (SELECT  A.PERF_CHECK_ID
					  , A.PERF_CHECK_STEP_ID
					  , A.PROGRAM_ID
					  , (CASE
							WHEN A.PERF_CHECK_STEP_ID <![CDATA[<]]> D.LAST_PERF_CHECK_STEP_ID THEN C.EXCEPTION_PRC_METH_CD
							ELSE A.EXCEPTION_PRC_METH_CD
						END) AS EXCEPTION_PRC_METH_CD
					 , A.PROGRAM_DVLP_DIV_CD
					 , D.DEPLOY_CHECK_STATUS_CD
					 , A.PERF_TEST_COMPLETE_YN
					 , D.DEPLOY_REQUEST_DT
				   FROM (SELECT A.PERF_CHECK_ID
							  , A.PERF_CHECK_STEP_ID
							  , B.EXCEPTION_PRC_METH_CD
							  , B.PROGRAM_ID
							  , B.PROGRAM_DVLP_DIV_CD
							  , A.PERF_TEST_COMPLETE_YN
						   FROM DEPLOY_PERF_CHK_STEP_EXEC A
							  , DEPLOY_PERF_CHK_TARGET_PGM B
						  WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
							AND A.PERF_CHECK_ID =  #{perf_check_id}
							AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
						) A
					  , DEPLOY_PERF_CHK_TRGT_EXCPT_PGM C
					  , DEPLOY_PERF_CHK D
				  WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
					AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID(+)
					AND A.PROGRAM_ID = C.PROGRAM_ID(+)
					AND A.PERF_CHECK_ID = D.PERF_CHECK_ID
					AND A.PERF_CHECK_ID = #{perf_check_id}
			   ) B
			 , DEPLOY_PERF_CHK_ALL_PGM C
			 , (/* 요청중인 예외 프로그램이 있는지 체크 */
				SELECT PERF_CHECK_ID, PROGRAM_ID
				  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST
				 WHERE EXCEPTION_PRC_STATUS_CD = '1'	 -- 요청
				   AND PERF_CHECK_ID = #{perf_check_id}
			   ) D
			 , CD CD1
			 , CD CD2
			 , CD CD3
		WHERE A.PERF_CHECK_ID(+) = B.PERF_CHECK_ID
		  AND A.PROGRAM_ID(+) = B.PROGRAM_ID
		  AND B.PROGRAM_ID = C.PROGRAM_ID
		  AND D.PERF_CHECK_ID(+) = B.PERF_CHECK_ID
		  AND D.PROGRAM_ID(+) = B.PROGRAM_ID
		  AND B.PROGRAM_DVLP_DIV_CD = CD1.CD
		  AND CD1.GRP_CD_ID = '1053'
		  and c.program_type_cd = cd2.cd(+)
		  and cd2.grp_cd_id(+) = '1005'
		  and c.SQL_COMMAND_TYPE_CD = cd3.cd(+)
		  and cd3.grp_cd_id(+) = '1068'
		  AND B.PERF_CHECK_ID = #{perf_check_id}							  -- 성능검증ID

		/* 검색조건 */
		-- Optional
		<!-- DBIO -->
		<!-- 프로그램 -->
		<if test="searchValue != null and searchValue != ''">
			<choose>
				<when test="selectValue eq '01'">
					AND UPPER(C.DBIO) LIKE '%' || UPPER(#{searchValue}) || '%'
				</when>
				<when test="selectValue eq '02'">
					AND UPPER(C.PROGRAM_NM) LIKE '%' || UPPER(#{searchValue}) || '%'
				</when>
			</choose>
		</if>
		<!-- 점검결과 -->
		<if test="perf_check_result_div_cd != null and perf_check_result_div_cd != ''">
			AND A.PERF_CHECK_RESULT_DIV_CD = #{perf_check_result_div_cd} AND B.EXCEPTION_PRC_METH_CD IS NULL
		</if>
		<!-- 프로그램유형  -->
		<if test="program_type_cd != null and program_type_cd != ''">
			AND C.program_type_cd = #{program_type_cd}
		</if>
		<!-- SQL명령 유형  -->
		<if test="sql_command_type_cd != null and sql_command_type_cd != ''">
			AND C.sql_command_type_cd = #{sql_command_type_cd}
		</if>
		<!-- 다이나믹  -->
		<if test="dynamic_sql_yn != null and dynamic_sql_yn != ''">
			AND C.dynamic_sql_yn = #{dynamic_sql_yn}
		</if>
		<!-- 점검제외 + 미수행 -->
		<if test="(improper == 'true') and (unperformed == 'true')">
			AND (
			(
				A.PERF_CHECK_RESULT_DIV_NM IS NULL AND B.EXCEPTION_PRC_METH_CD IS NULL)
			OR
				B.EXCEPTION_PRC_METH_CD IN (2,3)
			)
		</if>
		<!-- 점검제외 -->
		<if test="(improper == 'true') and (unperformed == 'false')">
			AND B.EXCEPTION_PRC_METH_CD IN (2,3)
		</if>
		<!-- 미수행 -->
		<if test="(improper == 'false') and (unperformed == 'true')">
			AND A.PERF_CHECK_RESULT_DIV_NM IS NULL AND B.EXCEPTION_PRC_METH_CD IS NULL
		</if>
		-- ORDER BY B.PROGRAM_ID, A.PROGRAM_EXECUTE_TMS (20191203 수정)
		
		ORDER BY (CASE WHEN B.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN '5점검제외'
			   ELSE NVL(DECODE(A.PERF_CHECK_RESULT_DIV_NM,'적합','4적합','부적합','2부적합','오류','3오류','1미수행'), '1미수행')
		  END), B.PROGRAM_ID, A.PROGRAM_EXECUTE_TMS
	</sql>
	
	<sql id="getPerfCheckResultListRefId">
		/* PerformanceCheckMngDao.getPerfCheckResultListRefId */
        SELECT  /* DISPLAY */
				B.PERF_CHECK_ID
              , B.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID
              , C.PROGRAM_NM AS PROGRAM_NM                                    -- 프로그램명
              , C.DBIO AS DBIO                                                -- SQL식별자(DBIO)
              , A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME                  -- 파싱스키마
              , CD1.CD_NM AS PROGRAM_DVLP_DIV_NM                              -- 개발구분
              , (CASE
                     WHEN B.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN '점검제외'
                     ELSE NVL(A.PERF_CHECK_RESULT_DIV_NM, '미수행')
                 END) AS PERF_CHECK_RESULT_DIV_NM                             -- 점검결과
              , A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS                -- 수행회차
              , A.PROGRAM_EXEC_DIV_NM AS PROGRAM_EXEC_DIV_NM                  -- 수행유형
              , A.PROGRAM_EXECUTER_NM AS PROGRAM_EXECUTER_NM                  -- 수행자
              , TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD HH24:MI:SS') AS PROGRAM_EXEC_DT                          -- 수행일시
              , C.FILE_NM AS FILE_NM                                          -- 파일명
              , C.DIR_NM AS DIR_NM                                            -- 디렉토리
              , (SELECT D.PERF_CHECK_STEP_NM
                   FROM DEPLOY_PERF_CHK_STEP D
                  WHERE D.PERF_CHECK_STEP_ID = #{perf_check_step_id}) AS PERF_CHECK_STEP_NM     -- 성능점검단계명

                /* HIDDEN */                                         -- 성능점검ID
              , NVL2(D.PROGRAM_ID, 'Y', 'N') AS EXCEPTION_PROCESSING_YN    -- 예외처리중여부
              , (CASE
                     WHEN B.EXCEPTION_PRC_METH_CD IS NULL
                          AND (A.PERF_CHECK_RESULT_DIV_CD IN ('B', 'C') OR A.PERF_CHECK_ID IS NULL)
                          AND B.DEPLOY_CHECK_STATUS_CD = '01'
                          AND B.PERF_TEST_COMPLETE_YN !=  'Y'
                          AND D.PROGRAM_ID IS NULL THEN 'Y'
                     ELSE 'N'
                 END) AS EXCEPTION_BUTTON_ENABLE_YN                               -- 예외처리버튼활성화
                 ,C.PROGRAM_TYPE_CD
                 ,CD2.CD_NM AS PROGRAM_TYPE_nm
                 ,C.SQL_COMMAND_TYPE_CD
                 ,CD3.CD_NM AS SQL_COMMAND_TYPE_NM
                 ,C.DYNAMIC_SQL_YN
          FROM (
                SELECT *
                  FROM(
                        SELECT  A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
                              , A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID
                              , A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS                -- 프로그램수행회차
                              , A.PROGRAM_EXEC_DT AS PROGRAM_EXEC_DT                          -- 프로그램수행일시
                              , U1.USER_NM AS PROGRAM_EXECUTER_NM                             -- 수행자
                              , A.PROGRAM_EXECUTER_ID AS PROGRAM_EXECUTER_ID                  -- 프로그램수행자ID
                              , CD2.CD_NM AS PROGRAM_EXEC_DIV_NM                              -- 프로그램수행유형
                              , A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME                  -- 파싱스키마명
                              , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM                         -- 점검결과
                              , A.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD        -- 점검결과코드
                              , B.DEPLOY_CHECK_STATUS_CD  AS DEPLOY_CHECK_STATUS_CD           -- 배포성능점검상태코드
                              , C.PERF_TEST_COMPLETE_YN                                       -- 성능테스트완료여부
                              , MAX(A.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY A.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
                         FROM   DEPLOY_PERF_CHK_RESULT A    -- 배포성능점검결과내역
                              , DEPLOY_PERF_CHK B
                              , DEPLOY_PERF_CHK_STEP_EXEC C
                              , USERS U1
                              , CD CD1
                              , CD CD2
                        WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
                          AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
                          AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
                          AND A.PROGRAM_EXECUTER_ID = U1.USER_ID
                          AND A.PERF_CHECK_RESULT_DIV_CD = CD1.CD
                          AND CD1.GRP_CD_ID = '1055'
                          AND A.PROGRAM_EXEC_DIV_CD = CD2.CD
                          AND CD2.GRP_CD_ID = '1054'
                          AND A.PERF_CHECK_ID =  #{perf_check_id}                              -- 성능점검ID
                          AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
                      ) A
                  -- 최종수행회차
                  	WHERE A.PROGRAM_EXECUTE_TMS = A.MAX_PROGRAM_EXECUTE_TMS
               ) A
             , (SELECT  A.PERF_CHECK_ID
                      , A.PERF_CHECK_STEP_ID
                      , A.PROGRAM_ID
                      , (CASE
                            WHEN A.PERF_CHECK_STEP_ID <![CDATA[<]]> D.LAST_PERF_CHECK_STEP_ID THEN C.EXCEPTION_PRC_METH_CD
                            ELSE A.EXCEPTION_PRC_METH_CD
                        END) AS EXCEPTION_PRC_METH_CD
                     , A.PROGRAM_DVLP_DIV_CD
                     , D.DEPLOY_CHECK_STATUS_CD
                     , A.PERF_TEST_COMPLETE_YN
                   FROM (SELECT A.PERF_CHECK_ID
                              , A.PERF_CHECK_STEP_ID
                              , B.EXCEPTION_PRC_METH_CD
                              , B.PROGRAM_ID
                              , B.PROGRAM_DVLP_DIV_CD
                              , A.PERF_TEST_COMPLETE_YN
                           FROM DEPLOY_PERF_CHK_STEP_EXEC A      -- 배포성능점검단계별수행내역
                              , DEPLOY_PERF_CHK_TARGET_PGM B     -- 배포성능점검대상프로그램내역
                          WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
                            AND A.PERF_CHECK_ID =  #{perf_check_id}
                            AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
                        ) A
                      , DEPLOY_PERF_CHK_TRGT_EXCPT_PGM C -- 배포성능점검대상예외프로그램내역
                      , DEPLOY_PERF_CHK D                -- 배포성능점검기본
                  WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
                    AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID(+)
                    AND A.PROGRAM_ID = C.PROGRAM_ID(+)
                    AND A.PERF_CHECK_ID = D.PERF_CHECK_ID
                    AND A.PERF_CHECK_ID = #{perf_check_id}

               ) B                                -- 배포성능점검대상프로그램내역
             , DEPLOY_PERF_CHK_ALL_PGM C          -- 배포성능점검전체프로그램내역
             , (/* 요청중인 예외 프로그램이 있는지 체크 */
                SELECT PERF_CHECK_ID, PROGRAM_ID
                  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST     -- 배포성능점검예외요청내역
                 WHERE EXCEPTION_PRC_STATUS_CD = '1'     -- 요청
                   AND PERF_CHECK_ID = #{perf_check_id}
               ) D
             , CD CD1
             , CD CD2
             , CD CD3
        WHERE A.PERF_CHECK_ID(+) = B.PERF_CHECK_ID
          AND A.PROGRAM_ID(+) = B.PROGRAM_ID
          AND B.PROGRAM_ID = C.PROGRAM_ID
          AND D.PERF_CHECK_ID(+) = B.PERF_CHECK_ID
          AND D.PROGRAM_ID(+) = B.PROGRAM_ID
          AND B.PROGRAM_DVLP_DIV_CD = CD1.CD
          AND CD1.GRP_CD_ID = '1053'
          and c.program_type_cd = cd2.cd(+)
          and cd2.grp_cd_id(+) = '1005'
          and c.SQL_COMMAND_TYPE_CD = cd3.cd(+)
          and cd3.grp_cd_id(+) = '1068'
          AND B.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID

		  /* 검색조건 */
		  -- Optional
		  <!-- DBIO -->
		  <!-- 프로그램 -->
		  <if test="searchValue != null and searchValue != ''">
		  	<choose>
			  <when test="selectValue eq '01'">
				  AND UPPER(C.DBIO) LIKE '%' || UPPER(#{searchValue}) || '%'
			  </when>
			  <when test="selectValue eq '02'">
				AND UPPER(C.PROGRAM_NM) LIKE '%' || UPPER(#{searchValue}) || '%'
			  </when>
		  	</choose>
		  </if>
		  <!-- 점검결과 -->
		  <if test="perf_check_result_div_cd != null and perf_check_result_div_cd != ''">
			AND A.PERF_CHECK_RESULT_DIV_CD = #{perf_check_result_div_cd} AND B.EXCEPTION_PRC_METH_CD IS NULL
		  </if>
		  <!-- 프로그램유형  -->
		  <if test="program_type_cd != null and program_type_cd != ''">
			AND C.program_type_cd = #{program_type_cd}
		  </if>
		  <!-- SQL명령 유형  -->
		  <if test="sql_command_type_cd != null and sql_command_type_cd != ''">
			AND C.sql_command_type_cd = #{sql_command_type_cd}
		  </if>
		  <!-- 다이나믹  -->
		  <if test="dynamic_sql_yn != null and dynamic_sql_yn != ''">
			AND C.dynamic_sql_yn = #{dynamic_sql_yn}
		  </if>
		  <!-- 점검제외 + 미수행 -->
		  <if test="(improper != null and improper != '') and (unperformed != null and unperformed != '')">
			AND (
			(
				A.PERF_CHECK_RESULT_DIV_NM IS NULL AND B.EXCEPTION_PRC_METH_CD IS NULL)
			OR
				B.EXCEPTION_PRC_METH_CD IN (2,3)
			)
		  </if>
		  <!-- 점검제외 -->
		  <if test="(improper != null and improper != '') and (unperformed == null)">
			AND B.EXCEPTION_PRC_METH_CD IN (2,3)
		  </if>
		  <!-- 미수행 -->
		  <if test="(improper == null) and (unperformed != null and unperformed != '')">
			AND A.PERF_CHECK_RESULT_DIV_NM IS NULL AND B.EXCEPTION_PRC_METH_CD IS NULL
		  </if>
		-- ORDER BY B.PROGRAM_ID, A.PROGRAM_EXECUTE_TMS (20191203 수정)
		
		ORDER BY (CASE WHEN B.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN '5점검제외'
               ELSE NVL(DECODE(A.PERF_CHECK_RESULT_DIV_NM,'적합','4적합','부적합','2부적합','오류','3오류','1미수행'), '1미수행')
          END), B.PROGRAM_ID, A.PROGRAM_EXECUTE_TMS
	</sql>
	
	<select id="getPerfCheckResultList" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerfCheckResultList */
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM, A.*
		    FROM (
				<include refid="getPerfCheckResultListRefId"/>
		    ) A
		    WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
		) A
		WHERE A.RNUM > ${pagePerCount} * (${currentPage} - 1)
	</select>
	
	<select id="getPerfCheckResultListEspc" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerfCheckResultListEspc */
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM, A.*
		    FROM (
				<include refid="getPerfCheckResultListRefIdEspc"/>
		    ) A
		    WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
		) A
		WHERE A.RNUM > ${pagePerCount} * (${currentPage} - 1)
	</select>
	
	<select id="getPerfCheckResultList4Excel" parameterType="performanceCheckMng" resultType="java.util.LinkedHashMap">
		/* PerformanceCheckMngDao.getPerfCheckResultList4Excel */
		<include refid="getPerfCheckResultListRefId"></include>
	</select>
	
	<select id="getPerfCheckResultListEspcExcel" parameterType="performanceCheckMng" resultType="java.util.LinkedHashMap">
		/* PerformanceCheckMngDao.getPerfCheckResultListEspcExcel */
		<include refid="getPerfCheckResultListRefIdEspc"></include>
	</select>

	<!-- 배포성능점검전체프로그램내역 -->
	<!-- QUERY_5 : 성능점검기본정보 탭 -->
	<!-- QUERY_6 : 성능테스트 탭 -->
	<!-- QUERY_7 : 성능점검결과 탭 -->

	<!-- QUERY_4 : 성능점검 완료 -->
	<!-- /**************** 성능점검단계.sql에서 QUERY_3 과 동일한 처리 **********************/ -->

	<!-- QUERY_5 : 프로그램 정보 탭 -->
	<!-- [ 수정 ] -->
	<!-- 2019-01-09 -->
	<!--      1) SELECT 항목 수정 : 자동통과여부 추가 -->
	<select id="getPerfCheckAllPgm"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerfCheckAllPgm */
		SELECT  /* DISPLAY */
		        CD1.CD_NM AS PROGRAM_DIV_NM                                     -- 프로그램 구분
		      , B.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD                -- 점검제외코드
		      , CD2.CD_NM AS EXCEPTION_PRC_METH_NM                              -- 점검제외명
		      , (CASE WHEN B.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 'Y' ELSE 'N' END) AS PERF_CHECK_AUTO_PASS_YN  -- 자동통과여부
		      , A.PROGRAM_NM AS PROGRAM_NM                                      -- 프로그램명
		      , A.FILE_NM AS FILE_NM                                            -- 파일명
		      , A.DIR_NM AS DIR_NM                                              -- 디렉토리명
		      , A.DBIO AS DBIO                                                  -- DBIO
		      , A.DIR_NM || '/' || A.FILE_NM AS TR_CD                           -- TR_CD  
		      , TO_CHAR(A.REG_DT, 'YYYY-MM-DD HH24:MI:SS') AS REG_DT                  -- 등록일시
		      , TO_CHAR(A.LAST_UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATE_DT  -- 변경일시
		      , A.PROGRAM_SOURCE_DESC AS PROGRAM_SOURCE_DESC                          -- SQL
		      , REPLACE(A.PROGRAM_DESC ,CHR(10),'<![CDATA[<BR/>]]>') AS PROGRAM_DESC  -- 프로그램설명(with br tag)
              ,A.PROGRAM_TYPE_CD
              ,CD3.CD_NM PROGRAM_TYPE_NM
              ,A.SQL_COMMAND_TYPE_CD
              ,CD4.CD_NM SQL_COMMAND_TYPE_NM
              ,A.DYNAMIC_SQL_YN
		  FROM  DEPLOY_PERF_CHK_ALL_PGM A    -- 배포성능점검전체프로그램내역
     		  , DEPLOY_PERF_CHK_TARGET_PGM B -- 배포성능점검대상프로그램내역
		      , CD CD1
		      , CD CD2
		      , CD CD3
		      , CD CD4
		 WHERE A.PROGRAM_ID = B.PROGRAM_ID
		   AND A.PROGRAM_DIV_CD = CD1.CD
		   AND CD1.GRP_CD_ID = '1052'
		   AND B.EXCEPTION_PRC_METH_CD = CD2.CD(+)
		   AND CD2.GRP_CD_ID(+) = '1061'
		   AND A.PROGRAM_TYPE_CD = CD3.CD(+)
		   AND CD3.GRP_CD_ID(+) = '1005'
		   AND A.SQL_COMMAND_TYPE_CD = CD4.CD(+)
		   AND CD4.GRP_CD_ID(+) = '1068'
		   AND A.PROGRAM_ID = #{program_id}
   	  	   AND B.PERF_CHECK_ID = #{perf_check_id}
	</select>
	
	<select id="getPerfCheckAllPgmEspc"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getPerfCheckAllPgmEspc */
			SELECT  /* DISPLAY */
				   CD1.CD_NM AS PROGRAM_DIV_NM											-- 프로그램 구분
				 , B.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD						-- 점검제외코드
				 , (CASE 
						WHEN D.PERF_CHECK_EVALUATION_METH_CD IN ('2', '3')
						THEN CD2.REF_VL_2 ELSE CD2.CD_NM END
					) AS EXCEPTION_PRC_METH_NM											-- 검증제외명
				 , (CASE
				 		WHEN B.EXCEPTION_PRC_METH_CD IN ('2', '3')
				 		THEN 'Y' ELSE 'N' END
				 	) AS PERF_CHECK_AUTO_PASS_YN										-- 자동통과여부
				 , A.PROGRAM_NM AS PROGRAM_NM											-- 프로그램명
				 , A.FILE_NM AS FILE_NM													-- 파일명
				 , A.DIR_NM AS DIR_NM													-- 디렉토리명
				 , A.DBIO AS DBIO														-- DBIO
				 , A.DIR_NM || '/' || A.FILE_NM AS TR_CD								-- TR_CD  
				 , TO_CHAR(A.REG_DT, 'YYYY-MM-DD HH24:MI:SS') AS REG_DT					-- 등록일시
				 , TO_CHAR(A.LAST_UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATE_DT	-- 변경일시
				 , A.PROGRAM_SOURCE_DESC AS PROGRAM_SOURCE_DESC							-- SQL
				 , REPLACE(A.PROGRAM_DESC ,CHR(10),'<![CDATA[<BR/>]]>') AS PROGRAM_DESC	-- 프로그램설명(with br tag)
				 , A.PROGRAM_TYPE_CD
				 , CD3.CD_NM PROGRAM_TYPE_NM
				 , A.SQL_COMMAND_TYPE_CD
				 , CD4.CD_NM SQL_COMMAND_TYPE_NM
				 , A.DYNAMIC_SQL_YN
			  FROM DEPLOY_PERF_CHK_ALL_PGM A											-- 배포성능점검전체프로그램내역
				 , DEPLOY_PERF_CHK_TARGET_PGM B											-- 배포성능점검대상프로그램내역
				 , DEPLOY_PERF_CHK C
				 , DEPLOY_PERF_CHK_STEP_EXEC D
				 , CD CD1
				 , CD CD2
				 , CD CD3
				 , CD CD4
			 WHERE A.PROGRAM_ID = B.PROGRAM_ID
			   AND A.PROGRAM_DIV_CD = CD1.CD
			   AND CD1.GRP_CD_ID = '1052'
			   AND B.EXCEPTION_PRC_METH_CD = CD2.CD(+)
			   AND CD2.GRP_CD_ID(+) = '1061'
			   AND A.PROGRAM_TYPE_CD = CD3.CD(+)
			   AND CD3.GRP_CD_ID(+) = '1005'
			   AND A.SQL_COMMAND_TYPE_CD = CD4.CD(+)
			   AND CD4.GRP_CD_ID(+) = '1068'
			   AND A.PROGRAM_ID = #{program_id}
			   AND B.PERF_CHECK_ID = #{perf_check_id}
			   AND C.PERF_CHECK_ID = B.PERF_CHECK_ID
			   AND D.PERF_CHECK_ID = C.PERF_CHECK_ID
			   AND D.PERF_CHECK_STEP_ID = C.LAST_PERF_CHECK_STEP_ID
	</select>

	<!-- QUERY_6 : 프로그램정보 탭 - 수행회차  -->
	<select id="selectProgramExecuteTmsList"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectProgramExecuteTms */
		SELECT   /* DISPLAY */
		         A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS                -- 수행회차
		         ,TO_CHAR(PROGRAM_EXEC_DT,'YYYY-MM-DD HH24:MI:SS') PROGRAM_EXEC_DT --수행일시
				 ,NVL(A.PAGING_YN,'N') AS "pagingYn"						   -- 페이징 처리 여부
				 ,NVL(A.PAGING_CNT,'0') AS "pagingCnt"						   -- 페이징 처리 건수
		  FROM   DEPLOY_PERF_CHK_RESULT A    -- 배포성능점검결과내역
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
		   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                   -- 성능점검단계ID
		   AND  A.PROGRAM_ID = #{program_id}                                   -- 프로그램ID
		 ORDER BY PROGRAM_EXECUTE_TMS DESC
	</select>
	<!-- QUERY_7 : 프로그램정보 탭 - 바인드  -->
	<select id="selectDeployPerfChkExecBindList"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfChkExecBindList */
		SELECT  /* DISPLAY */
		        A.BIND_SEQ AS BIND_SEQ                                        -- 순번
		      , A.BIND_VAR_NM AS BIND_VAR_NM                                  -- 변수명
		      , A.BIND_VAR_VALUE AS BIND_VAR_VALUE                            -- 변수값
		      , A.BIND_VAR_TYPE AS BIND_VAR_TYPE                              -- 변수타입
		  FROM  DEPLOY_PERF_CHK_EXEC_BIND A    -- 배포성능점검수행바인드내역
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
		   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                   -- 성능점검단계ID
		   AND  A.PROGRAM_ID = #{program_id}                                   -- 프로그램ID
		   AND  A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}                  -- 프로그램수행회차
		 ORDER BY A.BIND_SEQ
	</select>

	<!--8) QUERY_8 : 성능테스트 탭  -->
	<!-- .1 수행회차 : 현재 수행할 회차로 최종회차+1  -->
	<select id="selectMaxProgramExecuteTmsPlus1"  parameterType="performanceCheckMng" resultType="string">
		/* PerformanceCheckMngDao.selectMaxProgramExecuteTmsPlus1 */
		SELECT   /* DISPLAY */
			NVL(MAX(A.PROGRAM_EXECUTE_TMS)+1, 1) AS PROGRAM_EXECUTE_TMS                -- 수행회차
		FROM DEPLOY_PERF_CHK_RESULT A    -- 배포성능점검결과내역
		WHERE A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                   -- 성능점검단계ID
		   AND A.PROGRAM_ID = #{program_id}                                   -- 프로그램ID
	</select>

	<!-- .2 점검대상 DB  -->
	<!-- 사용안함 deprecated -->
	<select id="selectDeployPerfChkStepTestDbList"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfChkStepTestDbList */
		SELECT  /* DISPLAY */
		        DB.DB_NAME                        -- 점검 DB
				,A.PARSING_SCHEMA_NAME             -- 파싱스키마명

		        /* HIDDEN */
		      , A.DBID
		  FROM  DEPLOY_PERF_CHK_STEP_TEST_DB A    -- 배포성능점검단계별테스트DB기본
		      , DATABASE DB
		 WHERE  A.DBID = DB.DBID
		   AND  A.WRKJOB_CD = #{top_wrkjob_cd}                                     -- /** 성능점검단계의 최상위 업무코드 **/
		   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                   -- 성능점검단계ID
	</select>

	<!-- 3.1 Parsing Schema Name -->
	<select id="selectDefaultParsingSchemaInfo_bak"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDefaultParsingSchemaInfo_bak */
		SELECT /* DISPLAY */
		       DB.DB_NAME
		     , A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME                  -- 파싱스키마명

		       /* HIDDEN */
		     , A.DBID
		  FROM DEPLOY_PERF_CHK_PARSING_SCHEMA A    -- 배포성능점검단계별파싱스스키마내역(TABLE)
		     , DATABASE DB
		 WHERE A.DBID = DB.DBID
		   AND A.WRKJOB_CD = #{wrkjob_cd}                                      -- 업무코드
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
		   AND A.DEL_YN = 'N'
	</select>
	<select id="selectDefaultParsingSchemaInfo"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDefaultParsingSchemaInfo */
		SELECT /* DISPLAY */
		      DB.DB_ABBR_NM||'('||DB.DB_NAME||')' DB_NAME
		     , NVL(B.PARSING_SCHEMA_NAME, A.PARSING_SCHEMA_NAME) AS PARSING_SCHEMA_NAME                  -- 파싱스키마명

		       /* HIDDEN */
		     , A.DBID
		  FROM DEPLOY_PERF_CHK_PARSING_SCHEMA A    -- 배포성능점검단계별파싱스스키마내역(TABLE)
		     , (SELECT A.PERF_CHECK_STEP_ID
		             , A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME                  -- 파싱스키마명
		        FROM   DEPLOY_PERF_CHK_RESULT A    -- 배포성능점검결과내역(TABLE)
		        WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
		          AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
		          AND  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
		          AND  A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS) AS PROGRAM_EXECUTE_TMS
		                                          FROM DEPLOY_PERF_CHK_RESULT B  -- 배포성능점검결과내역(TABLE)
		                                         WHERE B.PERF_CHECK_ID = #{perf_check_id}
		                                           AND B.PERF_CHECK_STEP_ID = #{perf_check_step_id}
		                                           AND B.PROGRAM_ID = #{program_id})) B
		     , DATABASE DB
		 WHERE A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID(+)
		   AND A.DBID = DB.DBID
		   AND A.WRKJOB_CD = #{wrkjob_cd}                                      -- 업무코드
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
	</select>

	<!-- .3 Parsing Schema Name  -->
	<!-- .3.1의 파싱스키마명을 기본선택하도록 처리 -->
	<!-- .3.2 PARSING_SCHEMA 목록 -->
	<!-- /* CommonDao.getUserName */ -->

	<!-- .4 수행유형  -->
	<!--공통코드 1054  -->

	<!-- 9) QUERY_9 : 성능테스트 탭 - 성능 점검 수행  -->
	<!-- .1 DEPLOY_PERF_CHK_STEP_EXEC(배포성능점검단계별수행내역) 테이블 UPDATE  -->
	<!-- DEPLOY_PERF_CHK_STEP_EXEC(배포성능점검단계별수행내역) 테이블에 데이터가 없는 경우 INSERT-->
	<select id="selectDeployCheckStatus" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployCheckStatus */
		SELECT A.DEPLOY_CHECK_STATUS_CD AS DEPLOY_CHECK_STATUS_CD            -- 배포성능점검상태코드
			 , A.LAST_CHECK_RESULT_ANC_DT AS LAST_CHECK_RESULT_ANC_DT        -- 최종점검결과통보일시
 			 , A.CHECK_RESULT_ANC_YN AS CHECK_RESULT_ANC_YN                  -- 점검결과통보성공여부
 			 , A.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID
			 , A.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD        -- 성능점검결과구분코드
			 , CD1.CD_NM AS DEPLOY_CHECK_STATUS_NM                           -- 배포성능점검상태명
		  FROM DEPLOY_PERF_CHK A    -- 배포성능점검기본(TABLE)
			 , CD CD1
		 WHERE A.DEPLOY_CHECK_STATUS_CD = CD1.CD
		   AND CD1.GRP_CD_ID = '1056'
		   AND A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
	</select>

	<update id="updateDeployPerfChkStepExecTotalCnt_bak">
		/* PerformanceCheckMngDao.updateDeployPerfChkStepExecTotalCnt */
		UPDATE  DEPLOY_PERF_CHK_STEP_EXEC A     -- 배포성능점검단계별수행내역
		   SET  A.TOTAL_CNT = (SELECT COUNT(*)
		                         FROM DEPLOY_PERF_CHK_TARGET_PGM B
		                        WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID)
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
		   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                   -- 성능점검단계ID
	</update>
	<update id="updateDeployPerfChkStepExecTotalCnt">
		/* PerformanceCheckMngDao.updateDeployPerfChkStepExecTotalCnt */
	    MERGE INTO DEPLOY_PERF_CHK_STEP_EXEC A -- 배포성능점검단계별수행내역
	    USING (SELECT PERF_CHECK_ID AS PERF_CHECK_ID
	                , #{perf_check_step_id} AS PERF_CHECK_STEP_ID
	                , DEPLOY_REQUEST_DT AS DEPLOY_REQUEST_DT
	             FROM DEPLOY_PERF_CHK A
	            WHERE PERF_CHECK_ID = #{perf_check_id}
	          ) B
	    ON (A.PERF_CHECK_ID = B.PERF_CHECK_ID)
	    WHEN NOT MATCHED THEN
	        INSERT(PERF_CHECK_ID, PERF_CHECK_STEP_ID, PERF_CHECK_REQUEST_DT, PERF_TEST_COMPLETE_YN)
	        VALUES(B.PERF_CHECK_ID, B.PERF_CHECK_STEP_ID, B.DEPLOY_REQUEST_DT, 'N')
	    WHEN MATCHED THEN
	        UPDATE SET A.PERF_CHECK_REQUEST_DT = NVL(A.PERF_CHECK_REQUEST_DT, B.DEPLOY_REQUEST_DT)
	</update>

	<!-- .2 프로그램 수행회차 조회(PROGRAM_EXECUTE_TMS)  -->
	<!--selectMaxProgramExecuteTmsPlus1 -->

	<!-- .3 DEPLOY_PERF_CHK_RESULT(배포성능점검결과내역) 테이블 INSERT  -->
	<!--:PROGRAM_EXECUTE_TMS = QUERY_9.2  -->
	<!--:PROGRAM_EXEC_DT = SYSDATE  -->
	<!--:PROGRAM_EXECUTER_ID = 로그인사용자ID  -->
	<!--:PROGRAM_EXEC_DIV_CD = 화면에서 선택한 코드  -->
	<!--:PARSING_SCHEMA_NAME = 화면에서 선택한 값  -->

	<insert id="insertDeployPerfChkResult" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.insertDeployPerfChkResult */
		INSERT INTO   DEPLOY_PERF_CHK_RESULT     -- 배포성능점검결과내역
		        ( PERF_CHECK_ID                                               -- 성능점검ID
		        , PERF_CHECK_STEP_ID                                          -- 성능점검단계ID
		        , PROGRAM_ID                                                  -- 프로그램ID
		        , PROGRAM_EXECUTE_TMS                                        -- 프로그램수행회차
		        , PROGRAM_EXEC_DT                                             -- 프로그램수행일시
		        , PROGRAM_EXECUTER_ID                                         -- 프로그램수행자ID
		        , PROGRAM_EXEC_DIV_CD                                         -- 프로그램수행유형코드
		        , PARSING_SCHEMA_NAME                                         -- 파싱스키마명
		        , PAGING_YN                                               -- 페이지YN
				, PAGING_CNT                                              -- 페이지수
		 ) VALUES (
		          #{perf_check_id}                                              -- 성능점검id
		        , #{perf_check_step_id}                                         -- 성능점검단계id
		        , #{program_id}                                                 -- 프로그램id
		        , #{program_execute_tms}                                       -- 프로그램수행회차
		        , SYSDATE                                                      -- 프로그램수행일시
		        , #{program_executer_id}                                        -- 프로그램수행자id
		        , #{program_exec_div_cd}                                        -- 프로그램수행유형코드
		        , #{parsing_schema_name}                                        -- 파싱스키마명
		        , #{pagingYn}
				, #{pagingCnt}
		        )
	</insert>	
	
	<update id="updateDeployPerfChkResult" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateDeployPerfChkResult */
	       UPDATE DEPLOY_PERF_CHK_RESULT A     -- 배포성능점검결과내역(TABLE)
	           SET A.PERF_CHECK_RESULT_DIV_CD = 'C'                                 -- 성능점검결과구분코드 : 오류
	             , A.PERF_CHECK_RESULT_BASIS_WHY1 = #{perf_check_result_basis_why1} -- 성능점검결과근거사유1
	             , A.PERF_CHECK_RESULT_BASIS_WHY2 = #{perf_check_result_basis_why2} -- 성능점검결과근거사유2
	         WHERE A.PERF_CHECK_ID = #{perf_check_id}                               -- 성능점검ID
	           AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                     -- 성능점검단계ID
	           AND A.PROGRAM_ID = #{program_id}                                     -- 프로그램ID
	           AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}                   -- 프로그램수행회차
	</update>
	   
	<!-- .4 DEPLOY_PERF_CHK_EXEC_BIND(배포성능점검수행바인드내역) 테이블 INSERT  -->
	<!-- :PROGRAM_EXECUTE_TMS = QUERY_9.2  -->
	<!-- :BIND_SEQ : 화면의 바인값을 1부터 순차적으로 저장  -->
	<!-- :BIND_VAR_NM : 화면의 바인드명  -->
	<!-- :BIND_VAR_VALUE : 화면의 바인드값  -->
	<!-- :BIND_VAR_TYPE : 화면의 바인드 타입  -->
	<insert id="insertDeployPerfChkExecBind">
		/* PerformanceCheckMngDao.insertDeployPerfChkExecBind */
		INSERT INTO   DEPLOY_PERF_CHK_EXEC_BIND     -- 배포성능점검수행바인드내역
		        ( PERF_CHECK_ID                                               -- 성능점검ID
		        , PERF_CHECK_STEP_ID                                          -- 성능점검단계ID
		        , PROGRAM_ID                                                  -- 프로그램ID
		        , PROGRAM_EXECUTE_TMS                                         -- 프로그램수행회차
		        , BIND_SEQ                                                    -- 바인드순번
		        , BIND_VAR_NM                                                 -- 바인드변수명
		        , BIND_VAR_VALUE                                              -- 바인드변수값
		        , BIND_VAR_TYPE                                               -- 바인드변수타입
		 ) VALUES (
		          #{perf_check_id}                                              -- 성능점검id
		        , #{perf_check_step_id}                                         -- 성능점검단계id
		        , #{program_id}                                                 -- 프로그램id
		        , #{program_execute_tms}                                        -- 프로그램수행회차
		        , #{bind_seq}                                                   -- 바인드순번
		        , #{bind_var_nm}                                                -- 바인드변수명
		        , #{bind_var_value}                                             -- 바인드변수값
		        , #{bind_var_type}                                              -- 바인드변수타입
		        )
	</insert>

	<!-- .5 성능점검 서버 호출 DEPLOY_PERF_CHK_RESULT  -->
	<!--
	    /**********************************************************
	        파라미터
	            - PERF_CHECK_ID (성능점검ID)
	            - PERF_CHECK_STEP_ID (성능점검단계ID )
	            - PROGRAM_ID (프로그램ID )
	            - PROGRAM_EXECUTE_TMS (프로그램수행회차)
	    **********************************************************/
	 -->
	<!--10) QUERY_10 : 성능점검결과 탭 - 성능점검수행내역 그리드  -->
	<select id="getDeployPerfChkExeHistList"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.getDeployPerfChkExeHistList */
		SELECT  /* DISPLAY */
		        A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS                            -- 수행회차
		      , A.PERF_CHECK_RESULT_DIV_CD                                              -- 점검결과코드
		      , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM                                   -- 점검결과명
		      , U1.USER_NM AS PROGRAM_EXECUTER_NM                                       -- 수행자
		      , TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD HH24:MI:SS') AS PROGRAM_EXEC_DT  -- 프로그램수행일시
		      , A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME                            -- 파싱스키마명
		      , CD2.CD_NM AS PROGRAM_EXEC_DIV_NM                                        -- 수행유형
		  FROM  DEPLOY_PERF_CHK_RESULT A    -- 배포성능점검결과내역
		       ,CD CD1
		       ,CD CD2
		       ,USERS U1
		 WHERE A.PERF_CHECK_RESULT_DIV_CD = CD1.CD
		   AND CD1.GRP_CD_ID = '1055'
		   AND A.PROGRAM_EXEC_DIV_CD = CD2.CD
		   AND CD2.GRP_CD_ID = '1054'
		   AND A.PROGRAM_EXECUTER_ID = U1.USER_ID
		   AND A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                   -- 성능점검단계ID
		   AND A.PROGRAM_ID = #{program_id}                                   -- 프로그램ID
		ORDER BY A.PROGRAM_EXECUTE_TMS DESC
	</select>


	<!--11) QUERY_11 : 성능점검결과 탭  -->
	<!-- .1 : 점검결과..  -->
	<select id="selectDeployPerfChkDetailResultListEspc"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfChkDetailResultListEspc */
		SELECT  /* DISPLAY */
				C.PERF_CHECK_INDC_NM													-- 검증지표
				-- 적합
			  , CASE WHEN A.INDC_YN_DECIDE_DIV_CD = '2' THEN							/* 여부값일 경우 */ 
					  'N'
				 WHEN INSTR(A.INDC_PASS_MAX_VALUE,'.',1) <![CDATA[>]]> 0 THEN 
					  TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999990.9999') || ' 이하'
				 ELSE 
					  TO_CHAR(A.INDC_PASS_MAX_VALUE) || ' 이하'
			 END AS INDC_PASS_MAX_VALUE													-- 적합
			  , CASE WHEN INSTR(A.EXEC_RESULT_VALUE,'.',1) <![CDATA[>]]> 0 THEN 
						  TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999990.9999') 
					 ELSE TO_CHAR(A.EXEC_RESULT_VALUE) 
			 END AS AVG_EXEC_RESULT_VALUE												-- 평균
			  , CASE WHEN INSTR(B.EXEC_RESULT_VALUE,'.',1) <![CDATA[>]]> 0 THEN 
						  TO_CHAR(B.EXEC_RESULT_VALUE, 'FM999990.9999') 
					 ELSE TO_CHAR(B.EXEC_RESULT_VALUE) 
			 END AS MAX_EXEC_RESULT_VALUE												-- 최대
			  , CASE WHEN A.PERF_CHECK_EVALUATION_METH_CD = 2 THEN 
					  A.PERF_CHECK_RESULT_DIV_NM
				 WHEN A.PERF_CHECK_EVALUATION_METH_CD = 3 THEN
					  B.PERF_CHECK_RESULT_DIV_NM 
		 END AS PERF_CHECK_RESULT_DIV_NM												-- 성능검증결과
			  , CASE WHEN D.PROGRAM_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS EXCEPTION_YN	-- 예외등록여부
			  , CASE WHEN A.PERF_CHECK_EVALUATION_METH_CD = 2 THEN 
					  A.PERF_CHECK_RESULT_DESC
				 WHEN A.PERF_CHECK_EVALUATION_METH_CD = 3 THEN
					  B.PERF_CHECK_RESULT_DESC 
			 END AS PERF_CHECK_RESULT_DESC												-- 성능검증결과내용
			 
				/* HIDDEN */
			  , A.INDC_YN_DECIDE_DIV_CD													-- 지표여부값판정구분코드
			  , A.PERF_CHECK_INDC_ID													-- 성능검증지표ID
			  , A.PERF_CHECK_RESULT_DIV_CD												-- 성능검증결과구분코드
			  , C.PERF_CHECK_METH_CD													-- 성능검증방법코드
			  , CD1.CD_NM AS PERF_CHECK_METH_NM											-- 성능검증방법
		  , A.PERF_CHECK_EVALUATION_METH_CD												-- 성능점검평가방법코드(2: 평균, 3: 최대)
		  
		   FROM (/* 평균값 */
				 SELECT B.PERF_CHECK_INDC_ID
					  , B.INDC_PASS_MAX_VALUE
					  , B.EXEC_RESULT_VALUE
					  , B.PERF_CHECK_RESULT_DESC
					  , B.PERF_CHECK_RESULT_DIV_CD
					  , B.INDC_YN_DECIDE_DIV_CD
					  , B.PROGRAM_ID
					  , C.PERF_CHECK_EVALUATION_METH_CD
					  , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM
				   FROM DEPLOY_PERF_CHK_RESULT A
					  , DEPLOY_PERF_CHK_DETAIL_RESULT B
					  , DEPLOY_PERF_CHK_STEP_EXEC C
					  , CD CD1
				  WHERE A.PERF_CHECK_ID = #{perf_check_id} 
					AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id} 
					AND A.PROGRAM_ID = #{program_id}
					AND A.PERF_CHECK_EVALUATION_METH_CD = '2'
					AND A.PERF_CHECK_ID = B.PERF_CHECK_ID
					AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
					AND A.PROGRAM_ID = B.PROGRAM_ID
					AND A.PROGRAM_EXECUTE_TMS = B.PROGRAM_EXECUTE_TMS
					AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
					AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
					AND B.PERF_CHECK_RESULT_DIV_CD = CD1.CD
					AND CD1.GRP_CD_ID = '1055'
				) A
			  , (/* 최대값 */
				 SELECT B.PERF_CHECK_INDC_ID
					  , B.INDC_PASS_MAX_VALUE
					  , B.EXEC_RESULT_VALUE
					  , B.PERF_CHECK_RESULT_DESC
					  , B.PERF_CHECK_RESULT_DIV_CD
					  , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM
				   FROM DEPLOY_PERF_CHK_RESULT A
					  , DEPLOY_PERF_CHK_DETAIL_RESULT B
					  , CD CD1
				  WHERE A.PERF_CHECK_ID = #{perf_check_id} 
					AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id} 
					AND A.PROGRAM_ID = #{program_id}
					AND A.PERF_CHECK_EVALUATION_METH_CD = '3'
					AND A.PERF_CHECK_ID = B.PERF_CHECK_ID
					AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
					AND A.PROGRAM_ID = B.PROGRAM_ID
					AND A.PROGRAM_EXECUTE_TMS = B.PROGRAM_EXECUTE_TMS
					AND B.PERF_CHECK_RESULT_DIV_CD = CD1.CD
						AND CD1.GRP_CD_ID = '1055'
				) B 
			  , DEPLOY_PERF_CHK_INDC C
			  ,(SELECT B.PROGRAM_ID, B.PERF_CHECK_INDC_ID
					  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A
						   , DEPLOY_PERF_CHK_INDC_EXCPT B
					 WHERE A.EXCEPTION_PRC_METH_CD = '1'
					   AND A.EXCEPTION_PRC_STATUS_CD = '2'
					   AND B.DEL_YN = 'N'
					   AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
					   AND A.PROGRAM_ID = B.PROGRAM_ID
					   AND A.PROGRAM_ID = #{program_id}
				) D
			 , CD CD1
		  WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
			AND A.PROGRAM_ID = D.PROGRAM_ID(+)
			AND A.PERF_CHECK_INDC_ID = D.PERF_CHECK_INDC_ID(+)
			AND C.PERF_CHECK_METH_CD = CD1.CD
			AND CD1.GRP_CD_ID = '1059'
		ORDER BY A.PERF_CHECK_INDC_ID ASC
	</select>
	
	<select id="selectDeployPerfChkDetailResultList"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfChkDetailResultList */
		SELECT  /* DISPLAY */
		        B.PERF_CHECK_INDC_NM                        -- 점검지표
			   -- 적합
		      , CASE WHEN INSTR(A.INDC_PASS_MAX_VALUE,'.',1) > 0 THEN TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999990.9999') ELSE TO_CHAR(A.INDC_PASS_MAX_VALUE) END INDC_PASS_MAX_VALUE
				-- 성능점검결과값
		      , CASE WHEN INSTR(A.EXEC_RESULT_VALUE,'.',1) > 0 THEN TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999990.9999') ELSE TO_CHAR(A.EXEC_RESULT_VALUE) END EXEC_RESULT_VALUE
		      , CD2.CD_NM AS PERF_CHECK_RESULT_DIV_NM       -- 성능점검결과
		      , (CASE WHEN C.PROGRAM_ID IS NOT NULL THEN 'Y' ELSE 'N' END) EXCEPTION_YN  -- 예외등록여부

		        /* HIDDEN */
		      , A.INDC_YN_DECIDE_DIV_CD                     -- 지표여부값판정구분코드
		      , A.PERF_CHECK_INDC_ID                        -- 성능점검지표ID
		      , A.PERF_CHECK_RESULT_DIV_CD                  -- 성능점검결과구분코드
		      , B.PERF_CHECK_METH_CD                        -- 성능점검방법코드
		      , CD1.CD_NM AS PERF_CHECK_METH_NM             -- 성능점검방법
		      , A.PERF_CHECK_RESULT_DESC                    -- 성능점검결과설명
		   FROM DEPLOY_PERF_CHK_DETAIL_RESULT A             -- 배포성능점검상세결과내역
		       ,DEPLOY_PERF_CHK_INDC B                      -- 배포성능점검지표기본
		       ,(SELECT B.PROGRAM_ID, B.PERF_CHECK_INDC_ID
				FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
					, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
				WHERE A.EXCEPTION_PRC_METH_CD = '1'
				AND A.EXCEPTION_PRC_STATUS_CD = '2'
				AND B.DEL_YN = 'N'
				AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
				AND A.PROGRAM_ID = B.PROGRAM_ID
				AND A.PROGRAM_ID = #{program_id}
		         ) C
		       ,CD CD1
		       ,CD CD2
		  WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		    AND A.PROGRAM_ID = C.PROGRAM_ID(+)
		    AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
		    AND B.PERF_CHECK_METH_CD = CD1.CD
		    AND CD1.GRP_CD_ID = '1059'
		    AND A.PERF_CHECK_RESULT_DIV_CD = CD2.CD
		    AND CD2.GRP_CD_ID = '1055'
		    AND A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
		    AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                   -- 성능점검단계ID
		    AND A.PROGRAM_ID = #{program_id}                                   -- 프로그램ID
		    AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
		ORDER BY A.PERF_CHECK_INDC_ID ASC
	</select>

	<!-- .2 : 근거사유..  -->
	<select id="selectPerfCheckResultBasisWhy"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectPerfCheckResultBasisWhy */
		SELECT  /* DISPLAY */
		        A.PERF_CHECK_RESULT_BASIS_WHY1 AS PERF_CHECK_RESULT_BASIS_WHY1 -- 근거사유1
		      , A.PERF_CHECK_RESULT_BASIS_WHY2 AS PERF_CHECK_RESULT_BASIS_WHY2 -- 근거사유2
		      , A.EXEC_PLAN AS EXEC_PLAN                                       -- 실행계획
		  FROM  DEPLOY_PERF_CHK_RESULT A    -- 배포성능점검결과내역
		 WHERE A.PERF_CHECK_ID = #{perf_check_id}                               -- 성능점검ID
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                     -- 성능점검단계ID
		   AND A.PROGRAM_ID = #{program_id}                                     -- 프로그램ID
		   AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
	</select>

	<!-- .3 :개선가이드 (아래의 예시처럼 출력) -->
	<select id="selectImprovementGuide_bak"  parameterType="performanceCheckMng" resultType="string">
		/* PerformanceCheckMngDao.selectImprovementGuide_bak */
		SELECT  /* DISPLAY */
		        '[' || B.PERF_CHECK_INDC_NM || ']' || CHR(10)
		      || '■ 지표설명' || CHR(10) || B.PERF_CHECK_INDC_DESC || CHR(10) || CHR(10)
		      || '■ 개선가이드' || CHR(10) || B.PERF_CHECK_FAIL_GUIDE_SBST
		  FROM  DEPLOY_PERF_CHK_DETAIL_RESULT A -- 배포성능점검상세결과내역
		      , DEPLOY_PERF_CHK_INDC B          -- 배포성능점검지표기본
		 WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID                      -- 성능점검지표ID
		   AND A.PERF_CHECK_ID = '1'                              -- 성능점검ID
		   AND A.PERF_CHECK_STEP_ID = '1'                     -- 성능점검단계ID
		   AND A.PROGRAM_ID = '1'                                     -- 프로그램ID
		   AND A.PROGRAM_EXECUTE_TMS = '1'                -- 성능점검수행회차
		   AND A.PERF_CHECK_RESULT_DIV_CD = 'B'
	</select>

	<!-- 3 :개선가이드 (아래의 예시처럼 출력 - 좀더 예쁘게 출력되도록 변경해주세요^^) -->
	<select id="selectImprovementGuideList"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectImprovementGuideList */
		SELECT /* DISPLAY */
			   B.PERF_CHECK_INDC_NM            -- 점검지표
			 , B.PERF_CHECK_INDC_DESC          -- 지표설명
			 , B.PERF_CHECK_FAIL_GUIDE_SBST    -- 개선가이드
		FROM  DEPLOY_PERF_CHK_DETAIL_RESULT A -- 배포성능점검상세결과내역
		      , DEPLOY_PERF_CHK_INDC B          -- 배포성능점검지표기본
		WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID                      -- 성능점검지표ID
			AND A.PERF_CHECK_ID = #{perf_check_id}                               -- 성능점검ID
			AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                     -- 성능점검단계ID
			AND A.PROGRAM_ID = #{program_id}                                     -- 프로그램ID
			AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}                   -- 성능점검수행회차
			AND A.PERF_CHECK_RESULT_DIV_CD = 'B'                                 -- 성능점검결과구분코드
	</select>

	<!--
		/*****************************
		화면명 : 성능점검관리
		1) QUERY_1 : 성능점검이력 바인드 목록조회
		2) QUERY_2 : 성능점검이력 바인드 값 조회
		3) QUERY_3 : SQL수행이력 바인드 목록조회
		4) QUERY_4 : SQL수행이력 바인드 값 조회
		******************************/
	 -->
	<!-- QUERY_1 : 성능점검이력 바인드 목록조회 -->
	<select id="selectDeployPerfChkExecBindListPop"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfChkExecBindListPop */
		SELECT ROWNUM NO, A.*
		FROM (
			SELECT /* DISPLAY */
			       DB.DB_NAME                                                            -- 수행DB
			     , TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD HH24:MI:SS') PROGRAM_EXEC_DT   -- 수행일시
			     , B.BIND_CNT                                                            -- 바인드수
<!-- 			     , NVL(ROUND(E.ELAPSED_TIME/1000000, 2), 0) ELAPSED_TIME                  -->
<!-- 			     , NVL(ROUND(E.ELAPSED_TIME/1000000, 2), 0) ELAPSED_TIME                  -->
<!-- 			     , TO_CHAR(NVL(ROUND(E.ELAPSED_TIME/1000000, 2), 0), 'FM999999999999999999999999999990.999999999999999999999999999999') ELAPSED_TIME -->
<!-- 			     , TO_CHAR(NVL(ROUND(E.ELAPSED_TIME/1000000, 2), 0), 'FM999990.999') ELAPSED_TIME -->
		      	 , CASE WHEN INSTR(NVL(ROUND(E.ELAPSED_TIME/1000000, 2), 0),'.',1) > 0 THEN TO_CHAR(NVL(ROUND(E.ELAPSED_TIME/1000000, 2), 0), 'FM999990.999') ELSE TO_CHAR(NVL(ROUND(E.ELAPSED_TIME/1000000, 2), 0)) END ELAPSED_TIME
			     -- Elapsed Time
			     , NVL(E.BUFFER_GETS, 0) BUFFER_GETS                                     -- Buffer Gets

			       /* HIDDEN */
			     , A.PERF_CHECK_ID
			     , A.PERF_CHECK_STEP_ID
			     , A.PROGRAM_ID
			     , A.PROGRAM_EXECUTE_TMS
			  FROM DEPLOY_PERF_CHK_RESULT A
			     ,(SELECT PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID, PROGRAM_EXECUTE_TMS, COUNT(*) BIND_CNT
			         FROM DEPLOY_PERF_CHK_EXEC_BIND
			        GROUP BY PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID, PROGRAM_EXECUTE_TMS
			      ) B
			     , DEPLOY_PERF_CHK C
			     , DEPLOY_PERF_CHK_PARSING_SCHEMA D
			     , DEPLOY_PERF_SQL_STAT E
			     , DATABASE DB
			 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
			   AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
			   AND A.PROGRAM_ID = B.PROGRAM_ID
			   AND A.PROGRAM_EXECUTE_TMS = B.PROGRAM_EXECUTE_TMS
			   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
			   AND B.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
			   AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
			   AND A.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
			   AND A.PROGRAM_ID = E.PROGRAM_ID
			   AND A.PROGRAM_EXECUTE_TMS = E.PROGRAM_EXECUTE_TMS
			   AND D.DBID = DB.DBID
			   AND C.WRKJOB_CD = D.WRKJOB_CD
			   AND A.PROGRAM_ID = #{program_id}
			ORDER BY A.PROGRAM_EXEC_DT DESC
			) A
			WHERE ROWNUM <![CDATA[<=]]> ${endRowNum}
	 </select>
	<!-- QUERY_2 : 성능점검이력 바인드 값 조회 -->
	<select id="selectDeployPerfChkExecBindValue"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfChkExecBindValue */
		SELECT  /* DISPLAY */
		        A.BIND_SEQ AS BIND_SEQ                                        -- 순번
		      , A.BIND_VAR_NM AS BIND_VAR_NM                                  -- 변수명
		      , A.BIND_VAR_VALUE AS BIND_VAR_VALUE                            -- 변수값
		      , A.BIND_VAR_TYPE AS BIND_VAR_TYPE                              -- 변수타입
		FROM   DEPLOY_PERF_CHK_EXEC_BIND A    -- 배포성능점검수행바인드내역(TABLE)
		WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
		  AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
		  AND  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
		  AND  A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}                  -- 프로그램수행회차
		ORDER BY BIND_SEQ
	</select>


	<!-- QUERY_3 : SQL수행이력 바인드 목록조회-->
	<select id="selectDeployPerfChkAllPgmList"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfChkAllPgmList */
		SELECT ROWNUM NO, A.*
		FROM (
			SELECT /* DISPLAY */
			       B.SQL_ID                                                            -- SQL_ID
			     , TO_CHAR(D.LAST_CAPTURED, 'YYYY-MM-DD HH24:MI:SS') PROGRAM_EXEC_DT   -- 수행일시
			     , D.BIND_CNT                                                          -- 바인드 수
<!-- 			     , NVL(ROUND(C.ELAPSED_TIME/1000000, 2), 0) ELAPSED_TIME            -->
			     , CASE WHEN INSTR(NVL(ROUND(C.ELAPSED_TIME/1000000, 2), 0),'.',1) > 0 THEN TO_CHAR(NVL(ROUND(C.ELAPSED_TIME/1000000, 2), 0), 'FM999990.999') ELSE TO_CHAR(NVL(ROUND(C.ELAPSED_TIME/1000000, 2), 0)) END ELAPSED_TIME
			     , NVL(C.BUFFER_GETS, 0) BUFFER_GETS                                   -- Buffer Gets

			       /* HIDDEN */
			     , TO_CHAR(D.SNAP_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') SNAP_TIME
			     , TO_CHAR(D.LAST_CAPTURED, 'YYYY-MM-DD HH24:MI:SS') LAST_CAPTURED
			  FROM DEPLOY_PERF_CHK_ALL_PGM A
			     , VSQL_TEXT B
			     , VSQL_STATS C
			     ,(SELECT DBID, SQL_ID, SNAP_TIME, LAST_CAPTURED, COUNT(*) BIND_CNT
			         FROM VSQL_BIND_CAPTURE
			        GROUP BY DBID, SQL_ID, SNAP_TIME, LAST_CAPTURED
			      ) D
			 WHERE A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.DBID = D.DBID
			   AND B.SQL_ID = D.SQL_ID
			   AND A.PROGRAM_ID = #{program_id}
			   AND B.DBID = #{dbid}
			 ORDER BY D.LAST_CAPTURED DESC
			 ) A
		WHERE ROWNUM <![CDATA[<=]]> ${endRowNum}
	</select>

	<!-- QUERY_4 : SQL수행이력 바인드 값 조회-->
	<select id="selectVsqlBindCaptureList"  parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectVsqlBindCaptureList */
		SELECT A.BIND_SEQ BIND_SEQ2
		     , ROW_NUMBER() OVER(ORDER BY BIND_SEQ) BIND_SEQ
		     , A.BIND_VAR_NM
		     , A.BIND_VAR_VALUE
		     , A.BIND_VAR_TYPE
		FROM (		
			SELECT /* DISPLAY */
			       POSITION AS BIND_SEQ             -- 순번
			     , NAME AS BIND_VAR_NM              -- 변수명
			     , CASE WHEN UPPER(VALUE_STRING) = 'NULL' THEN '' ELSE VALUE_STRING END  AS BIND_VAR_VALUE   -- 변수값
			     , DATATYPE_STRING AS BIND_VAR_TYPE -- 변수타입
                 , ROW_NUMBER() OVER(PARTITION BY NAME ORDER BY POSITION) RNUM
			  FROM VSQL_BIND_CAPTURE
			 WHERE 1=1
			   AND DBID = #{dbid}
			   AND SQL_ID = #{sql_id}
			   AND TO_CHAR(SNAP_TIME, 'YYYY-MM-DD HH24:MI:SS.FF') = #{snap_time}
			   AND TO_CHAR(LAST_CAPTURED, 'YYYY-MM-DD HH24:MI:SS') = #{last_captured}
		) A
		WHERE RNUM = 1
		ORDER BY BIND_SEQ
	</select>
	<!-- 성능점검결과 -->
	<!-- 2019-02-19 추가 -->
	<update id="updateLastPerfCheckStepId"  parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateLastPerfCheckStepId */
	    UPDATE DEPLOY_PERF_CHK A     -- 배포성능점검기본
	       SET A.LAST_PERF_CHECK_STEP_ID = (SELECT MIN(PERF_CHECK_STEP_ID)  PERF_CHECK_STEP_ID
	                                          FROM DEPLOY_PERF_CHK_STEP_TEST_DB
	                                         WHERE PERF_CHECK_STEP_ID > #{perf_check_step_id}    -- 현재 성능점검ID
	                                          AND WRKJOB_CD = #{top_wrkjob_cd}
	                                          AND DEL_YN = 'N')
	     WHERE  A.PERF_CHECK_ID = #{perf_check_id}                                -- 성능점검ID
	</update>

	<select id="getDeployPerfChkPlanTable" parameterType="performanceCheckMng" resultType="selftunPlanTable">
		/* PerformanceCheckMngDao.getDeployPerfChkPlanTable */
		SELECT ID,
		       NVL(PARENT_ID,'-1') AS PARENT_ID,
		       (CASE ID
		        WHEN 0 THEN OPERATION || ' OPTIMIZER=' || OPTIMIZER
		        ELSE
		            OPERATION
		            || DECODE(OPTIONS, NULL, '', ' ' || OPTIONS)
		            || DECODE(OBJECT_OWNER, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME || '@' || QBLOCK_NAME || '(' || OBJECT_TYPE || ')')
		            || '(COST=' || COST || ' CARD=' || CARDINALITY || ' BYTES=' || BYTES || ')'
		        END) AS TEXT,
		       QBLOCK_NAME,
		       PARTITION_START,
		       DISTRIBUTION,
		       ACCESS_PREDICATES,
		       FILTER_PREDICATES
		  FROM DEPLOY_PERF_CHK_PLAN_TABLE A
		 WHERE A.PROGRAM_ID = #{program_id}
		 AND A.STATEMENT_ID = (SELECT MAX(B.STATEMENT_ID) FROM DEPLOY_PERF_CHK_PLAN_TABLE B WHERE B.PROGRAM_ID = A.PROGRAM_ID)
		 ORDER BY ID
	</select>

	<select id="getDeployPerfSqlPlan" parameterType="performanceCheckMng" resultType="selftunPlanTable">
		/* PerformanceCheckMngDao.getDeployPerfSqlPlan */
		SELECT ID,
		       NVL(PARENT_ID,'-1') AS PARENT_ID,
		       (CASE ID
		        WHEN 0 THEN OPERATION || ' OPTIMIZER=' || OPTIMIZER
		        ELSE
		            OPERATION
		            || DECODE(OPTIONS, NULL, '', ' ' || OPTIONS)
		            || DECODE(OBJECT_OWNER, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME || '@' || QBLOCK_NAME || '(' || OBJECT_TYPE || ')')
		            || '(COST=' || COST || ' CARD=' || CARDINALITY || ' BYTES=' || BYTES || ')'
		        END) AS TEXT,
		       QBLOCK_NAME,
		       PARTITION_START,
		       DISTRIBUTION,
		       ACCESS_PREDICATES,
		       FILTER_PREDICATES
		  FROM DEPLOY_PERF_SQL_PLAN A
		 WHERE A.PERF_CHECK_ID = #{perf_check_id}
		 AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
		 AND A.PROGRAM_ID = #{program_id}
		 AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
		 ORDER BY ID
	</select>

	<select id="getDefaultPagingCnt" parameterType="performanceCheckMng" resultType="string">
		/* PerformanceCheckMngDao.getPagingCnt */
		SELECT NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE) AS PAGING_CNT
		FROM   SPOP_PREFERENCES A ,
		       (SELECT B.WRKJOB_CD,
		               B.PREF_ID,
		               B.PREF_SEQ,
		               B.PREF_VALUE,
		               MAX(B.PREF_SEQ) OVER() MAX_PREF_SEQ
		       FROM    WRKJOB_PREFERENCES B
		       WHERE   B.WRKJOB_CD = #{wrkjob_cd}
		       AND     B.PREF_ID   = 16001
		       )
		       B
		WHERE  A.PREF_ID     = B.PREF_ID(+)
		AND    A.PREF_ID     = 16001
		AND    B.PREF_SEQ(+) = B.MAX_PREF_SEQ(+)
		AND    ROWNUM        = 1
	</select>

	<insert id="insertDeployPerfChkExcptHistory" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.insertDeployPerfChkExcptHistory */
		INSERT INTO   DEPLOY_PERF_CHK_EXCPT_HISTORY
		        ( EXCEPTION_REQUEST_ID
		        , EXCEPTION_STATUS_UPDATE_DT
		        , EXCEPTION_PRC_STATUS_CD
		        , EXCEPTION_STATUS_UPDATER_ID
		        , EXCEPTION_STATUS_UPDATE_WHY
		 )
		SELECT  A.EXCEPTION_REQUEST_ID
		      , SYSDATE
		      , A.EXCEPTION_PRC_STATUS_CD
		      , CASE WHEN A.EXCEPTION_PRC_STATUS_CD IN ('1', '3') THEN
		                  A.EXCEPTION_REQUESTER_ID
		             ELSE
		                  A.EXCEPTER_ID
		         END AS EXCEPTION_STATUS_UPDATER_ID
		      , CASE WHEN A.EXCEPTION_PRC_STATUS_CD IN ('1', '3') THEN
		                  A.EXCEPTION_REQUEST_WHY
		             ELSE
		                  A.EXCEPTION_PRC_WHY
		         END AS EXCEPTION_STATUS_UPDATE_WHY
		  FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST A
		 WHERE A.PERF_CHECK_ID = #{perf_check_id}
		   AND A.EXCEPTION_PRC_STATUS_CD = '1'    -- 요청
	</insert>

	<update id="updateDeployPerfChkExcptRequest2" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateDeployPerfChkExcptRequest2 */
		UPDATE  DEPLOY_PERF_CHK_EXCPT_REQUEST A
		   SET  A.EXCEPTION_PRC_STATUS_CD = '4'          -- 예외처리상태코드
		      , A.EXCEPTER_ID = #{user_id}                                  -- 예외처리자ID
		      , A.exception_prc_why = '반려합니다.'                      -- 예외처리사유
		      , A.EXCEPTION_PRC_DT = SYSDATE		                            -- 예외처리일시
		 WHERE A.PERF_CHECK_ID = #{perf_check_id}
		   AND A.EXCEPTION_PRC_STATUS_CD = '1'    -- 요청
	</update>

	<update id="updateDeployPerfChkAllPgm" parameterType="performanceCheckMng">
		/* PerformanceCheckMngDao.updateDeployPerfChkAllPgm */
		UPDATE DEPLOY_PERF_CHK_ALL_PGM
		   SET DEL_YN = 'Y'
		     , LAST_UPDATE_DT = SYSDATE
		WHERE PROGRAM_ID IN(SELECT PROGRAM_ID FROM DEPLOY_PERF_CHK_TARGET_PGM
							WHERE PERF_CHECK_ID=#{perf_check_id})
			AND PROGRAM_ID NOT IN (
		    -- 점검예외대상
		    SELECT PROGRAM_ID
		      FROM DEPLOY_PERF_CHK_TARGET_PGM A
		    WHERE A.PERF_CHECK_ID = #{perf_check_id}
		    AND EXCEPTION_PRC_METH_CD = '2'         -- 영구점검제외
		    UNION ALL
		    -- 점검결과 적합 대상
		    SELECT PROGRAM_ID
		      FROM (SELECT A.PERF_CHECK_ID, A.PROGRAM_ID, PERF_CHECK_RESULT_DIV_CD, PROGRAM_EXECUTE_TMS, MAX(A.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY A.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
		              FROM DEPLOY_PERF_CHK_RESULT A
		                 , (SELECT PERF_CHECK_ID, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
		                    FROM DEPLOY_PERF_CHK_STEP_EXEC A
		                    WHERE A.PERF_CHECK_ID = #{perf_check_id}
		                    GROUP BY PERF_CHECK_ID) B
		             WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		               AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
		               AND A.PERF_CHECK_ID = #{perf_check_id}) A
		    WHERE A.PROGRAM_EXECUTE_TMS = A.MAX_PROGRAM_EXECUTE_TMS
		    AND PERF_CHECK_RESULT_DIV_CD = 'A'
		    UNION ALL
		    --성능점검 자동 적합(영구점검제외) 대상
		    SELECT PROGRAM_ID
		      FROM DEPLOY_PERF_CHK_ALL_PGM
		     WHERE PERF_CHECK_AUTO_PASS_YN = 'Y'
		       AND PROGRAM_ID IN (SELECT PROGRAM_ID FROM DEPLOY_PERF_CHK_TARGET_PGM WHERE PERF_CHECK_ID = #{perf_check_id})
		)
	</update>

	<update id="updateCheckResultAncYn" parameterType="performanceCheckMng">
		/*PerformanceCheckMngDao.updateCheckResultAncYn */
		        UPDATE  DEPLOY_PERF_CHK A     -- 배포성능점검기본
		           SET  A.CHECK_RESULT_ANC_YN  = #{check_result_anc_yn}                -- 점검결과통보성공여부
		              , A.LAST_CHECK_RESULT_ANC_DT  = SYSDATE                           -- 최종점검결과통보일시
		              , A.CHECK_RESULT_ANC_CNT      = NVL(CHECK_RESULT_ANC_CNT, 0) + 1  -- 점검결과통보횟수
		         WHERE  A.PERF_CHECK_ID = #{perf_check_id}                                -- 성능점검ID
	 </update>
	 
	<!-- 성능점검결과 화면 팝업 필요한 파라미터 조회 -->
	<select id="getPerfCheckIdFromDeployId" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/*PerformanceCheckMngDao.getPerfCheckIdFromDeployId */
		SELECT A.PERF_CHECK_ID
		     , A.LAST_PERF_CHECK_STEP_ID AS PERF_CHECK_STEP_ID
		     , A.WRKJOB_CD
		     , B.TOP_WRKJOB_CD
		FROM DEPLOY_PERF_CHK A,
		    (SELECT DISTINCT WRKJOB_CD, CONNECT_BY_ROOT WRKJOB_CD AS TOP_WRKJOB_CD 
		        FROM WRKJOB_CD
		        START WITH UPPER_WRKJOB_CD IS NULL
		        CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
		WHERE A.WRKJOB_CD = B.WRKJOB_CD
		AND A.PERF_CHECK_ID = (
		    SELECT MAX(PERF_CHECK_ID)
		    FROM DEPLOY_PERF_CHK
		    /* IQMS로부터 전달 받은 파라미터 */	
		    WHERE DEPLOY_ID = #{deploy_id}
		)
	</select>
	
	<!-- 배포관리자 ID 조회 -->
	<select id="getUserId" resultType="string">
		/*PerformanceCheckMngDao.getUserId */
	    SELECT NVL(MAX(U.USER_ID), 'dbmanager') USER_ID
	    FROM USERS U, USER_AUTH A
	    WHERE U.USER_ID = A.USER_ID
	    AND A.AUTH_GRP_ID = 5       -- 배포성능관리자
	    AND ROWNUM = 1
	</select>
	
	<select id="getUserWrkjob" parameterType="string" resultType="string">
		/*PerformanceCheckMngDao.getUserWrkjob */
		SELECT WRKJOB_CD FROM USER_WRKJOB
		WHERE USER_ID = #{user_id}	
	    AND ROWNUM = 1
	</select>
	
	<select id="selectDbid" parameterType="performanceCheckMng" resultType="string">
		/* PerformanceCheckMngDao.selectDbid */
		SELECT DBID
		FROM DEPLOY_PERF_CHK_STEP_TEST_DB                         
		WHERE WRKJOB_CD = #{top_wrkjob_cd}     --> 성능점검단계의 최상위 업무코드
		AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
	</select>
	
	<select id="selectProgramTypeCd" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectProgramTypeCd */
		SELECT PROGRAM_TYPE_CD                       -- 프로그램유형코드
		     , DBIO                                  -- SQL식별자(DBIO)
		     , DIR_NM || '/' || FILE_NM AS TR_CD     -- 소스파일명(FULL PATH)
		     , PROGRAM_SOURCE_DESC AS SQL_TEXT       -- SQL_TEXT
		FROM DEPLOY_PERF_CHK_ALL_PGM
		WHERE PROGRAM_ID = #{program_id}
	</select>
	
	<select id="selectDeployPerfSqlStatEspc" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfSqlStatEspc */
		SELECT ROUND(ELAPSED_TIME/1000000, 4) AS CURRENT_ELAP_TIME	-- 현재수행시간
			 , ROWS_PROCESSED AS FORECAST_RESULT_CNT					-- 예상결과건수
		  FROM DEPLOY_PERF_SQL_STAT
		 WHERE PERF_CHECK_ID  = #{perf_check_id} 
		   AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
		   AND PROGRAM_ID = #{program_id}
		   AND PROGRAM_EXECUTE_TMS = #{program_execute_tms}
	</select>
	
	<select id="selectDeployPerfSqlStat" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectDeployPerfSqlStat */
		SELECT ROUND(ELAPSED_TIME/1000000, 4) AS CURRENT_ELAP_TIME  -- 현재수행시간
		 , ROWS_PROCESSED AS FORECAST_RESULT_CNT                -- 예상결과건수
		FROM DEPLOY_PERF_SQL_STAT
		WHERE PERF_CHECK_ID  = #{perf_check_id} 
		AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
		AND PROGRAM_ID = #{program_id}
		AND PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS)
									FROM DEPLOY_PERF_SQL_STAT
								   WHERE PERF_CHECK_ID  = #{perf_check_id} 
									 AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
									 AND PROGRAM_ID = #{program_id})
	</select>
	
	<select id="selectParsingSchemaNameEspc" parameterType="performanceCheckMng" resultType="string">
		/* PerformanceCheckMngDao.selectParsingSchemaNameEspc */
		SELECT PARSING_SCHEMA_NAME -- 파싱스키마명
		  FROM DEPLOY_PERF_CHK_RESULT
		 WHERE PERF_CHECK_ID  = #{perf_check_id} 
		   AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
		   AND PROGRAM_ID = #{program_id}
		   AND PROGRAM_EXECUTE_TMS = #{program_execute_tms}

	</select>
	
	<select id="selectParsingSchemaName" parameterType="performanceCheckMng" resultType="string">
		/* PerformanceCheckMngDao.selectParsingSchemaName */
		SELECT PARSING_SCHEMA_NAME -- 파싱스키마명
		FROM DEPLOY_PERF_CHK_RESULT
		WHERE PERF_CHECK_ID  = #{perf_check_id} 
		   AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
		   AND PROGRAM_ID = #{program_id}
		   AND PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS)
		                                FROM DEPLOY_PERF_CHK_RESULT
		                               WHERE PERF_CHECK_ID  = #{perf_check_id} 
		                                 AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
		                                 AND PROGRAM_ID = #{program_id})

	</select>
	
	<select id="selectBindVarEspc" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectBindVarEspc */
		SELECT BIND_VAR_NM || CHR(9) || BIND_VAR_VALUE AS BIND_VAR
		  FROM DEPLOY_PERF_CHK_EXEC_BIND
		 WHERE PERF_CHECK_ID  = #{perf_check_id} 
		   AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
		   AND PROGRAM_ID = #{program_id}
		   AND PROGRAM_EXECUTE_TMS = #{program_execute_tms}
		 ORDER BY BIND_SEQ
	</select>
	
	<select id="selectBindVar" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectBindVar */
		SELECT BIND_VAR_NM || CHR(9) || BIND_VAR_VALUE AS BIND_VAR
		  FROM DEPLOY_PERF_CHK_EXEC_BIND
		 WHERE PERF_CHECK_ID  = #{perf_check_id} 
		   AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
		   AND PROGRAM_ID = #{program_id}
		   AND PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS)
		                                FROM DEPLOY_PERF_CHK_EXEC_BIND
		                               WHERE PERF_CHECK_ID  = #{perf_check_id} 
									   AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
									   AND PROGRAM_ID = #{program_id})
		 ORDER BY BIND_SEQ
	</select>
	
	<select id="perfChkRequestTuningDupChk" parameterType="performanceCheckMng" resultType="int">
		/* PerformanceCheckMngDao.perfChkRequestTuningDupChk */
		SELECT COUNT(*) FROM TUNING_TARGET_SQL
		WHERE PERF_CHECK_ID=#{perf_check_id}
		AND PROGRAM_ID=#{program_id}
		AND TUNING_STATUS_CD NOT IN ('4', '7', '8', 'A')   --4:튜닝반려, 7:적용반려, 8:튜닝종료, A:요청취소
	</select>
	
	<select id="perfChkRequestTuningDupChkEspc" parameterType="performanceCheckMng" resultType="int">
		/* PerformanceCheckMngDao.perfChkRequestTuningDupChkEspc */
		SELECT COUNT(*) FROM TUNING_TARGET_SQL
		WHERE PERF_CHECK_ID=#{perf_check_id}
		AND PROGRAM_ID=#{program_id}
		AND SQL_ID = #{sql_id}
		AND TUNING_STATUS_CD NOT IN ('4', '7', '8', 'A')   --4:튜닝반려, 7:적용반려, 8:튜닝종료, A:요청취소
	</select>
	
	<select id="getPagingYnCnt" parameterType="performanceCheckMng" resultType="performanceCheckMng" >
		/* PerformanceCheckMngDao.getPagingYnCnt */
		SELECT A.PAGING_YN 
			 , A.PAGING_CNT
		  FROM DEPLOY_PERF_CHK_RESULT A
		 WHERE A.PERF_CHECK_ID = #{perf_check_id}
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
		   AND A.PROGRAM_ID = #{program_id}
		   AND A.PROGRAM_EXECUTE_TMS = #{programExecuteTms}
	</select>
	
	<select id="getInspectSqlList" parameterType="PerformanceCheckMng" resultType="PerformanceCheckMng">
		/* PerformanceCheckMngDao.getInspectSqlList */
		SELECT B.SQL_ID										/* SQL_ID */
			 , A.PROGRAM_EXEC_DT							/* 수행일시	*/
			 , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM		/* 검증결과	*/ 
			 -- HIDDEN
			 , A.PERF_CHECK_ID
			 , A.PERF_CHECK_STEP_ID
			 , A.PROGRAM_ID
			 , A.PROGRAM_EXECUTE_TMS
		  FROM DEPLOY_PERF_CHK_RESULT A
			 , DEPLOY_PERF_SQL_STAT B
			 , CD CD1
		 WHERE A.PERF_CHECK_ID = #{perf_check_id} 
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id} 
		   AND A.PROGRAM_ID = #{program_id}
		   AND NVL(A.PERF_CHECK_EVALUATION_METH_CD, '1') NOT IN ('2', '3')
		<if test="onlyIncorrectYn eq true">
			AND PERF_CHECK_RESULT_DIV_CD = 'B'
		</if>
		   AND B.PERF_CHECK_ID = A.PERF_CHECK_ID
		   AND B.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
		   AND B.PROGRAM_ID = A.PROGRAM_ID
		   AND B.PROGRAM_EXECUTE_TMS = A.PROGRAM_EXECUTE_TMS
		   AND A.PERF_CHECK_RESULT_DIV_CD = CD1.CD
		   AND CD1.GRP_CD_ID = '1055' 
		 ORDER BY A.PROGRAM_EXEC_DT DESC
	</select>
	
	<select id="getInspectResultDetail" parameterType="PerformanceCheckMng" resultType="PerformanceCheckMng">
	/* PerformanceCheckMngDao.getInspectResultDetail */
		SELECT B.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM					-- 성능점검지표명(점검 지표)
			 , CASE WHEN A.INDC_YN_DECIDE_DIV_CD = '2' THEN					/* 여부값일 경우 */ 
						 'N'
					WHEN INSTR(A.INDC_PASS_MAX_VALUE,'.',1) > 0 THEN 
						 TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999990.9999') || ' 이하'
					ELSE 
						 TO_CHAR(A.INDC_PASS_MAX_VALUE) || ' 이하'
			   END AS INDC_PASS_MAX_VALUE									-- 적합  
			 , CASE WHEN TRIM(A.EXEC_RESULT_VALUE) IN ('Y', 'N') THEN
						 A.EXEC_RESULT_VALUE 
					WHEN INSTR(A.EXEC_RESULT_VALUE,'.',1) > 0 THEN	 
						 TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999990.9999') 
					ELSE
						 TO_CHAR(A.EXEC_RESULT_VALUE)
				END AS EXEC_RESULT_VALUE									-- 실행결과값(성능 점검 결과값)
			  , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM						-- 성능점검결과구분코드(지표 성능 점검 결과)
			  , CASE WHEN C.PERF_CHECK_INDC_ID IS NULL THEN 
						  'N'
					 ELSE 'Y'
				END AS EXCEPTION_YN											-- 예외등록여부
			 , A.PERF_CHECK_RESULT_DESC AS PERF_CHECK_RESULT_DESC			-- 성능점검결과설명
		  FROM DEPLOY_PERF_CHK_DETAIL_RESULT A 
			 , DEPLOY_PERF_CHK_INDC B
			 , DEPLOY_PERF_CHK_INDC_EXCPT C
			 , CD CD1
		 WHERE A.PERF_CHECK_ID = #{perf_check_id}							-- 성능점검ID
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}					-- 성능점검단계ID
		   AND A.PROGRAM_ID = #{program_id}									-- 프로그램ID
		   AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}				-- 프로그램수행회차
		   AND A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		   AND A.PROGRAM_ID = C.PROGRAM_ID(+)
		   AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
		   AND C.DEL_YN(+) = 'N'
		   AND A.PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		   AND CD1.GRP_CD_ID(+) = '1055'
		ORDER BY A.PERF_CHECK_INDC_ID
	</select>
	
	<select id="selectSqlInfo" parameterType="performanceCheckMng" resultType="performanceCheckMng">
		/* PerformanceCheckMngDao.selectSqlText */
		SELECT NVL(A.SQL_FULLTEXT, ' ') AS SQL_TEXT
			 , ROUND(A.ELAPSED_TIME/1000000, 4) AS ELAPSED_TIME
			 , A.BUFFER_GETS
			 , A.EXECUTIONS
			 , A.ROWS_PROCESSED
		  FROM DEPLOY_PERF_SQL_STAT A
		 WHERE A.PERF_CHECK_ID = #{perf_check_id}							-- 성능점검ID
		   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}					-- 성능점검단계ID
		   AND A.PROGRAM_ID = #{program_id}									-- 프로그램ID
		   AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
	</select>
	
	<select id="getImprbExecPlan" parameterType="performanceCheckMng" resultType="String">
		/* PerformanceCheckMngDao.getImprbExecPlan */
		WITH TUN AS (
				SELECT *
			  FROM DEPLOY_PERF_SQL_PLAN A
		WHERE A.PERF_CHECK_ID = #{perf_check_id}							-- 성능점검ID
		  AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}					-- 성능점검단계ID
		  AND A.PROGRAM_ID = #{program_id}									-- 프로그램ID
		  AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
			 ORDER BY ID
			)
			SELECT TO_CHAR(ID,'9999')||' '||LPAD(' ',2*LEVEL)
				|| OPERATION
				|| DECODE(OPTIONS, NULL, '', ' ' || OPTIONS)
				|| DECODE(OBJECT_NAME, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME)
				|| DECODE(OBJECT_TYPE, NULL, '', '(' || OBJECT_TYPE || ')')
				|| NVL((CASE WHEN ID = 0 THEN ' OPTIMIZER=' || OPTIMIZER ELSE '' END)
				  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN '(' ELSE '' END)
				  || (CASE WHEN COST IS NOT NULL THEN 'COST=' || COST ELSE '' END)
				  || (CASE WHEN CARDINALITY IS NOT NULL THEN ' ' || 'CARD=' || CARDINALITY ELSE '' END)
				  || (CASE WHEN BYTES IS NOT NULL THEN ' ' || 'BYTES=' || BYTES ELSE '' END)
				  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN ')' ELSE '' END), ' ')
				AS EXECUTION_PLAN
			FROM TUN
			CONNECT BY PRIOR ID = PARENT_ID
			START WITH ID = 0
			ORDER BY ID
	</select>
</mapper>
