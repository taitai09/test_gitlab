<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
	2017.08.10	이원식	최초작성	
-->
<mapper namespace="omc.spop.dao.DailyCheckDbDao">
	
	<select id="dbGroupList" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.dbGroupList */
		/*
		 11-1. DB그룹
		*/
		SELECT A.GROUP_NM AS GROUP_NM
			, A.GROUP_ID AS GROUP_ID
		FROM MOTORING_GROUP A
		WHERE A.USER_ID = #{user_id}
		ORDER BY A.DESPLAY_SEQ
	</select>
	
	<select id="severityList" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.severityList */
		/*
		 11-2 심각도
		*/
		SELECT CD, CD_NM, REF_VL_1 AS COLOR
		FROM CD
		WHERE GRP_CD_ID='1080'
	</select>
	
	<select id="dbSeverityCount" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.dbSeverityCount */
		/*
		 1. 긴급조치, 조치필요, 확인필요, 정상 DB 건수
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
			FROM SPOP_PREFERENCES 
			WHERE PREF_ID = '22001')
		), MONITORING AS (
			SELECT A.GROUP_ID
				, A.GROUP_NM 
				, B.DBID
				, B.DESPLAY_SEQ
			FROM MOTORING_GROUP A
				, DATABASE_GROUP B
			WHERE A.GROUP_ID = B.GROUP_ID
			<if test="choice_db_group_id != null and choice_db_group_id != ''">
				AND A.GROUP_ID = #{choice_db_group_id}   /* 2022-03-21 DB 그룹이 선택되면 */
			</if>
			AND A.USER_ID = #{user_id}
		)
		SELECT SUM(CASE WHEN A.CRITICAL_CNT > 0 THEN 1 ELSE 0 END)  AS DB_CRITICAL_CNT /* 긴급조치 */
			, SUM(CASE WHEN A.WARNING_CNT > 0 THEN 1 ELSE 0 END)   AS DB_WARNING_CNT   /* 조치필요 */
			, SUM(CASE WHEN A.INFO_CNT > 0 THEN 1 ELSE 0 END)      AS DB_INFO_CNT         /* 확인필요 */
			, SUM(CASE WHEN A.EXEC_DBID IS NOT NULL AND (A.CRITICAL_CNT + A.WARNING_CNT + A.INFO_CNT) = 0 THEN 1 ELSE 0 END) AS DB_NORMAL_CNT         /* 정상 */
			, SUM(CASE WHEN A.EXEC_DBID IS NULL THEN 1 ELSE 0 END) AS DB_UNCHECKED_CNT     /* 미점검 */
		FROM (
			SELECT DBID
				, SUM(CASE WHEN CHECK_GRADE_CD IN ('2', '3') THEN CHECK_VALUE1 END) AS CRITICAL_CNT
				, SUM(CASE WHEN CHECK_GRADE_CD = '1' THEN CHECK_VALUE1 END)         AS WARNING_CNT
				, SUM(CASE WHEN CHECK_GRADE_CD = '0' THEN CHECK_VALUE1 END)         AS INFO_CNT
				, MIN(EXEC_DBID) AS EXEC_DBID
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID
				FROM DB_PRIV A 
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, D.DBID EXEC_DBID
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = to_char(sysdate, 'yyyymmdd')
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = to_char(sysdate, 'yyyymmdd')
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_CLASS_DIV_CD <![CDATA[<]]>> '08' /* ADVISOR RECOMMENDATION 제외 */
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
			, MONITORING B
		WHERE A.DBID = B.DBID
			
	</select>
	
	<select id="dbMain" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.dbMain */
		/*
		 2,3,4,5,6,7, 8, 9, 10, 25
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
		), MONITORING AS (
			SELECT A.GROUP_ID
				, A.GROUP_NM 
				, B.DBID
				, A.DESPLAY_SEQ AS MOTORING_DESPLAY_SEQ
				, B.DESPLAY_SEQ AS DATABASE_DESPLAY_SEQ
				, C.DB_NAME
				, C.DB_ABBR_NM
				, (SELECT COUNT(*) FROM DATABASE_GROUP Z, DB_PRIV Y WHERE Z.GROUP_ID = A.GROUP_ID AND Z.DBID = Y.DBID) AS GROUP_CNT
			FROM MOTORING_GROUP A
				, DATABASE_GROUP B
				, DATABASE C
			WHERE A.GROUP_ID = B.GROUP_ID
			AND A.USER_ID = #{user_id}
			<if test="choice_db_group_id != null and choice_db_group_id != ''">
				AND A.GROUP_ID = #{choice_db_group_id}   /* 2020-03-17 DB 그룹이 선택되면 */
			</if>
			AND B.DBID = C.DBID
		)
		SELECT B.GROUP_NM
			, B.GROUP_CNT
			, B.DB_NAME||': '||B.DB_ABBR_NM AS DB_TITLE
			, CASE WHEN A.CRITICAL_CNT > 0 THEN 'C'
				WHEN A.WARNING_CNT > 0 THEN 'W'
				WHEN A.INFO_CNT > 0 THEN 'I'
				WHEN (A.CRITICAL_CNT + A.WARNING_CNT + A.INFO_CNT) = 0 THEN 'N'
				ELSE 'U'
			END AS DBID_CHECK_GRADE_CD
			, CASE WHEN A.CRITICAL_CNT > 0 AND A.EMERGENCY_ACTION_YN = 'Y' THEN 
					(SELECT Z.CHECK_PREF_NM||' 외'
					FROM DB_CHECK_SUMMARY Y
						, BASIC_CHECK_CONFIG Z
					WHERE Y.CHECK_DAY = A.CHECK_DAY
					AND Y.CHECK_SEQ = A.CHECK_SEQ
					AND Y.DBID = A.DBID
					AND Y.CHECK_PREF_ID = Z.CHECK_PREF_ID      /* 2020-03-25 수정 */
					AND Y.CHECK_VALUE1 > 0                     /* 2020-03-25 추가 */
					AND Z.CHECK_GRADE_CD IN ('2', '3')
					AND Z.EMERGENCY_ACTION_YN = 'Y'
					AND ROWNUM = 1)
				WHEN A.CRITICAL_CNT > 0 AND A.EMERGENCY_ACTION_YN = 'N' THEN 
					(SELECT Z.CHECK_PREF_NM||' 외'
					FROM DB_CHECK_SUMMARY Y
						, BASIC_CHECK_CONFIG Z
					WHERE Y.CHECK_DAY = A.CHECK_DAY
					AND Y.CHECK_SEQ = A.CHECK_SEQ
					AND Y.DBID = A.DBID
					AND Y.CHECK_PREF_ID = Z.CHECK_PREF_ID      /* 2020-03-25 수정 */
					AND Y.CHECK_VALUE1 > 0                     /* 2020-03-25 추가 */
					AND Z.CHECK_GRADE_CD IN ('2', '3')
					AND Z.EMERGENCY_ACTION_YN = 'N'
					AND ROWNUM = 1)
				WHEN A.WARNING_CNT > 0 AND A.EMERGENCY_ACTION_YN = 'Y' THEN /* 2020-03-25 수정 */
					(SELECT Z.CHECK_PREF_NM||' 외'
					FROM DB_CHECK_SUMMARY Y
						, BASIC_CHECK_CONFIG Z
					WHERE Y.CHECK_DAY = A.CHECK_DAY
					AND Y.CHECK_SEQ = A.CHECK_SEQ
					AND Y.DBID = A.DBID
					AND Y.CHECK_PREF_ID = Z.CHECK_PREF_ID      /* 2020-03-25 수정 */
					AND Y.CHECK_VALUE1 > 0                     /* 2020-03-25 추가 */
					AND Z.CHECK_GRADE_CD = 1
					AND Z.EMERGENCY_ACTION_YN = 'Y'            /* 2020-03-25 추가 */
					AND ROWNUM = 1)
				WHEN A.WARNING_CNT > 0 AND A.EMERGENCY_ACTION_YN = 'N' THEN /* 2020-03-25 추가 */
					(SELECT Z.CHECK_PREF_NM||' 외'
					FROM DB_CHECK_SUMMARY Y
						, BASIC_CHECK_CONFIG Z
					WHERE Y.CHECK_DAY = A.CHECK_DAY
					AND Y.CHECK_SEQ = A.CHECK_SEQ
					AND Y.DBID = A.DBID
					AND Y.CHECK_PREF_ID = Z.CHECK_PREF_ID
					AND Y.CHECK_VALUE1 > 0
					AND Z.CHECK_GRADE_CD = 1
					AND Z.EMERGENCY_ACTION_YN = 'N'
					AND ROWNUM = 1)
				WHEN A.INFO_CNT > 0 AND A.EMERGENCY_ACTION_YN = 'Y' THEN /* 2020-03-25 수정 */
					(SELECT Z.CHECK_PREF_NM||' 외'
					FROM DB_CHECK_SUMMARY Y
						, BASIC_CHECK_CONFIG Z
					WHERE Y.CHECK_DAY = A.CHECK_DAY
					AND Y.CHECK_SEQ = A.CHECK_SEQ
					AND Y.DBID = A.DBID
					AND Y.CHECK_PREF_ID = Z.CHECK_PREF_ID      /* 2020-03-25 수정 */
					AND Y.CHECK_VALUE1 > 0                     /* 2020-03-25 추가 */
					AND Z.CHECK_GRADE_CD = 0
					AND Z.EMERGENCY_ACTION_YN = 'Y'            /* 2020-03-25 추가 */
					AND ROWNUM = 1)
				WHEN A.INFO_CNT > 0 AND A.EMERGENCY_ACTION_YN = 'N' THEN /* 2020-03-25 추가 */
					(SELECT Z.CHECK_PREF_NM||' 외'
					FROM DB_CHECK_SUMMARY Y
						, BASIC_CHECK_CONFIG Z
					WHERE Y.CHECK_DAY = A.CHECK_DAY
					AND Y.CHECK_SEQ = A.CHECK_SEQ
					AND Y.DBID = A.DBID
					AND Y.CHECK_PREF_ID = Z.CHECK_PREF_ID
					AND Y.CHECK_VALUE1 > 0
					AND Z.CHECK_GRADE_CD = 0
					AND Z.EMERGENCY_ACTION_YN = 'N'
					AND ROWNUM = 1)
				WHEN (A.CRITICAL_CNT + A.WARNING_CNT + A.INFO_CNT) = 0 THEN '점검 결과 정상'
				ELSE '점검 미수행'
			END AS CHECK_PREF_NM
			, A.CHECK_DT
			, A.CRITICAL_CNT + A.WARNING_CNT + A.INFO_CNT AS CHECK_CNT
			, CASE WHEN A.DB_CHECK_GRADE_CD IN ('2', '3') THEN 'C'
				WHEN A.DB_CHECK_GRADE_CD = '1' THEN 'W'
				WHEN A.DB_CHECK_GRADE_CD = '0' THEN 'I'
				WHEN A.DB_CHECK_GRADE_CD = '-1' THEN 'N'
				WHEN A.DB_CHECK_GRADE_CD = 'U' THEN 'U'
			END DB_CHECK_GRADE_CD
			, CASE WHEN A.INSTANCE_CHECK_GRADE_CD IN ('2', '3') THEN 'C'
				WHEN A.INSTANCE_CHECK_GRADE_CD = '1' THEN 'W'
				WHEN A.INSTANCE_CHECK_GRADE_CD = '0' THEN 'I'
				WHEN A.INSTANCE_CHECK_GRADE_CD = '-1' THEN 'N'
				WHEN A.INSTANCE_CHECK_GRADE_CD = 'U' THEN 'U'
			END INSTANCE_CHECK_GRADE_CD
			, CASE WHEN A.SPACE_CHECK_GRADE_CD IN ('2', '3') THEN 'C'
				WHEN A.SPACE_CHECK_GRADE_CD = '1' THEN 'W'
				WHEN A.SPACE_CHECK_GRADE_CD = '0' THEN 'I'
				WHEN A.SPACE_CHECK_GRADE_CD = '-1' THEN 'N'
				WHEN A.SPACE_CHECK_GRADE_CD = 'U' THEN 'U'
			END SPACE_CHECK_GRADE_CD
			, CASE WHEN A.OBJECT_CHECK_GRADE_CD IN ('2', '3') THEN 'C'
				WHEN A.OBJECT_CHECK_GRADE_CD = '1' THEN 'W'
				WHEN A.OBJECT_CHECK_GRADE_CD = '0' THEN 'I'
				WHEN A.OBJECT_CHECK_GRADE_CD = '-1' THEN 'N'
				WHEN A.OBJECT_CHECK_GRADE_CD = 'U' THEN 'U'
			END OBJECT_CHECK_GRADE_CD
			, CASE WHEN A.STATISTICS_CHECK_GRADE_CD IN ('2', '3') THEN 'C'
				WHEN A.STATISTICS_CHECK_GRADE_CD = '1' THEN 'W'
				WHEN A.STATISTICS_CHECK_GRADE_CD = '0' THEN 'I'
				WHEN A.STATISTICS_CHECK_GRADE_CD = '-1' THEN 'N'
				WHEN A.STATISTICS_CHECK_GRADE_CD = 'U' THEN 'U'
			END STATISTICS_CHECK_GRADE_CD
			, CASE WHEN A.LONG_RUNNING_CHECK_GRADE_CD IN ('2', '3') THEN 'C'
				WHEN A.LONG_RUNNING_CHECK_GRADE_CD = '1' THEN 'W'
				WHEN A.LONG_RUNNING_CHECK_GRADE_CD = '0' THEN 'I'
				WHEN A.LONG_RUNNING_CHECK_GRADE_CD = '-1' THEN 'N'
				WHEN A.LONG_RUNNING_CHECK_GRADE_CD = 'U' THEN 'U'
			END LONG_RUNNING_CHECK_GRADE_CD
			, CASE WHEN A.ALERT_GRADE_CD IN ('2', '3') THEN 'C'
				WHEN A.ALERT_GRADE_CD = '1' THEN 'W'
				WHEN A.ALERT_GRADE_CD = '0' THEN 'I'
				WHEN A.ALERT_GRADE_CD = '-1' THEN 'N'
				WHEN A.ALERT_GRADE_CD = 'U' THEN 'U'
				END ALERT_GRADE_CD
			/* HIDDEN */
			, A.DBID
			, A.CHECK_DAY
			, A.CHECK_SEQ
		FROM (
			SELECT DBID
				, MAX(CHECK_DT) AS CHECK_DT
				/* , MAX(EMERGENCY_ACTION_YN) AS EMERGENCY_ACTION_YN */ /* 2020-03-25 삭제 */ 
				, MAX(CASE WHEN CHECK_GRADE_CD IN ('2', '3') AND CHECK_VALUE1 > 0 AND  EMERGENCY_ACTION_YN = 'Y' THEN 'Y' ELSE 'N' END) AS EMERGENCY_ACTION_YN  /* 2020-03-25 추가 */
				, MAX(CHECK_DAY) AS CHECK_DAY
				, MAX(CHECK_SEQ) AS CHECK_SEQ
				, SUM(CASE WHEN CHECK_GRADE_CD IN ('2', '3') AND CHECK_PREF_ID NOT IN ('1038', '1039', '1040', '1041', '1042', '1043', '1044' ) THEN 
					CHECK_VALUE1 END)         AS CRITICAL_CNT     /* 2020-04-09 수정 */
				, SUM(CASE WHEN CHECK_GRADE_CD = '1' AND CHECK_PREF_ID NOT IN ('1038', '1039', '1040', '1041', '1042', '1043', '1044' ) THEN 
					CHECK_VALUE1 END)         AS WARNING_CNT      /* 2020-04-09 수정 */
				, SUM(CASE WHEN CHECK_GRADE_CD = '0' AND CHECK_PREF_ID NOT IN ('1038', '1039', '1040', '1041', '1042', '1043', '1044' ) THEN 
					CHECK_VALUE1 END)         AS INFO_CNT         /* 2020-04-09 수정 */
				, MAX(EXEC_DBID) AS EXEC_DBID
				, MAX(CASE WHEN CHECK_PREF_ID IN ('1001', '1002', '1003', '1046') AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID IN ('1001', '1002', '1003', '1046') AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID IN ('1001', '1002', '1003', '1046') AND EXEC_DBID IS NULL THEN 'U' END) AS DB_CHECK_GRADE_CD
				, MAX(CASE WHEN CHECK_PREF_ID IN ('1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014') AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID IN ('1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014') AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID IN ('1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014') AND EXEC_DBID IS NULL THEN 'U' END) AS INSTANCE_CHECK_GRADE_CD
				, MAX(CASE WHEN CHECK_PREF_ID IN ('1019', '1020', '1021', '1022', '1023', '1024', '1025') AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID IN ('1019', '1020', '1021', '1022', '1023', '1024', '1025') AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID IN ('1019', '1020', '1021', '1022', '1023', '1024', '1025') AND EXEC_DBID IS NULL THEN 'U' END) AS SPACE_CHECK_GRADE_CD
				, MAX(CASE WHEN CHECK_PREF_ID IN ('1026', '1027', '1028', '1029', '1030', '1031', '1032', '1033', '1045') AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID IN ('1026', '1027', '1028', '1029', '1030', '1031', '1032', '1033', '1045') AND CHECK_VALUE1 = 0 THEN '-1' 
						WHEN CHECK_PREF_ID IN ('1026', '1027', '1028', '1029', '1030', '1031', '1032', '1033', '1045') AND EXEC_DBID IS NULL THEN 'U' END) AS OBJECT_CHECK_GRADE_CD
				, MAX(CASE WHEN CHECK_PREF_ID IN ('1034', '1035') AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID IN ('1034', '1035') AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID IN ('1034', '1035') AND EXEC_DBID IS NULL THEN 'U' END) AS STATISTICS_CHECK_GRADE_CD
				, MAX(CASE WHEN CHECK_PREF_ID IN ('1036', '1037') AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID IN ('1036', '1037') AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID IN ('1036', '1037') AND EXEC_DBID IS NULL THEN 'U' END) AS LONG_RUNNING_CHECK_GRADE_CD
				, MAX(CASE WHEN CHECK_PREF_ID IN ('1015', '1016', '1017', '1018') AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID IN ('1015', '1016', '1017', '1018') AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID IN ('1015', '1016', '1017', '1018') AND EXEC_DBID IS NULL THEN 'U' END) AS ALERT_GRADE_CD
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
							, D.DBID EXEC_DBID, D.CHECK_DT
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = to_char(sysdate, 'yyyymmdd')
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = to_char(sysdate, 'yyyymmdd')
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_CLASS_DIV_CD <![CDATA[<]]>> '08' /* ADVISOR RECOMMENDATION 제외 */
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
			, MONITORING B
		WHERE A.DBID = B.DBID
		<if test="choice_severity_id != null and choice_severity_id != ''">
			<choose>
				<when test='choice_severity_id.equals("0")'>
					AND A.CRITICAL_CNT > 0    /* 2020-03-17 심각도 = 긴급조치 */
				</when>
				<when test='choice_severity_id.equals("1")'>
					AND A.WARNING_CNT > 0     /* 2020-03-17 심각도 = 조치필요 */
				</when>
				<when test='choice_severity_id.equals("2")'>
					AND A.INFO_CNT > 0        /* 2020-03-17 심각도 = 확인필요 */
				</when>
				<when test='choice_severity_id.equals("3")'>
					AND (A.CRITICAL_CNT + A.WARNING_CNT + A.INFO_CNT) = 0  /* 2020-03-17 심각도 = 정상 */
				</when>
			</choose>
		</if>
		ORDER BY B.MOTORING_DESPLAY_SEQ, B.DATABASE_DESPLAY_SEQ
	</select>
	
	<select id="diagnosisResultSummaryDb" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.diagnosisResultSummaryDb */
		/*
		 17-1. DB 진단결과 요약
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
			AND UDP.DBID = #{dbid}
		)
		SELECT CASE WHEN A.DATABASE_STATUS_GRADE IN ('2', '3') THEN 'C'
					WHEN A.DATABASE_STATUS_GRADE = '1' THEN 'W'
					WHEN A.DATABASE_STATUS_GRADE = '0' THEN 'I'
					WHEN A.DATABASE_STATUS_GRADE = '-1' THEN 'N'
					WHEN A.DATABASE_STATUS_GRADE = 'U' THEN 'U'
				END DATABASE_STATUS_GRADE
				, CASE WHEN A.EXPIRED_ACCOUNT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.EXPIRED_ACCOUNT_GRADE = '1' THEN 'W'
					WHEN A.EXPIRED_ACCOUNT_GRADE = '0' THEN 'I'
					WHEN A.EXPIRED_ACCOUNT_GRADE = '-1' THEN 'N'
					WHEN A.EXPIRED_ACCOUNT_GRADE = 'U' THEN 'U'
				END EXPIRED_ACCOUNT_GRADE
				, CASE WHEN A.MODIFIED_PARAMETER_GRADE IN ('2', '3') THEN 'C'
					WHEN A.MODIFIED_PARAMETER_GRADE = '1' THEN 'W'
					WHEN A.MODIFIED_PARAMETER_GRADE = '0' THEN 'I'
					WHEN A.MODIFIED_PARAMETER_GRADE = '-1' THEN 'N'
					WHEN A.MODIFIED_PARAMETER_GRADE = 'U' THEN 'U'
				END MODIFIED_PARAMETER_GRADE
				, CASE WHEN A.NEW_CREATED_OBJECT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.NEW_CREATED_OBJECT_GRADE = '1' THEN 'W'
					WHEN A.NEW_CREATED_OBJECT_GRADE = '0' THEN 'I'
					WHEN A.NEW_CREATED_OBJECT_GRADE = '-1' THEN 'N'
					WHEN A.NEW_CREATED_OBJECT_GRADE = 'U' THEN 'U'
				END NEW_CREATED_OBJECT_GRADE
		FROM (
			SELECT DBID
				, MAX(CASE WHEN CHECK_PREF_ID = '1001' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1001' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1001' AND EXEC_DBID IS NULL THEN 'U' END) AS DATABASE_STATUS_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1046' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1046' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1046' AND EXEC_DBID IS NULL THEN 'U' END) AS EXPIRED_ACCOUNT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1002' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1002' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1002' AND EXEC_DBID IS NULL THEN 'U' END) AS MODIFIED_PARAMETER_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1003' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1003' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1003' AND EXEC_DBID IS NULL THEN 'U' END) AS NEW_CREATED_OBJECT_GRADE
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A 
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
							, D.DBID EXEC_DBID, D.CHECK_DT
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = #{check_day}
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_PREF_ID IN ('1001', '1002', '1003', '1046')
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
	</select>
	
	<select id="diagnosisResultSummaryInstance" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.diagnosisResultSummaryInstance */
		/*
		 17-2. INSTANCE 진단결과 요약
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
			AND UDP.DBID = #{dbid}
		)
		SELECT CASE WHEN A.INSTANCE_STATUS_GRADE IN ('2', '3') THEN 'C'
					WHEN A.INSTANCE_STATUS_GRADE = '1' THEN 'W'
					WHEN A.INSTANCE_STATUS_GRADE = '0' THEN 'I'
					WHEN A.INSTANCE_STATUS_GRADE = '-1' THEN 'N'
					WHEN A.INSTANCE_STATUS_GRADE = 'U' THEN 'U'
				END INSTANCE_STATUS_GRADE      /* INSTANCE STATUS */
				, CASE WHEN A.LISTENER_STATUS_GRADE IN ('2', '3') THEN 'C'
					WHEN A.LISTENER_STATUS_GRADE = '1' THEN 'W'
					WHEN A.LISTENER_STATUS_GRADE = '0' THEN 'I'
					WHEN A.LISTENER_STATUS_GRADE = '-1' THEN 'N'
					WHEN A.LISTENER_STATUS_GRADE = 'U' THEN 'U'
				END LISTENER_STATUS_GRADE      /* LISTENER STATUS */
				, CASE WHEN A.DB_FILES_GRADE IN ('2', '3') THEN 'C'
					WHEN A.DB_FILES_GRADE = '1' THEN 'W'
					WHEN A.DB_FILES_GRADE = '0' THEN 'I'
					WHEN A.DB_FILES_GRADE = '-1' THEN 'N'
					WHEN A.DB_FILES_GRADE = 'U' THEN 'U'
				END DB_FILES_GRADE             /* DB FILES */
				, CASE WHEN A.LIBRARY_CACHE_HIT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.LIBRARY_CACHE_HIT_GRADE = '1' THEN 'W'
					WHEN A.LIBRARY_CACHE_HIT_GRADE = '0' THEN 'I'
					WHEN A.LIBRARY_CACHE_HIT_GRADE = '-1' THEN 'N'
					WHEN A.LIBRARY_CACHE_HIT_GRADE = 'U' THEN 'U'
				END LIBRARY_CACHE_HIT_GRADE    /* LIBRARY CACHE HIT */
				, CASE WHEN A.DCH_GRADE IN ('2', '3') THEN 'C'
					WHEN A.DCH_GRADE = '1' THEN 'W'
					WHEN A.DCH_GRADE = '0' THEN 'I'
					WHEN A.DCH_GRADE = '-1' THEN 'N'
					WHEN A.DCH_GRADE = 'U' THEN 'U'
				END DCH_GRADE                  /* DICTIONARY CACHE HIT */
				, CASE WHEN A.BCH_GRADE IN ('2', '3') THEN 'C'
					WHEN A.BCH_GRADE = '1' THEN 'W'
					WHEN A.BCH_GRADE = '0' THEN 'I'
					WHEN A.BCH_GRADE = '-1' THEN 'N'
					WHEN A.BCH_GRADE = 'U' THEN 'U'
				END BCH_GRADE                  /* BUFFER CACHE HIT */
				, CASE WHEN A.LATCH_HIT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.LATCH_HIT_GRADE = '1' THEN 'W'
					WHEN A.LATCH_HIT_GRADE = '0' THEN 'I'
					WHEN A.LATCH_HIT_GRADE = '-1' THEN 'N'
					WHEN A.LATCH_HIT_GRADE = 'U' THEN 'U'
				END LATCH_HIT_GRADE            /* LATCH HIT */
				, CASE WHEN A.PCTP_ELAPSD_GRADE IN ('2', '3') THEN 'C'
					WHEN A.PCTP_ELAPSD_GRADE = '1' THEN 'W'
					WHEN A.PCTP_ELAPSD_GRADE = '0' THEN 'I'
					WHEN A.PCTP_ELAPSD_GRADE = '-1' THEN 'N'
					WHEN A.PCTP_ELAPSD_GRADE = 'U' THEN 'U'
				END PCTP_ELAPSD_GRADE          /* PARSE CPU TO PARSE ELAPSD */
				, CASE WHEN A.DISK_SORT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.DISK_SORT_GRADE = '1' THEN 'W'
					WHEN A.DISK_SORT_GRADE = '0' THEN 'I'
					WHEN A.DISK_SORT_GRADE = '-1' THEN 'N'
					WHEN A.DISK_SORT_GRADE = 'U' THEN 'U'
				END DISK_SORT_GRADE            /* DISK SORT */
				, CASE WHEN A.SPU_GRADE IN ('2', '3') THEN 'C'
					WHEN A.SPU_GRADE = '1' THEN 'W'
					WHEN A.SPU_GRADE = '0' THEN 'I'
					WHEN A.SPU_GRADE = '-1' THEN 'N'
					WHEN A.SPU_GRADE = 'U' THEN 'U'
					END SPU_GRADE                  /* SHARED POOL USAGE */
				, CASE WHEN A.RLR_GRADE IN ('2', '3') THEN 'C'
					WHEN A.RLR_GRADE = '1' THEN 'W'
					WHEN A.RLR_GRADE = '0' THEN 'I'
					WHEN A.RLR_GRADE = '-1' THEN 'N'
					WHEN A.RLR_GRADE = 'U' THEN 'U'
				END RLR_GRADE                  /* RESOURCE LIMIT REACHED */
		FROM (
			SELECT DBID
				, MAX(CASE WHEN CHECK_PREF_ID = '1004' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1004' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1004' AND EXEC_DBID IS NULL THEN 'U' END) AS INSTANCE_STATUS_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1005' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1005' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1005' AND EXEC_DBID IS NULL THEN 'U' END) AS LISTENER_STATUS_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1006' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1006' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1006' AND EXEC_DBID IS NULL THEN 'U' END) AS DB_FILES_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1007' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1007' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1007' AND EXEC_DBID IS NULL THEN 'U' END) AS LIBRARY_CACHE_HIT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1008' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1008' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1008' AND EXEC_DBID IS NULL THEN 'U' END) AS DCH_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1009' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1009' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1009' AND EXEC_DBID IS NULL THEN 'U' END) AS BCH_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1010' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1010' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1010' AND EXEC_DBID IS NULL THEN 'U' END) AS LATCH_HIT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1011' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1011' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1011' AND EXEC_DBID IS NULL THEN 'U' END) AS PCTP_ELAPSD_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1012' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1012' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1012' AND EXEC_DBID IS NULL THEN 'U' END) AS DISK_SORT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1013' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1013' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1013' AND EXEC_DBID IS NULL THEN 'U' END) AS SPU_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1014' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1014' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1014' AND EXEC_DBID IS NULL THEN 'U' END) AS RLR_GRADE
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A 
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
							, D.DBID EXEC_DBID, D.CHECK_DT
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = #{check_day}
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = #{check_day}
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_PREF_ID IN ('1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014')
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
	</select>
	
	<select id="diagnosisResultSummarySpace" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.diagnosisResultSummarySpace */
		/*
		 17-3. SPACE 진단결과 요약
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
			AND UDP.DBID = #{dbid}
		)
		SELECT CASE WHEN A.FRA_STE_GRADE IN ('2', '3') THEN 'C'
					WHEN A.FRA_STE_GRADE = '1' THEN 'W'
					WHEN A.FRA_STE_GRADE = '0' THEN 'I'
					WHEN A.FRA_STE_GRADE = '-1' THEN 'N'
					WHEN A.FRA_STE_GRADE = 'U' THEN 'U'
				END FRA_STE_GRADE                        /* FRA SPACE THRESHOLD EXCEEDED */
				, CASE WHEN A.ASM_DSTE_GRADE IN ('2', '3') THEN 'C'
					WHEN A.ASM_DSTE_GRADE = '1' THEN 'W'
					WHEN A.ASM_DSTE_GRADE = '0' THEN 'I'
					WHEN A.ASM_DSTE_GRADE = '-1' THEN 'N'
					WHEN A.ASM_DSTE_GRADE = 'U' THEN 'U'
				END ASM_DSTE_GRADE                       /* ASM DISKGROUP SPACE THRESHOLD EXCEEDED */
				, CASE WHEN A.TABLESPACE_TE_GRADE IN ('2', '3') THEN 'C'
					WHEN A.TABLESPACE_TE_GRADE = '1' THEN 'W'
					WHEN A.TABLESPACE_TE_GRADE = '0' THEN 'I'
					WHEN A.TABLESPACE_TE_GRADE = '-1' THEN 'N'
					WHEN A.TABLESPACE_TE_GRADE = 'U' THEN 'U'
				END TABLESPACE_TE_GRADE                  /* TABLESPACE THRESHOLD EXCEEDED */
				, CASE WHEN A.RECYCLEBIN_OBJECT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.RECYCLEBIN_OBJECT_GRADE = '1' THEN 'W'
					WHEN A.RECYCLEBIN_OBJECT_GRADE = '0' THEN 'I'
					WHEN A.RECYCLEBIN_OBJECT_GRADE = '-1' THEN 'N'
					WHEN A.RECYCLEBIN_OBJECT_GRADE = 'U' THEN 'U'
				END RECYCLEBIN_OBJECT_GRADE            /* RECYCLEBIN OBJECT */
		FROM (
			SELECT DBID
				, MAX(CASE WHEN CHECK_PREF_ID = '1022' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1022' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1022' AND EXEC_DBID IS NULL THEN 'U' END) AS FRA_STE_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1023' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1023' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1023' AND EXEC_DBID IS NULL THEN 'U' END) AS ASM_DSTE_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1024' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1024' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1024' AND EXEC_DBID IS NULL THEN 'U' END) AS TABLESPACE_TE_GRADE 
				, MAX(CASE WHEN CHECK_PREF_ID = '1025' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1025' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1025' AND EXEC_DBID IS NULL THEN 'U' END) AS RECYCLEBIN_OBJECT_GRADE
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A 
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
							, D.DBID EXEC_DBID, D.CHECK_DT
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = #{check_day}
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = #{check_day}
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_PREF_ID IN ('1022', '1023', '1024', '1025')
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
	</select>
	
	<select id="diagnosisResultSummaryObject" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.diagnosisResultSummaryObject */
		/*
		 17-4. OBJECT 진단결과 요약
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
			AND UDP.DBID = #{dbid}
		)
		SELECT CASE WHEN A.INVALID_OBJECT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.INVALID_OBJECT_GRADE = '1' THEN 'W'
					WHEN A.INVALID_OBJECT_GRADE = '0' THEN 'I'
					WHEN A.INVALID_OBJECT_GRADE = '-1' THEN 'N'
					WHEN A.INVALID_OBJECT_GRADE = 'U' THEN 'U'
				END INVALID_OBJECT_GRADE              /* INVALID OBJECT */
				, CASE WHEN A.NOLOGGING_OBJECT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.NOLOGGING_OBJECT_GRADE = '1' THEN 'W'
					WHEN A.NOLOGGING_OBJECT_GRADE = '0' THEN 'I'
					WHEN A.NOLOGGING_OBJECT_GRADE = '-1' THEN 'N'
					WHEN A.NOLOGGING_OBJECT_GRADE = 'U' THEN 'U'
				END NOLOGGING_OBJECT_GRADE           /* NOLOGGING OBJECT */   
				, CASE WHEN A.PARALLEL_OBJECT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.PARALLEL_OBJECT_GRADE = '1' THEN 'W'
					WHEN A.PARALLEL_OBJECT_GRADE = '0' THEN 'I'
					WHEN A.PARALLEL_OBJECT_GRADE = '-1' THEN 'N'
					WHEN A.PARALLEL_OBJECT_GRADE = 'U' THEN 'U'
				END PARALLEL_OBJECT_GRADE             /* PARALLEL OBJECT */
				, CASE WHEN A.UNUSABLE_INDEX_GRADE IN ('2', '3') THEN 'C'
					WHEN A.UNUSABLE_INDEX_GRADE = '1' THEN 'W'
					WHEN A.UNUSABLE_INDEX_GRADE = '0' THEN 'I'
					WHEN A.UNUSABLE_INDEX_GRADE = '-1' THEN 'N'
					WHEN A.UNUSABLE_INDEX_GRADE = 'U' THEN 'U'
				END UNUSABLE_INDEX_GRADE             /* UNUSABLE INDEX */ 
				, CASE WHEN A.CHAINED_ROWS_GRADE IN ('2', '3') THEN 'C'
					WHEN A.CHAINED_ROWS_GRADE = '1' THEN 'W'
					WHEN A.CHAINED_ROWS_GRADE = '0' THEN 'I'
					WHEN A.CHAINED_ROWS_GRADE = '-1' THEN 'N'
					WHEN A.CHAINED_ROWS_GRADE = 'U' THEN 'U'
				END CHAINED_ROWS_GRADE               /* CHAINED ROWS */ 
				, CASE WHEN A.CORRUPT_BLOCK_GRADE IN ('2', '3') THEN 'C'
					WHEN A.CORRUPT_BLOCK_GRADE = '1' THEN 'W'
					WHEN A.CORRUPT_BLOCK_GRADE = '0' THEN 'I'
					WHEN A.CORRUPT_BLOCK_GRADE = '-1' THEN 'N'
					WHEN A.CORRUPT_BLOCK_GRADE = 'U' THEN 'U'
				END CORRUPT_BLOCK_GRADE             /* CORRUPT BLOCK */
				, CASE WHEN A.SEQUENCE_TE_GRADE IN ('2', '3') THEN 'C'
					WHEN A.SEQUENCE_TE_GRADE = '1' THEN 'W'
					WHEN A.SEQUENCE_TE_GRADE = '0' THEN 'I'
					WHEN A.SEQUENCE_TE_GRADE = '-1' THEN 'N'
					WHEN A.SEQUENCE_TE_GRADE = 'U' THEN 'U'
				END SEQUENCE_TE_GRADE              /* SEQUENCE THRESHOLD EXCEEDED */
				, CASE WHEN A.FOREIGN_KWI_GRADE IN ('2', '3') THEN 'C'
					WHEN A.FOREIGN_KWI_GRADE = '1' THEN 'W'
					WHEN A.FOREIGN_KWI_GRADE = '0' THEN 'I'
					WHEN A.FOREIGN_KWI_GRADE = '-1' THEN 'N'
					WHEN A.FOREIGN_KWI_GRADE = 'U' THEN 'U'
				END FOREIGN_KWI_GRADE             /* FOREIGN KEYS WITHOUT INDEX */
				, CASE WHEN A.DISABLED_CONSTRAINT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.DISABLED_CONSTRAINT_GRADE = '1' THEN 'W'
					WHEN A.DISABLED_CONSTRAINT_GRADE = '0' THEN 'I'
					WHEN A.DISABLED_CONSTRAINT_GRADE = '-1' THEN 'N'
					WHEN A.DISABLED_CONSTRAINT_GRADE = 'U' THEN 'U'
				END DISABLED_CONSTRAINT_GRADE     /* DISABLED CONSTRAINT */
		FROM (
			SELECT DBID
				, MAX(CASE WHEN CHECK_PREF_ID = '1026' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD
					WHEN CHECK_PREF_ID = '1026' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1026' AND EXEC_DBID IS NULL THEN 'U' END) AS INVALID_OBJECT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1027' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1027' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1027' AND EXEC_DBID IS NULL THEN 'U' END) AS NOLOGGING_OBJECT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1028' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1028' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1028' AND EXEC_DBID IS NULL THEN 'U' END) AS PARALLEL_OBJECT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1029' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1029' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1029' AND EXEC_DBID IS NULL THEN 'U' END) AS UNUSABLE_INDEX_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1030' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1030' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1030' AND EXEC_DBID IS NULL THEN 'U' END) AS CHAINED_ROWS_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1031' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1031' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1031' AND EXEC_DBID IS NULL THEN 'U' END) AS CORRUPT_BLOCK_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1032' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1032' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1032' AND EXEC_DBID IS NULL THEN 'U' END) AS SEQUENCE_TE_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1033' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1033' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1033' AND EXEC_DBID IS NULL THEN 'U' END) AS FOREIGN_KWI_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1045' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1045' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1045' AND EXEC_DBID IS NULL THEN 'U' END) AS DISABLED_CONSTRAINT_GRADE
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A 
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
							, D.DBID EXEC_DBID, D.CHECK_DT
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = #{check_day}
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = #{check_day}
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_PREF_ID IN ('1026', '1027', '1028', '1029', '1030', '1031', '1032', '1033', '1045')
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
	</select>
	
	<select id="diagnosisResultSummaryStatistics" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.diagnosisResultSummaryStatistics */
		/*
		 17-5. STATISTICS 진단결과 요약
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
			AND UDP.DBID = #{dbid}
		)
		SELECT CASE WHEN A.MISSING_OSS_GRADE IN ('2', '3') THEN 'C'
					WHEN A.MISSING_OSS_GRADE = '1' THEN 'W'
					WHEN A.MISSING_OSS_GRADE = '0' THEN 'I'
					WHEN A.MISSING_OSS_GRADE = '-1' THEN 'N'
					WHEN A.MISSING_OSS_GRADE = 'U' THEN 'U'
				END MISSING_OSS_GRADE              /* MISSING OR STALE STATISTICS */
			, CASE WHEN A.STATISTICS_LT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.STATISTICS_LT_GRADE = '1' THEN 'W'
					WHEN A.STATISTICS_LT_GRADE = '0' THEN 'I'
					WHEN A.STATISTICS_LT_GRADE = '-1' THEN 'N'
					WHEN A.STATISTICS_LT_GRADE = 'U' THEN 'U'
			END STATISTICS_LT_GRADE           /* STATISTICS LOCKED TABLE */
		FROM (
			SELECT DBID
				, MAX(CASE WHEN CHECK_PREF_ID = '1034' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1034' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1034' AND EXEC_DBID IS NULL THEN 'U' END) AS MISSING_OSS_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1035' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1035' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1035' AND EXEC_DBID IS NULL THEN 'U' END) AS STATISTICS_LT_GRADE
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A 
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
							, D.DBID EXEC_DBID, D.CHECK_DT
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = #{check_day}
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = #{check_day}
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_PREF_ID IN ('1034', '1035')
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
	</select>
	
	<select id="diagnosisResultSummaryLongRunningWork" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.diagnosisResultSummaryLongRunningWork */
		/*
		 17-6. LONG RUNNING WORK 진단결과 요약
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
			AND UDP.DBID = #{dbid}
		)
		SELECT CASE WHEN A.LONG_RUNNING_OPERATION_GRADE IN ('2', '3') THEN 'C'
					WHEN A.LONG_RUNNING_OPERATION_GRADE = '1' THEN 'W'
					WHEN A.LONG_RUNNING_OPERATION_GRADE = '0' THEN 'I'
					WHEN A.LONG_RUNNING_OPERATION_GRADE = '-1' THEN 'N'
					WHEN A.LONG_RUNNING_OPERATION_GRADE = 'U' THEN 'U'
				END LONG_RUNNING_OPERATION_GRADE              /* LONG RUNNING OPERATION GRADE */
			, CASE WHEN A.LONG_RUNNING_JOB_GRADE IN ('2', '3') THEN 'C'
				WHEN A.LONG_RUNNING_JOB_GRADE = '1' THEN 'W'
				WHEN A.LONG_RUNNING_JOB_GRADE = '0' THEN 'I'
				WHEN A.LONG_RUNNING_JOB_GRADE = '-1' THEN 'N'
				WHEN A.LONG_RUNNING_JOB_GRADE = 'U' THEN 'U'
			END LONG_RUNNING_JOB_GRADE           /* LONG RUNNING JOB GRADE */
		FROM (
			SELECT DBID
				, MAX(CASE WHEN CHECK_PREF_ID = '1036' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1036' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1036' AND EXEC_DBID IS NULL THEN 'U' END) AS LONG_RUNNING_OPERATION_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1037' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
						WHEN CHECK_PREF_ID = '1037' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
						WHEN CHECK_PREF_ID = '1037' AND EXEC_DBID IS NULL THEN 'U' END) AS LONG_RUNNING_JOB_GRADE
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A 
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
							, D.DBID EXEC_DBID, D.CHECK_DT
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = #{check_day}
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = #{check_day}
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_PREF_ID IN ('1036', '1037')
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
	</select>
	
	<select id="diagnosisResultSummaryAlert" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.diagnosisResultSummaryAlert */
		/*
		 17-7. ALERT 진단결과 요약
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
			AND UDP.DBID = #{dbid}
		)
		SELECT CASE WHEN A.ALERT_LOG_ERROR_GRADE IN ('2', '3') THEN 'C'
					WHEN A.ALERT_LOG_ERROR_GRADE = '1' THEN 'W'
					WHEN A.ALERT_LOG_ERROR_GRADE = '0' THEN 'I'
					WHEN A.ALERT_LOG_ERROR_GRADE = '-1' THEN 'N'
					WHEN A.ALERT_LOG_ERROR_GRADE = 'U' THEN 'U'
				END ALERT_LOG_ERROR_GRADE              /* ALERT LOG ERROR GRADE */
				, CASE WHEN A.ACTIVE_INCIDENT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.ACTIVE_INCIDENT_GRADE = '1' THEN 'W'
					WHEN A.ACTIVE_INCIDENT_GRADE = '0' THEN 'I'
					WHEN A.ACTIVE_INCIDENT_GRADE = '-1' THEN 'N'
					WHEN A.ACTIVE_INCIDENT_GRADE = 'U' THEN 'U'
				END ACTIVE_INCIDENT_GRADE           /* ACTIVE INCIDENT GRADE */
				, CASE WHEN A.OUTSTANDING_ALERT_GRADE IN ('2', '3') THEN 'C'
					WHEN A.OUTSTANDING_ALERT_GRADE = '1' THEN 'W'
					WHEN A.OUTSTANDING_ALERT_GRADE = '0' THEN 'I'
					WHEN A.OUTSTANDING_ALERT_GRADE = '-1' THEN 'N'
					WHEN A.OUTSTANDING_ALERT_GRADE = 'U' THEN 'U'
				END OUTSTANDING_ALERT_GRADE             /* OUTSTANDING ALERT GRADE */
				, CASE WHEN A.DBMS_SCHEDULER_FAILED_GRADE IN ('2', '3') THEN 'C'
					WHEN A.DBMS_SCHEDULER_FAILED_GRADE = '1' THEN 'W'
					WHEN A.DBMS_SCHEDULER_FAILED_GRADE = '0' THEN 'I'
					WHEN A.DBMS_SCHEDULER_FAILED_GRADE = '-1' THEN 'N'
					WHEN A.DBMS_SCHEDULER_FAILED_GRADE = 'U' THEN 'U'
				END DBMS_SCHEDULER_FAILED_GRADE        /* DBMS SCHEDULER JOB FAILED */
		FROM (
			SELECT DBID
				, MAX(CASE WHEN CHECK_PREF_ID = '1015' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1015' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1015' AND EXEC_DBID IS NULL THEN 'U' END) AS ALERT_LOG_ERROR_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1016' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1016' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1016' AND EXEC_DBID IS NULL THEN 'U' END) AS ACTIVE_INCIDENT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1017' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1017' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1017' AND EXEC_DBID IS NULL THEN 'U' END) AS OUTSTANDING_ALERT_GRADE
				, MAX(CASE WHEN CHECK_PREF_ID = '1018' AND CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD 
					WHEN CHECK_PREF_ID = '1018' AND CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
					WHEN CHECK_PREF_ID = '1018' AND EXEC_DBID IS NULL THEN 'U' END) AS DBMS_SCHEDULER_FAILED_GRADE
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A 
					LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
							, D.DBID EXEC_DBID, D.CHECK_DT
						FROM BASIC_CHECK_CONFIG A
							, DB_CHECK_SUMMARY C
							, (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
								FROM DB_CHECK_EXEC 
								WHERE CHECK_DAY = #{check_day}
								GROUP BY DBID
							)  D
						WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND C.CHECK_DAY = #{check_day}
						AND C.CHECK_DAY = D.CHECK_DAY
						AND C.CHECK_SEQ = D.CHECK_SEQ
						AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
						AND A.CHECK_PREF_ID IN ('1015', '1016', '1017', '1018')
					) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID
		) A
	</select>
	
	<select id="databaseStatus" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.databaseStatus */
		/* --[DB상태점검-DATABASE_STATUS]; 금수정-DBID, DB_NAME 제거 , 문제 발생건만 나오도록 수정 */
		SELECT INST_ID
			, LOG_MODE
			, OPEN_MODE
			, PLATFORM_NAME
		FROM DATABASE_DSB_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND OPEN_MODE <![CDATA[<]]>> 'READ WRITE'
		ORDER BY INST_ID
	</select>
	
	<select id="expiredGraceAccount" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.expiredGraceAccount */
		/* --[DB상태점검-EXPIRED_GRACE_ACCOUNT]; 금수정: ORDER BY 추가 */
		SELECT USERNAME
			, ACCOUNT_STATUS
			, EXPIRY_DATE
			, CREATED AS CREATED_DATE
			, PASSWORD_EXPIRY_REMAIN_TIME
			, PASSWORD_GRACE_TIME
		FROM DB_USER_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY USERNAME
	</select>
	
	<select id="modifiedParameter" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.modifiedParameter */
		/* --[DB상태점검-MODIFIED_PARAMETER]; 금수정: ISDEFAULT, ISDEPRECATED 항목 제거, ORDER BY 추가, 변경전 VALUE, 변경후 VALUE, 변경일시 추가 */
		SELECT INST_ID
			, NUM
			, NAME
			, BEFORE_VALUE                                              /* 변경전 VALUE */
			, VALUE                                                     /* 변경후 VALUE */
			, TO_CHAR(CHG_DT, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE   /* 변경일시     */
		FROM PARAMETER_CHANGE_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, NUM
	</select>
	
	<select id="newCreatedObject" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.newCreatedObject */
		/* --[DB상태점검-NEW_CREATED_OBJECT]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, OBJECT_NAME
			, SUBOBJECT_NAME
			, OBJECT_TYPE
			, CREATED AS CREATED_DATE
			, LAST_DDL_TIME
		FROM NEW_CREATE_OBJECT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, OBJECT_NAME, SUBOBJECT_NAME
	</select>
	
	<select id="instanceStatus" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.instanceStatus */
		/* --[DB상태점검-INSTANCE_STATUS]; 금수정: ORDER BY 추가 */
		SELECT INST_ID
			, INST_NM
			, HOST_NM
			, VERSION
			, STARTUP_TIME
			, UP_TIME
			, STATUS
			, ARCHIVER
		FROM INSTANCE_DSB_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND STATUS <![CDATA[<]]>> 'OPEN'
		ORDER BY INST_ID
	</select>
	
	<select id="listenerStatus" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.listenerStatus */
		/* --[DB상태점검-LISTENER_STATUS]; 금수정: ORDER BY 추가 */
		SELECT INST_ID
			, LISTENER_NM
			, STATUS
		FROM LISTENER_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND STATUS <![CDATA[<]]>> 'NORMAL'
		ORDER BY INST_ID, LISTENER_NM
	</select>
	
	<select id="dbfiles" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.dbfiles */
		/* --[DB상태점검-DBFILES]; 금수정: CREATED(%) 항목 추가, EFFICIENCY_YN 항목 삭제, ORDER BY 추가, 현재는 문제가 없어도 조회되나 문제 발생건만 나오도록 수정됨 */
		SELECT INST_ID
			, PARAM_DB_FILE_CNT
			, CREATE_DB_FILE_CNT
			, ROUND((CREATE_DB_FILE_CNT/PARAM_DB_FILE_CNT*100), 2) CREATED_PERCENT
		FROM DB_FILE_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1006'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND (CREATE_DB_FILE_CNT/PARAM_DB_FILE_CNT*100) > B.THRESHOLD_VALUE
		ORDER BY INST_ID
	</select>
	
	<select id="resourceLimit" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.resourceLimit */
		/* --[DB상태점검-RESOURCE_LIMIT]; 금수정: ORDER BY 추가 */
		SELECT A.INST_ID
			, RESOURCE_NM
			, MAX_UTILIZATION
			, LIMIT_VALUE
			, UTILIZATION_PERCENT
		FROM RESOURCE_LIMIT_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1014'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.UTILIZATION_PERCENT > B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="libraryCacheHit" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.libraryCacheHit */
		/* --[DB상태점검-LIBRARY_CACHE_HIT]; 금수정: INST_EFFICIENCY_YN 항목 삭제, ORDER BY 추가 */
		SELECT A.INST_ID
			, ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE
			, B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1007'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}	
		AND A.INST_EFFICIENCY_TYPE_CD = '01'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY INST_ID
	</select>
	
	<select id="dictionaryCacheHit" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.dictionaryCacheHit */
		/* --[DB상태점검-DICTIONARY_CACHE_HIT]; 금수정: INST_EFFICIENCY_YN 항목 삭제, ORDER BY 추가 */
		SELECT A.INST_ID
			, ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE
			, B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1008'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '02'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="bufferCacheHit" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.bufferCacheHit */
		/* --[DB상태점검-BUFFER_CACHE_HIT]; 금수정: INST_EFFICIENCY_YN 항목 삭제, ORDER BY 추가 */
		SELECT A.INST_ID
			, ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE
			, B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1009'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '03'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="latchHit" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.latchHit */
		/* --[DB상태점검-LATCH_HIT]; 금수정: INST_EFFICIENCY_YN 항목 삭제, ORDER BY 추가 */
		SELECT A.INST_ID
			, ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE
			, B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A
			, (
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1010'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '04'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="parseCpuToParseElapsd" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.parseCpuToParseElapsd */
		/* --[DB상태점검-PARSE_CPU_TO_PARSE_ELAPSD]; 금수정: INST_EFFICIENCY_YN 항목 삭제, ORDER BY 추가 */
		SELECT A.INST_ID
			, ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE
			, B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1011'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '05'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="diskSort" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.diskSort */
		/* --[DB상태점검-DISK_SORT]; 금수정: INST_EFFICIENCY_YN 항목 삭제, ORDER BY 추가 */
		SELECT A.INST_ID
			, ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE
			, B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A
			, (
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1012'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '06'
		AND A.INST_EFFICIENCY_VALUE > B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="memoryUsage" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.memoryUsage */
		/* --[DB상태점검-MEMORY_USAGE]; 금수정: INST_EFFICIENCY_YN 항목 삭제, ORDER BY 추가 */
		SELECT A.INST_ID
			, ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE
			, B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1013'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ =  #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '07'
		AND A.INST_EFFICIENCY_VALUE > B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="archiveLogSpace" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.archiveLogSpace */
		/* --[DB상태점검-ARCHIVE_LOG_SPACE];금수정: 그리드 항목명 변경-SQL절 주석 참조, TOTAL_SPACE_SIZE, SPACE_USED GB 단위로 변경, DB당 1개 가지고 오도록 수정, INST_ID 항목 삭제 */
		SELECT ROUND((A.TOTAL_SPACE_SIZE/1024/1024/1024), 2) TOTAL_SPACE_SIZE    /* TOTAL_SPACE(GB) */
			, ROUND((A.SPACE_USED/1024/1024/1024), 2) SPACE_USED                /* SPACE_USED(GB)  */
			, A.SPACE_USED_PERCENT                                              /* SPACE_USED(%)   */
			, B.THRESHOLD_PERCENT                                               /* THRESHOLD(%)    */
		FROM FILESYSTEM_SPACE_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1020'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ =  #{check_seq}
		AND A.DBID = #{dbid}
		AND A.FILESYSTEM_TYPE_CD = '2'
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
		AND A.INST_ID = 1
	</select>
	
	<select id="backgroundDumpSpace" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.backgroundDumpSpace */
		/* --[DB상태점검-BACKGROUND_DUMP_SPACE]; 금수정: 그리드 항목명 변경-SQL절 주석 참조, TOTAL_SPACE_SIZE, SPACE_USED GB 단위로 변경, ORDER BY 추가 */
		SELECT A.INST_ID                                                         /* INST_ID         */
			, ROUND((A.TOTAL_SPACE_SIZE/1024/1024/1024), 2) TOTAL_SPACE_SIZE    /* TOTAL_SPACE(GB) */
			, ROUND((A.SPACE_USED/1024/1024/1024), 2) SPACE_USED                /* SPACE_USED(GB)  */
			, A.SPACE_USED_PERCENT                                              /* SPACE_USED(%)   */
			, B.THRESHOLD_PERCENT                                               /* THRESHOLD(%)    */
		FROM FILESYSTEM_SPACE_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1019'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.FILESYSTEM_TYPE_CD = '1' 
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
		ORDER BY A.INST_ID
	</select>
	
	<select id="alertLogSpace" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.alertLogSpace */
		/* --[DB상태점검-ALERT_LOG_SPACE]; 금수정: ORDER BY 추가 */
		SELECT A.INST_ID                                                         /* INST_ID         */
			, ROUND((A.TOTAL_SPACE_SIZE/1024/1024/1024), 2) TOTAL_SPACE_SIZE    /* TOTAL_SPACE(GB) */
			, ROUND((A.SPACE_USED/1024/1024/1024), 2) SPACE_USED                /* SPACE_USED(GB)  */
			, A.SPACE_USED_PERCENT                                              /* SPACE_USED(%)   */
			, B.THRESHOLD_PERCENT                                               /* THRESHOLD(%)    */
		FROM FILESYSTEM_SPACE_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1021'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.FILESYSTEM_TYPE_CD = '3'
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
		ORDER BY A.INST_ID
	</select>
	
	<select id="fraSpaceFraFiles" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.fraSpaceFraFiles */
		/* --[DB상태점검-FRA_SPACE]; 금수정: DB당 1개 가지고 오도록 수정, INST_ID 항목 삭제, 그리드 항목명 변경, GB 단위로 변경 SPACE_LIMIT, SPACE_USED */
		SELECT A.NAME                                /* NAME            */
			, A.NUMBER_OF_FILES                     /* NUMBER_OF_FILES */
			, ROUND((A.SPACE_LIMIT/1024/1024/1024), 2) TOTAL_SPACE /* TOTAL_SPACE(GB) */
			, ROUND((A.SPACE_USED/1024/1024/1024), 2) SPACE_USED   /* SPACE_USED(GB) */
			, A.SPACE_RECLAIMABLE                   /* SPACE_RECLAIMABLE     */
			, A.CLAIM_BEFORE_USAGE_PERCENT          /* CLAIM_BEFORE_USAGE(%) */
			, A.CLAIM_AFTER_USAGE_PERCENT           /* CLAIM_AFTER_USAGE(%)  */
			, B.THRESHOLD_PERCENT                   /* THRESHOLD(%)          */
		FROM FRA_SPACE_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1022'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.CLAIM_BEFORE_USAGE_PERCENT > B.THRESHOLD_PERCENT
		AND INST_ID = 1
	</select>
	
	<select id="fraSpaceFraUsage" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.fraSpaceFraUsage */
		/* --[DB상태점검-FRA_SPACE-FRA USAGE];  금수정: DB당 1개 가지고 오도록 수정, INST_ID 항목 삭제 */
		SELECT FILE_TYPE                        /* FILE_TYPE            */
			, PERCENT_SPACE_USED               /* SPACE_USED(%)        */
			, PERCENT_SPACE_RECLAIMABLE        /* SPACE_RECLAIMABLE(%) */
			, NUMBER_OF_FILES                  /* NUMBER_OF_FILES      */
		FROM FRA_SPACE_USAGE A
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND INST_ID = 1
		AND 0 <![CDATA[<]]>> (SELECT COUNT(*)
					FROM FRA_SPACE_CHECK A, 
						(SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
							FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
							WHERE A.CHECK_PREF_ID = '1022'
							AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
							AND B.DBID (+)= #{dbid}
						) B
					WHERE A.CHECK_DAY = #{check_day}
					AND A.CHECK_SEQ = #{check_seq}
					AND A.DBID = #{dbid}
					AND A.CLAIM_BEFORE_USAGE_PERCENT > B.THRESHOLD_PERCENT
					AND INST_ID = 1
				)
	</select>
	
	<select id="asmDiskgroupSpace" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.asmDiskgroupSpace */
		/* --[DB상태점검-ASM_DISKGROUP_SPACE]; 금수정: DB당 1개 가지고 오도록 수정, INST_ID 항목 삭제, 그리드 항목명 변경, GB 단위로 변경-TOTOAL_SPACE, FREE_SPACE */
		SELECT A.NAME
			, A.GROUP_NUMBER
			, A.STATE
			, ROUND(A.TOTAL_MB/1024, 2) TOTAL_SPACE  /* TOTAL_SPACE(GB) */
			, ROUND(A.FREE_MB/1024, 2) FREE_SPACE     /* FREE_SPACE(GB)   */
			, A.SPACE_USED_PERCENT                    /* SPACE_USED(%)    */
			, B.THRESHOLD_PERCENT                     /* THRESHOLD(%)     */
		FROM ASM_DISKGROUP_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1023'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
		AND A.INST_ID = 1
	</select>
	
	<select id="tablespace" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.tablespace */
		/* --[DB상태점검-TABLESPACE]; 금수정: ORDER BY 추가 */
		SELECT TABLESPACE_NAME
			, ROUND((SPACE_USED/1024), 2)  SPACE_USED /* SPACE_USED(GB) */
			, ROUND((TABLESPACE_SIZE/1024), 2) TABLESPACE_SIZE /* TABLESPACE_SIZE(GB) */
			, SPACE_USED_PERCENT            /* SPACE_USED(%)    */
			, B.THRESHOLD_PERCENT           /* THRESHOLD(%)     */
		FROM TABLESPACE_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1024'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
		ORDER BY TABLESPACE_NAME
	</select>
	
	<select id="recyclebinObject" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.recyclebinObject */
		/* --[DB상태점검-RECYCLEBIN_OBJECT]; 금수정: ORDER BY 추가, SPACE_USED -> GB로 변경, "SPACE_USED(GB)" 항목명 변경 */
		SELECT OWNER
			, OBJECT_NAME
			, ORIGINAL_NAME
			, OPERATION
			, TYPE
			, TS_NAME
			, CREATETIME
			, DROPTIME
			, SPACE AS BLOCKS
			, ROUND(SPACE_USED/1024, 2) AS SPACE_USED      /* SPACE_USED(GB) */
		FROM RECYCLEBIN_CHECK
		WHERE CHECK_DAY = #{check_day}
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, ORIGINAL_NAME
	</select>
	
	<select id="invalidObject" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.invalidObject */
		/* --[DB상태점검-INVALID_OBJECT]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, OBJECT_NAME
			, OBJECT_TYPE
			, (CASE WHEN OBJECT_TYPE LIKE '%PACKAGE%' THEN 'ALTER PACKAGE '||OWNER||'.'||OBJECT_NAME||' COMPILE;'
					WHEN OBJECT_TYPE LIKE '%TYPE%' THEN 'ALTER TYPE '||OWNER||'.'||OBJECT_NAME||' COMPILE SPECIFICATION;'
					WHEN OBJECT_TYPE ='SYNONYM' THEN 'ALTER PUBLIC SYNONYM '||OBJECT_NAME||' COMPILE;'
					WHEN OBJECT_TYPE NOT IN ('PACKAGE','PACKAGE BODY','SYNONYM','TYPE','TYPE BODY') THEN 'ALTER '||OBJECT_TYPE||' '||OWNER||'.'||OBJECT_NAME||' COMPILE;'
				END) SCRIPT
		FROM OBJECT_CHECK
		WHERE CHECK_DAY = #{check_day}
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND OBJECT_CHECK_TYPE_CD = '1'
		ORDER BY OWNER, OBJECT_NAME
	</select>
	
	<select id="nologgingObject" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.nologgingObject */
		/* --[DB상태점검-NOLOGGING_OBJECT]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, OBJECT_NAME
			, OBJECT_TYPE
			, PARTITION_NAME
			, SUBPARTITION_NAME
			, (CASE 
					WHEN OBJECT_TYPE LIKE 'TABLE%' THEN 
						CASE 
							WHEN SUBPARTITION_NAME IS NOT NULL THEN 'ALTER TABLE ' || OWNER || '.' || OBJECT_NAME || ' MODIFY SUBPARTITION '|| SUBPARTITION_NAME ||' LOGGING;'
							WHEN PARTITION_NAME IS NOT NULL THEN 'ALTER TABLE ' || OWNER || '.' || OBJECT_NAME || ' MODIFY PARTITION '|| PARTITION_NAME ||' LOGGING;'
							ELSE 'ALTER TABLE '||OWNER||'.'||OBJECT_NAME||' LOGGING;'
						END
					WHEN OBJECT_TYPE LIKE 'INDEX%' THEN 
						CASE 
							WHEN SUBPARTITION_NAME IS NOT NULL THEN 'ALTER INDEX ' || OWNER || '.' || OBJECT_NAME || ' MODIFY SUBPARTITION '|| SUBPARTITION_NAME ||' LOGGING;'
							WHEN PARTITION_NAME IS NOT NULL THEN 'ALTER INDEX ' || OWNER || '.' || OBJECT_NAME || ' MODIFY PARTITION '|| PARTITION_NAME ||' LOGGING;'
							ELSE 'ALTER INDEX '||OWNER||'.'||OBJECT_NAME||' LOGGING;'
						END
				END) SCRIPT
		FROM OBJECT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND OBJECT_CHECK_TYPE_CD = '2'
		ORDER BY OWNER, OBJECT_NAME, PARTITION_NAME, SUBPARTITION_NAME
	</select>
	
	<select id="parallelObject" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.parallelObject */
		/* --[DB상태점검-PARALLEL_OBJECT]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, OBJECT_NAME
			, OBJECT_TYPE
			, PARTITION_NAME
			, SUBPARTITION_NAME
			, (CASE 
					WHEN OBJECT_TYPE LIKE 'TABLE%' THEN 
						CASE 
							WHEN SUBPARTITION_NAME IS NOT NULL THEN 'ALTER TABLE ' || OWNER || '.' || OBJECT_NAME || ' MOVE SUBPARTITION '|| SUBPARTITION_NAME ||' NOPARALLEL;'
							WHEN PARTITION_NAME IS NOT NULL THEN 'ALTER TABLE ' || OWNER || '.' || OBJECT_NAME || ' MOVE PARTITION '|| PARTITION_NAME ||' NOPARALLEL;'
							ELSE 'ALTER TABLE '||OWNER||'.'||OBJECT_NAME||' NOPARALLEL;'
						END
					WHEN OBJECT_TYPE LIKE 'INDEX%' THEN 
						CASE 
							WHEN SUBPARTITION_NAME IS NOT NULL THEN 'ALTER INDEX ' || OWNER || '.' || OBJECT_NAME || ' MOVE SUBPARTITION '|| SUBPARTITION_NAME ||' NOPARALLEL;'
							WHEN PARTITION_NAME IS NOT NULL THEN 'ALTER INDEX ' || OWNER || '.' || OBJECT_NAME || ' MOVE PARTITION '|| PARTITION_NAME ||' NOPARALLEL;'
							ELSE 'ALTER INDEX '||OWNER||'.'||OBJECT_NAME||' NOPARALLEL;'
						END
				END) SCRIPT
		FROM OBJECT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND OBJECT_CHECK_TYPE_CD = '3'
		ORDER BY OWNER, OBJECT_NAME, PARTITION_NAME, SUBPARTITION_NAME
	</select>
	
	<select id="unusableIndex" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.unusableIndex */
		/* --[DB상태점검-UNUSABLE_INDEX]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, TABLE_NAME
			, INDEX_NAME
			, 'ALTER INDEX '||OWNER||'.'||INDEX_NAME||' REBUILD;' SCRIPT
		FROM UNUSABLE_INDEX_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, INDEX_NAME
	</select>
	
	<select id="corruptBlock" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.corruptBlock */
		/* --[DB상태점검-CORRUPT_BLOCK]; 금수정: DB당 1개 가지고 오도록 수정, INST_ID 항목 삭제, ORDER BY 추가 */
		SELECT FILE# AS FILE_NUMBER
			, FILE_NAME
			, BLOCK# AS BLOCK_NUMBER
			, BLOCKS
			, CORRUPTION_CHANGE# AS CORRUPTION_CHANGE_NUMBER
			, CORRUPTION_TYPE 
		FROM BLOCK_CORRUPTION_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND INST_ID = 1
		ORDER BY INST_ID, FILE_NUMBER
	</select>
	
	<select id="sequence" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.sequence */
		/* --[DB상태점검-SEQUENCE]; 금수정: ORDER BY 추가 */
		SELECT SEQUENCE_OWNER
			, SEQUENCE_NAME
			, MIN_VALUE
			, MAX_VALUE
			, INCREMENT_BY
			, CYCLE_FLAG
			, ORDER_FLAG
			, CACHE_SIZE
			, LAST_NUMBER 
		FROM SEQUENCE_CHECK A, 
			(
				SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
				FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
				WHERE A.CHECK_PREF_ID = '1032'
				AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
				AND B.DBID (+)= #{dbid}
			) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.USED_PERCENT > B.THRESHOLD_VALUE
		ORDER BY SEQUENCE_OWNER, SEQUENCE_NAME
	</select>
	
	<select id="foreignkeysWithoutIndex" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.foreignkeysWithoutIndex */
		/* --[DB상태점검-FOREIGNKEYS_WITHOUT_INDEX]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, TABLE_NAME
			, CONSTRAINT_NAME
			, INDEX_COLUMN_NAME 
		FROM FK_INDEX_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, CONSTRAINT_NAME, INDEX_COLUMN_NAME
	</select>
	
	<select id="disabledConstraint" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.disabledConstraint */
		/* --[DB상태점검-DISABLED_CONSTRAINT]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, TABLE_NAME
			, CONSTRAINT_NAME
			, CONSTRAINT_TYPE 
		FROM CONSTRAINT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, CONSTRAINT_NAME
	</select>
	
	<select id="chainedRows" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.chainedRows */
		/* --[DB상태점검-CHAINED_ROWS]; 금수정: ORDER BY 추가, 그리드 항목명 변경 > */ /* CHAIN(%) */
		SELECT OWNER
			, TABLE_NAME
			, TABLESPACE_NAME
			, NUM_ROWS
			, CHAIN_CNT
			, ROUND(CHAIN_PERCENT,2) CHAIN_PERCENT    /* CHAIN(%) */
		FROM CHAINED_ROW_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, TABLESPACE_NAME
	</select>
	
	<select id="missingOrStaleStatistics" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.missingOrStaleStatistics */
		/* --[DB상태점검-MISSING_OR_STALE_STATISTICS]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, TABLE_NAME
			, PARTITION_NAME
			, PARTITIONED
			, TRIM(TO_CHAR(NVL(INSERTS,0), '999,999,999,999,999')) INSERTS
			, TRIM(TO_CHAR(NVL(UPDATES,0), '999,999,999,999,999')) UPDATES
			, TRIM(TO_CHAR(NVL(DELETES,0), '999,999,999,999,999')) DELETES
			, TRUNCATED
			, TO_CHAR(TIMESTAMP,'YYYY-MM-DD HH24:MI:SS') TIMESTAMP
			, NVL(CHANGE_PERCENT,0) CHANGE_PERCENT
			, TRIM(TO_CHAR(NVL(NUM_ROWS,0), '999,999,999,999,999')) NUM_ROWS
			, TO_CHAR(LAST_ANALYZED,'YYYY-MM-DD HH24:MI:SS') LAST_ANALYZED
		FROM TABLE_STATISTICS_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, PARTITION_NAME
	</select>
	
	<select id="statisticsLockedTable" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.statisticsLockedTable */
		/* --[DB상태점검-STATISTICS_LOCKED_TABLE]; 금수정: ORDER BY 추가 */
		SELECT OWNER
			, TABLE_NAME
			, PARTITION_NAME
			, SUBPARTITION_NAME
			, OBJECT_TYPE
			, LAST_ANALYZED
			, STATTYPE_LOCKED 
		FROM TABLE_STATISTICS_LOCK_CHECK
		WHERE CHECK_DAY = #{check_day}
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME
	</select>
	
	<select id="longRunningOperation" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.longRunningOperation */
		/* --[DB상태점검-LONG_RUNNING_OPERATION]; 금수정: ORDER BY 추가 */
		SELECT INST_ID
			, SID
			, SERIAL# AS SERIAL_NUMBER
			, START_TIME
			, LAST_UPDATE_TIME
			, ELAPSED_MINUTE
			, REMAINING_MINUTE
			, DONE_PERCENT
			, MESSAGE
			, SQL_ID
			, SQL_PLAN_HASH_VALUE
			, DBMS_LOB.SUBSTR(SQL_TEXT, 100, 1) AS SQL_TEXT
		FROM LONG_RUNNING_OPERATION_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, SID, SERIAL#
	</select>
	
	<select id="longRunningJob" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.longRunningJob */
		/* --[DB상태점검-LONG_RUNNING_JOB]; 금수정: ORDER BY 추가, 그리드 항목명 변경 > CPU_USED_TIME */
		SELECT SESSION_ID
			, OWNER
			, JOB_NAME
			, ELAPSED_TIME
			, CPU_USED
			, SLAVE_PROCESS_ID
			, RUNNING_INSTANCE 
		FROM LONG_RUNNING_SCHEDULER_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY SESSION_ID, OWNER, JOB_NAME
	</select>
	
	<select id="alertLogError" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.alertLogError */
		/* --[DB상태점검-ALERT_LOG_ERROR];  금수정: ORDER BY 추가 */
		SELECT INST_ID
			, ERROR_CD
			, ERROR_CNT 
		FROM ALERT_ERROR_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, ERROR_CD
	</select>
	
	<select id="activeIncidentProblem" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.activeIncidentProblem */
		/* --[DB상태점검-ACTIVE_INCIDENT-PROBLEM];  금수정: ORDER BY 추가 */
		SELECT INST_ID
			, PROBLEM_ID
			, PROBLEM_KEY
			, FIRST_INCIDENT
			, FIRSTINC_TIME
			, LAST_INCIDENT
			, LASTINC_TIME
			, IMPACT1
			, IMPACT2
			, IMPACT3
			, IMPACT4
			, SERVICE_REQUEST
			, BUG_NUMBER 
		FROM DIAG_PROBLEM A,
			(
				SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
				FROM DB_CHECK_EXEC
				WHERE CHECK_DAY = #{check_day} 
				AND CHECK_SEQ = #{check_seq}
			) B
		WHERE DBID = #{dbid}
		AND LASTINC_TIME > BEGIN_CHECK_DT 
		AND LASTINC_TIME <![CDATA[<]]>= END_CHECK_DT
		ORDER BY INST_ID, PROBLEM_ID
	</select>
	
	<select id="activeIncidentIncident" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.activeIncidentIncident */
		/* --[DB상태점검-ACTIVE_INCIDENT-INCIDENT];  금수정: ORDER BY 추가 */
		SELECT INST_ID
			, INCIDENT_ID
			, PROBLEM_ID
			, CREATE_TIME
			, CLOSE_TIME
			, STATUS
			, FLOOD_CONTROLLED
			, ERROR_FACILITY
			, ERROR_NUMBER
			, ERROR_ARG1
			, ERROR_ARG2
			, ERROR_ARG3
			, ERROR_ARG4
			, ERROR_ARG5
			, ERROR_ARG6
			, ERROR_ARG7
			, ERROR_ARG8
			, ERROR_ARG9
			, ERROR_ARG10
			, ERROR_ARG11
			, ERROR_ARG12
			, SIGNALLING_COMPONENT
			, SIGNALLING_SUBCOMPONENT
			, SUSPECT_COMPONENT
			, SUSPECT_SUBCOMPONENT
			, ECID
			, IMPACT
		FROM DIAG_INCIDENT A,
			(
				SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
				FROM DB_CHECK_EXEC
				WHERE CHECK_DAY = #{check_day} 
				AND CHECK_SEQ = #{check_seq}
			) B
		WHERE DBID = #{dbid}
		AND CREATE_TIME > BEGIN_CHECK_DT 
		AND CREATE_TIME <![CDATA[<]]>= END_CHECK_DT
		ORDER BY INST_ID, INCIDENT_ID
	</select>
	
	<select id="outstandingAlert" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.outstandingAlert */
		/* --[DB상태점검-OUTSTANDING_ALERT];  금수정: ORDER BY 추가 */
		SELECT SEQUENCE_ID
			, REASON_ID
			, OWNER
			, OBJECT_NAME
			, SUBOBJECT_NAME
			, OBJECT_TYPE
			, REASON
			, TIME_SUGGESTED
			, CREATION_TIME
			, SUGGESTED_ACTION
			, ADVISOR_NAME
			, METRIC_VALUE
			, MESSAGE_TYPE
			, MESSAGE_GROUP
			, MESSAGE_LEVEL
			, HOSTING_CLIENT_ID
			, MODULE_ID
			, PROCESS_ID
			, HOST_ID
			, HOST_NW_ADDR
			, INSTANCE_NAME
			, INSTANCE_NUMBER
			, USER_ID
			, EXECUTION_CONTEXT_ID
			, ERROR_INSTANCE_ID 
		FROM OUTSTANDING_ALERTS A,
			(
				SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
				FROM DB_CHECK_EXEC
				WHERE CHECK_DAY = #{check_day} 
				AND CHECK_SEQ = #{check_seq}
			) B
		WHERE DBID = #{dbid}
		AND TIME_SUGGESTED > BEGIN_CHECK_DT 
		AND TIME_SUGGESTED <![CDATA[<]]>= END_CHECK_DT
		ORDER BY SEQUENCE_ID
	</select>
	
	<select id="dbmsSchedulerJobFailed" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.dbmsSchedulerJobFailed */
		/* --[DB상태점검-DBMS_SCHEDULER_JOB_FAILED];  금수정: ORDER BY 추가 */
		SELECT INST_ID
			, LOG_ID
			, LOG_DATE
			, OWNER
			, JOB_NAME
			, JOB_SUBNAME
			, STATUS
			, ERROR# AS ERROR_NUMBER
			, REQ_START_DATE
			, ACTUAL_START_DATE
			, RUN_DURATION
			, SESSION_ID
			, SLAVE_PID
			, CPU_USED
			, CREDENTIAL_OWNER
			, CREDENTIAL_NAME
			, DESTINATION_OWNER
			, DESTINATION
			, ADDITIONAL_INFO
			, ERRORS
			, OUTPUT 
		FROM SCHEDULER_JOB_FAILED_CHECK A,
			(
				SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
				FROM DB_CHECK_EXEC
				WHERE CHECK_DAY = #{check_day} 
				AND CHECK_SEQ = #{check_seq}
			) B
		WHERE DBID = #{dbid}
		AND LOG_DATE > BEGIN_CHECK_DT 
		AND LOG_DATE <![CDATA[<]]>= END_CHECK_DT
		ORDER BY INST_ID, LOG_ID
	</select>
	
	<!-- DB 점검 현황 -->
	<select id="dailyCheckDbSituationTop" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.dailyCheckDbSituationTop */
		/*
		  DB 상태 점검 현황(상단 그리드)
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
		), MONITORING AS (
			SELECT A.GROUP_ID
				, A.GROUP_NM 
				, B.DBID
				, A.DESPLAY_SEQ AS MOTORING_DESPLAY_SEQ
				, B.DESPLAY_SEQ AS DATABASE_DESPLAY_SEQ
				, C.DB_NAME
				, C.DB_ABBR_NM
			FROM MOTORING_GROUP A
				, DATABASE_GROUP B
				, DATABASE C
			WHERE A.GROUP_ID = B.GROUP_ID
			AND A.USER_ID = #{user_id}
			<if test="group_id != null and group_id != ''">
				AND A.GROUP_ID = #{group_id}   /* 2020-03-17 DB 그룹이 선택되면 */
			</if>
			AND B.DBID = C.DBID
		), DB_CALENDAR AS (
			SELECT A.DAY_8CHAR AS CHECK_DAY
				, A.DAY_OF_WEEK
				, B.*
			FROM CALENDAR A
				, MONITORING B
				, DB_PRIV C
			WHERE A.DAY_8CHAR BETWEEN #{start_first_analysis_day} AND #{end_first_analysis_day}
			AND B.DBID = C.DBID
		)
		SELECT B.GROUP_NM || ' > ' || B.DB_NAME||': '||B.DB_ABBR_NM AS DB_FULL_NAME
			, TO_CHAR(TO_DATE(B.CHECK_DAY, 'YYYYMMDD'), 'MM/DD') || '(' || B.DAY_OF_WEEK || ')' AS DAY
			, CASE WHEN A.CRITICAL_CNT > 0 THEN 'C'
					WHEN A.WARNING_CNT > 0 THEN 'W'
					WHEN A.INFO_CNT > 0 THEN 'I'
					WHEN (A.CRITICAL_CNT + A.WARNING_CNT + A.INFO_CNT) = 0 THEN 'N'
					ELSE 'U'
				END AS DBID_CHECK_GRADE_CD_SITUATION
			-- HIDDEN
			, B.DBID AS DBID_SITUATION
			, B.CHECK_DAY AS CHECK_DAY_SITUATION
		FROM (
			SELECT DBID
				, CHECK_DAY
				, SUM(CASE WHEN CHECK_GRADE_CD IN ('2', '3') THEN CHECK_VALUE1 END) AS CRITICAL_CNT
				, SUM(CASE WHEN CHECK_GRADE_CD = '1' THEN CHECK_VALUE1 END)         AS WARNING_CNT
				, SUM(CASE WHEN CHECK_GRADE_CD = '0' THEN CHECK_VALUE1 END)         AS INFO_CNT
				, MAX(EXEC_DBID) AS EXEC_DBID
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
				FROM DB_PRIV A
				LEFT OUTER JOIN (
								SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
									, D.DBID EXEC_DBID, D.CHECK_DT
								FROM BASIC_CHECK_CONFIG A
									, DB_CHECK_SUMMARY C
									, (SELECT DBID, CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
										FROM DB_CHECK_EXEC 
										WHERE CHECK_DAY BETWEEN #{start_first_analysis_day} AND #{end_first_analysis_day}
										GROUP BY DBID, CHECK_DAY
									)  D
								WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
								AND C.CHECK_DAY = D.CHECK_DAY
								AND C.CHECK_SEQ = D.CHECK_SEQ
								AND C.DBID = D.DBID
								AND A.CHECK_ENABLE_YN = 'Y'
								AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
								AND A.CHECK_CLASS_DIV_CD <![CDATA[<]]>> '08' /* ADVISOR RECOMMENDATION 제외 */
				) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID, CHECK_DAY
		) A
		, DB_CALENDAR B
		WHERE B.DBID = A.DBID(+)
		AND B.CHECK_DAY = A.CHECK_DAY(+)
		ORDER BY B.MOTORING_DESPLAY_SEQ, B.DATABASE_DESPLAY_SEQ, B.CHECK_DAY DESC
	</select>
	
	<select id="dailyCheckDbSituationBottom" parameterType="dailyCheckDb" resultType="dailyCheckDb">
		/* DailyCheckDbDao.dailyCheckDbSituationBottom */
		/*
		  DB 상태 점검 현황(하단 그리드)
		*/
		WITH DB_PRIV AS (
			SELECT UDP.DBID, D.DB_NAME, D.ORDERING
			FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
			WHERE UDP.USER_ID = U.USER_ID
			AND UDP.DBID = D.DBID
			AND D.USE_YN = 'Y'
			AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
			AND U.USER_ID = #{user_id}
			AND D.DBID = #{dbid_situation}
			AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
										FROM SPOP_PREFERENCES 
										WHERE PREF_ID = '22001')
		), MONITORING AS (
			SELECT A.GROUP_ID
				, A.GROUP_NM 
				, B.DBID
				, A.DESPLAY_SEQ AS MOTORING_DESPLAY_SEQ
				, B.DESPLAY_SEQ AS DATABASE_DESPLAY_SEQ
				, C.DB_NAME
				, C.DB_ABBR_NM
				, (SELECT COUNT(*) FROM DATABASE_GROUP Z, DB_PRIV Y WHERE Z.GROUP_ID = A.GROUP_ID AND Z.DBID = Y.DBID) AS GROUP_CNT
			FROM MOTORING_GROUP A
				, DATABASE_GROUP B
				, DATABASE C
			WHERE A.GROUP_ID = B.GROUP_ID
			AND A.USER_ID = #{user_id}
			--AND A.GROUP_ID = :group_id:   /* 2020-03-17 DB 그룹이 선택되면 */
			AND B.DBID = C.DBID
		), DB_CALENDAR AS (
					SELECT A.DAY_8CHAR AS CHECK_DAY
						, A.DAY_OF_WEEK
						, B.*
						, CD1.CD AS CHECK_CLASS_DIV_CD
						, CD1.CD_NM AS CHECK_CLASS_DIV_NM
					FROM CALENDAR A
						, MONITORING B
						, DB_PRIV C
						, (SELECT CD, CD_NM
							FROM CD
							WHERE GRP_CD_ID = '1046'
							AND CD <![CDATA[<]]>> '08'
						) CD1
					WHERE A.DAY_8CHAR BETWEEN #{start_first_analysis_day} AND #{end_first_analysis_day}
					AND B.DBID = C.DBID
		)
		SELECT UPPER(B.CHECK_CLASS_DIV_NM) AS CHECK_CLASS_DIV_NM
			, TO_CHAR(TO_DATE(B.CHECK_DAY, 'YYYYMMDD'), 'MM/DD') || '(' || B.DAY_OF_WEEK || ')' AS DAY
			, CASE WHEN A.CHECK_GRADE_CD IN ('2', '3') THEN 'C'
					WHEN A.CHECK_GRADE_CD = '1' THEN 'W'
					WHEN A.CHECK_GRADE_CD = '0' THEN 'I'
					WHEN A.CHECK_GRADE_CD = '-1' THEN 'N'
					WHEN A.CHECK_GRADE_CD = 'U' THEN 'U'
					ELSE 'U'
				END DBID_CHECK_GRADE_CD_SITUATION
			-- HIDDEN
			, B.DBID AS DBID_SITUATION
			, B.CHECK_DAY AS CHECK_DAY_SITUATION
			, B.CHECK_CLASS_DIV_CD
		FROM (
			SELECT DBID
				, CHECK_DAY
				, CHECK_CLASS_DIV_CD
				, MAX(CASE WHEN CHECK_VALUE1 > 0 THEN CHECK_GRADE_CD
							WHEN CHECK_VALUE1 = 0 THEN '-1'    /* 정상 */
							WHEN EXEC_DBID IS NULL THEN 'U' END) AS CHECK_GRADE_CD
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING
					, B.EMERGENCY_ACTION_YN, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1, B.EXEC_DBID, B.CHECK_DT, B.CHECK_SEQ, B.CHECK_DAY
					, CASE WHEN B.CHECK_PREF_ID IN ('1001', '1002', '1003', '1046') THEN '01'  /* DB */
							WHEN B.CHECK_PREF_ID IN ('1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014') THEN '02' /* INSTANCE */
							WHEN B.CHECK_PREF_ID IN ('1019', '1020', '1021', '1022', '1023', '1024', '1025') THEN '03'  /* SPACE */
							WHEN B.CHECK_PREF_ID IN ('1026', '1027', '1028', '1029', '1030', '1031', '1032', '1033', '1045') THEN '04'  /* OBJECT */
							WHEN B.CHECK_PREF_ID IN ('1034', '1035') THEN '05'  /* STATISTICS */
							WHEN B.CHECK_PREF_ID IN ('1036', '1037') THEN '06' /* LONG RUNNING WORK */
							WHEN CHECK_PREF_ID IN ('1015', '1016', '1017', '1018') THEN '07' /* ALERT */
							END AS CHECK_CLASS_DIV_CD
				FROM DB_PRIV A
				LEFT OUTER JOIN (
								SELECT C.*, A.CHECK_GRADE_CD, A.EMERGENCY_ACTION_YN
									, D.DBID EXEC_DBID, D.CHECK_DT
								FROM BASIC_CHECK_CONFIG A
									, DB_CHECK_SUMMARY C
									, (SELECT DBID, CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
										FROM DB_CHECK_EXEC 
										WHERE CHECK_DAY BETWEEN #{start_first_analysis_day} AND #{end_first_analysis_day}
										GROUP BY DBID, CHECK_DAY
									) D
								WHERE A.CHECK_PREF_ID = C.CHECK_PREF_ID
								AND C.CHECK_DAY = D.CHECK_DAY
								AND C.CHECK_SEQ = D.CHECK_SEQ
								AND C.DBID = D.DBID
								AND A.CHECK_ENABLE_YN = 'Y'
								AND A.CHECK_GRADE_CD IN ('0', '1', '2', '3')
								AND A.CHECK_CLASS_DIV_CD <![CDATA[<]]>> '08' /* ADVISOR RECOMMENDATION 제외 */
				) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			)
			GROUP BY DBID, CHECK_DAY, CHECK_CLASS_DIV_CD
		) A
			, DB_CALENDAR B
		WHERE B.DBID = A.DBID(+)
		AND B.CHECK_DAY = A.CHECK_DAY(+)
		AND B.CHECK_CLASS_DIV_CD = A.CHECK_CLASS_DIV_CD(+)
		ORDER BY B.CHECK_CLASS_DIV_CD, B.CHECK_DAY DESC
	</select>
	
</mapper>