<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
	2020.05.25	명성태	OPENPOP V2 최초작업
-->
<mapper namespace="omc.spop.dao.SqlPerformanceTraceStatusChartDao">
	<select id="chart" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* SqlPerformanceTraceStatusChartDao.chart */
		/* 챠트1 > 금:수정대상*/
		WITH TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.DEPLOY_COMPLETE_DT
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.TEST_ELAPSED_TIME
				, A.TEST_BUFFER_GETS
				, A.TEST_FULL_SCAN_YN
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER') PRD_BIG_TABLE_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER') PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER'), 0, 1,
						FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER')) PRD_BUFFER_GETS 
				, (CASE WHEN A.PLAN_HASH_VALUE <![CDATA[<]]>> FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER') THEN 'Y' ELSE 'N' END) PRD_PLAN_CHANGE_YN
				, PERF_CHECK_ID
			FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
						A.PERF_CHECK_ID
						, A.DEPLOY_COMPLETE_DT
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, ELAPSED_TIME_THRESHOLD
						, BUFFER_GETS_THRESHOLD
						, FULL_SCAN_DECIDE_DIV_CD
						, TEST_ELAPSED_TIME
						, DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) TEST_BUFFER_GETS
						, TEST_FULL_SCAN_YN
						, PLAN_HASH_VALUE
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					FROM (SELECT A.PERF_CHECK_ID
								, A.DEPLOY_COMPLETE_DT
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, F.PLAN_HASH_VALUE
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								, COUNT(*) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
							FROM DEPLOY_PERF_CHK A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
										, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
											FROM WRKJOB_CD
											WHERE USE_YN = 'Y'
											START WITH UPPER_WRKJOB_CD IS NULL
											CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_TARGET_PGM C
								, DEPLOY_PERF_CHK_ALL_PGM D
								, DEPLOY_PERF_CHK_DETAIL_RESULT E
								, DEPLOY_PERF_SQL_STAT F
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
							AND C.PROGRAM_ID = D.PROGRAM_ID
							AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							AND C.PROGRAM_ID = E.PROGRAM_ID
							AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = F.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5) --> 20200608  AND E.PERF_CHECK_INDC_ID IN (1, 2, 5)  -- 1:SQL수행시간(초), 2:블럭수, 5:대용량 테이블 Full Scan 여부
							AND E.PERF_CHECK_RESULT_DIV_CD <![CDATA[<]]>> 'C'
							
							/* 날짜 검색 */
							AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
														AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							
							GROUP BY A.PERF_CHECK_ID
								, A.DEPLOY_COMPLETE_DT
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, F.PLAN_HASH_VALUE
						) A
					WHERE 1 = 1
					-- 최종회차
					AND A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS) 
													FROM DEPLOY_PERF_CHK_DETAIL_RESULT S
													WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
													AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
													AND S.PROGRAM_ID = A.PROGRAM_ID)
					-- 성능지표가 정상적으로 저장된 경우만 체크
					AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4 --> 20200608 AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 3
				) A
				
			WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL 제외 시킴
		)
		SELECT A.DAY                                                                                                     -- 배포일자
			, NVL(B.BUFFER_GETS_FAIL, 0) BUFFER_GETS_FAIL                                                               -- Buffer Gets 부적합 건수
			, NVL(B.BUFFER_GETS_PASS, 0) BUFFER_GETS_PASS                                                               -- Buffer Gets 적합 건수
			, ROUND(NVL(B.BUFFER_GETS_FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) BUFFER_GETS_FAIL_RATIO    -- Buffer Gets 부적합 율(%)
			, NVL(B.ELAPSED_TIME_FAIL, 0) ELAPSED_TIME_FAIL                                                             -- Elapsed Time 부적합 건수
			, NVL(B.ELAPSED_TIME_PASS, 0) ELAPSED_TIME_PASS                                                             -- Elapsed Time 적합 건수
			, ROUND(NVL(B.ELAPSED_TIME_FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) ELAPSED_TIME_FAIL_RATIO  -- Elapsed Time 부적합 율(%)
			, NVL(B.PLAN_CHANGE_FAIL, 0) PLAN_CHANGE_FAIL                                                               -- Plan 변경 부적합 건수
			, NVL(B.PLAN_CHANGE_PASS, 0) PLAN_CHANGE_PASS                                                               -- Plan 변경 적합 건수
			, ROUND(NVL(B.PLAN_CHANGE_FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) PLAN_CHANGE_FAIL_RATIO    -- Plan 변경 부적합 율(%)
			, NVL(B.BUFFER_GETS_IMPROVE, 0) BUFFER_GETS_IMPROVE                                                         -- Buffer Gets Imporved 건수
			, NVL(B.BUFFER_GETS_REGRESS, 0) BUFFER_GETS_REGRESS                                                         -- Buffer Gets Regressed 건수
			, NVL(B.ELAPSED_TIME_IMPROVE, 0) ELAPSED_TIME_IMPROVE                                                       -- Elapsed Imporved 건수
			, NVL(B.ELAPSED_TIME_REGRESS, 0) ELAPSED_TIME_REGRESS                                                       -- Elapsed Regressed 건수
			, NVL(B.PLAN_CHANGE_IMPROVE, 0) PLAN_CHANGE_IMPROVE                                                         -- Plan 변경 Imporved 건수
			, NVL(B.PLAN_CHANGE_REGRESS, 0) PLAN_CHANGE_REGRESS                                                         -- Plan 변경 Regressed 건수
		FROM (SELECT TO_CHAR(DAY, 'MM/DD') AS DAY
				FROM CALENDAR
				WHERE DAY BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')) A
		LEFT OUTER JOIN
			(SELECT TO_CHAR(A.DEPLOY_COMPLETE_DT, 'MM/DD') AS DEPLOY_COMPLETE_DT -- 배포완료일
					, COUNT(*) SQL_CNT
					, SUM(CASE WHEN BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS THEN 1 END) BUFFER_GETS_PASS
					, SUM(CASE WHEN BUFFER_GETS_THRESHOLD <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) BUFFER_GETS_FAIL
					, SUM(CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME THEN 1 END) ELAPSED_TIME_PASS
					, SUM(CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> PRD_ELAPSED_TIME THEN 1 END) ELAPSED_TIME_FAIL
					, SUM(CASE WHEN PRD_PLAN_CHANGE_YN = 'Y' AND (ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								AND NOT (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
											OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') )) THEN 1 END) PLAN_CHANGE_PASS
					, SUM(CASE WHEN PRD_PLAN_CHANGE_YN = 'Y' AND (ELAPSED_TIME_THRESHOLD <![CDATA[<]]> PRD_ELAPSED_TIME
								OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> PRD_BUFFER_GETS
								OR (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
								OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) ) THEN 1 END) PLAN_CHANGE_FAIL
					, SUM(CASE WHEN TEST_BUFFER_GETS >= PRD_BUFFER_GETS THEN 1 END) BUFFER_GETS_IMPROVE
					, SUM(CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) BUFFER_GETS_REGRESS
					, SUM(CASE WHEN TEST_ELAPSED_TIME >= PRD_ELAPSED_TIME THEN 1 END) ELAPSED_TIME_IMPROVE
					, SUM(CASE WHEN TEST_ELAPSED_TIME <![CDATA[<]]> PRD_ELAPSED_TIME THEN 1 END) ELAPSED_TIME_REGRESS
					, SUM(CASE WHEN PRD_PLAN_CHANGE_YN = 'Y' AND TEST_BUFFER_GETS >= PRD_BUFFER_GETS THEN 1 END) PLAN_CHANGE_IMPROVE
					, SUM(CASE WHEN PRD_PLAN_CHANGE_YN = 'Y' AND TEST_BUFFER_GETS <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) PLAN_CHANGE_REGRESS
				FROM TMP_DEPLOY_PERF_SQL A
				GROUP BY TO_CHAR(A.DEPLOY_COMPLETE_DT, 'MM/DD')
			) B PARTITION BY(NULL)
		ON (A.DAY = B.DEPLOY_COMPLETE_DT)
	</select>
	
	<select id="chartPerformance01" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* SqlPerformanceTraceStatusChartDao.chartPerformance01 */
		/* 챠트2 - 성능점검 SQL1 */
		WITH TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.DEPLOY_COMPLETE_DT
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.TEST_ELAPSED_TIME
				, A.TEST_BUFFER_GETS
				, A.TEST_FULL_SCAN_YN
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER') PRD_BIG_TABLE_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER') PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER'), 0, 1,
						FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER')) PRD_BUFFER_GETS 
				, (CASE WHEN A.PLAN_HASH_VALUE <![CDATA[<]]>> FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER') THEN 'Y' ELSE 'N' END) PRD_PLAN_CHANGE_YN
				, PERF_CHECK_ID
			FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
						A.PERF_CHECK_ID
						, A.DEPLOY_COMPLETE_DT
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, ELAPSED_TIME_THRESHOLD
						, BUFFER_GETS_THRESHOLD
						, FULL_SCAN_DECIDE_DIV_CD
						, TEST_ELAPSED_TIME
						, DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) TEST_BUFFER_GETS
						, TEST_FULL_SCAN_YN
						, PLAN_HASH_VALUE
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					FROM (SELECT A.PERF_CHECK_ID
								, A.DEPLOY_COMPLETE_DT
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, F.PLAN_HASH_VALUE
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								, COUNT(*) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
							FROM DEPLOY_PERF_CHK A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
										, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
											FROM WRKJOB_CD
											WHERE USE_YN = 'Y'
											START WITH UPPER_WRKJOB_CD IS NULL
											CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_TARGET_PGM C
								, DEPLOY_PERF_CHK_ALL_PGM D
								, DEPLOY_PERF_CHK_DETAIL_RESULT E
								, DEPLOY_PERF_SQL_STAT F
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
							AND C.PROGRAM_ID = D.PROGRAM_ID
							AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							AND C.PROGRAM_ID = E.PROGRAM_ID
							AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = F.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5) --> 20200608  AND E.PERF_CHECK_INDC_ID IN (1, 2, 5)  -- 1:SQL수행시간(초), 2:블럭수, 5:대용량 테이블 Full Scan 여부
							AND E.PERF_CHECK_RESULT_DIV_CD <![CDATA[<]]>> 'C'
							
							/* 날짜 검색 */
							AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
														AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							
							GROUP BY A.PERF_CHECK_ID
								, A.DEPLOY_COMPLETE_DT
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, F.PLAN_HASH_VALUE
						) A
					WHERE 1 = 1
					-- 최종회차
					AND A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS) 
													FROM DEPLOY_PERF_CHK_DETAIL_RESULT S
													WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
													AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
													AND S.PROGRAM_ID = A.PROGRAM_ID)
					-- 성능지표가 정상적으로 저장된 경우만 체크
					AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4 --> 20200608 AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 3
				) A
				
			WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL 제외 시킴
		)
		SELECT A.DAY                                                                                          -- 배포일자
			, NVL(B.FAIL, 0) FAIL                                                                            -- 부적합 건수
			, NVL(B.PASS, 0) PASS                                                                            -- 적합 건수
			, ROUND(NVL(B.FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) FAIL_RATIO                 -- 부적합 율(%)
		FROM (SELECT TO_CHAR(DAY, 'MM/DD') AS DAY
				FROM CALENDAR
				WHERE DAY BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')) A
		LEFT OUTER JOIN
			(SELECT TO_CHAR(A.DEPLOY_COMPLETE_DT, 'MM/DD') AS DEPLOY_COMPLETE_DT -- 배포완료일
					, COUNT(*) SQL_CNT
					, COUNT(CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								AND NOT (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
											OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN 1 END) PASS
					, COUNT(CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> PRD_ELAPSED_TIME
								OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> PRD_BUFFER_GETS
								OR (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
								OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') )  THEN 1 END) FAIL
				FROM TMP_DEPLOY_PERF_SQL A
				GROUP BY TO_CHAR(A.DEPLOY_COMPLETE_DT, 'MM/DD')
			) B PARTITION BY(NULL)
		ON (A.DAY = B.DEPLOY_COMPLETE_DT)
	</select>
	
	<select id="chartPerformance02" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* SqlPerformanceTraceStatusChartDao.chartPerformance02 */
		/* 챠트2 - 성능점검 SQL2 */
		WITH TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.DEPLOY_COMPLETE_DT
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.TEST_ELAPSED_TIME
				, A.TEST_BUFFER_GETS
				, A.TEST_FULL_SCAN_YN
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER') PRD_BIG_TABLE_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER') PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER'), 0, 1,
						FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER')) PRD_BUFFER_GETS 
				, (CASE WHEN A.PLAN_HASH_VALUE <![CDATA[<]]>> FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER') THEN 'Y' ELSE 'N' END) PRD_PLAN_CHANGE_YN
				, PERF_CHECK_ID
			FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
						A.PERF_CHECK_ID
						, A.DEPLOY_COMPLETE_DT
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, ELAPSED_TIME_THRESHOLD
						, BUFFER_GETS_THRESHOLD
						, FULL_SCAN_DECIDE_DIV_CD
						, TEST_ELAPSED_TIME
						, DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) TEST_BUFFER_GETS
						, TEST_FULL_SCAN_YN
						, PLAN_HASH_VALUE
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					FROM (SELECT A.PERF_CHECK_ID
								, A.DEPLOY_COMPLETE_DT
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, F.PLAN_HASH_VALUE
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								, MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								, COUNT(*) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
							FROM DEPLOY_PERF_CHK A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
										, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
											FROM WRKJOB_CD
											WHERE USE_YN = 'Y'
											START WITH UPPER_WRKJOB_CD IS NULL
											CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_TARGET_PGM C
								, DEPLOY_PERF_CHK_ALL_PGM D
								, DEPLOY_PERF_CHK_DETAIL_RESULT E
								, DEPLOY_PERF_SQL_STAT F
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
							AND C.PROGRAM_ID = D.PROGRAM_ID
							AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							AND C.PROGRAM_ID = E.PROGRAM_ID
							AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = F.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5) --> 20200608  AND E.PERF_CHECK_INDC_ID IN (1, 2, 5)  -- 1:SQL수행시간(초), 2:블럭수, 5:대용량 테이블 Full Scan 여부
							AND E.PERF_CHECK_RESULT_DIV_CD <![CDATA[<]]>> 'C'
							
							/* 날짜 검색 */
							AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
														AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							
							GROUP BY A.PERF_CHECK_ID
								, A.DEPLOY_COMPLETE_DT
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, F.PLAN_HASH_VALUE
						) A
					WHERE 1 = 1
					-- 최종회차
					AND A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS) 
													FROM DEPLOY_PERF_CHK_DETAIL_RESULT S
													WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
													AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
													AND S.PROGRAM_ID = A.PROGRAM_ID)
					-- 성능지표가 정상적으로 저장된 경우만 체크
					AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4 --> 20200608 AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 3
				) A
				
			WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL 제외 시킴
		)
		SELECT A.PASS_FAIL_TYPE
			, NVL(B."1LESS_THAN", 0) "LESS_THAN_1"       -- 1X
			, NVL(B."2LESS_THAN", 0)   "LESS_THAN_2"    --  2x
			, NVL(B."5LESS_THAN", 0)   "LESS_THAN_5"    --   5x
			, NVL(B."10LESS_THAN", 0)  "LESS_THAN_10"   --  10x
			, NVL(B."30LESS_THAN", 0)  "LESS_THAN_30"   --  30x
			, NVL(B."50LESS_THAN", 0)  "LESS_THAN_50"   --  50x
			, NVL(B."100LESS_THAN", 0) "LESS_THAN_100"  --  100x
			, NVL(B."100MORE_THAN", 0) "MORE_THAN_100"  -- >= 100x
		FROM (SELECT '적합' PASS_FAIL_TYPE FROM DUAL
				UNION ALL
				SELECT '부적합' PASS_FAIL_TYPE FROM DUAL
			) A
		LEFT OUTER JOIN
			(SELECT (CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
							AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
							AND NOT (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN '적합' ELSE '부적합' END) PASS_FAIL_TYPE
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<=]]>  1 THEN 1 ELSE 0 END) "1LESS_THAN"  -- 1X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >  1   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 2   THEN 1 ELSE 0 END) "2LESS_THAN"    --  2X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 2   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 5   THEN 1 ELSE 0 END) "5LESS_THAN"    --  5X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 5   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 10  THEN 1 ELSE 0 END) "10LESS_THAN"   --  10X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 10  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 30  THEN 1 ELSE 0 END) "30LESS_THAN"   --  30X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 30  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 50  THEN 1 ELSE 0 END) "50LESS_THAN"   --  50X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 50  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 100 THEN 1 ELSE 0 END) "100LESS_THAN"  --  100X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 100                                              THEN 1 ELSE 0 END) "100MORE_THAN"  -->= 100
				FROM TMP_DEPLOY_PERF_SQL A
				GROUP BY (CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								AND NOT (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
								OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN '적합' ELSE '부적합' END)
			) B PARTITION BY (NULL)
		ON (A.PASS_FAIL_TYPE = B.PASS_FAIL_TYPE)
	</select>
	
	<select id="chartException01" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* SqlPerformanceTraceStatusChartDao.chartException01 */
		/* 챠트3 - 예외처리 SQL1 */
		WITH TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DEPLOY_COMPLETE_DT
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER') PRD_BIG_TABLE_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER') PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER'), 0, 1,
							FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER')) PRD_BUFFER_GETS 
				, PERF_CHECK_ID
			FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
						A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.DEPLOY_COMPLETE_DT
						, A.PROGRAM_ID
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, ELAPSED_TIME_THRESHOLD
						, BUFFER_GETS_THRESHOLD
						, FULL_SCAN_DECIDE_DIV_CD
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					FROM (SELECT A.PERF_CHECK_ID
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, A.DEPLOY_COMPLETE_DT
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
							FROM DEPLOY_PERF_CHK A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
										, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
											FROM WRKJOB_CD
											WHERE USE_YN = 'Y'
											START WITH UPPER_WRKJOB_CD IS NULL
											CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_TARGET_PGM C
								, DEPLOY_PERF_CHK_ALL_PGM D
								, WJ_PERF_CHK_INDC E
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
							AND C.PROGRAM_ID = D.PROGRAM_ID
							AND A.WRKJOB_CD = E.WRKJOB_CD
							AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5) --> 20200608  AND E.PERF_CHECK_INDC_ID IN (1, 2, 5)  -- 1:SQL수행시간(초), 2:블럭수, 5:대용량 테이블 Full Scan 여부
							AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'  -- S: SQL
							
							/* 날짜 검색 */
							AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
														AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							
							GROUP BY A.PERF_CHECK_ID
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, A.DEPLOY_COMPLETE_DT
								, C.EXCEPTION_PRC_METH_CD
						) A
				) A
			WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
		)
		SELECT A.DAY                                                                                          -- 배포일자
			, NVL(B.FAIL, 0) FAIL                                                                            -- 부적합 건수
			, NVL(B.PASS, 0) PASS                                                                            -- 적합 건수
			, ROUND(NVL(B.FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) FAIL_RATIO                 -- 부적합 율(%)
		FROM (SELECT TO_CHAR(DAY, 'MM/DD') AS DAY
				FROM CALENDAR
				WHERE DAY BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')) A
		LEFT OUTER JOIN
			(SELECT TO_CHAR(A.DEPLOY_COMPLETE_DT, 'MM/DD') AS DEPLOY_COMPLETE_DT -- 배포완료일
					, COUNT(*) SQL_CNT
					, COUNT(CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								AND NOT (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
											OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN 1 END) PASS
					, COUNT(CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> PRD_ELAPSED_TIME
								OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> PRD_BUFFER_GETS
								OR (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') )  THEN 1 END) FAIL
				FROM TMP_DEPLOY_PERF_SQL A
				GROUP BY TO_CHAR(A.DEPLOY_COMPLETE_DT, 'MM/DD')
			) B PARTITION BY(NULL)
		ON (A.DAY = B.DEPLOY_COMPLETE_DT)
	</select>
	
	<select id="chartException02" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* SqlPerformanceTraceStatusChartDao.chartException02 */
		/* 챠트3 - 예외처리 SQL2 */
		WITH TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DEPLOY_COMPLETE_DT
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER') PRD_BIG_TABLE_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER') PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER'), 0, 1,
						FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER')) PRD_BUFFER_GETS 
				, PERF_CHECK_ID
			FROM (
				SELECT 
					A.PERF_CHECK_ID
					, A.PERF_CHECK_STEP_ID
					, A.DEPLOY_COMPLETE_DT
					, A.PROGRAM_ID
					, A.EXCEPTION_PRC_METH_CD
					, A.DBIO
					, A.DBID
					, A.TOP_WRKJOB_CD
					, A.WRKJOB_CD
					, A.WRKJOB_LVL
					, ELAPSED_TIME_THRESHOLD
					, BUFFER_GETS_THRESHOLD
					, FULL_SCAN_DECIDE_DIV_CD
					, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
				FROM (
					SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.DEPLOY_COMPLETE_DT
						, A.PROGRAM_ID
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
						, NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
						, NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
					FROM (
						SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
							A.PERF_CHECK_ID
							, I.DBID --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, C.PROGRAM_ID
							, C.EXCEPTION_PRC_METH_CD
							, D.DBIO
							, B.PERF_CHECK_STEP_ID
							, A.DEPLOY_COMPLETE_DT
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
						FROM DEPLOY_PERF_CHK A
							-- 업무별 최종 단계
							, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
								FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
									, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
										FROM WRKJOB_CD
										WHERE USE_YN = 'Y'
										START WITH UPPER_WRKJOB_CD IS NULL
										CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
								WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
								AND A.DEL_YN(+) = 'N'
								GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
							, DEPLOY_PERF_CHK_TARGET_PGM C
							, DEPLOY_PERF_CHK_ALL_PGM D
							, WJ_PERF_CHK_INDC E
							, WRKJOB_DB H  --> 20200608
							, DATABASE I   --> 20200608
						WHERE A.WRKJOB_CD = B.WRKJOB_CD
						AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
						AND C.PROGRAM_ID = D.PROGRAM_ID
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
						AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
						AND H.DBID = I.DBID             --> 20200608
						AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
						AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5) --> 20200608  AND E.PERF_CHECK_INDC_ID IN (1, 2, 5)  -- 1:SQL수행시간(초), 2:블럭수, 5:대용량 테이블 Full Scan 여부
						AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'  -- S: SQL
						
						/* 날짜 검색 */
						AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
													AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
						
						/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
						<if test="wrkjob_cd != null and wrkjob_cd != ''">
							AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
													FROM WRKJOB_CD
													START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
													CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
						</if>
						
						GROUP BY A.PERF_CHECK_ID
						, I.DBID --> 20200608 B.DBID
						, B.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, B.WRKJOB_LVL
						, C.PROGRAM_ID
						, C.EXCEPTION_PRC_METH_CD
						, D.DBIO
						, B.PERF_CHECK_STEP_ID
						, A.DEPLOY_COMPLETE_DT
					) A
					-- 성능점검 예외 지표
					,( 
					SELECT B.PROGRAM_ID
						, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
						, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
						, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
						, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
					FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
						, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
						, (SELECT F.PERF_CHECK_INDC_ID
							FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
								, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
								, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
							WHERE A.WRKJOB_CD = E.WRKJOB_CD
							AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
							AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
							AND E.INDC_APPLY_YN = 'Y'
							AND F.INDC_USE_YN = 'Y'
							AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5)  -- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
								
							/* 날짜 검색 */
							AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
														AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							) C
					WHERE A.EXCEPTION_PRC_METH_CD = '1'
					AND A.EXCEPTION_PRC_STATUS_CD = '2'
					AND B.DEL_YN = 'N'
					AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
					AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
					GROUP BY B.PROGRAM_ID
					) B
					WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
				) A
			) A
		WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
		AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
		)
		SELECT A.PASS_FAIL_TYPE
			, NVL(B."0.1LESS_THAN", 0) "LESS_THAN_0_DOT_1"   --  0.1s
			, NVL(B."0.3LESS_THAN", 0) "LESS_THAN_0_DOT_3"   --  0.3s
			, NVL(B."1LESS_THAN", 0)   "LESS_THAN_1"     --  1s
			, NVL(B."3LESS_THAN", 0)   "LESS_THAN_3"     --  3s
			, NVL(B."10LESS_THAN", 0)  "LESS_THAN_10"    --  10s
			, NVL(B."60LESS_THAN", 0)  "LESS_THAN_60"    --  60s
			, NVL(B."60MORE_THAN", 0)  "MORE_THAN_60"    -- >= 60s
		FROM (SELECT '적합' PASS_FAIL_TYPE FROM DUAL
				UNION ALL
				SELECT '부적합' PASS_FAIL_TYPE FROM DUAL
			) A
		LEFT OUTER JOIN
			(SELECT (CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
							AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
							AND NOT (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN '적합' ELSE '부적합' END) PASS_FAIL_TYPE
					, SUM(CASE WHEN PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN 1 END) "0.1LESS_THAN"    --  0.1s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >  0.1 AND PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN 1 END) "0.3LESS_THAN"    --  0.3s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 0.3 AND PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN 1 END) "1LESS_THAN"      --  1s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 1   AND PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN 1 END) "3LESS_THAN"      --  3s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 3   AND PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"     --  10s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 10  AND PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN 1 END) "60LESS_THAN"     --  60s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 60                             THEN 1 END) "60MORE_THAN"     -- >= 60s
				FROM TMP_DEPLOY_PERF_SQL A
				GROUP BY (CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								AND NOT (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
								OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN '적합' ELSE '부적합' END)
			) B PARTITION BY (NULL)
		ON (A.PASS_FAIL_TYPE = B.PASS_FAIL_TYPE)
	</select>
	
</mapper>