<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
	2019.01.03	임호경	최초작성
-->
<mapper namespace="omc.spop.dao.PerformanceCheckIndexDao">

	<sql id="DeployPerfChkIndcList">
		/* PerformanceCheckIndexDao.getDeployPerfChkIndc */
		SELECT A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID
		, A.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM
		, A.PERF_CHECK_METH_CD AS PERF_CHECK_METH_CD
		, CD1.CD_NM AS PERF_CHECK_METH_CD_NM
		, A.PERF_CHECK_INDC_DESC AS PERF_CHECK_INDC_DESC
		, A.PERF_CHECK_FAIL_GUIDE_SBST AS PERF_CHECK_FAIL_GUIDE_SBST
		, A.INDC_USE_YN AS INDC_USE_YN
		FROM DEPLOY_PERF_CHK_INDC A --
		, CD CD1
		WHERE A.PERF_CHECK_METH_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1059'
		
		<if test="searchValue != null and searchValue != ''">
			AND A.PERF_CHECK_INDC_NM LIKE '%'|| #{searchValue} || '%'
		</if>
		<if test="search_use_yn != null and search_use_yn != ''">
			AND A.INDC_USE_YN = #{search_use_yn} 
		</if>
		ORDER BY PERF_CHECK_INDC_ID
	</sql>
	
	<select id="getDeployPerfChkIndc" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		<include refid="DeployPerfChkIndcList"/>
	</select>
	
	<select id="getDeployPerfChkIndcByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		<include refid="DeployPerfChkIndcList"/>
	</select>
	
	<select id="getPerfCheckMethCd" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		SELECT CD_NM AS PERF_CHECK_METH_CD_NM, CD AS PERF_CHECK_METH_CD 
		FROM CD WHERE GRP_CD_ID = '1059'
	</select>

	<select id="checkDeployPerfChkDetailResult" parameterType="deployPerfChkIndc" resultType="int">
	/* PerformanceCheckIndexDao.checkDeployPerfChkDetailResult */
		SELECT COUNT(*) AS PERF_CHECK_INDC_ID_CNT 
		   FROM  DEPLOY_PERF_CHK_DETAIL_RESULT A    -- 배포성능점검상세결과내역(TABLE)
		  WHERE  A.PERF_CHECK_INDC_ID = #{perf_check_indc_id}
		    AND  ROWNUM = 1
	</select>

	<select id="checkDeployPerfChkDetailResult2" parameterType="deployPerfChkIndc" resultType="int">
	/* PerformanceCheckIndexDao.checkDeployPerfChkDetailResult2 */
		SELECT COUNT(*) AS WRKJOB_CD_PERF_CNT 
		  FROM WJ_PERF_CHK_INDC A
		 WHERE A.INDC_APPLY_YN = 'Y'
		   AND A.PERF_CHECK_INDC_ID = #{perf_check_indc_id}
	</select>
	
	<update id="updateDeployPerfChkIndc" parameterType="deployPerfChkIndc">
			/* PerformanceCheckIndexDao.updateDeployPerfChkIndc */
			UPDATE DEPLOY_PERF_CHK_INDC
			<trim prefix="SET" suffixOverrides=",">
				<if test="perf_check_indc_id != null and perf_check_indc_id != ''">
					perf_check_indc_id =#{perf_check_indc_id},
				</if>
				<if test="perf_check_indc_nm != null and perf_check_indc_nm != ''">
					perf_check_indc_nm = #{perf_check_indc_nm},
				</if>
				<if test="perf_check_meth_cd != null and perf_check_meth_cd != ''">
					perf_check_meth_cd =#{perf_check_meth_cd},
				</if>
				<if test="perf_check_indc_desc != null and perf_check_indc_desc != ''">
					perf_check_indc_desc =#{perf_check_indc_desc},
				</if>
				<if test="perf_check_fail_guide_sbst != null and perf_check_fail_guide_sbst != ''">
					perf_check_fail_guide_sbst =#{perf_check_fail_guide_sbst},
				</if>
				<if test="indc_use_yn != null and indc_use_yn != ''">
					indc_use_yn  =#{indc_use_yn},
				</if>
			</trim>
			WHERE perf_check_indc_id = #{perf_check_indc_id}
	</update>
	
	<insert id="insertDeployPerfChkIndc" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.insertDeployPerfChkIndc */
		INSERT INTO DEPLOY_PERF_CHK_INDC (PERF_CHECK_INDC_ID,PERF_CHECK_INDC_NM,PERF_CHECK_METH_CD,PERF_CHECK_INDC_DESC,PERF_CHECK_FAIL_GUIDE_SBST,INDC_USE_YN)
	    VALUES((SELECT NVL(MAX(PERF_CHECK_INDC_ID),0)+1 FROM DEPLOY_PERF_CHK_INDC), #{perf_check_indc_nm},#{perf_check_meth_cd}, #{perf_check_indc_desc},#{perf_check_fail_guide_sbst},#{indc_use_yn})	
	</insert>
	
	
	
	<sql id="WjPerfChkIndcList">
		SELECT  
		        CASE WHEN B.WRKJOB_CD IS NULL THEN 
		                 '미등록' 
		             ELSE '등록' 
		        END AS REG_DIV                                                
		      , NVL(B.WRKJOB_CD, #{search_wrkjob_cd}) AS WRKJOB_CD                     
		      , C.WRKJOB_CD_NM AS WRKJOB_CD_NM                                
		      , A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID  
		      , A.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM
		      , B.PERF_CHECK_PROGRAM_DIV_CD AS PERF_CHECK_PROGRAM_DIV_CD      
		      , CD1.CD_NM AS PERF_CHECK_PROGRAM_DIV_CD_NM                     
		      , A.PERF_CHECK_METH_CD AS PERF_CHECK_METH_CD                    
		      , CD2.CD_NM            AS PERF_CHECK_METH_CD_NM                   
		      , CASE WHEN MOD(B.PASS_MAX_VALUE,1) = 0 THEN
		      	          TO_CHAR(B.PASS_MAX_VALUE)
		      	     ELSE 
		      		      TO_CHAR(B.PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')
		        END AS PASS_MAX_VALUE
		   
		      , CASE WHEN TRIM(B.PASS_MAX_VALUE) IS NOT NULL AND MOD(B.PASS_MAX_VALUE,1) = 0 THEN
		      		      TO_CHAR(B.PASS_MAX_VALUE) || ' 초과'
		      	     WHEN TRIM(B.PASS_MAX_VALUE) IS NOT NULL THEN 
		      		      TO_CHAR(B.PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999') || ' 초과'
		        END AS NOT_PASS_PASS
		                                                
		      , B.YN_DECIDE_DIV_CD AS YN_DECIDE_DIV_CD                        
		      , CD3.CD_NM  AS YN_DECIDE_DIV_CD_NM                             
		      , B.INDC_APPLY_YN AS INDC_APPLY_YN                              
		      , A.PERF_CHECK_INDC_DESC       AS PERF_CHECK_INDC_DESC          
		      , A.PERF_CHECK_FAIL_GUIDE_SBST AS PERF_CHECK_FAIL_GUIDE_SBST    
		      , TO_CHAR(B.UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DT                                      
		  FROM  DEPLOY_PERF_CHK_INDC A
		      , WJ_PERF_CHK_INDC B
		      , WRKJOB_CD C
		      , CD CD1
		      , CD CD2
		      , CD CD3
		 WHERE  A.INDC_USE_YN = 'Y'
		   AND  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID(+)
		   AND  B.PERF_CHECK_PROGRAM_DIV_CD = CD1.CD(+)
		   
		   AND  NVL(B.WRKJOB_CD, #{search_wrkjob_cd}) = C.WRKJOB_CD(+)
		   AND  CD1.GRP_CD_ID(+) = '1052'
		   AND  A.PERF_CHECK_METH_CD = CD2.CD(+)
		   AND  CD2.GRP_CD_ID(+) = '1059'
		   AND  B.YN_DECIDE_DIV_CD = CD3.CD(+)
		   AND  CD3.GRP_CD_ID(+) = '1050'   
<!-- 		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''"> -->
		   AND  B.WRKJOB_CD(+) = #{search_wrkjob_cd}
<!-- 		</if> -->
		<if test="search_indc_apply_yn != null and search_indc_apply_yn != ''">
		   AND  NVL(B.INDC_APPLY_YN, 'N') = #{search_indc_apply_yn}
		</if>
		ORDER BY A.PERF_CHECK_INDC_ID, B.PERF_CHECK_PROGRAM_DIV_CD
	</sql>
	
	<select id="getWjPerfChkIndc" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getWjPerfChkIndc */
		<include refid="WjPerfChkIndcList"/>
	</select>
	
	<select id="getWjPerfChkIndcByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getWjPerfChkIndcByExcelDown */
		<include refid="WjPerfChkIndcList"/>
	</select>
	
	<select id="getPerfCheckProgramDivCd" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		 SELECT CD AS PERF_CHECK_PROGRAM_DIV_CD, CD_NM AS PERF_CHECK_PROGRAM_DIV_CD_NM 
		 FROM CD WHERE GRP_CD_ID='1052'
	</select>

	<select id="getYnDecideDivCd" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		SELECT CD AS YN_DECIDE_DIV_CD, CD_NM YN_DECIDE_DIV_CD_NM 
		FROM CD WHERE GRP_CD_ID = '1050'
	</select>
	
	<select id="getPerfCheckIndcId" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		SELECT PERF_CHECK_INDC_ID, PERF_CHECK_INDC_NM FROM DEPLOY_PERF_CHK_INDC
	</select>
	
	<insert id="insertWjPerfChkIndcHistory" parameterType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.insertWjPerfChkIndcHistory */
		<choose>
			<when test="pass_max_value == null or pass_max_value == ''">
		INSERT INTO   WJ_PERF_CHK_INDC_HISTORY  
	        ( WRKJOB_CD                                                
	        , PERF_CHECK_INDC_ID                                       
	        , PERF_CHECK_PROGRAM_DIV_CD                                
	        , INDC_APPLY_YN 
	        , YN_DECIDE_DIV_CD                                         
	        , UPDATE_DT                                                
	 	) VALUES (#{wrkjob_cd}                                            
	        , #{perf_check_indc_id}                                    
	        , #{perf_check_program_div_cd}                             
	        , #{indc_apply_yn}                                         
	        , #{yn_decide_div_cd}   
	        , SYSDATE                                                  
	        )
			</when>
			<when test="yn_decide_div_cd == null or yn_decide_div_cd == ''">
		INSERT INTO   WJ_PERF_CHK_INDC_HISTORY  
	        ( WRKJOB_CD                                                
	        , PERF_CHECK_INDC_ID                                       
	        , PERF_CHECK_PROGRAM_DIV_CD                                
	        , INDC_APPLY_YN 
	        , PASS_MAX_VALUE                                           
	        , UPDATE_DT                                                
	 	) VALUES (#{wrkjob_cd}                                            
	        , #{perf_check_indc_id}                                    
	        , #{perf_check_program_div_cd}                             
	        , #{indc_apply_yn}                                         
        	, #{pass_max_value}
	        , SYSDATE                                                  
	        )
			</when>
		</choose>
        </insert>
	
	<insert id="insertWjPerfChkIndc" parameterType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.insertWjPerfChkIndc */
	
		<choose>
			<when test="pass_max_value == null or pass_max_value == ''">
		INSERT INTO   WJ_PERF_CHK_INDC  
	        ( WRKJOB_CD                                                
	        , PERF_CHECK_INDC_ID                                       
	        , PERF_CHECK_PROGRAM_DIV_CD                                
	        , INDC_APPLY_YN 
	        , YN_DECIDE_DIV_CD                                         
	        , UPDATE_DT                                                
	 	) VALUES (#{wrkjob_cd}                                            
	        , #{perf_check_indc_id}                                    
	        , #{perf_check_program_div_cd}                             
	        , #{indc_apply_yn}                                         
	        , #{yn_decide_div_cd}   
	        , SYSDATE                                                  
	        )
			</when>
			<when test="yn_decide_div_cd == null or yn_decide_div_cd == ''">
		INSERT INTO   WJ_PERF_CHK_INDC  
	        ( WRKJOB_CD                                                
	        , PERF_CHECK_INDC_ID                                       
	        , PERF_CHECK_PROGRAM_DIV_CD                                
	        , INDC_APPLY_YN 
	        , PASS_MAX_VALUE                                           
	        , UPDATE_DT                                                
	 	) VALUES (#{wrkjob_cd}                                            
	        , #{perf_check_indc_id}                                    
	        , #{perf_check_program_div_cd}                             
	        , #{indc_apply_yn}                                         
        	, #{pass_max_value}
	        , SYSDATE                                                  
	        )
			</when>
		</choose>
	        
	        
	</insert>
		
	<update id="updateWjPerfChkIndc" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateWjPerfChkIndc */
				UPDATE  WJ_PERF_CHK_INDC A    
		<trim prefix="SET" suffixOverrides=",">
			<if test="indc_apply_yn != null and indc_apply_yn != ''">
		   		A.INDC_APPLY_YN = #{indc_apply_yn}                           
			</if>
			<if test="pass_max_value != null and pass_max_value != ''">
		      , A.PASS_MAX_VALUE = #{pass_max_value}
	      	</if>
			<if test="yn_decide_div_cd != null and yn_decide_div_cd != ''">
		      , A.YN_DECIDE_DIV_CD = #{yn_decide_div_cd}
	      	</if>                     
		      , A.UPDATE_DT = SYSDATE
	      </trim>
		 WHERE  A.WRKJOB_CD = #{wrkjob_cd}
		   AND  A.PERF_CHECK_INDC_ID = #{perf_check_indc_id}
		   AND  A.PERF_CHECK_PROGRAM_DIV_CD = #{perf_check_program_div_cd}
	</update>
		
	<select id="checkWjPerfChkIndc" parameterType="deployPerfChkIndc" resultType="int">
		/* PerformanceCheckIndexDao.checkWjPerfChkIndc */
      SELECT COUNT(PERF_CHECK_INDC_ID) 
      FROM WJ_PERF_CHK_INDC 
          WHERE 
            WRKJOB_CD = #{wrkjob_cd} AND
            PERF_CHECK_INDC_ID = #{perf_check_indc_id} AND
            PERF_CHECK_PROGRAM_DIV_CD =#{perf_check_program_div_cd}
	</select>
	
	<delete id="deleteWjPerfChkIndc" parameterType="deployPerfChkIndc" >
		/* PerformanceCheckIndexDao.checkWjPerfChkIndc */
    	DELETE WJ_PERF_CHK_INDC
          WHERE 
            WRKJOB_CD = #{wrkjob_cd} AND
            PERF_CHECK_INDC_ID = #{perf_check_indc_id} AND
            PERF_CHECK_PROGRAM_DIV_CD =#{perf_check_program_div_cd}
	</delete>
	
	<sql id="ProgramPerformanceExceptionRequestList">
			/* ProgramPerformanceExceptionRequestList */
   SELECT *
  FROM (
      SELECT  
              Z.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
            , A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID(성능점검ID)
            , C.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID(프로그램ID)
            , C.PROGRAM_NM AS PROGRAM_NM                                    -- 프로그램명(프로그램명)      
            , C.DBIO AS DBIO                                                -- DBIO(SQL식별자(DBIO))
            , A.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID(배포ID)
            , A.DEPLOY_NM AS DEPLOY_NM                                      -- 배포명(배포명)
            , TO_CHAR(A.DEPLOY_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS DEPLOY_REQUEST_DT             -- 배포요청일시(배포요청일시)
            , A.DEPLOY_EXPECTED_DAY AS DEPLOY_EXPECTED_DAY                  -- 배표예정일자(배표예정일자)
            , U3.USER_NM AS DEPLOY_REQUESTER                                -- 사용자명(배포요청자)
            , A.PERF_CHECK_STEP_NM AS PERF_CHECK_STEP_NM                    -- 성능점검단계명(성능점검단계)
            , CASE WHEN A.PERF_TEST_COMPLETE_YN = 'Y' THEN
                        '점검완료'
                   WHEN A.LAST_PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID AND A.PERF_TEST_COMPLETE_YN = 'N' THEN   
                        '점검중'
                   WHEN A.LAST_PERF_CHECK_STEP_ID <![CDATA[<]]> A.PERF_CHECK_STEP_ID AND A.PERF_TEST_COMPLETE_YN = 'N' THEN        
                        '미수행'
               END AS DEPLOY_CHECK_STATUS_CD_NM                        -- 배포성능점검상태코드명(성능 점검 상태)         
            , C.FILE_NM AS FILE_NM                                          -- 파일명(파일명)
            , C.DIR_NM AS DIR_NM                                            -- 디렉토리명(디렉토리명)
            , C.PERF_CHECK_AUTO_PASS_YN                                     -- 성능점검자동적합여부(자동통과여부)  
            , CASE WHEN H.PERF_CHECK_RESULT_DIV_CD IS NOT NULL THEN
                        CD6.CD_NM
                   ELSE
                        NVL(E.PERF_CHECK_RESULT_DIV_CD_NM, '미수행')
              END AS PERF_CHECK_RESULT_DIV_CD_NM                            -- 프로그램성능점검결과(프로그램 성능 점검 결과)          
            , CD2.CD_NM AS EXCEPTION_PRC_STATUS_CD_NM                       -- 예외처리상태코드명(예외처리상태)
            , F.PERF_CHECK_AUTO_PASS_DEL_YN AS PERF_CHECK_AUTO_PASS_DEL_YN  -- 성능점검자동적합삭제여부(자동통과삭제여부) 
            , TO_CHAR(F.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_REQUEST_DT                -- 예외요청일시(예외요청일시)      
            , U1.USER_NM AS EXCEPTION_REQUESTER                             -- 사용자명(예외요청자)
            , CD4.CD_NM AS EXCEPTION_REQUEST_WHY_CD_NM                      -- 예외처리사유코드(예외처리사유)
            , CD5.CD_NM AS EXCEPTION_PRC_METH_CD_NM                         -- 예외처리방법코드명(예외처리방법)
            , F.EXCEPTION_REQUEST_WHY AS EXCEPTION_REQUEST_DETAIL_WHY       -- 예외요청사유(예외요청상세사유)      
            , TO_CHAR(F.EXCEPTION_PRC_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_PRC_DT                        -- 예외처리일시(예외처리일시)      
            , U2.USER_NM AS EXCEPT_PROCESSOR                                -- 사용자명(예외처리자)
            , F.EXCEPTION_PRC_WHY AS EXCEPTION_PRC_WHY                      -- 예외처리사유(예외처리결과)
            , C.PROGRAM_DESC AS PROGRAM_DESC
            -- HIDDEN
            , A.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드
            , F.EXCEPTION_REQUEST_ID AS EXCEPTION_REQUEST_ID                -- 예외요청ID
            , A.DEPLOY_CHECK_STATUS_CD AS DEPLOY_CHECK_STATUS_CD            -- 배포성능점검상태코드
            , F.EXCEPTION_PRC_STATUS_CD AS EXCEPTION_PRC_STATUS_CD          -- 예외처리상태코드
            , F.EXCEPTION_REQUESTER_ID AS EXCEPTION_REQUESTER_ID            -- 예외요청자ID 
            , F.EXCEPTER_ID AS EXCEPTER_ID                                  -- 예외처리자ID
            , C.PROGRAM_DIV_CD AS PROGRAM_DIV_CD                            -- 프로그램구분코드
            , CASE WHEN F.EXCEPTION_PRC_STATUS_CD IS NULL THEN
                        E.PROGRAM_EXECUTE_TMS
                   ELSE
                        F.PROGRAM_EXECUTE_TMS
              END AS PROGRAM_EXECUTE_TMS                                    -- 프로그램수행회차
            , A.DEPLOY_REQUESTER_ID AS DEPLOY_REQUESTER_ID                  -- 배포요청자ID
            , CASE WHEN H.PERF_CHECK_RESULT_DIV_CD IS NOT NULL THEN
                        H.PERF_CHECK_RESULT_DIV_CD
                   ELSE
                        NVL(E.PERF_CHECK_RESULT_DIV_CD, '9')
              END AS PERF_CHECK_RESULT_DIV_CD           
            , F.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD              -- 예외처리방법코드
            , F.EXCEPTION_REQUEST_WHY AS EXCEPTION_REQUEST_WHY              -- 예외요청사유(예외요청상세사유)    
            , CASE WHEN F.EXCEPTION_PRC_STATUS_CD IS NULL THEN
                   A.LAST_PERF_CHECK_STEP_ID
                ELSE 
                   F.PERF_CHECK_STEP_ID
               END AS LAST_PERF_CHECK_STEP_ID                               -- 최종성능점검단계ID
            , F.EXCEPTION_REQUEST_WHY_CD AS EXCEPTION_REQUEST_WHY_CD        -- 예외처리사유코드
            , CASE WHEN A.PERF_TEST_COMPLETE_YN = 'Y' THEN
                        '1'   --점검완료
                   WHEN A.LAST_PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID AND A.PERF_TEST_COMPLETE_YN = 'N' THEN   
                        '2'   --점검중
                   WHEN A.LAST_PERF_CHECK_STEP_ID <![CDATA[<]]> A.PERF_CHECK_STEP_ID AND A.PERF_TEST_COMPLETE_YN = 'N' THEN        
                        '3'   --미수행
               END AS STEP_DEPLOY_CHECK_STATUS_CD                           -- 단계별배포성능점검상태코드 
            , A.PERF_CHECK_STEP_ID                                          -- 배포성능점검단계ID
            , C.PROGRAM_TYPE_CD AS PROGRAM_TYPE_CD                          -- 프로그램유형코드
            , CD7.CD_NM AS PROGRAM_TYPE_CD_NM                               -- 프로그램유형명
            , C.SQL_COMMAND_TYPE_CD AS SQL_COMMAND_TYPE_CD                  -- SQL명령 유형코드
            , C.DYNAMIC_SQL_YN AS DYNAMIC_SQL_YN                            -- 다이나믹SQL여부
       FROM  (
               SELECT  A.PERF_CHECK_ID
                    ,  A.DEPLOY_ID
                    ,  A.DEPLOY_NM
                    ,  A.DEPLOY_EXPECTED_DAY
                    ,  A.WRKJOB_CD
                    ,  A.DEPLOY_CHECK_STATUS_CD
                    ,  A.DEPLOY_REQUESTER_ID
                    ,  A.LAST_PERF_CHECK_STEP_ID
                    ,  A.DEPLOY_REQUEST_DT
                    ,  B.PROGRAM_ID
                    ,  C.PERF_CHECK_STEP_ID
                    ,  C.PERF_TEST_COMPLETE_YN
                    ,  D.PERF_CHECK_STEP_NM
                 FROM  DEPLOY_PERF_CHK A 
                    ,  DEPLOY_PERF_CHK_TARGET_PGM B 
                    ,  DEPLOY_PERF_CHK_STEP_EXEC C
                    ,  DEPLOY_PERF_CHK_STEP D
                WHERE  A.PERF_CHECK_ID = B.PERF_CHECK_ID
                  AND  A.PERF_CHECK_ID = C.PERF_CHECK_ID
                  AND  C.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
                  AND  NVL(B.EXCEPTION_PRC_METH_CD, ' ') <![CDATA[<>]]>  '3'  --3/11                  
                  
                  AND  A.DEPLOY_CHECK_STATUS_CD = '01' 
                  AND  A.LAST_PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
                  
                  AND NOT EXISTS ( -- 최종 수행 적합건 제외
				                 SELECT 'X'
				                   FROM DEPLOY_PERF_CHK_RESULT Y
				                  WHERE (Y.PERF_CHECK_ID, Y.PERF_CHECK_STEP_ID, Y.PROGRAM_ID, Y.PROGRAM_EXECUTE_TMS) IN 
				                           (
				                             SELECT 
				                                    Z.PERF_CHECK_ID
				                                  , Z.PERF_CHECK_STEP_ID
				                                  , Z.PROGRAM_ID
				                                  , MAX(Z.PROGRAM_EXECUTE_TMS) AS LAST_PROGRAM_EXECUTE_TMS
				                               FROM DEPLOY_PERF_CHK_RESULT Z
				                              WHERE Z.PERF_CHECK_ID = C.PERF_CHECK_ID
				                                AND Z.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
				                                AND Z.PROGRAM_ID = B.PROGRAM_ID
				                             GROUP BY Z.PERF_CHECK_ID, Z.PERF_CHECK_STEP_ID, Z.PROGRAM_ID                                                           
				                           )
				                   AND Y.PERF_CHECK_RESULT_DIV_CD IN ('A')         
         						  )
             ) A  
            , DEPLOY_PERF_CHK_ALL_PGM C
            , (SELECT A.PERF_CHECK_ID
                    , A.PERF_CHECK_STEP_ID
                    , A.PROGRAM_ID
                    , A.PROGRAM_EXECUTE_TMS
                    , A.PERF_CHECK_RESULT_DIV_CD
                    , CD3.CD_NM AS PERF_CHECK_RESULT_DIV_CD_NM
                 FROM DEPLOY_PERF_CHK_RESULT A  
                    , CD CD3                 
                WHERE (A.PERF_CHECK_ID, A.PERF_CHECK_STEP_ID, A.PROGRAM_ID, A.PROGRAM_EXECUTE_TMS) IN 
                                   (     
                                   SELECT 
                                          PERF_CHECK_ID
                                        , PERF_CHECK_STEP_ID
                                        , PROGRAM_ID
                                        , MAX(PROGRAM_EXECUTE_TMS) AS LAST_PROGRAM_EXECUTE_TMS
                                    FROM  DEPLOY_PERF_CHK_RESULT
                                   GROUP BY PERF_CHECK_ID, PERF_CHECK_STEP_ID, PROGRAM_ID        
                                   ) 

                 AND  A.PERF_CHECK_RESULT_DIV_CD = CD3.CD(+)
                 AND  CD3.GRP_CD_ID(+) = '1055'
                 AND  A.PERF_CHECK_RESULT_DIV_CD IN ('B', 'C')
              ) E      
              , (
               SELECT *
                 FROM DEPLOY_PERF_CHK_EXCPT_REQUEST
                WHERE EXCEPTION_PRC_STATUS_CD = '1' 
              ) F
            , DEPLOY_PERF_CHK_RESULT H
            , USERS U1
            , USERS U2
            , USERS U3
            , WRKJOB_CD Z
            , CD CD1
            , CD CD2
            , CD CD4
            , CD CD5
            , CD CD6
            , CD CD7
       WHERE  A.PROGRAM_ID = C.PROGRAM_ID
         AND  C.PERF_CHECK_AUTO_PASS_YN = 'N' --3/11    
         AND  E.PERF_CHECK_ID(+) = A.PERF_CHECK_ID
         AND  E.PERF_CHECK_STEP_ID(+) = A.PERF_CHECK_STEP_ID
         AND  E.PROGRAM_ID(+) = A.PROGRAM_ID
         
         AND  F.PERF_CHECK_ID(+) = A.PERF_CHECK_ID
         AND  F.PERF_CHECK_STEP_ID(+) = A.PERF_CHECK_STEP_ID
         AND  F.PROGRAM_ID(+) = A.PROGRAM_ID
         
         AND  H.PERF_CHECK_ID(+) = F.PERF_CHECK_ID 
         AND  H.PERF_CHECK_STEP_ID(+) = F.PERF_CHECK_STEP_ID
         AND  H.PROGRAM_ID(+) = F.PROGRAM_ID
         AND  H.PROGRAM_EXECUTE_TMS(+) = F.PROGRAM_EXECUTE_TMS
       
         AND  A.WRKJOB_CD = Z.WRKJOB_CD
         AND  F.EXCEPTION_REQUESTER_ID = U1.USER_ID(+)
         AND  F.EXCEPTER_ID = U2.USER_ID(+)
         AND  A.DEPLOY_REQUESTER_ID = U3.USER_ID
         AND  A.DEPLOY_CHECK_STATUS_CD = CD1.CD(+)
         AND  CD1.GRP_CD_ID(+) = '1056'
         AND  F.EXCEPTION_PRC_STATUS_CD = CD2.CD(+)
         AND  CD2.GRP_CD_ID(+) = '1051'
         AND  F.EXCEPTION_REQUEST_WHY_CD = CD4.CD(+)
         AND  CD4.GRP_CD_ID(+) = '1060'   
         AND  F.EXCEPTION_PRC_METH_CD = CD5.CD(+)
         AND  CD5.GRP_CD_ID(+) = '1061'
         AND  H.PERF_CHECK_RESULT_DIV_CD = CD6.CD(+)
         AND  CD6.GRP_CD_ID(+) = '1055'
       	 AND  C.PROGRAM_TYPE_CD = CD7.CD(+)
         AND  CD7.GRP_CD_ID(+) = '1005'  
         AND  C.PROGRAM_TYPE_CD = '1'   -- 온라인
		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		   -- 업무코드가 입력되면
		   AND  A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                                 FROM WRKJOB_CD
                                 START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                                 CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )
		</if>
		<if test="user_auth_id != null and user_auth_id == '6'.toString()">
         -- 개발_배포성능관리자로 로그인하면 2019-03-12
         AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                              FROM USER_WRKJOB 
                              WHERE TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN WORKJOB_START_DAY AND WORKJOB_END_DAY 
                              AND USER_ID = #{user_id} )    
		</if>
		
		<if test="search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
		   -- 배포요청일자가 입력되면
		   	<if test="call_from_parent != 'Y'.toString()">
		   		AND  A.DEPLOY_REQUEST_DT BETWEEN TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{search_to_deploy_request_dt}|| ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
		   	</if>
		</if>
		
		<choose>
			<when test="search_exception_prc_status_cd != null and search_exception_prc_status_cd == '1'.toString()">
			   -- 예외처리 요청상태가 입력되면(1)
			   AND  F.EXCEPTION_PRC_STATUS_CD IS NOT NULL
			</when>
			<when test="search_exception_prc_status_cd != null and search_exception_prc_status_cd == '5'.toString()">
			   -- 예외처리 요청상태가 입력되면(5)
			   AND  F.EXCEPTION_PRC_STATUS_CD IS NULL
			</when>
			<when test="search_exception_prc_status_cd != null and search_exception_prc_status_cd != '' and search_exception_prc_status_cd != '1' and search_exception_prc_status_cd != '5'">
			   -- 예외처리 요청상태가 입력되면
			   AND  F.EXCEPTION_PRC_STATUS_CD = #{search_exception_prc_status_cd}
			</when>
			<otherwise>
			   -- 예외처리 요청상태가 입력되면(전체)
			</otherwise>
		</choose>
		<if test="search_exception_prc_meth_cd != null and search_exception_prc_meth_cd != ''">
		   -- 예외처리 방법이 입력되면
		   AND  F.EXCEPTION_PRC_METH_CD = #{search_exception_prc_meth_cd}
		</if>
		<if test="searchKey != null and searchKey != '' and search_dbio != null and search_dbio != ''">
		   -- SQL식별자(DBIO)가 입력되면
		   AND  UPPER(C.DBIO) LIKE '%'||UPPER(#{search_dbio})||'%'
		</if>
		<if test="searchKey != null and searchKey != '' and search_program_nm != null and search_program_nm != ''">
		   -- 프로그램명, 거래명이 입력되면
		   AND  UPPER(C.PROGRAM_NM) like '%'||UPPER(#{search_program_nm})||'%'
		</if>
		<if test="searchKey != null and searchKey != '' and search_program_desc != null and search_program_desc != ''">
		   -- 프로그램설명이 입력되면
		   AND  UPPER(C.PROGRAM_DESC) like '%'||UPPER(#{search_program_desc})||'%'
		</if>
		<if test="search_deploy_requester != null and search_deploy_requester != ''">
		   -- 배포요청자가 입력되면
		   AND  U3.USER_NM LIKE '%'|| #{search_deploy_requester} || '%'
		</if>
		<if test="search_user_id != null and search_user_id != ''">
		   -- 개발자 권한인 경우 > 로그인 USER_ID(추가해야함.)
		   AND  A.DEPLOY_REQUESTER_ID = #{search_user_id}   
		</if>
		
		<if test="howToWay != null and howToWay != '' and howToWay =='C'.toString() ">
		   -- 일괄 예외처리 요청이 들어왔을 시
		  AND F.EXCEPTION_PRC_METH_CD <![CDATA[<>]]> '1'		
		</if>
		
		<if test="search_deploy_id != null and search_deploy_id != ''">
			-- 배포ID가 입력되면
	 	  	AND  UPPER(A.DEPLOY_ID) LIKE '%'||UPPER(#{search_deploy_id})||'%'
	   	</if>
		<if test="search_perf_check_step_id != null and search_perf_check_step_id != ''">
			-- 성능점검단계ID가 입력되면
         AND A.PERF_CHECK_STEP_ID = #{search_perf_check_step_id}
	   	</if>
	   	
	   	<if test="call_from_parent != null and call_from_parent eq 'Y'.toString()">
        	-- 성능 점검 관리에서 프로그램 호출이 되면
	       AND  A.PERF_CHECK_ID = #{search_perf_check_id}
	       AND  A.PERF_CHECK_STEP_ID = #{search2_perf_check_step_id}
	       AND  A.PROGRAM_ID = #{search_program_id}
		   	<if test="search_program_execute_tms != null and search_program_execute_tms != 'null' and search_program_execute_tms != ''" >
		       AND  E.PROGRAM_EXECUTE_TMS = #{search_program_execute_tms}
		       AND  F.PROGRAM_EXECUTE_TMS(+) = #{search_program_execute_tms}
			</if>
		</if>
	   	
		)A
		ORDER BY A.PERF_CHECK_ID DESC, A.PERF_CHECK_STEP_ID, A.EXCEPTION_REQUEST_DT DESC NULLS LAST, A.PROGRAM_ID
	</sql>
	<sql id="ProgramPerformanceExceptionRequestListEspc">
			/* ProgramPerformanceExceptionRequestListEspc */
   SELECT *
  FROM (
      SELECT  
              Z.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
            , Z.TOP_WRKJOB_CD AS TOP_WRKJOB_CD								-- 부모 업무 코드명(업무) 20210827 kwj
            , A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID(성능점검ID)
            , C.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID(프로그램ID)
            , C.PROGRAM_NM AS PROGRAM_NM                                    -- 프로그램명(프로그램명)      
            , C.DBIO AS DBIO                                                -- DBIO(SQL식별자(DBIO))
            , A.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID(배포ID)
            , A.DEPLOY_NM AS DEPLOY_NM                                      -- 배포명(배포명)
            , TO_CHAR(A.DEPLOY_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS DEPLOY_REQUEST_DT             -- 배포요청일시(배포요청일시)
            , A.DEPLOY_EXPECTED_DAY AS DEPLOY_EXPECTED_DAY                  -- 배표예정일자(배표예정일자)
            , U3.USER_NM AS DEPLOY_REQUESTER                                -- 사용자명(배포요청자)
            , A.PERF_CHECK_STEP_NM AS PERF_CHECK_STEP_NM                    -- 성능점검단계명(성능점검단계)
            , CASE WHEN A.PERF_TEST_COMPLETE_YN = 'Y' THEN
                        '검증완료'
                   WHEN A.LAST_PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID AND A.PERF_TEST_COMPLETE_YN = 'N' THEN   
                        '검증중'
                   WHEN A.LAST_PERF_CHECK_STEP_ID <![CDATA[<]]> A.PERF_CHECK_STEP_ID AND A.PERF_TEST_COMPLETE_YN = 'N' THEN        
                        '미수행'
               END AS DEPLOY_CHECK_STATUS_CD_NM                        -- 배포성능점검상태코드명(성능 점검 상태)         
            , C.FILE_NM AS FILE_NM                                          -- 파일명(파일명)
            , C.DIR_NM AS DIR_NM                                            -- 디렉토리명(디렉토리명)
            , C.PERF_CHECK_AUTO_PASS_YN                                     -- 성능점검자동적합여부(자동통과여부)  
            , CASE WHEN H.PERF_CHECK_RESULT_DIV_CD IS NOT NULL THEN
                        CD6.CD_NM
                   ELSE
                        NVL(E.PERF_CHECK_RESULT_DIV_CD_NM, '미수행')
              END AS PERF_CHECK_RESULT_DIV_CD_NM                            -- 프로그램성능점검결과(프로그램 성능 점검 결과)          
            , CD2.CD_NM AS EXCEPTION_PRC_STATUS_CD_NM                       -- 예외처리상태코드명(예외처리상태)
            , F.PERF_CHECK_AUTO_PASS_DEL_YN AS PERF_CHECK_AUTO_PASS_DEL_YN  -- 성능점검자동적합삭제여부(자동통과삭제여부) 
            , TO_CHAR(F.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_REQUEST_DT                -- 예외요청일시(예외요청일시)      
            , U1.USER_NM AS EXCEPTION_REQUESTER                             -- 사용자명(예외요청자)
            , CD4.CD_NM AS EXCEPTION_REQUEST_WHY_CD_NM                      -- 예외처리사유코드(예외처리사유)
            , CASE WHEN A.PERF_CHECK_EVALUATION_METH_CD IN ('2', '3') THEN
                        CD5.REF_VL_2
                   ELSE 
                        CD5.CD_NM 
               END AS EXCEPTION_PRC_METH_CD_NM                              -- GEUM 2021-08-12 예외처리방법코드명(예외처리방법)
            , F.EXCEPTION_REQUEST_WHY AS EXCEPTION_REQUEST_DETAIL_WHY       -- 예외요청사유(예외요청상세사유)      
            , TO_CHAR(F.EXCEPTION_PRC_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_PRC_DT                        -- 예외처리일시(예외처리일시)      
            , U2.USER_NM AS EXCEPT_PROCESSOR                                -- 사용자명(예외처리자)
            , F.EXCEPTION_PRC_WHY AS EXCEPTION_PRC_WHY                      -- 예외처리사유(예외처리결과)
            , C.PROGRAM_DESC AS PROGRAM_DESC
            -- HIDDEN
            , A.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드
            , F.EXCEPTION_REQUEST_ID AS EXCEPTION_REQUEST_ID                -- 예외요청ID
            , A.DEPLOY_CHECK_STATUS_CD AS DEPLOY_CHECK_STATUS_CD            -- 배포성능점검상태코드
            , F.EXCEPTION_PRC_STATUS_CD AS EXCEPTION_PRC_STATUS_CD          -- 예외처리상태코드
            , F.EXCEPTION_REQUESTER_ID AS EXCEPTION_REQUESTER_ID            -- 예외요청자ID 
            , F.EXCEPTER_ID AS EXCEPTER_ID                                  -- 예외처리자ID
            , C.PROGRAM_DIV_CD AS PROGRAM_DIV_CD                            -- 프로그램구분코드
			, CD8.CD_NM AS PROGRAM_DIV_CD_NM								-- 프로그램구분
            , CASE WHEN F.EXCEPTION_PRC_STATUS_CD IS NULL THEN
                        E.PROGRAM_EXECUTE_TMS
                   ELSE
                        F.PROGRAM_EXECUTE_TMS
              END AS PROGRAM_EXECUTE_TMS                                    -- 프로그램수행회차
            , A.DEPLOY_REQUESTER_ID AS DEPLOY_REQUESTER_ID                  -- 배포요청자ID
            , CASE WHEN H.PERF_CHECK_RESULT_DIV_CD IS NOT NULL THEN
                        H.PERF_CHECK_RESULT_DIV_CD
                   ELSE
                        NVL(E.PERF_CHECK_RESULT_DIV_CD, '9')
              END AS PERF_CHECK_RESULT_DIV_CD           
            , F.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD              -- 예외처리방법코드
            , F.EXCEPTION_REQUEST_WHY AS EXCEPTION_REQUEST_WHY              -- 예외요청사유(예외요청상세사유)    
            , CASE WHEN F.EXCEPTION_PRC_STATUS_CD IS NULL THEN
                   A.LAST_PERF_CHECK_STEP_ID
                ELSE 
                   F.PERF_CHECK_STEP_ID
               END AS LAST_PERF_CHECK_STEP_ID                               -- 최종성능점검단계ID
            , F.EXCEPTION_REQUEST_WHY_CD AS EXCEPTION_REQUEST_WHY_CD        -- 예외처리사유코드
            , CASE WHEN A.PERF_TEST_COMPLETE_YN = 'Y' THEN
                        '1'   --점검완료
                   WHEN A.LAST_PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID AND A.PERF_TEST_COMPLETE_YN = 'N' THEN   
                        '2'   --점검중
                   WHEN A.LAST_PERF_CHECK_STEP_ID <![CDATA[<]]> A.PERF_CHECK_STEP_ID AND A.PERF_TEST_COMPLETE_YN = 'N' THEN        
                        '3'   --미수행
               END AS STEP_DEPLOY_CHECK_STATUS_CD                           -- 단계별배포성능점검상태코드 
            , A.PERF_CHECK_STEP_ID                                          -- 배포성능점검단계ID
            , C.PROGRAM_TYPE_CD AS PROGRAM_TYPE_CD                          -- 프로그램유형코드
            , CD7.CD_NM AS PROGRAM_TYPE_CD_NM                               -- 프로그램유형명
            , C.SQL_COMMAND_TYPE_CD AS SQL_COMMAND_TYPE_CD                  -- SQL명령 유형코드
            , C.DYNAMIC_SQL_YN AS DYNAMIC_SQL_YN                            -- 다이나믹SQL여부
            , TO_CHAR(C.REG_DT, 'YYYY-MM-DD HH24:MI:SS') AS REG_DT                  -- 등록일시
            , TO_CHAR(C.LAST_UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATE_DT  -- 변경일시
       FROM  (
               SELECT  A.PERF_CHECK_ID
                    ,  A.DEPLOY_ID
                    ,  A.DEPLOY_NM
                    ,  A.DEPLOY_EXPECTED_DAY
                    ,  A.WRKJOB_CD
                    ,  A.DEPLOY_CHECK_STATUS_CD
                    ,  A.DEPLOY_REQUESTER_ID
                    ,  A.LAST_PERF_CHECK_STEP_ID
                    ,  A.DEPLOY_REQUEST_DT
                    ,  B.PROGRAM_ID
                    ,  C.PERF_CHECK_STEP_ID
                    ,  C.PERF_TEST_COMPLETE_YN
                    ,  D.PERF_CHECK_STEP_NM
                    ,  C.PERF_CHECK_EVALUATION_METH_CD -- GEUM 2021-08-12
                 FROM  DEPLOY_PERF_CHK A 
                    ,  DEPLOY_PERF_CHK_TARGET_PGM B 
                    ,  DEPLOY_PERF_CHK_STEP_EXEC C
                    ,  DEPLOY_PERF_CHK_STEP D
                WHERE  A.PERF_CHECK_ID = B.PERF_CHECK_ID
                  AND  A.PERF_CHECK_ID = C.PERF_CHECK_ID
                  AND  C.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
                  AND  NVL(B.EXCEPTION_PRC_METH_CD, ' ') <![CDATA[<>]]>  '3'  --3/11                  
                  
                  AND  A.DEPLOY_CHECK_STATUS_CD = '01' 
                  AND  A.LAST_PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
                  
                  AND NOT EXISTS ( -- 적합건 제외
                                 SELECT 'X'
                                   FROM DEPLOY_PERF_CHK_RESULT Y
                                      , DEPLOY_PERF_CHK_STEP_EXEC Z
				                          WHERE Y.PERF_CHECK_ID = C.PERF_CHECK_ID              --GEUM 2021-08-18
                                    AND Y.PERF_CHECK_STEP_ID  = C.PERF_CHECK_STEP_ID   --GEUM 2021-08-18
                                    AND Y.PROGRAM_ID = B.PROGRAM_ID                    --GEUM 2021-08-18
                                    AND Z.PERF_CHECK_ID = Y.PERF_CHECK_ID 
                                    AND Z.PERF_CHECK_STEP_ID = Y.PERF_CHECK_STEP_ID
                                    AND Z.PERF_CHECK_EVALUATION_METH_CD = Y.PERF_CHECK_EVALUATION_METH_CD
                                    AND Y.PERF_CHECK_RESULT_DIV_CD IN ('A')
                                 )   
             ) A  
            , DEPLOY_PERF_CHK_ALL_PGM C
            , ( /* B:부적합, C:오류 건 SET */
               SELECT A.PERF_CHECK_ID
                    , A.PERF_CHECK_STEP_ID
                    , A.PROGRAM_ID
                    , A.PROGRAM_EXECUTE_TMS
                    , A.PERF_CHECK_RESULT_DIV_CD
                    , CD3.CD_NM AS PERF_CHECK_RESULT_DIV_CD_NM
                 FROM DEPLOY_PERF_CHK_RESULT A  
                    , DEPLOY_PERF_CHK_STEP_EXEC B
                    , CD CD3                 
                WHERE B.PERF_CHECK_ID = A.PERF_CHECK_ID 
                  AND B.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
                  AND B.PERF_CHECK_EVALUATION_METH_CD = A.PERF_CHECK_EVALUATION_METH_CD
                  AND A.PERF_CHECK_RESULT_DIV_CD = CD3.CD(+)
                  AND CD3.GRP_CD_ID(+) = '1055'
                  AND A.PERF_CHECK_RESULT_DIV_CD IN ('B', 'C')
              ) E      
              , (
               SELECT *
                 FROM DEPLOY_PERF_CHK_EXCPT_REQUEST
                WHERE EXCEPTION_PRC_STATUS_CD = '1' 
              ) F
            , DEPLOY_PERF_CHK_RESULT H
            , USERS U1
            , USERS U2
            , USERS U3
			,(SELECT DISTINCT WRKJOB_CD, WRKJOB_CD_NM, CONNECT_BY_ROOT WRKJOB_CD AS TOP_WRKJOB_CD 
		        FROM WRKJOB_CD 
		        START WITH UPPER_WRKJOB_CD IS NULL
		        CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) Z     				-- 20210827 kwj       
		    , CD CD1	
            , CD CD2
            , CD CD4
            , CD CD5
            , CD CD6
            , CD CD7
			, CD CD8
       WHERE  A.PROGRAM_ID = C.PROGRAM_ID
         AND  C.PERF_CHECK_AUTO_PASS_YN = 'N'
         AND  E.PERF_CHECK_ID(+) = A.PERF_CHECK_ID
         AND  E.PERF_CHECK_STEP_ID(+) = A.PERF_CHECK_STEP_ID
         AND  E.PROGRAM_ID(+) = A.PROGRAM_ID
         
         AND  F.PERF_CHECK_ID(+) = A.PERF_CHECK_ID
         AND  F.PERF_CHECK_STEP_ID(+) = A.PERF_CHECK_STEP_ID
         AND  F.PROGRAM_ID(+) = A.PROGRAM_ID
         
         AND  H.PERF_CHECK_ID(+) = F.PERF_CHECK_ID 
         AND  H.PERF_CHECK_STEP_ID(+) = F.PERF_CHECK_STEP_ID
         AND  H.PROGRAM_ID(+) = F.PROGRAM_ID
         AND  H.PROGRAM_EXECUTE_TMS(+) = F.PROGRAM_EXECUTE_TMS
       
         AND  A.WRKJOB_CD = Z.WRKJOB_CD
         AND  F.EXCEPTION_REQUESTER_ID = U1.USER_ID(+)
         AND  F.EXCEPTER_ID = U2.USER_ID(+)
         AND  A.DEPLOY_REQUESTER_ID = U3.USER_ID
         AND  A.DEPLOY_CHECK_STATUS_CD = CD1.CD(+)
         AND  CD1.GRP_CD_ID(+) = '1056'
         AND  F.EXCEPTION_PRC_STATUS_CD = CD2.CD(+)
         AND  CD2.GRP_CD_ID(+) = '1051'
         AND  F.EXCEPTION_REQUEST_WHY_CD = CD4.CD(+)
         AND  CD4.GRP_CD_ID(+) = '1060'   
         AND  F.EXCEPTION_PRC_METH_CD = CD5.CD(+)
         AND  CD5.GRP_CD_ID(+) = '1061'
         AND  H.PERF_CHECK_RESULT_DIV_CD = CD6.CD(+)
         AND  CD6.GRP_CD_ID(+) = '1055'
       	 AND  C.PROGRAM_TYPE_CD = CD7.CD(+)
         AND  CD7.GRP_CD_ID(+) = '1005'  
         AND  C.PROGRAM_DIV_CD = CD8.CD(+)
         AND  CD8.GRP_CD_ID(+) = '1052'         
         AND  C.PROGRAM_TYPE_CD = '1'   -- 온라인
		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		   -- 업무코드가 입력되면
		   AND  A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                                 FROM WRKJOB_CD
                                 START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                                 CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )
		</if>
		<if test="user_auth_id != null and user_auth_id == '6'.toString()">
         -- 개발_배포성능관리자로 로그인하면 2019-03-12
         AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                              FROM USER_WRKJOB 
                              WHERE TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN WORKJOB_START_DAY AND WORKJOB_END_DAY 
                              AND USER_ID = #{user_id} )    
		</if>
		
		<if test="search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
		   -- 배포요청일자가 입력되면
		   	<if test="call_from_parent != 'Y'.toString()">
		   		AND  A.DEPLOY_REQUEST_DT BETWEEN TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{search_to_deploy_request_dt}|| ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
		   	</if>
		</if>
		
		<choose>
			<when test="search_exception_prc_status_cd != null and search_exception_prc_status_cd == '1'.toString()">
			   -- 예외처리 요청상태가 입력되면(1)
			   AND  F.EXCEPTION_PRC_STATUS_CD IS NOT NULL
			</when>
			<when test="search_exception_prc_status_cd != null and search_exception_prc_status_cd == '5'.toString()">
			   -- 예외처리 요청상태가 입력되면(5)
			   AND  F.EXCEPTION_PRC_STATUS_CD IS NULL
			</when>
			<when test="search_exception_prc_status_cd != null and search_exception_prc_status_cd != '' and search_exception_prc_status_cd != '1' and search_exception_prc_status_cd != '5'">
			   -- 예외처리 요청상태가 입력되면
			   AND  F.EXCEPTION_PRC_STATUS_CD = #{search_exception_prc_status_cd}
			</when>
			<otherwise>
			   -- 예외처리 요청상태가 입력되면(전체)
			</otherwise>
		</choose>
		<if test="search_exception_prc_meth_cd != null and search_exception_prc_meth_cd != ''">
		   -- 예외처리 방법이 입력되면
		   AND  F.EXCEPTION_PRC_METH_CD = #{search_exception_prc_meth_cd}
		</if>
		<if test="searchKey != null and searchKey != '' and search_dbio != null and search_dbio != ''">
		   -- SQL식별자(DBIO)가 입력되면
		   AND  UPPER(C.DBIO) LIKE '%'||UPPER(#{search_dbio})||'%'
		</if>
		<if test="searchKey != null and searchKey != '' and search_program_nm != null and search_program_nm != ''">
		   -- 프로그램명, 거래명이 입력되면
		   AND  UPPER(C.PROGRAM_NM) like '%'||UPPER(#{search_program_nm})||'%'
		</if>
		<if test="searchKey != null and searchKey != '' and search_program_desc != null and search_program_desc != ''">
		   -- 프로그램설명이 입력되면
		   AND  UPPER(C.PROGRAM_DESC) like '%'||UPPER(#{search_program_desc})||'%'
		</if>
		<if test="search_deploy_requester != null and search_deploy_requester != ''">
		   -- 배포요청자가 입력되면
		   AND  U3.USER_NM LIKE '%'|| #{search_deploy_requester} || '%'
		</if>
		<if test="search_user_id != null and search_user_id != ''">
		   -- 개발자 권한인 경우 > 로그인 USER_ID(추가해야함.)
		   AND  A.DEPLOY_REQUESTER_ID = #{search_user_id}   
		</if>
		
		<if test="howToWay != null and howToWay != '' and howToWay =='C'.toString() ">
		   -- 일괄 예외처리 요청이 들어왔을 시
		  AND F.EXCEPTION_PRC_METH_CD <![CDATA[<>]]> '1'		
		</if>
		
		<if test="search_deploy_id != null and search_deploy_id != ''">
			-- 배포ID가 입력되면
	 	  	AND  UPPER(A.DEPLOY_ID) LIKE '%'||UPPER(#{search_deploy_id})||'%'
	   	</if>
		<if test="search_perf_check_step_id != null and search_perf_check_step_id != ''">
			-- 성능점검단계ID가 입력되면
         AND A.PERF_CHECK_STEP_ID = #{search_perf_check_step_id}
	   	</if>
	   	
	   	<if test="call_from_parent != null and call_from_parent eq 'Y'.toString()">
        	-- 성능 점검 관리에서 프로그램 호출이 되면
	       AND  A.PERF_CHECK_ID = #{search_perf_check_id}
	       AND  A.PERF_CHECK_STEP_ID = #{search2_perf_check_step_id}
	       AND  A.PROGRAM_ID = #{search_program_id}
		   	<if test="search_program_execute_tms != null and search_program_execute_tms != 'null' and search_program_execute_tms != ''" >
		       AND  E.PROGRAM_EXECUTE_TMS = #{search_program_execute_tms}
		       AND  F.PROGRAM_EXECUTE_TMS(+) = #{search_program_execute_tms}
			</if>
		</if>
	   	
		)A
		ORDER BY A.PERF_CHECK_ID DESC, A.PERF_CHECK_STEP_ID, A.EXCEPTION_REQUEST_DT DESC NULLS LAST, A.PROGRAM_ID
	</sql>
	
	<select id="getDeployPerfChkPlanTableList" parameterType="deployPerfChkIndc"	resultType="selftunPlanTable">
	/* PerformanceCheckIndexDao.getDeployPerfChkPlanTableList */
			SELECT ID,
	       NVL(PARENT_ID,'-1') AS PARENT_ID,
	       (CASE ID
	        WHEN 0 THEN OPERATION || ' OPTIMIZER=' || OPTIMIZER
	        ELSE 
	            OPERATION 
	            || DECODE(OPTIONS, NULL, '', ' ' || OPTIONS) 
	            || DECODE(OBJECT_OWNER, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME || '@' || QBLOCK_NAME || '(' || OBJECT_TYPE || ')')
	            || '(COST=' || COST || ' CARD=' || CARDINALITY || ' BYTES=' || BYTES || ')'
	        END) AS TEXT,
	       QBLOCK_NAME,
	       PARTITION_START,
	       DISTRIBUTION,
	       ACCESS_PREDICATES,
	       FILTER_PREDICATES
	  FROM DEPLOY_PERF_CHK_PLAN_TABLE A
	 WHERE A.PROGRAM_ID = '57612'
	 AND A.STATEMENT_ID = (SELECT MAX(B.STATEMENT_ID) FROM DEPLOY_PERF_CHK_PLAN_TABLE B WHERE B.PROGRAM_ID = A.PROGRAM_ID)
	 ORDER BY ID
			
	</select>
	
	<select id="getProgramSourceDesc" parameterType="deployPerfChkIndc"	resultType="String">
	/* PerformanceCheckIndexDao.getProgramSourceDesc */
		SELECT  
	        A.PROGRAM_SOURCE_DESC AS PROGRAM_SOURCE_DESC                  -- 프로그램소스내용(SQL)
	  FROM  DEPLOY_PERF_CHK_ALL_PGM A   
	 WHERE  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID		
	</select>
	<select id="getProPerfExcReq" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.getProPerfExcReq */
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM, AA.*
		    FROM (
				<include refid="ProgramPerformanceExceptionRequestList"/>
		    ) AA
		    WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
		) AA
		WHERE AA.RNUM > ${pagePerCount} * (${currentPage} - 1)
	</select>
	
	<select id="getProPerfExcReqByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
	/* PerformanceCheckIndexDao.getProPerfExcReqByExcelDown */
		<include refid="ProgramPerformanceExceptionRequestList"/>
	</select>
	
	<select id="getProPerfExcReqDelByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getProPerfExcReqByExcelDown */
				<include refid="ProgramPerformanceExceptionDeleteList"/>
	</select>
	
	<select id="getBindTableList" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.getBindTableList */
		SELECT  
		        A.BIND_SEQ AS BIND_SEQ                                        -- 바인드순번
		      , A.BIND_VAR_NM AS BIND_VAR_NM                                  -- 바인드변수명
		      , A.BIND_VAR_VALUE AS BIND_VAR_VALUE                            -- 바인드변수값
		      , A.BIND_VAR_TYPE AS BIND_VAR_TYPE                              -- 바인드변수타입
		  FROM  DEPLOY_PERF_CHK_EXEC_BIND A
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
		   AND  A.PERF_CHECK_STEP_ID = #{last_perf_check_step_id}               -- 성능점검단계ID
		   AND  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
		   AND  A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}                  -- 프로그램수행회차
		ORDER BY A.BIND_SEQ
	</select>
	
	<select id="getPerfCheckResultTableList" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.getPerfCheckResultTableList */
		SELECT  
		        B.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM                    -- 성능점검지표명(점검 지표)
               , CASE WHEN TRIM(A.INDC_PASS_MAX_VALUE) IS NULL THEN
                          NULL
                      WHEN MOD(A.INDC_PASS_MAX_VALUE,1) = 0 THEN
		      	          TO_CHAR(A.INDC_PASS_MAX_VALUE)
		      	      ELSE 
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')
		        END AS INDC_PASS_MAX_VALUE                                    -- 지표적합최대값(적합)
                
		      , CASE WHEN TRIM(A.INDC_PASS_MAX_VALUE) IS NOT NULL AND MOD(A.INDC_PASS_MAX_VALUE,1) = 0 THEN
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE) || ' 초과'
		      	     WHEN TRIM(A.INDC_PASS_MAX_VALUE) IS NOT NULL THEN 
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999') || ' 초과'
		        END AS NOT_PASS_PASS                                          -- 부적합(부적합)
           
		      , CD1.CD_NM  AS INDC_YN_DECIDE_DIV_CD_NM                        -- 지표여부값판정구분코드명(여부값 판정구분)
		      --, A.EXEC_RESULT_VALUE AS EXEC_RESULT_VALUE                      
   		      , CASE WHEN TRIM(A.EXEC_RESULT_VALUE) IN ('Y', 'N') THEN
                          A.EXEC_RESULT_VALUE 
   		      	     WHEN TRIM(A.EXEC_RESULT_VALUE) IS NOT NULL AND MOD(A.EXEC_RESULT_VALUE,1) = 0 THEN
		      		      TO_CHAR(A.EXEC_RESULT_VALUE)
		      	     WHEN TRIM(A.EXEC_RESULT_VALUE) IS NOT NULL THEN 
		      		      TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')
		        END AS EXEC_RESULT_VALUE									  -- 실행결과값(성능 점검 결과값)
		        
		        
		      , CD2.CD_NM AS PERF_CHECK_RESULT_DIV_CD_NM                      -- 성능점검결과구분코드(지표 성능 점검 결과)
		      , CASE WHEN C.PERF_CHECK_INDC_ID IS NULL THEN 
		                  'N'
		             ELSE 'Y'
		        END AS EXCEPT_REG_YN                                          -- 예외등록여부
              ,A.PERF_CHECK_RESULT_DESC AS PERF_CHECK_RESULT_DESC             -- 성능점검결과설명
		      -- HIDDEN
		      , A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID                    -- 성능점검지표ID
		      , A.INDC_YN_DECIDE_DIV_CD AS INDC_YN_DECIDE_DIV_CD              -- 지표여부값판정구분코드
		      , A.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD        -- 성능점검결과구분코드
		      , B.PERF_CHECK_METH_CD AS PERF_CHECK_METH_CD                    -- 성능점검방법코드
		  FROM  DEPLOY_PERF_CHK_DETAIL_RESULT A 
		      , DEPLOY_PERF_CHK_INDC B
		      , DEPLOY_PERF_CHK_INDC_EXCPT C
		      , CD CD1
		      , CD CD2
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
   AND  A.PERF_CHECK_STEP_ID = #{last_perf_check_step_id}                    -- 성능점검단계ID
		   AND  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
		   AND  A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}                -- 프로그램수행회차
		   AND  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		   AND  A.PROGRAM_ID = C.PROGRAM_ID(+)
		   AND  A.PERF_CHECK_ID = C.PERF_CHECK_INDC_ID(+)
		   AND  C.DEL_YN(+) = 'N'
		   AND  A.INDC_YN_DECIDE_DIV_CD = CD1.CD(+)
		   AND  CD1.GRP_CD_ID(+) = '1050'      
		   AND  A.PERF_CHECK_RESULT_DIV_CD = CD2.CD(+)
		   AND  CD2.GRP_CD_ID(+) = '1055'       
		 ORDER BY B.PERF_CHECK_INDC_ID
	</select>

	<sql id="DeployPerfChkStepList">
		/* PerformanceCheckIndexDao.getDeployPerfChkStep */
			SELECT  A.PERF_CHECK_STEP_ID AS PERF_CHECK_STEP_ID            -- 성능점검단계ID(점검 단계ID)
	      , A.PERF_CHECK_STEP_NM AS PERF_CHECK_STEP_NM                    -- 성능점검단계명(점검 단계)
	      , A.PERF_CHECK_AUTO_EXEC_YN AS PERF_CHECK_AUTO_EXEC_YN          -- 성능점검자동실행여부(점검 자동실행 여부)
	      , A.STEP_ORDERING AS STEP_ORDERING                              -- 단계순서(단계순서)
	      , A.PERF_CHECK_STEP_DESC AS PERF_CHECK_STEP_DESC                -- 성능점검단계설명(점검 단계 설명)
	      , NVL(A.DEL_YN,'N') AS DEL_YN                                   -- 삭제여부(삭제여부)
	  FROM  DEPLOY_PERF_CHK_STEP A    								      -- 배포성능점점단계기본(TABLE)
	 WHERE  1 = 1
		<if test="searchValue != null and searchValue != ''">
		 -- 점검 단계명이 입력되면 
	   		AND  A.PERF_CHECK_STEP_NM LIKE '%'|| #{searchValue} || '%'    -- 성능점검단계명
		</if>
		<if test="search_use_yn != null and search_use_yn != ''">
		-- 사용 여부가 입력되면 
   			AND  A.DEL_YN = #{search_use_yn}                                            -- 삭제여부 
		</if>
	ORDER BY A.STEP_ORDERING   
	</sql>
	
	<select id="getDeployPerfChkStep" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		<include refid="DeployPerfChkStepList"/>
	</select>
	
	<select id="getDeployPerfChkStepByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		<include refid="DeployPerfChkStepList"/>
	</select>
	
	<select id="checkStepOrderingCnt" parameterType="deployPerfChkIndc"	resultType="int">
		/* PerformanceCheckIndexDao.checkStepOrderingCnt */
		SELECT  COUNT(*) AS STEP_ORDERING_CNT                                 -- 단계순서건수
		  FROM  DEPLOY_PERF_CHK_STEP A    									  -- 배포성능점점단계기본(TABLE)
		 WHERE  A.STEP_ORDERING = #{step_ordering}
		   AND  ROWNUM = 1
	</select>
	
	<select id="checkDeployPerfChkCnt" parameterType="deployPerfChkIndc"	resultType="int">
		/* PerformanceCheckIndexDao.checkDeployPerfChkCnt */
		   SELECT  COUNT(*) AS DEPLOY_PERF_CHK_CNT                               -- 배포성능점검건수
			  FROM  DEPLOY_PERF_CHK_STEP A    									 -- 배포성능점점단계기본(TABLE)
			     ,  DEPLOY_PERF_CHK_STEP_EXEC B
			     ,  DEPLOY_PERF_CHK C
			 WHERE  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                   -- 성능점검단계ID
			   AND  A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
			   AND  B.PERF_CHECK_ID = C.PERF_CHECK_ID
			   AND  C.DEPLOY_CHECK_STATUS_CD IN ('00', '01')
			   AND  ROWNUM = 1
	</select>
	
	<select id="checkDeployPerfChkCnt2" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.checkDeployPerfChkCnt2 */
		SELECT A.WRKJOB_CD_PERF_CHK_STEP_CNT AS WRKJOB_CD_PERF_CHK_STEP_CNT
		     , B.WRKJOB_CD_PARSING_SCHEMA_CNT AS WRKJOB_CD_PARSING_SCHEMA_CNT
		     , A.WRKJOB_CD_PERF_CHK_STEP_CNT + B.WRKJOB_CD_PARSING_SCHEMA_CNT AS WRKJOB_CD_TOTAL_CNT
		  FROM (
		        SELECT COUNT(*) AS WRKJOB_CD_PERF_CHK_STEP_CNT
		          FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
		         WHERE A.DEL_YN = 'N' 
		           AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
		       ) A
		      ,(
		        SELECT COUNT(*) AS WRKJOB_CD_PARSING_SCHEMA_CNT
		         FROM DEPLOY_PERF_CHK_PARSING_SCHEMA A
		         WHERE A.DEL_YN = 'N' 
		           AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id} 
		       ) B
	</select>
	
	<insert id="insertDeployPerfChkStep" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.insertDeployPerfChkStep */
			INSERT INTO   DEPLOY_PERF_CHK_STEP     -- 배포성능점점단계기본(TABLE)
	        ( PERF_CHECK_STEP_ID                                          -- 성능점검단계ID
	        , PERF_CHECK_STEP_NM                                          -- 성능점검단계명
	        , PERF_CHECK_AUTO_EXEC_YN                                     -- 성능점검자동실행여부
	        , STEP_ORDERING                                               -- 단계순서
	        , PERF_CHECK_STEP_DESC                                        -- 성능점검단계설명
	        , DEL_YN                                                      -- 삭제여부
	 ) VALUES (  
	          (SELECT NVL(MAX(PERF_CHECK_STEP_ID),0)+1 
	          			FROM DEPLOY_PERF_CHK_STEP)      					-- 성능점검단계ID
	        , #{perf_check_step_nm}                                         -- 성능점검단계명
	        , #{perf_check_auto_exec_yn}                                    -- 성능점검자동실행여부
	        , #{step_ordering}                                              -- 단계순서
	        , #{perf_check_step_desc}                                       -- 성능점검단계설명
	        , #{del_yn}                                                     -- 삭제여부
	        ) 
	</insert>
	
	<update id="updateDeployPerfChkStep" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkStep */
		UPDATE  DEPLOY_PERF_CHK_STEP A     -- 배포성능점점단계기본(TABLE)
		<trim prefix="SET" suffixOverrides=",">
			<if test="perf_check_step_nm != null and perf_check_step_nm != ''">
	      		  A.PERF_CHECK_STEP_NM = #{perf_check_step_nm}                    -- 성능점검단계명
			</if>
			<if test="perf_check_auto_exec_yn != null and perf_check_auto_exec_yn != ''">
      			, A.PERF_CHECK_AUTO_EXEC_YN = #{perf_check_auto_exec_yn}          -- 성능점검자동실행여부
			</if>
			<if test="step_ordering != null and step_ordering != ''">
      			, A.STEP_ORDERING = #{step_ordering}                              -- 단계순서
			</if>
			<if test="perf_check_step_desc != null and perf_check_step_desc != ''">
      			, A.PERF_CHECK_STEP_DESC = #{perf_check_step_desc}                -- 성능점검단계설명
			</if>
			<if test="del_yn != null and del_yn != ''">
      			, A.DEL_YN = #{del_yn}                                            -- 삭제여부
			</if>
		</trim>
		 WHERE  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
	</update>
	
	<update id="updateDeployPerfChkTargetPgm" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkTargetPgm */
			-- 성능점검자동적합여부 업데이트(시점 정보)
		UPDATE DEPLOY_PERF_CHK_TARGET_PGM   								-- 배포성능점검대상프로그램내역
		   SET 
		<choose>
			<when test="exception_prc_meth_cd != null and exception_prc_meth_cd == '1'">
	   			EXCEPTION_PRC_METH_CD = NULL     		-- 성능점검자동적합여부(20190228추가)
			</when>
			<otherwise>
				EXCEPTION_PRC_METH_CD = #{exception_prc_meth_cd}     		-- 성능점검자동적합여부(20190228추가)
			</otherwise>
		</choose>
		 WHERE PROGRAM_ID = #{program_id}
		   AND PERF_CHECK_ID IN (
		        SELECT PERF_CHECK_ID            		-- 성능점검ID
		          FROM DEPLOY_PERF_CHK 		 	        -- 배포성능점검기본
		         WHERE DEPLOY_CHECK_STATUS_CD = '01'    -- 배포성능점검상태코드 : 점검중
		         )
	</update>
	
	<sql id="DeployPerfChkStepTestDBList">
		/* PerformanceCheckIndexDao.getDeployPerfChkStepTestDB */
		SELECT C.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
			, A.PERF_CHECK_STEP_ID AS PERF_CHECK_STEP_ID                    -- 성능점검단계ID(점검 단계ID)
			, A.PERF_CHECK_STEP_NM AS PERF_CHECK_STEP_NM                    -- 성능점검단계명(점검 단계)
			, A.STEP_ORDERING AS STEP_ORDERING                              -- 단계순서(단계순서)
			, B.DEL_YN AS DEL_YN                                            -- 삭제여부(삭제여부)  2/26
			, B.DBID AS DBID                                                -- DBID(DB)
			, DB.DB_NAME AS DB_NAME
			, CD1.CD_NM AS PERF_CHECK_PROGRAM_DIV_CD_NM                     -- 성능점검프로그램구분명(프로그램)
			, B.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드
			, B.PROGRAM_DIV_CD AS PROGRAM_DIV_CD                            -- 프로그램구분코드
			, CD2.CD_NM AS PERF_CHECK_EVALUATION_METH_NM
			, B.PERF_CHECK_EVALUATION_METH_CD
		FROM  DEPLOY_PERF_CHK_STEP A
			, DEPLOY_PERF_CHK_STEP_TEST_DB B
			, WRKJOB_CD C
			, CD CD1
			, CD CD2
			, DATABASE DB
		WHERE  A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
			AND  B.WRKJOB_CD = C.WRKJOB_CD
			AND  C.USE_YN = 'Y'   --> 추가 2022-04-20
			AND  A.DEL_YN = 'N'
			AND  CD1.GRP_CD_ID(+) = '1052'
			AND  B.PROGRAM_DIV_CD = CD1.CD(+)
			AND  CD2.GRP_CD_ID(+) = '1091'
			AND  B.PERF_CHECK_EVALUATION_METH_CD = CD2.CD(+)
			AND  DB.DBID = B.DBID
			AND  DB.USE_YN = 'Y'  --> 추가 2022-04-20
		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
			-- 업무코드가 입력되면
			AND  B.WRKJOB_CD = #{search_wrkjob_cd}
		</if>
		<if test="search_del_yn != null and search_del_yn != ''">
			-- 삭제여부가 입력되면
			AND  B.DEL_YN = #{search_del_yn}                                            -- 삭제여부
		</if>
		ORDER BY B.WRKJOB_CD, A.STEP_ORDERING
	</sql>
	
	<select id="getDeployPerfChkStepTestDB" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		<include refid="DeployPerfChkStepTestDBList"/>
	</select>
	
	<select id="getDeployPerfChkStepTestDBByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		<include refid="DeployPerfChkStepTestDBList"/>
	</select>
	
	<select id="getDeployPerfChkStepId" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		SELECT PERF_CHECK_STEP_ID, PERF_CHECK_STEP_NM 
			FROM DEPLOY_PERF_CHK_STEP
		WHERE DEL_YN = 'N'
	</select>
	
	<select id="checkDeployPerfChkStep" parameterType="deployPerfChkIndc"	resultType="int">
	   SELECT COUNT(*) FROM DEPLOY_PERF_CHK_STEP_TEST_DB WHERE WRKJOB_CD = #{wrkjob_cd}
		 AND PERF_CHECK_STEP_ID = #{perf_check_step_id}	
	</select>

	<select id="checkDeployPerfChkParsingSchemaPk" parameterType="deployPerfChkIndc"	resultType="int">
	   SELECT COUNT(*) FROM DEPLOY_PERF_CHK_PARSING_SCHEMA
	   	 WHERE WRKJOB_CD = #{wrkjob_cd}
		 AND PERF_CHECK_STEP_ID = #{perf_check_step_id}	
	</select>
	
	<insert id="insertDeployPerfChkStepTestDB" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.insertDeployPerfChkStepTestDB */
		INSERT INTO   DEPLOY_PERF_CHK_STEP_TEST_DB     -- 배포성능점검단계별테스트DB기본(TABLE)
		        ( WRKJOB_CD                                                   -- 업무코드
		        , PERF_CHECK_STEP_ID                                          -- 성능점검단계ID
		        , DBID                                                        -- DBID
		        , PROGRAM_DIV_CD                                              -- 프로그램구분코드
		        , DEL_YN                                                      -- 삭제여부  2/26
		        , PERF_CHECK_EVALUATION_METH_CD
		 ) VALUES (  
		          #{wrkjob_cd}                                                  -- 업무코드
		        , #{perf_check_step_id}                                         -- 성능점검단계ID
		        , #{dbid}                                                       -- DBID
		        , #{program_div_cd}                                             -- 프로그램구분코드
		        , #{del_yn}                                                     -- 삭제여부  2/26
		        , #{perf_check_evaluation_meth_cd}
		        ) 
	</insert>
	
	<update id="updateDeployPerfChkStepTestDB" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkStepTestDB */
	UPDATE  DEPLOY_PERF_CHK_STEP_TEST_DB A     -- 배포성능점검단계별테스트DB기본(TABLE)
	   SET  
	        A.DBID = #{dbid}                                                -- DBID
	      , A.PROGRAM_DIV_CD = #{program_div_cd}                            -- 프로그램구분코드
	      , A.DEL_YN = #{del_yn}                                            -- 삭제여부  2/26
	      , PERF_CHECK_EVALUATION_METH_CD = #{perf_check_evaluation_meth_cd}
	 WHERE  A.WRKJOB_CD = #{wrkjob_cd}                                      -- 업무코드
	   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
	</update>
	
	<select id="checkExceptionPrcStatusCd" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.checkExceptionPrcStatusCd */
		SELECT  A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
		      , A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID      
		  FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- (TABLE)
		 WHERE  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
		   AND  A.EXCEPTION_PRC_STATUS_CD = #{exception_prc_status_cd}
		   AND  ROWNUM = 1
	</select>
	
	<select id="checkExceptionPrcStatusCd2" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.checkExceptionPrcStatusCd2 */
	SELECT  A.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
	      , A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID      
	  FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- (TABLE)
	 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
	   AND  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
	   AND  A.EXCEPTION_PRC_STATUS_CD = #{exception_prc_status_cd}
	   AND  ROWNUM = 1
	</select>
	 
	<insert id="insertDeployPerfChkExcptHistory" parameterType="deployPerfChkIndc" useGeneratedKeys="false">
		/* PerformanceCheckIndexDao.insertDeployPerfChkExcptHistory */
			INSERT INTO   DEPLOY_PERF_CHK_EXCPT_HISTORY
			        ( EXCEPTION_REQUEST_ID
			        , EXCEPTION_STATUS_UPDATE_DT
			        , EXCEPTION_PRC_STATUS_CD
			        , EXCEPTION_STATUS_UPDATER_ID
			        , EXCEPTION_STATUS_UPDATE_WHY
			 )
			SELECT  A.EXCEPTION_REQUEST_ID
			      , SYSDATE
			      , A.EXCEPTION_PRC_STATUS_CD
			      , CASE WHEN A.EXCEPTION_PRC_STATUS_CD IN ('1', '3') THEN 
			                  A.EXCEPTION_REQUESTER_ID 
			             ELSE 
			                  A.EXCEPTER_ID
			         END AS EXCEPTION_STATUS_UPDATER_ID
			      , CASE WHEN A.EXCEPTION_PRC_STATUS_CD IN ('1', '3') THEN 
			                  A.EXCEPTION_REQUEST_WHY 
			             ELSE 
			                  A.EXCEPTION_PRC_WHY
			         END AS EXCEPTION_STATUS_UPDATE_WHY
			  FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST A   
			 WHERE  A.EXCEPTION_REQUEST_ID = #{exception_request_id}
	</insert>

	<insert id="insertDeployPerfChkExcptHistory_old" parameterType="deployPerfChkIndc" useGeneratedKeys="false">
		/* PerformanceCheckIndexDao.insertDeployPerfChkExcptHistory */
			INSERT INTO   DEPLOY_PERF_CHK_EXCPT_HISTORY
			        ( EXCEPTION_REQUEST_ID
			        , EXCEPTION_STATUS_UPDATE_DT
			        , EXCEPTION_PRC_STATUS_CD
			        , EXCEPTION_STATUS_UPDATER_ID
			        , EXCEPTION_STATUS_UPDATE_WHY
			 )
			SELECT  A.EXCEPTION_REQUEST_ID
			      , SYSDATE
			      , A.EXCEPTION_PRC_STATUS_CD
			      , CASE WHEN A.EXCEPTION_PRC_STATUS_CD IN ('1', '3') THEN 
			                  A.EXCEPTION_REQUESTER_ID 
			             ELSE 
			                  A.EXCEPTER_ID
			         END AS EXCEPTION_STATUS_UPDATER_ID
			      , CASE WHEN A.EXCEPTION_PRC_STATUS_CD IN ('1', '3') THEN 
			                  A.EXCEPTION_REQUEST_WHY 
			             ELSE 
			                  A.EXCEPTION_PRC_WHY
			         END AS EXCEPTION_STATUS_UPDATE_WHY
			  FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST A   
			 WHERE  A.EXCEPTION_REQUEST_ID = #{exception_request_id}
	</insert>

	<update id="updateDeployPerfChkExcptRequest" parameterType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.updateDeployPerfChkExcptRequest */
		UPDATE  DEPLOY_PERF_CHK_EXCPT_REQUEST A    
		   SET  A.EXCEPTION_PRC_STATUS_CD = #{exception_prc_status_cd}          -- 예외처리상태코드
		 WHERE  A.EXCEPTION_REQUEST_ID = #{exception_request_id}    
	</update>
	 
	<insert id="insertDeployPerfChkExcptRequest" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.insertDeployPerfChkExcptRequest */
			INSERT INTO   DEPLOY_PERF_CHK_EXCPT_REQUEST     -- (TABLE)
        ( EXCEPTION_REQUEST_ID                                        -- 예외요청ID
        , PERF_CHECK_ID                                               -- 성능점검ID
        , PROGRAM_ID                                                  -- 프로그램ID
        , EXCEPTION_REQUESTER_ID                                      -- 예외요청자ID
        , EXCEPTION_REQUEST_DT                                        -- 예외요청일시
        , EXCEPTION_REQUEST_WHY_CD                                    -- 예외요청사유코드
        , EXCEPTION_REQUEST_WHY                                       -- 예외요청사유
        , EXCEPTION_PRC_STATUS_CD                                     -- 예외처리상태코드
        , EXCEPTION_PRC_METH_CD                                       -- 예외처리방법코드
        , EXCEPTER_ID                                                 -- 예외처리자ID
        , EXCEPTION_PRC_WHY                                           -- 예외처리사유
        , EXCEPTION_PRC_DT                                            -- 예외처리일시
       	, PERF_CHECK_STEP_ID                                          -- 성능점검단계ID
        , PROGRAM_EXECUTE_TMS                                         -- 프로그램수행회차
        , PERF_CHECK_AUTO_PASS_DEL_YN                                 -- 성능점검자동적합삭제여부
 ) VALUES (  
			(SELECT NVL(MAX(EXCEPTION_REQUEST_ID),0)+1 
			FROM DEPLOY_PERF_CHK_EXCPT_REQUEST)                         -- 예외요청ID
        , #{perf_check_id}                                              -- 성능점검ID
        , #{program_id}                                                 -- 프로그램ID
        , #{exception_requester_id}                                     -- 예외요청자ID
        , SYSDATE 				                                        -- 예외요청일시
        , #{exception_request_why_cd}                                   -- 예외요청사유코드
		<choose>
			<when test="exception_request_detail_why != null and exception_request_detail_why != ''">        
        , #{exception_request_detail_why}                               -- 예외요청사유(예외처리요청시에)
        	</when>
			<when test="exception_del_request_why != null and exception_del_request_why != ''">
        , #{exception_del_request_why}                                  -- 예외요청사유(예외삭제요청시에)
			</when>
		</choose>        
        , #{exception_prc_status_cd}                                    -- 예외처리상태코드
        , #{exception_prc_meth_cd}                                      -- 예외처리방법코드
        , #{excepter_id}                                                -- 예외처리자ID
        , #{exception_prc_why}                                          -- 예외처리사유
        , #{exception_prc_dt}                                           -- 예외처리일시
        , #{last_perf_check_step_id}                                    -- 성능점검단계ID
					, (SELECT MAX(PROGRAM_EXECUTE_TMS) 
			             FROM DEPLOY_PERF_CHK_RESULT 
			            WHERE PERF_CHECK_ID = #{perf_check_id}
			              AND PERF_CHECK_STEP_ID = #{last_perf_check_step_id}
			              AND PROGRAM_ID = #{program_id})                           -- 프로그램수행회차		
        
       
        , #{perf_check_auto_pass_del_yn}								-- 성능점검자동적합삭제여부
        
        
        ) 
	</insert>
	
	<select id="getDeployPerfChkDetailResultByTab" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getDeployPerfChkDetailResultByTab */
	    SELECT A.*
   		, CASE WHEN TRIM(A.CHANGE_INDC_PASS_MAX_VALUE) IS NULL AND TRIM(A.CHANGE_YN_DECIDE_DIV_CD) IS NULL THEN
		      	        'N'
                      ELSE
                        'Y'
     		    END AS IS_CHECKED 

        FROM (
        
            SELECT  
		        B.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM                    -- 성능점검지표명(점검 지표)
		        
  		      , CASE WHEN TRIM(A.INDC_PASS_MAX_VALUE) IS NULL THEN
                          NULL
                     WHEN MOD(A.INDC_PASS_MAX_VALUE,1) = 0 THEN
		      	          TO_CHAR(A.INDC_PASS_MAX_VALUE)
		      	     ELSE 
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')
		        END AS INDC_PASS_MAX_VALUE
		   
		      , CASE WHEN TRIM(A.INDC_PASS_MAX_VALUE) IS NOT NULL AND MOD(A.INDC_PASS_MAX_VALUE,1) = 0 THEN
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE) || ' 초과'
		      	     WHEN TRIM(A.INDC_PASS_MAX_VALUE) IS NOT NULL THEN 
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999') || ' 초과'
		        END AS NOT_PASS_PASS
		        
		      , CD1.CD_NM  AS INDC_YN_DECIDE_DIV_CD_NM                        -- 지표여부값판정구분코드명(여부값 판정구분)
		      
   		      --, A.EXEC_RESULT_VALUE AS EXEC_RESULT_VALUE                      
   		      , CASE WHEN TRIM(A.EXEC_RESULT_VALUE) IN ('Y', 'N') THEN
                          A.EXEC_RESULT_VALUE 
   		      	     WHEN TRIM(A.EXEC_RESULT_VALUE) IS NOT NULL AND MOD(A.EXEC_RESULT_VALUE,1) = 0 THEN
		      		      TO_CHAR(A.EXEC_RESULT_VALUE)
		      	     WHEN TRIM(A.EXEC_RESULT_VALUE) IS NOT NULL THEN 
		      		      TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')
		        END AS EXEC_RESULT_VALUE									  -- 실행결과값(성능 점검 결과값)
		        
		      , CD2.CD_NM AS PERF_CHECK_RESULT_DIV_CD_NM                      -- 성능점검결과구분코드(지표 성능 점검 결과)
		      , CASE WHEN C.PERF_CHECK_INDC_ID IS NULL THEN 
		                  'N'
		             ELSE 'Y'
		        END AS EXCEPT_REG_YN                                          -- 예외등록여부
		      -- HIDDEN
		      , A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID                    -- 성능점검지표ID
		      , A.INDC_YN_DECIDE_DIV_CD AS INDC_YN_DECIDE_DIV_CD              -- 지표여부값판정구분코드
		      , A.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD        -- 성능점검결과구분코드
		      , B.PERF_CHECK_METH_CD AS PERF_CHECK_METH_CD                    -- 성능점검방법코드
            	
              , CASE WHEN COUNT(C.PERF_CHECK_INDC_ID) OVER() > 0 AND TRIM(C.PASS_MAX_VALUE) IS NOT NULL AND MOD(C.PASS_MAX_VALUE,1) = 0 THEN
                        TO_CHAR(C.PASS_MAX_VALUE) || ' 초과'
                   WHEN COUNT(C.PERF_CHECK_INDC_ID) OVER() > 0 AND TRIM(C.PASS_MAX_VALUE) IS NOT NULL AND MOD(C.PASS_MAX_VALUE,1) != 0 THEN 
                        TO_CHAR(C.PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999') || ' 초과'
                   WHEN (E.EXCEPTION_PRC_STATUS_CD IS NULL OR E.EXCEPTION_PRC_STATUS_CD = '1')  AND COUNT(C.PERF_CHECK_INDC_ID) OVER() = 0 AND TRIM(D.PASS_MAX_VALUE) IS NOT NULL AND MOD(D.PASS_MAX_VALUE,1) = 0 THEN
                        TO_CHAR(D.PASS_MAX_VALUE) || ' 초과'
                   WHEN (E.EXCEPTION_PRC_STATUS_CD IS NULL OR E.EXCEPTION_PRC_STATUS_CD = '1') AND COUNT(C.PERF_CHECK_INDC_ID) OVER() = 0 AND TRIM(D.PASS_MAX_VALUE) IS NOT NULL AND MOD(D.PASS_MAX_VALUE,1) != 0 THEN
                        TO_CHAR(D.PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999') || ' 초과'     
              END AS CHANGE_NOT_PASS_PASS
         
             , CASE WHEN COUNT(C.PERF_CHECK_INDC_ID) OVER() > 0 AND TRIM(C.PASS_MAX_VALUE) IS NOT NULL AND MOD(C.PASS_MAX_VALUE,1) = 0 THEN
                         TO_CHAR(C.PASS_MAX_VALUE)
                   WHEN COUNT(C.PERF_CHECK_INDC_ID) OVER() > 0 AND TRIM(C.PASS_MAX_VALUE) IS NOT NULL AND MOD(C.PASS_MAX_VALUE,1) != 0 THEN
                        TO_CHAR(C.PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')
                   WHEN (E.EXCEPTION_PRC_STATUS_CD IS NULL OR E.EXCEPTION_PRC_STATUS_CD = '1') AND COUNT(C.PERF_CHECK_INDC_ID) OVER() = 0 AND TRIM(D.PASS_MAX_VALUE) IS NOT NULL AND MOD(D.PASS_MAX_VALUE,1) = 0 THEN
                         TO_CHAR(D.PASS_MAX_VALUE)
                   WHEN (E.EXCEPTION_PRC_STATUS_CD IS NULL OR E.EXCEPTION_PRC_STATUS_CD = '1') AND COUNT(C.PERF_CHECK_INDC_ID) OVER() = 0 AND TRIM(D.PASS_MAX_VALUE) IS NOT NULL AND MOD(D.PASS_MAX_VALUE,1) != 0 THEN
                        TO_CHAR(D.PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')     
              END AS CHANGE_INDC_PASS_MAX_VALUE
              
             , CASE WHEN COUNT(C.PERF_CHECK_INDC_ID) OVER() > 0 THEN
                         C.YN_DECIDE_DIV_CD
                    ELSE
                         D.YN_DECIDE_DIV_CD
                END AS CHANGE_YN_DECIDE_DIV_CD  
                 
		  FROM  DEPLOY_PERF_CHK_DETAIL_RESULT A  
		      , DEPLOY_PERF_CHK_INDC B
		      , DP_PERF_CHK_INDC_EXCPT_HISTORY C
              --, DEPLOY_PERF_CHK_INDC_EXCPT D  20190312
              , ( -- 요청취소, 반려 건일 경우 이력이 없으므로, 바로 직전(즉 요청시점)의 [배포성능점검지표예외변경이력]을 보여줘야 함
               SELECT 
                      * 
                 FROM DP_PERF_CHK_INDC_EXCPT_HISTORY A
                WHERE A.EXCEPTION_REQUEST_ID IN (
                                                 SELECT MAX(EXCEPTION_REQUEST_ID)
                                                   FROM DP_PERF_CHK_INDC_EXCPT_HISTORY
                                                  WHERE PROGRAM_ID = #{program_id}
                                                    AND EXCEPTION_REQUEST_ID <![CDATA[<]]> #{exception_request_id}
                                                )   
                  AND A.DEL_YN = 'N'
              ) D    
              
              
              , DEPLOY_PERF_CHK_EXCPT_REQUEST E 
		      , CD CD1
		      , CD CD2
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
		   AND  A.PERF_CHECK_STEP_ID = #{last_perf_check_step_id}              -- 성능점검단계ID
		   AND  A.PROGRAM_ID = #{program_id}                                   -- 프로그램ID
		   AND  A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}                 -- 프로그램수행회차
	         AND  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
	         AND  A.PROGRAM_ID = C.PROGRAM_ID(+)
	         AND  A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
	         AND  C.DEL_YN(+) = 'N'            
	         AND  A.PROGRAM_ID = D.PROGRAM_ID(+)                  
	         AND  A.PERF_CHECK_INDC_ID = D.PERF_CHECK_INDC_ID(+) 
	         -- AND  D.DEL_YN(+) = 'N'            
	       AND  C.EXCEPTION_REQUEST_ID(+) = #{exception_request_id}          -- 예외요청ID
	       AND  E.EXCEPTION_REQUEST_ID = #{exception_request_id}             -- 예외요청ID  
		   AND  A.INDC_YN_DECIDE_DIV_CD = CD1.CD(+)
		   AND  CD1.GRP_CD_ID(+) = '1050'      
		   AND  A.PERF_CHECK_RESULT_DIV_CD = CD2.CD(+)
		   AND  CD2.GRP_CD_ID(+) = '1055'       
		 ORDER BY B.PERF_CHECK_INDC_ID) A
	</select>
	<select id="getDeployPerfChkDetailResult" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getDeployPerfChkDetailResult */
		SELECT  
		        B.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM                    -- 성능점검지표명(점검 지표)
		        
  		      , CASE WHEN MOD(A.INDC_PASS_MAX_VALUE,1) = 0 THEN
		      	          TO_CHAR(A.INDC_PASS_MAX_VALUE)
		      	     ELSE 
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')
		        END AS INDC_PASS_MAX_VALUE
		   
		      , CASE WHEN TRIM(A.INDC_PASS_MAX_VALUE) IS NOT NULL AND MOD(A.INDC_PASS_MAX_VALUE,1) = 0 THEN
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE) || ' 초과'
		      	     WHEN TRIM(A.INDC_PASS_MAX_VALUE) IS NOT NULL THEN 
		      		      TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999') || ' 초과'
		        END AS NOT_PASS_PASS
		        
		      , CD1.CD_NM  AS INDC_YN_DECIDE_DIV_CD_NM                        -- 지표여부값판정구분코드명(여부값 판정구분)
		      --, A.EXEC_RESULT_VALUE AS EXEC_RESULT_VALUE                      
   		      , CASE WHEN TRIM(A.EXEC_RESULT_VALUE) IS NOT NULL AND MOD(A.EXEC_RESULT_VALUE,1) = 0 THEN
		      		      TO_CHAR(A.EXEC_RESULT_VALUE)
		      	     WHEN TRIM(A.EXEC_RESULT_VALUE) IS NOT NULL THEN 
		      		      TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999')
		        END AS EXEC_RESULT_VALUE									  -- 실행결과값(성능 점검 결과값)
		      
		      , CD2.CD_NM AS PERF_CHECK_RESULT_DIV_CD_NM                      -- 성능점검결과구분코드(지표 성능 점검 결과)
		      , CASE WHEN C.PERF_CHECK_INDC_ID IS NULL THEN 
		                  'N'
		             ELSE 'Y'
		        END AS EXCEPT_REG_YN                                          -- 예외등록여부
		      -- HIDDEN
		      , A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID                    -- 성능점검지표ID
		      , A.INDC_YN_DECIDE_DIV_CD AS INDC_YN_DECIDE_DIV_CD              -- 지표여부값판정구분코드
		      , A.PERF_CHECK_RESULT_DIV_CD AS PERF_CHECK_RESULT_DIV_CD        -- 성능점검결과구분코드
		      , B.PERF_CHECK_METH_CD AS PERF_CHECK_METH_CD                    -- 성능점검방법코드
		  FROM  DEPLOY_PERF_CHK_DETAIL_RESULT A  
		      , DEPLOY_PERF_CHK_INDC B
		      , DEPLOY_PERF_CHK_INDC_EXCPT C
		      , CD CD1
		      , CD CD2
		 WHERE  A.PERF_CHECK_ID = #{perf_check_id}                              -- 성능점검ID
		   AND  A.PERF_CHECK_STEP_ID = #{last_perf_check_step_id}                    -- 성능점검단계ID  <!-- last 가 맞는것같은데 물어보기 -->
		   AND  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
		   AND  A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}                -- 프로그램수행회차
		   AND  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		   AND  A.PROGRAM_ID = C.PROGRAM_ID(+)
		   AND  A.PERF_CHECK_ID = C.PERF_CHECK_INDC_ID(+)
		   AND  C.DEL_YN(+) = 'N'
		   AND  A.INDC_YN_DECIDE_DIV_CD = CD1.CD(+)
		   AND  CD1.GRP_CD_ID(+) = '1050'      
		   AND  A.PERF_CHECK_RESULT_DIV_CD = CD2.CD(+)
		   AND  CD2.GRP_CD_ID(+) = '1055'       
		 ORDER BY B.PERF_CHECK_INDC_ID
	</select>
	    <select id="getDeployPerfChkDetailResultByTabEspc" parameterType="deployPerfChkIndc"    resultType="deployPerfChkIndc">
        /* PerformanceCheckIndexDao.getDeployPerfChkDetailResultByTabEspc*/
        SELECT A.*
           , CASE WHEN TRIM(A.CHANGE_INDC_PASS_MAX_VALUE) IS NULL AND TRIM(A.CHANGE_YN_DECIDE_DIV_CD) IS NULL THEN
                          'N'
                      ELSE
                        'Y'
                 END AS IS_CHECKED 

        FROM (
        
            SELECT  
                   C.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM                        -- 검증지표
                 , CASE WHEN A.INDC_YN_DECIDE_DIV_CD = '2' THEN  /* 여부값일 경우 */ 
                             'N'
                        WHEN INSTR(A.INDC_PASS_MAX_VALUE,'.',1) > 0 THEN 
                             TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999990.9999') || ' 이하' 
                        ELSE TO_CHAR(A.INDC_PASS_MAX_VALUE) || ' 이하' 
                    END AS INDC_PASS_MAX_VALUE      -- 적합   
                 , CASE WHEN INSTR(A.EXEC_RESULT_VALUE,'.',1) > 0 THEN 
                             TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999990.9999') 
                        ELSE TO_CHAR(A.EXEC_RESULT_VALUE) 
                    END AS AVG_EXEC_RESULT_VALUE               -- 평균
                 , CASE WHEN INSTR(B.EXEC_RESULT_VALUE,'.',1) > 0 THEN 
                             TO_CHAR(B.EXEC_RESULT_VALUE, 'FM999990.9999') 
                        ELSE TO_CHAR(B.EXEC_RESULT_VALUE) 
                    END AS MAX_EXEC_RESULT_VALUE               -- 최대
                 , CASE WHEN A.PERF_CHECK_EVALUATION_METH_CD = 2 THEN 
                             A.PERF_CHECK_RESULT_DIV_NM                    
                        WHEN A.PERF_CHECK_EVALUATION_METH_CD = 3 THEN      
                             B.PERF_CHECK_RESULT_DIV_NM 
                    END AS PERF_CHECK_RESULT_DIV_CD_NM              -- 성능검증결과
                 , CASE WHEN E.PROGRAM_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS EXCEPT_REG_YN  -- 예외등록여부
                
                 -- HIDDEN
                 , A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID                    -- 성능점검지표ID
                 , A.INDC_YN_DECIDE_DIV_CD AS INDC_YN_DECIDE_DIV_CD              -- 지표여부값판정구분코드
				 , CASE WHEN A.PERF_CHECK_EVALUATION_METH_CD = 2 THEN 
                	         A.PERF_CHECK_RESULT_DIV_CD                    
                        WHEN A.PERF_CHECK_EVALUATION_METH_CD = 3 THEN      
                             B.PERF_CHECK_RESULT_DIV_CD 
                    END AS  PERF_CHECK_RESULT_DIV_CD        -- 성능점검결과구분코드
                 , C.PERF_CHECK_METH_CD AS PERF_CHECK_METH_CD                    -- 성능점검방법코드
                 , A.PERF_CHECK_EVALUATION_METH_CD             -- 성능점검평가방법코드(2: 평균, 3: 최대)
                 
                 , CASE WHEN COUNT(D.PERF_CHECK_INDC_ID) OVER() > 0 AND TRIM(D.PASS_MAX_VALUE) IS NOT NULL AND MOD(D.PASS_MAX_VALUE,1) = 0 THEN
                             TO_CHAR(D.PASS_MAX_VALUE) || ' 초과'
                        WHEN COUNT(D.PERF_CHECK_INDC_ID) OVER() > 0 AND TRIM(D.PASS_MAX_VALUE) IS NOT NULL AND MOD(D.PASS_MAX_VALUE,1) != 0 THEN 
                             TO_CHAR(D.PASS_MAX_VALUE, 'FM999990.9999') || ' 초과'
                        WHEN (F.EXCEPTION_PRC_STATUS_CD IS NULL OR F.EXCEPTION_PRC_STATUS_CD = '1')  AND COUNT(D.PERF_CHECK_INDC_ID) OVER() = 0 AND TRIM(E.PASS_MAX_VALUE) IS NOT NULL AND MOD(E.PASS_MAX_VALUE,1) = 0 THEN
                             TO_CHAR(E.PASS_MAX_VALUE) || ' 초과'
                        WHEN (F.EXCEPTION_PRC_STATUS_CD IS NULL OR F.EXCEPTION_PRC_STATUS_CD = '1') AND COUNT(D.PERF_CHECK_INDC_ID) OVER() = 0 AND TRIM(E.PASS_MAX_VALUE) IS NOT NULL AND MOD(E.PASS_MAX_VALUE,1) != 0 THEN
                             TO_CHAR(E.PASS_MAX_VALUE, 'FM999990.9999') || ' 초과'     
                    END AS CHANGE_NOT_PASS_PASS
                
                 , CASE WHEN COUNT(D.PERF_CHECK_INDC_ID) OVER() > 0 AND TRIM(D.PASS_MAX_VALUE) IS NOT NULL AND MOD(D.PASS_MAX_VALUE,1) = 0 THEN
                             TO_CHAR(D.PASS_MAX_VALUE)
                        WHEN COUNT(D.PERF_CHECK_INDC_ID) OVER() > 0 AND TRIM(D.PASS_MAX_VALUE) IS NOT NULL AND MOD(D.PASS_MAX_VALUE,1) != 0 THEN
                             TO_CHAR(D.PASS_MAX_VALUE, 'FM999990.9999')
                        WHEN (F.EXCEPTION_PRC_STATUS_CD IS NULL OR F.EXCEPTION_PRC_STATUS_CD = '1') AND COUNT(D.PERF_CHECK_INDC_ID) OVER() = 0 AND TRIM(E.PASS_MAX_VALUE) IS NOT NULL AND MOD(E.PASS_MAX_VALUE,1) = 0 THEN
                             TO_CHAR(E.PASS_MAX_VALUE)
                        WHEN (F.EXCEPTION_PRC_STATUS_CD IS NULL OR F.EXCEPTION_PRC_STATUS_CD = '1') AND COUNT(D.PERF_CHECK_INDC_ID) OVER() = 0 AND TRIM(E.PASS_MAX_VALUE) IS NOT NULL AND MOD(E.PASS_MAX_VALUE,1) != 0 THEN
                             TO_CHAR(E.PASS_MAX_VALUE, 'FM999990.9999')     
                    END AS CHANGE_INDC_PASS_MAX_VALUE
              
                , CASE WHEN COUNT(D.PERF_CHECK_INDC_ID) OVER() > 0 THEN
                            D.YN_DECIDE_DIV_CD
                       ELSE
                            E.YN_DECIDE_DIV_CD
                   END AS CHANGE_YN_DECIDE_DIV_CD  
                 
          FROM  (/* 평균값 */
                 SELECT B.PERF_CHECK_INDC_ID
                      , B.INDC_PASS_MAX_VALUE
                      , B.EXEC_RESULT_VALUE
                      , B.PERF_CHECK_RESULT_DESC
                      , B.PERF_CHECK_RESULT_DIV_CD
                      , B.INDC_YN_DECIDE_DIV_CD
                      , C.PERF_CHECK_EVALUATION_METH_CD
                      , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM
                      , B.PROGRAM_ID
                   FROM DEPLOY_PERF_CHK_RESULT A
                      , DEPLOY_PERF_CHK_DETAIL_RESULT B
                      , DEPLOY_PERF_CHK_STEP_EXEC C
                      , CD CD1
                  WHERE A.PERF_CHECK_ID = #{perf_check_id} 
                    AND A.PERF_CHECK_STEP_ID = #{last_perf_check_step_id} 
                    AND A.PROGRAM_ID = #{program_id}
                    AND A.PERF_CHECK_EVALUATION_METH_CD = '2'
                    AND A.PERF_CHECK_ID = B.PERF_CHECK_ID
                    AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
                    AND A.PROGRAM_ID = B.PROGRAM_ID
                    AND A.PROGRAM_EXECUTE_TMS = B.PROGRAM_EXECUTE_TMS
                    AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
                    AND A.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
                    AND B.PERF_CHECK_RESULT_DIV_CD = CD1.CD
		            AND CD1.GRP_CD_ID = '1055'
                ) A
              , (/* 최대값 */
                 SELECT B.PERF_CHECK_INDC_ID
                      , B.INDC_PASS_MAX_VALUE
                      , B.EXEC_RESULT_VALUE
                      , B.PERF_CHECK_RESULT_DESC
                      , B.PERF_CHECK_RESULT_DIV_CD
                      , CD1.CD_NM AS PERF_CHECK_RESULT_DIV_NM
                   FROM DEPLOY_PERF_CHK_RESULT A
                      , DEPLOY_PERF_CHK_DETAIL_RESULT B
                      , CD CD1
                  WHERE A.PERF_CHECK_ID = #{perf_check_id} 
                    AND A.PERF_CHECK_STEP_ID = #{last_perf_check_step_id} 
                    AND A.PROGRAM_ID = #{program_id}
                    AND A.PERF_CHECK_EVALUATION_METH_CD = '3'
                    AND A.PERF_CHECK_ID = B.PERF_CHECK_ID
                    AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
                    AND A.PROGRAM_ID = B.PROGRAM_ID
                    AND A.PROGRAM_EXECUTE_TMS = B.PROGRAM_EXECUTE_TMS
                    AND B.PERF_CHECK_RESULT_DIV_CD = CD1.CD
		            AND CD1.GRP_CD_ID = '1055'
                ) B   
              , DEPLOY_PERF_CHK_INDC C
              , DP_PERF_CHK_INDC_EXCPT_HISTORY D
              --, DEPLOY_PERF_CHK_INDC_EXCPT D  20190312
              , ( -- 요청취소, 반려 건일 경우 이력이 없으므로, 바로 직전(즉 요청시점)의 [배포성능점검지표예외변경이력]을 보여줘야 함
                 SELECT * 
                   FROM DP_PERF_CHK_INDC_EXCPT_HISTORY A
                  WHERE A.EXCEPTION_REQUEST_ID IN (
                                                   SELECT MAX(EXCEPTION_REQUEST_ID)
                                                     FROM DP_PERF_CHK_INDC_EXCPT_HISTORY
                                                    WHERE PROGRAM_ID = #{program_id}
                                                      AND EXCEPTION_REQUEST_ID <![CDATA[<]]> #{exception_request_id}
                                                )   
                    AND A.DEL_YN = 'N'
                ) E    
              , DEPLOY_PERF_CHK_EXCPT_REQUEST F 
              , CD CD1
              , CD CD2
         WHERE  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
           AND  A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID

           AND  A.PROGRAM_ID = D.PROGRAM_ID(+)
           AND  A.PERF_CHECK_INDC_ID = D.PERF_CHECK_INDC_ID(+)
           AND  D.DEL_YN(+) = 'N'            
           AND  D.EXCEPTION_REQUEST_ID(+) = #{exception_request_id}          -- 예외요청ID
           
           AND  A.PROGRAM_ID = E.PROGRAM_ID(+)                  
           AND  A.PERF_CHECK_INDC_ID = E.PERF_CHECK_INDC_ID(+) 
           AND  F.EXCEPTION_REQUEST_ID = #{exception_request_id}             -- 예외요청ID  
           AND  A.INDC_YN_DECIDE_DIV_CD = CD1.CD(+)
           AND  CD1.GRP_CD_ID(+) = '1050'      
           AND  A.PERF_CHECK_RESULT_DIV_CD = CD2.CD(+)
           AND  CD2.GRP_CD_ID(+) = '1055'       
         ORDER BY C.PERF_CHECK_INDC_ID) A
    </select>
	<insert id="insertDeployPerfChkExcptHistory_temp" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.insertDeployPerfChkExcptHistory */
				INSERT INTO   DEPLOY_PERF_CHK_EXCPT_HISTORY    
		        ( EXCEPTION_REQUEST_ID                                        -- 예외요청ID
		        , EXCEPTION_STATUS_UPDATE_DT                                  -- 예외처리상태변경일시
		        , EXCEPTION_PRC_STATUS_CD                                     -- 예외처리상태코드
		        , EXCEPTION_STATUS_UPDATER_ID                                 -- 예외처리상태변경자ID
		        , EXCEPTION_STATUS_UPDATE_WHY                                 -- 예외처리상태변경사유
		 )
		SELECT  A.EXCEPTION_REQUEST_ID
		      , SYSDATE
		      , A.EXCEPTION_PRC_STATUS_CD
		      , CASE WHEN A.EXCEPTION_PRC_STATUS_CD IN ('2', '4') THEN 
		                  A.EXCEPTER_ID
		             ELSE 
		                  A.EXCEPTION_REQUESTER_ID 
		         END AS EXCEPTION_STATUS_UPDATER_ID
		      , CASE WHEN A.EXCEPTION_PRC_STATUS_CD IN ('2', '4') THEN 
		                  A.EXCEPTION_PRC_WHY
		             ELSE 
		                  A.EXCEPTION_REQUEST_WHY 
		         END AS EXCEPTION_STATUS_UPDATE_WHY
		  FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST A   
		 WHERE  A.EXCEPTION_REQUEST_ID = #{exception_request_id}                -- 예외요청ID
	</insert>
	
	<insert id="insertDpPerfChkIndcExcptHistory" parameterType="deployPerfChkIndc" useGeneratedKeys="false">
		/* PerformanceCheckIndexDao.insertDpPerfChkIndcExcptHistory */
			INSERT INTO   DP_PERF_CHK_INDC_EXCPT_HISTORY     
			        ( PROGRAM_ID                                                  -- 프로그램ID
			        , PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
			        , UPDATE_DT                                                   -- 변경일시
			        , PASS_MAX_VALUE                                              -- 적합최대값
			        , YN_DECIDE_DIV_CD                                            -- 여부값판정구분코드
			        , EXCEPTION_REQUEST_ID                                        -- 예외요청ID
			        , DEL_YN                                                      -- 삭제여부
			 )
			 SELECT A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID
			      , A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID                    -- 성능점검지표ID
			      , SYSDATE AS UPDATE_DT                                          -- 변경일시
			      , A.PASS_MAX_VALUE AS PASS_MAX_VALUE                            -- 적합최대값
			      , A.YN_DECIDE_DIV_CD AS YN_DECIDE_DIV_CD                        -- 여부값판정구분코드
			      , A.EXCEPTION_REQUEST_ID AS EXCEPTION_REQUEST_ID                -- 예외요청ID
			      , 'Y' AS DEL_YN                                                 -- 삭제여부
			  FROM  DEPLOY_PERF_CHK_INDC_EXCPT A    
			 WHERE  A.PROGRAM_ID = #{program_id}      
	</insert>
	
	<update id="updateDeployPerfChkTargetPgm2" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkTargetPgm2 (20190228 성능점검자동적합여부 3번 추가됨으로 사용안함)*/
	
		UPDATE DEPLOY_PERF_CHK_TARGET_PGM   								-- 배포성능점검대상프로그램내역
		   SET 
	   			EXCEPTION_PRC_METH_CD = NULL 					    		-- 성능점검자동적합여부(20190228추가)
		 WHERE PROGRAM_ID = #{program_id}
		   AND PERF_CHECK_ID IN (
		        SELECT PERF_CHECK_ID            		-- 성능점검ID
		          FROM DEPLOY_PERF_CHK 		 	        -- 배포성능점검기본
		         WHERE DEPLOY_CHECK_STATUS_CD = '01'    -- 배포성능점검상태코드 : 점검중
		         )
	</update>
	
	<update id="updateDeployPerfChkExcptRequest2" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkExcptRequest2 */
		UPDATE  DEPLOY_PERF_CHK_EXCPT_REQUEST A    
		   SET  A.EXCEPTION_PRC_STATUS_CD = #{exception_prc_status_cd}          -- 예외처리상태코드
		      , A.EXCEPTER_ID = #{excepter_id}                                  -- 예외처리자ID
		<choose>
			<when test="exception_prc_why != null and exception_prc_why != ''">
		      , A.exception_prc_why = #{exception_prc_why}                      -- 예외처리사유
	      	</when>
			<when test="exception_del_prc_why != null and exception_del_prc_why != ''">
		      , A.exception_prc_why = #{exception_del_prc_why}                  -- 예외처리사유
	      	</when>
      	</choose>
		      , A.EXCEPTION_PRC_DT = SYSDATE		                            -- 예외처리일시
		 WHERE  A.EXCEPTION_REQUEST_ID = #{exception_request_id}                -- 예외요청ID
	</update>
	
	<update id="updateDeployPerfChkExcptRequest3" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkExcptRequest3 */
UPDATE  DEPLOY_PERF_CHK_EXCPT_REQUEST A    
   SET  A.EXCEPTION_PRC_STATUS_CD = #{exception_prc_status_cd}          -- 예외처리상태코드
      , A.EXCEPTER_ID = #{excepter_id}                                  -- 예외처리자ID
      , A.EXCEPTION_PRC_WHY = #{exception_del_prc_why}                      -- 예외처리사유
      , A.EXCEPTION_PRC_DT = SYSDATE                        -- 예외처리일시
      , A.PERF_CHECK_AUTO_PASS_DEL_YN = 'Y'  -- 성능점검자동적합삭제여부   
 WHERE  A.EXCEPTION_REQUEST_ID = #{exception_request_id}                -- 예외요청ID
	</update>
	
	<update id="updateDeployPerfChkAllPgm" parameterType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.updateDeployPerfChkAllPgm */
		UPDATE  DEPLOY_PERF_CHK_ALL_PGM A     -- 배포성능점검전체프로그램내역(TABLE)
		   SET  A.PERF_CHECK_AUTO_PASS_YN = #{perf_check_auto_pass_yn}          -- 성능점검자동적합여부
		      , A.EXCEPTION_REQUEST_ID = #{exception_request_id}                -- 예외요청ID
		 WHERE  A.PROGRAM_ID = #{program_id}  
	</update>
	
	<update id="updateDeployPerfChkIndcExcpt" parameterType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.updateDeployPerfChkIndcExcpt */
		UPDATE  DEPLOY_PERF_CHK_INDC_EXCPT A     
		   SET  A.DEL_YN = 'Y'                                                -- 삭제여부
		 WHERE  A.PROGRAM_ID = #{program_id}    
	</update>
	
	<update id="deleteDpPerfChkIndcExcptHistory2" parameterType="deployPerfChkIndc" useGeneratedKeys="false">
	/* PerformanceCheckIndexDao.deleteDpPerfChkIndcExcptHistory2 */
		DELETE DP_PERF_CHK_INDC_EXCPT_HISTORY
		WHERE PROGRAM_ID = #{program_id}
		AND PERF_CHECK_INDC_ID = #{perf_check_indc_id}
		AND UPDATE_DT = SYSDATE
	</update>
	
	<insert id="insertDpPerfChkIndcExcptHistory2" parameterType="deployPerfChkIndc" useGeneratedKeys="false">
		/* PerformanceCheckIndexDao.insertDpPerfChkIndcExcptHistory2 */
		INSERT INTO   DP_PERF_CHK_INDC_EXCPT_HISTORY     
		        ( PROGRAM_ID                                                  -- 프로그램ID
		        , PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
		        , UPDATE_DT                                                   -- 변경일시
		        , PASS_MAX_VALUE                                              -- 적합최대값
		        , YN_DECIDE_DIV_CD                                            -- 여부값판정구분코드
		        , EXCEPTION_REQUEST_ID                                        -- 예외요청ID
		        , DEL_YN                                                      -- 삭제여부
		  ) VALUES (  
		          #{program_id}                                               -- 프로그램ID
		        , #{perf_check_indc_id}                                       -- 성능점검지표ID
		        , SYSDATE                                                     -- 변경일시
		        , #{pass_max_value}                                           -- 적합최대값
		        , #{yn_decide_div_cd}                                         -- 여부값판정구분코드
		        , #{exception_request_id}                                     -- 예외요청ID
		        , #{del_yn}                                                    -- 삭제여부
		        ) 
	</insert>
	
	<insert id="insertDpPerfChkIndcExcptHistory2_old" parameterType="deployPerfChkIndc" useGeneratedKeys="false">
		/* PerformanceCheckIndexDao.insertDpPerfChkIndcExcptHistory2 */
		INSERT INTO   DP_PERF_CHK_INDC_EXCPT_HISTORY     
		        ( PROGRAM_ID                                                  -- 프로그램ID
		        , PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
		        , UPDATE_DT                                                   -- 변경일시
		        , PASS_MAX_VALUE                                              -- 적합최대값
		        , YN_DECIDE_DIV_CD                                            -- 여부값판정구분코드
		        , EXCEPTION_REQUEST_ID                                        -- 예외요청ID
		        , DEL_YN                                                      -- 삭제여부
		 )
		 SELECT A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID
		      , A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID                    -- 성능점검지표ID
		      , SYSDATE AS UPDATE_DT                                          -- 변경일시
		      , A.PASS_MAX_VALUE AS PASS_MAX_VALUE                            -- 적합최대값
		      , A.YN_DECIDE_DIV_CD AS YN_DECIDE_DIV_CD                        -- 여부값판정구분코드
		      , A.EXCEPTION_REQUEST_ID AS EXCEPTION_REQUEST_ID                -- 예외요청ID
		      , A.DEL_YN AS DEL_YN                                            -- 삭제여부
		  FROM  DEPLOY_PERF_CHK_INDC_EXCPT A    
		 WHERE  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
		   AND  A.PERF_CHECK_INDC_ID = #{perf_check_indc_id}                    -- 성능점검지표ID
	</insert>
	
	<update id="updateDeployPerfChkIndcExcpt2" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkIndcExcpt2 */
		DELETE  DEPLOY_PERF_CHK_INDC_EXCPT A     -- 배포성능점검지표예외내역(TABLE)
			 WHERE  A.PROGRAM_ID = #{program_id}                                    -- 프로그램ID
			   AND  A.PERF_CHECK_INDC_ID = #{perf_check_indc_id}                    -- 성능점검지표ID
		</update>
	
	<insert id="insertDeployPerfChkIndcExcpt2" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.insertDeployPerfChkIndcExcpt2 */
		INSERT INTO   DEPLOY_PERF_CHK_INDC_EXCPT     
		        ( PROGRAM_ID                                                  -- 프로그램ID
		        , PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
		        , PASS_MAX_VALUE                                              -- 적합최대값
		        , YN_DECIDE_DIV_CD                                            -- 여부값판정구분코드
		        , EXCEPTION_REQUEST_ID                                        -- 예외요청ID
		        , DEL_YN                                                      -- 삭제여부
		 ) VALUES (  
		          #{program_id}                                                 -- 프로그램ID
		        , #{perf_check_indc_id}                                         -- 성능점검지표ID
		        , #{pass_max_value}                                             -- 적합최대값
		        , #{yn_decide_div_cd}                                           -- 여부값판정구분코드
		        , #{exception_request_id}                                       -- 예외요청ID
		        , #{del_yn}                                                     -- 삭제여부
		        ) 
	</insert>
	
	<select id="checkExceptionRequestCnt" parameterType="deployPerfChkIndc"	resultType="int">
		/* PerformanceCheckIndexDao.checkExceptionRequestCnt */
		SELECT COUNT(*) AS EXCEPTION_REQUEST_CNT
		  FROM DEPLOY_PERF_CHK_INDC_EXCPT
		 WHERE EXCEPTION_REQUEST_ID = #{exception_request_id}
		   AND DEL_YN = 'N'
		   AND ROWNUM = 1
	</select>

	<sql id="ProgramPerformanceExceptionDeleteList">
		/* ProgramPerformanceExceptionDeleteList */
  SELECT  Z.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
        ,  CD2.CD_NM AS PROGRAM_DIV_CD_NM                                -- 프로그램구분명(프로그램구분)
        ,  A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID(프로그램ID)
        ,  A.PROGRAM_NM AS PROGRAM_NM                                    -- 프로그램명(프로그램명)
        ,  A.DBIO AS DBIO                                                -- DBIO(SQL식별자(DBIO))
        ,  A.PERF_CHECK_AUTO_PASS_YN AS PERF_CHECK_AUTO_PASS_YN          -- 성능점검자동적합여부(자동통과여부)
        ,  B.EXCEPTION_REQUEST_ID                                        -- 예외요청ID(예외요청ID)
        ,  A.EXCEPTION_PRC_METH_CD_NM                                    -- 예외처리방법(예외처리방법)   
         ,  A.DIR_NM AS DIR_NM                                            -- 디렉토리명(디렉토리명)
        ,  A.FILE_NM AS FILE_NM                                          -- 파일명(파일명)
        ,  U1.USER_NM AS EXCEPTION_REQUESTER                             -- 요청자(예외요청자)
        ,  TO_CHAR(B.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_REQUEST_DT       -- 예외요청일시(예외요청일시)
        ,  CD1.CD_NM AS EXCEPTION_REQUEST_WHY_CD_NM                      -- 예외요청사유명(예외처리사유)
        ,  CD1.CD AS EXCEPTION_REQUEST_WHY_CD                            -- 예외요청사유코드(예외처리사유코드)
        ,  B.EXCEPTION_REQUEST_WHY                                       -- 예외요청사유(예외요청상세사유)
        ,  B.EXCEPTION_PRC_WHY AS EXCEPTION_PRC_WHY                      -- 예외처리사유(예외처리결과)
        ,  U2.USER_NM AS EXCEPT_PROCESSOR                                -- 예외처리자(예외처리자) 
        ,  TO_CHAR(B.EXCEPTION_PRC_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_PRC_DT               -- 예외처리일시(예외처리일시)
             
        ,  TO_CHAR(C.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_DEL_REQUEST_DT            -- 예외요청일시(예외삭제요청일시)
        ,  C.EXCEPTION_REQUEST_WHY AS EXCEPTION_DEL_REQUEST_WHY          -- 예외요청사유(예외삭제요청상세사유)
        ,  C.EXCEPTION_PRC_WHY AS EXCEPTION_DEL_PRC_WHY                  -- 예외처리사유(예외삭제처리결과)
        ,  U3.USER_NM AS EXCEPT_DEL_PROCESSOR                            -- 예외처리자(예외삭제처리자)      
        ,  A.PROGRAM_DESC AS PROGRAM_DESC
        -- HIDDEN
        ,  A.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드(업무)
        ,  A.PROGRAM_DIV_CD                                              -- 프로그램구분코드
        ,  C.EXCEPTION_PRC_STATUS_CD                                     -- 예외처리상태코드
        ,  C.EXCEPTION_REQUEST_ID AS LAST_EXCEPTION_REQUEST_ID           -- 예외요청아이디(예외삭제요청ID)
        ,  CD3.CD_NM AS EXCEPTION_PRC_STATUS_CD_NM                       -- 예외처리상태코드명
        ,  B.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD             -- 예외처리방법코드
        ,  A.PROGRAM_TYPE_CD
        ,  A.SQL_COMMAND_TYPE_CD
        ,  A.DYNAMIC_SQL_YN
        ,  CD4.CD_NM AS PROGRAM_TYPE_CD_NM
 FROM (
        SELECT  
                A.WRKJOB_CD
              , A.PROGRAM_ID
              , A.PROGRAM_NM
              , A.PROGRAM_DIV_CD
              , A.DBIO
              , A.DIR_NM
              , A.FILE_NM
                
              , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
                          (SELECT CD_NM FROM CD WHERE GRP_CD_ID = '1061' AND CD = '2')
                     WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
                          (SELECT CD_NM FROM CD WHERE GRP_CD_ID = '1061' AND CD = '1')
                     WHEN C.EXCEPTION_PRC_METH_CD = '3' THEN
                          (SELECT CD_NM FROM CD WHERE GRP_CD_ID = '1061' AND CD = '3')
                END AS EXCEPTION_PRC_METH_CD_NM    
                
                               
              , A.PERF_CHECK_AUTO_PASS_YN
              , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
                          A.EXCEPTION_REQUEST_ID
                     WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
                          B.MAX_EXCEPTION_REQUEST_ID
                     WHEN C.EXCEPTION_REQUEST_ID IS NOT NULL THEN
                          C.EXCEPTION_REQUEST_ID  
                END AS EXCEPTION_REQUEST_ID
                , A.PROGRAM_DESC
                , A.PROGRAM_TYPE_CD
                , A.SQL_COMMAND_TYPE_CD
                , A.DYNAMIC_SQL_YN 
          FROM  DEPLOY_PERF_CHK_ALL_PGM A    -- 배포성능점검전체프로그램내역(TABLE)
              , (-- 지표단위점검 SET
                 SELECT  
                         B.PROGRAM_ID
                      ,  COUNT(*) AS PERF_CHK_INDC_EXCPT_CNT
                      ,  MAX(B.EXCEPTION_REQUEST_ID) AS MAX_EXCEPTION_REQUEST_ID   
                   FROM  DEPLOY_PERF_CHK_INDC_EXCPT B
                  WHERE  B.DEL_YN = 'N'
                 GROUP BY B.PROGRAM_ID   
                ) B  
              , (-- 한시 점검제외 SET
                 SELECT B.*
                      , (
                         SELECT MAX(Z.EXCEPTION_REQUEST_ID)
                           FROM DEPLOY_PERF_CHK_EXCPT_REQUEST Z
                          WHERE Z.EXCEPTION_PRC_STATUS_CD = '2' -- 처리완료
                            AND Z.EXCEPTION_PRC_METH_CD = '3'   -- 한시 점검제외
                            AND Z.PERF_CHECK_ID = B.PERF_CHECK_ID
                            AND Z.PROGRAM_ID = B.PROGRAM_ID
                        ) AS EXCEPTION_REQUEST_ID
                   FROM DEPLOY_PERF_CHK A
                      , DEPLOY_PERF_CHK_TARGET_PGM B 
                  WHERE A.DEPLOY_CHECK_STATUS_CD = '01'     -- 점검중
                    AND A.PERF_CHECK_ID = B.PERF_CHECK_ID 
                    AND B.EXCEPTION_PRC_METH_CD = '3'       -- 한시 점검제외
                ) C   
         WHERE  A.PROGRAM_ID = B.PROGRAM_ID(+)
           AND  A.PROGRAM_ID = C.PROGRAM_ID(+)  
               
  				<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		           --  업무가 입력되면
		           AND  A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                            			 FROM WRKJOB_CD
                            			 START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                           				 CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )
				</if>
				<if test="user_auth_id != null and user_auth_id == '4'.toString() or user_auth_id == '6'.toString()">
		            -- 개발자, 개발_배포성능관리자로 로그인하면 2019-03-12
				   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                FROM USER_WRKJOB 
		                                WHERE TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN WORKJOB_START_DAY AND WORKJOB_END_DAY 
		                                AND USER_ID = #{user_id} )
				</if>
			                                
				<if test="searchKey != null and searchKey != '' and search_dbio != null and search_dbio != ''">
		           -- SQL식별자(DBIO)가 입력되면
		           AND  UPPER(A.DBIO) like '%'||UPPER(#{search_dbio})||'%'
				</if>
      			<if test="searchKey != null and searchKey != '' and search_program_nm != null and search_program_nm != ''">
		           -- 프로그램명, 거래명이 입력되면
		           AND  UPPER(A.PROGRAM_NM) like '%'||UPPER(#{search_program_nm})||'%'
				</if>
      			<if test="searchKey != null and searchKey != '' and search_program_desc != null and search_program_desc != ''">
		           -- 프로그램설명이 입력되면
		           AND  UPPER(A.PROGRAM_DESC) like '%'||UPPER(#{search_program_desc})||'%'
				</if>
				
            ) A
           , DEPLOY_PERF_CHK_EXCPT_REQUEST B
           , DEPLOY_PERF_CHK_EXCPT_REQUEST C
           , CD CD1
           , CD CD2
           , CD CD3
           , CD CD4
           , USERS U1
           , USERS U2
           , USERS U3
           , WRKJOB_CD Z
       WHERE A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID
         AND A.EXCEPTION_PRC_METH_CD_NM IS NOT NULL
         AND A.PROGRAM_ID = C.PROGRAM_ID(+)
         AND C.EXCEPTION_PRC_STATUS_CD(+) = '1'   -- ※ 하나의 프로그램에 대해 예외요청 중인 건은 업무적으로 1건만 존재해야 함
         AND C.EXCEPTION_REQUEST_WHY_CD(+) = '99'
         AND B.EXCEPTION_REQUEST_WHY_CD = CD1.CD(+)
         AND CD1.GRP_CD_ID(+) = '1060'      
         AND A.PROGRAM_DIV_CD = CD2.CD(+)
         AND CD2.GRP_CD_ID(+) = '1052'         
         AND B.EXCEPTION_REQUESTER_ID = U1.USER_ID(+)
         AND C.EXCEPTION_PRC_STATUS_CD = CD3.CD(+)       
         AND CD3.GRP_CD_ID(+) = '1051'  
         AND B.EXCEPTER_ID = U2.USER_ID(+)
         AND C.EXCEPTER_ID = U3.USER_ID(+)
         AND A.WRKJOB_CD = Z.WRKJOB_CD
         AND CD3.GRP_CD_ID(+) = '1051'
         AND A.PROGRAM_TYPE_CD = CD4.CD
         AND CD4.GRP_CD_ID(+) = '1005'
         AND A.PROGRAM_TYPE_CD = '1'			 -- 온라인

   		<if test="search_chk != null and search_chk != ''">
          -- 삭제요청 체크박스가 체크되면
          AND C.EXCEPTION_PRC_STATUS_CD = '1'
		</if>
		<if test="search_exception_request_why_chk != null and search_exception_request_why_chk != ''">
		   --   예외삭제요청이 체크되면
		   AND C.EXCEPTION_REQUEST_WHY_CD = '99'   
		</if>      
      ORDER BY A.WRKJOB_CD
	</sql>
	
	<sql id="ProgramPerformanceExceptionDeleteListEspc">
		/* ProgramPerformanceExceptionDeleteListEspc*/
  SELECT  Z.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
        ,  CD2.CD_NM AS PROGRAM_DIV_CD_NM                                -- 프로그램구분명(프로그램구분)
        ,  A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID(프로그램ID)
        ,  A.PROGRAM_NM AS PROGRAM_NM                                    -- 프로그램명(프로그램명)
        ,  A.DBIO AS DBIO                                                -- DBIO(SQL식별자(DBIO))
        ,  A.PERF_CHECK_AUTO_PASS_YN AS PERF_CHECK_AUTO_PASS_YN          -- 성능점검자동적합여부(자동통과여부)
        ,  B.EXCEPTION_REQUEST_ID                                        -- 예외요청ID(예외요청ID)
        ,  A.EXCEPTION_PRC_METH_CD_NM                                    -- 예외처리방법(예외처리방법)   
         ,  A.DIR_NM AS DIR_NM                                            -- 디렉토리명(디렉토리명)
        ,  A.FILE_NM AS FILE_NM                                          -- 파일명(파일명)
        ,  U1.USER_NM AS EXCEPTION_REQUESTER                             -- 요청자(예외요청자)
        ,  TO_CHAR(B.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_REQUEST_DT       -- 예외요청일시(예외요청일시)
        ,  CD1.CD_NM AS EXCEPTION_REQUEST_WHY_CD_NM                      -- 예외요청사유명(예외처리사유)
        ,  CD1.CD AS EXCEPTION_REQUEST_WHY_CD                            -- 예외요청사유코드(예외처리사유코드)
        ,  B.EXCEPTION_REQUEST_WHY                                       -- 예외요청사유(예외요청상세사유)
        ,  B.EXCEPTION_PRC_WHY AS EXCEPTION_PRC_WHY                      -- 예외처리사유(예외처리결과)
        ,  U2.USER_NM AS EXCEPT_PROCESSOR                                -- 예외처리자(예외처리자) 
        ,  TO_CHAR(B.EXCEPTION_PRC_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_PRC_DT               -- 예외처리일시(예외처리일시)
             
        ,  TO_CHAR(C.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_DEL_REQUEST_DT            -- 예외요청일시(예외삭제요청일시)
        ,  C.EXCEPTION_REQUEST_WHY AS EXCEPTION_DEL_REQUEST_WHY          -- 예외요청사유(예외삭제요청상세사유)
        ,  C.EXCEPTION_PRC_WHY AS EXCEPTION_DEL_PRC_WHY                  -- 예외처리사유(예외삭제처리결과)
        ,  U3.USER_NM AS EXCEPT_DEL_PROCESSOR                            -- 예외처리자(예외삭제처리자)      
        ,  A.PROGRAM_DESC AS PROGRAM_DESC
        -- HIDDEN
        ,  A.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드(업무)
        ,  A.PROGRAM_DIV_CD                                              -- 프로그램구분코드
        ,  C.EXCEPTION_PRC_STATUS_CD                                     -- 예외처리상태코드
        ,  C.EXCEPTION_REQUEST_ID AS LAST_EXCEPTION_REQUEST_ID           -- 예외요청아이디(예외삭제요청ID)
        ,  CD3.CD_NM AS EXCEPTION_PRC_STATUS_CD_NM                       -- 예외처리상태코드명
        ,  B.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD             -- 예외처리방법코드
        ,  A.PROGRAM_TYPE_CD
        ,  A.SQL_COMMAND_TYPE_CD
        ,  A.DYNAMIC_SQL_YN
        ,  CD4.CD_NM AS PROGRAM_TYPE_CD_NM
        ,  A.DEPLOY_NM															-- 배포명
        ,  A.DEPLOY_ID															-- 배포ID
        ,  CD5.CD_NM AS DEPLOY_CHECK_STATUS_CD_NM								-- 성능 검증 상태
        ,  A.DEPLOY_EXPECTED_DAY												-- 배포예정일자
        , TO_CHAR(A.REG_DT, 'YYYY-MM-DD HH24:MI:SS') AS REG_DT                  -- 등록일시
        , TO_CHAR(A.LAST_UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATE_DT  -- 변경일시
        , A.EXCEPTION_PRC_METH_CD2  -- GEUM 2021-08-24
 FROM (
        SELECT  
                A.WRKJOB_CD
              , A.PROGRAM_ID
              , A.PROGRAM_NM
              , A.PROGRAM_DIV_CD
              , A.DBIO
              , A.DIR_NM
              , A.FILE_NM
              , C.DEPLOY_CHECK_STATUS_CD
              , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
                          (SELECT REF_VL_2 FROM CD WHERE GRP_CD_ID = '1061' AND CD = '2')
                     WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
                          (SELECT REF_VL_2 FROM CD WHERE GRP_CD_ID = '1061' AND CD = '1')
                     WHEN C.EXCEPTION_PRC_METH_CD = '3' THEN
                          (SELECT REF_VL_2 FROM CD WHERE GRP_CD_ID = '1061' AND CD = '3')
                END AS EXCEPTION_PRC_METH_CD_NM    
                
              , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
                          '2'
                     WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
                          '1'
                     WHEN C.EXCEPTION_PRC_METH_CD = '3' THEN
                          '3'
                END AS EXCEPTION_PRC_METH_CD2  -- GEUM 2021-08-24                     
                               
              , A.PERF_CHECK_AUTO_PASS_YN
              , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
                          A.EXCEPTION_REQUEST_ID
                     WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
                          B.MAX_EXCEPTION_REQUEST_ID
                     WHEN C.EXCEPTION_REQUEST_ID IS NOT NULL THEN
                          C.EXCEPTION_REQUEST_ID  
                END AS EXCEPTION_REQUEST_ID
                , A.PROGRAM_DESC
                , A.PROGRAM_TYPE_CD
                , A.SQL_COMMAND_TYPE_CD
                , A.DYNAMIC_SQL_YN 
               	, C.DEPLOY_NM
                , C.DEPLOY_ID
                , C.DEPLOY_EXPECTED_DAY
                , A.LAST_UPDATE_DT
                , A.REG_DT
          FROM  DEPLOY_PERF_CHK_ALL_PGM A    -- 배포성능점검전체프로그램내역(TABLE)
              , (-- 지표단위점검 SET
                 SELECT  
                         B.PROGRAM_ID
                      ,  COUNT(*) AS PERF_CHK_INDC_EXCPT_CNT
                      ,  MAX(B.EXCEPTION_REQUEST_ID) AS MAX_EXCEPTION_REQUEST_ID   
                   FROM  DEPLOY_PERF_CHK_INDC_EXCPT B
                  WHERE  B.DEL_YN = 'N'
                 GROUP BY B.PROGRAM_ID   
                ) B  
              , (-- 한시 점검제외 SET
                 SELECT B.*
                      , (
                         SELECT MAX(Z.EXCEPTION_REQUEST_ID)
                           FROM DEPLOY_PERF_CHK_EXCPT_REQUEST Z
                          WHERE Z.EXCEPTION_PRC_STATUS_CD = '2' -- 처리완료
                            AND Z.EXCEPTION_PRC_METH_CD = '3'   -- 한시 점검제외
                            AND Z.PERF_CHECK_ID = B.PERF_CHECK_ID
                            AND Z.PROGRAM_ID = B.PROGRAM_ID
                        ) AS EXCEPTION_REQUEST_ID
                      , A.*
                        
                   FROM DEPLOY_PERF_CHK A
                      , DEPLOY_PERF_CHK_TARGET_PGM B 
                  WHERE A.DEPLOY_CHECK_STATUS_CD = '01'     -- 점검중
                    AND A.PERF_CHECK_ID = B.PERF_CHECK_ID 
                    AND B.EXCEPTION_PRC_METH_CD = '3'       -- 한시 점검제외
                ) C   
         WHERE  A.PROGRAM_ID = B.PROGRAM_ID(+)
           AND  A.PROGRAM_ID = C.PROGRAM_ID(+)  
               
  				<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		           --  업무가 입력되면
		           AND  A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                            			 FROM WRKJOB_CD
                            			 START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                           				 CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )
				</if>
				<if test="user_auth_id != null and user_auth_id == '4'.toString() or user_auth_id == '6'.toString()">
		            -- 개발자, 개발_배포성능관리자로 로그인하면 2019-03-12
				   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                FROM USER_WRKJOB 
		                                WHERE TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN WORKJOB_START_DAY AND WORKJOB_END_DAY 
		                                AND USER_ID = #{user_id} )
				</if>
			                                
				<if test="searchKey != null and searchKey != '' and search_dbio != null and search_dbio != ''">
		           -- SQL식별자(DBIO)가 입력되면
		           AND  UPPER(A.DBIO) like '%'||UPPER(#{search_dbio})||'%'
				</if>
      			<if test="searchKey != null and searchKey != '' and search_program_nm != null and search_program_nm != ''">
		           -- 프로그램명, 거래명이 입력되면
		           AND  UPPER(A.PROGRAM_NM) like '%'||UPPER(#{search_program_nm})||'%'
				</if>
      			<if test="searchKey != null and searchKey != '' and search_program_desc != null and search_program_desc != ''">
		           -- 프로그램설명이 입력되면
		           AND  UPPER(A.PROGRAM_DESC) like '%'||UPPER(#{search_program_desc})||'%'
				</if>
				
            ) A
           , DEPLOY_PERF_CHK_EXCPT_REQUEST B
           , DEPLOY_PERF_CHK_EXCPT_REQUEST C
           , CD CD1
           , CD CD2
           , CD CD3
           , CD CD4
           , CD CD5
           , USERS U1
           , USERS U2
           , USERS U3
           , WRKJOB_CD Z
       WHERE A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID
         AND A.EXCEPTION_PRC_METH_CD_NM IS NOT NULL
         AND A.PROGRAM_ID = C.PROGRAM_ID(+)
         AND C.EXCEPTION_PRC_STATUS_CD(+) = '1'   -- ※ 하나의 프로그램에 대해 예외요청 중인 건은 업무적으로 1건만 존재해야 함
         AND C.EXCEPTION_REQUEST_WHY_CD(+) = '99'
         AND B.EXCEPTION_REQUEST_WHY_CD = CD1.CD(+)
         AND CD1.GRP_CD_ID(+) = '1060'      
         AND A.PROGRAM_DIV_CD = CD2.CD(+)
         AND CD2.GRP_CD_ID(+) = '1052'         
         AND B.EXCEPTION_REQUESTER_ID = U1.USER_ID(+)
         AND C.EXCEPTION_PRC_STATUS_CD = CD3.CD(+)       
         AND CD3.GRP_CD_ID(+) = '1051'  
         AND B.EXCEPTER_ID = U2.USER_ID(+)
         AND C.EXCEPTER_ID = U3.USER_ID(+)
         AND A.WRKJOB_CD = Z.WRKJOB_CD
         AND CD3.GRP_CD_ID(+) = '1051'
         AND A.PROGRAM_TYPE_CD = CD4.CD
         AND CD4.GRP_CD_ID(+) = '1005'
         AND A.DEPLOY_CHECK_STATUS_CD = CD5.CD(+)
         AND CD5.GRP_CD_ID(+) = '1056'
         AND A.PROGRAM_TYPE_CD = '1'			 -- 온라인

   		<if test="search_chk != null and search_chk != ''">
          -- 삭제요청 체크박스가 체크되면
          AND C.EXCEPTION_PRC_STATUS_CD = '1'
		</if>
		<if test="search_exception_request_why_chk != null and search_exception_request_why_chk != ''">
		   --   예외삭제요청이 체크되면
		   AND C.EXCEPTION_REQUEST_WHY_CD = '99'   
		</if>      
      ORDER BY A.WRKJOB_CD
	</sql>
	
	<sql id="old_ProgramPerformanceExceptionDeleteList">
		/* old_ProgramPerformanceExceptionDeleteList */
	SELECT  Z.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
	     ,  CD2.CD_NM AS PROGRAM_DIV_CD_NM                                -- 프로그램구분명(프로그램구분)
	     ,  A.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID(프로그램ID)
	     ,  A.PROGRAM_NM AS PROGRAM_NM                                    -- 프로그램명(프로그램명)
	     ,  A.DBIO AS DBIO                                                -- DBIO(SQL식별자(DBIO))
	     ,  A.PERF_CHECK_AUTO_PASS_YN AS PERF_CHECK_AUTO_PASS_YN          -- 성능점검자동적합여부(자동통과여부)
	     ,  B.EXCEPTION_REQUEST_ID                                        -- 예외요청ID(예외요청ID)
	     ,  A.EXCEPTION_PRC_METH_CD_NM                                    -- 예외처리방법(예외처리방법)   
	     ,  A.DIR_NM AS DIR_NM                                            -- 디렉토리명(디렉토리명)
	     ,  A.FILE_NM AS FILE_NM                                          -- 파일명(파일명)
	     ,  U1.USER_NM AS EXCEPTION_REQUESTER                             -- 요청자(예외요청자)
	     ,  TO_CHAR(B.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_REQUEST_DT       -- 예외요청일시(예외요청일시)
	     ,  CD1.CD_NM AS EXCEPTION_REQUEST_WHY_CD_NM                      -- 예외요청사유명(예외처리사유)
	     ,  CD1.CD AS EXCEPTION_REQUEST_WHY_CD                            -- 예외요청사유코드(예외처리사유코드)
	     ,  B.EXCEPTION_REQUEST_WHY                                       -- 예외요청사유(예외요청상세사유)
	     ,  B.EXCEPTION_PRC_WHY AS EXCEPTION_PRC_WHY                      -- 예외처리사유(예외처리결과)
	     ,  U2.USER_NM AS EXCEPT_PROCESSOR                                -- 예외처리자(예외처리자) 
	     ,  TO_CHAR(B.EXCEPTION_PRC_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_PRC_DT               -- 예외처리일시(예외처리일시)
	     -->     
	     ,  TO_CHAR(C.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_DEL_REQUEST_DT            -- 예외요청일시(예외삭제요청일시)
	     ,  C.EXCEPTION_REQUEST_WHY AS EXCEPTION_DEL_REQUEST_WHY          -- 예외요청사유(예외삭제요청상세사유)
	     ,  C.EXCEPTION_PRC_WHY AS EXCEPTION_DEL_PRC_WHY                  -- 예외처리사유(예외삭제처리결과)
	     ,  U3.USER_NM AS EXCEPT_DEL_PROCESSOR                            -- 예외처리자(예외삭제처리자)      
	     -- HIDDEN
	     ,  A.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드(업무)
	     ,  A.PROGRAM_DIV_CD                                              -- 프로그램구분코드
	     ,  C.EXCEPTION_PRC_STATUS_CD                                     -- 예외처리상태코드
	     ,  C.EXCEPTION_REQUEST_ID AS LAST_EXCEPTION_REQUEST_ID           -- 예외요청아이디(예외삭제요청ID)
	     ,  CD3.CD_NM AS EXCEPTION_PRC_STATUS_CD_NM                       -- 예외처리상태코드명
	     ,  B.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD			  -- 예외처리방법코드
 FROM (
        SELECT  
                A.WRKJOB_CD
              , A.PROGRAM_ID
              , A.PROGRAM_NM
              , A.PROGRAM_DIV_CD
              , A.DBIO
              , A.DIR_NM
              , A.FILE_NM
              , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
                          '자동통과'
                     WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
                          '지표단위'
                END AS EXCEPTION_PRC_METH_CD_NM               
              , A.PERF_CHECK_AUTO_PASS_YN
              , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
                          A.EXCEPTION_REQUEST_ID
                     WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
                          B.MAX_EXCEPTION_REQUEST_ID
                END AS EXCEPTION_REQUEST_ID 
          FROM  DEPLOY_PERF_CHK_ALL_PGM A    -- 배포성능점검전체프로그램내역(TABLE)
              , (
                 SELECT  
                         B.PROGRAM_ID
                      ,  COUNT(*) AS PERF_CHK_INDC_EXCPT_CNT
                      , MAX(B.EXCEPTION_REQUEST_ID) AS MAX_EXCEPTION_REQUEST_ID   
                   FROM  DEPLOY_PERF_CHK_INDC_EXCPT B
                  WHERE  B.DEL_YN = 'N'
                 GROUP BY B.PROGRAM_ID   
                ) B  
         WHERE  A.PROGRAM_ID = B.PROGRAM_ID(+)
				<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		           --  업무가 입력되면
		           AND  A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                            			 FROM WRKJOB_CD
                            			 START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                           				 CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )
				</if>
      			<if test="search_dbio != null and search_dbio != ''">
		           -- SQL식별자(DBIO)가 입력되면
		           AND  UPPER(A.DBIO) like '%'||UPPER(#{search_dbio})||'%'
				</if>
      			<if test="search_program_nm != null and search_program_nm != ''">
		           -- 프로그램명, 거래명이 입력되면
		           AND  UPPER(A.PROGRAM_NM) like '%'||UPPER(#{search_program_nm})||'%'
				</if>
			   ) A
		     , DEPLOY_PERF_CHK_EXCPT_REQUEST B
		     , DEPLOY_PERF_CHK_EXCPT_REQUEST C
		     , CD CD1
		     , CD CD2
		     , CD CD3
		     , USERS U1
		     , USERS U2
		     , USERS U3
		     , WRKJOB_CD Z
		 WHERE A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID
		   AND A.EXCEPTION_PRC_METH_CD_NM IS NOT NULL
		   AND A.PROGRAM_ID = C.PROGRAM_ID(+)
		   AND C.EXCEPTION_PRC_STATUS_CD(+) = '1'   -- ※ 하나의 프로그램에 대해 예외요청 중인 건은 업무적으로 1건만 존재해야 함
		   AND C.EXCEPTION_REQUEST_WHY_CD(+) = '99'
		   AND B.EXCEPTION_REQUEST_WHY_CD = CD1.CD(+)
		   AND CD1.GRP_CD_ID(+) = '1060'      
		   AND A.PROGRAM_DIV_CD = CD2.CD(+)
		   AND CD2.GRP_CD_ID(+) = '1052'         
		   AND B.EXCEPTION_REQUESTER_ID = U1.USER_ID(+)
		   AND C.EXCEPTION_PRC_STATUS_CD = CD3.CD(+)       
		   AND CD3.GRP_CD_ID(+) = '1051'  
		   AND B.EXCEPTER_ID = U2.USER_ID(+)
		   AND C.EXCEPTER_ID = U3.USER_ID(+)
		   AND A.WRKJOB_CD = Z.WRKJOB_CD
		<if test="search_chk != null and search_chk != ''">
          -- 삭제요청 체크박스가 체크되면
          AND C.EXCEPTION_PRC_STATUS_CD = '1'
		</if>
		<if test="search_exception_request_why_chk != null and search_exception_request_why_chk != ''">
		   --   예외삭제요청이 체크되면
		   AND C.EXCEPTION_REQUEST_WHY_CD = '99'   
		</if>
		ORDER BY A.WRKJOB_CD 
	</sql>
	
	<select id="getProPerfExcReqDel" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.getProPerfExcReqDel */
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM, AA.*
		    FROM (
				<include refid="ProgramPerformanceExceptionDeleteList"/>
			) AA
		    WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
		) AA
		WHERE AA.RNUM > ${pagePerCount} * (${currentPage} - 1)
	</select>
	
	   <select id="getPerfCheckResultDelTableList" parameterType="deployPerfChkIndc"   resultType="deployPerfChkIndc">
   /* PerformanceCheckIndexDao.getPerfCheckResultDelTableList */
      SELECT A.*
         , CASE WHEN TRIM(A.EXCPT_PASS_MAX_VALUE) IS NULL AND TRIM(A.EXCPT_YN_DECIDE_DIV_CD) IS NULL THEN
                       'N'
                      ELSE
                        'Y'
               END AS IS_CHECKED 
                
                FROM(
         SELECT  A.DBIO,
                 A.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM                    -- 성능점검지표명(점검 지표)
                 , A.PERF_CHECK_INDC_ID AS PERF_CHECK_INDC_ID                    -- 성능점검지표ID(점검 지표ID)
                 
               , CD2.CD_NM            AS PERF_CHECK_METH_CD_NM                 -- 성능점검방법명(점검 방법)  
               , CASE WHEN A.YN_DECIDE_DIV_CD = '2' THEN                     /* 여부값일 경우 */ 
                         'N'
                     WHEN INSTR(A.PASS_MAX_VALUE,'.',1) <![CDATA[>]]> 0 THEN 
                         TO_CHAR(A.PASS_MAX_VALUE, 'FM999990.9999') || ' 이하'
                     ELSE 
                         TO_CHAR(A.PASS_MAX_VALUE) || ' 이하'
                  END AS PASS_MAX_VALUE                                       -- 적합  GEUM 2021-08-24
               , CASE WHEN MOD(A.PASS_MAX_VALUE, 1) = 0 THEN
                           TO_CHAR(A.PASS_MAX_VALUE) || ' 초과'
                      WHEN TRIM(A.PASS_MAX_VALUE) IS NOT NULL THEN 
                           TO_CHAR(A.PASS_MAX_VALUE, 'FM999990.9999') || ' 초과'
                 END AS NOT_PASS_PASS                                          -- 기준지표 부적합(부적합) GEUM 2021-08-24
               , CD3.CD_NM  AS YN_DECIDE_DIV_CD_NM                             -- 기준지표 여부값판정구분(여부값판정구분)
               , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN
                           (SELECT CD_NM FROM CD WHERE GRP_CD_ID = '1061' AND CD = '2')
                         WHEN C.TEMP_PERF_CHK_CNT > 0 THEN
                              (SELECT CD_NM FROM CD WHERE GRP_CD_ID = '1061' AND CD = '3') 
                        WHEN B.PERF_CHECK_INDC_ID IS NULL THEN 
                           'N'
                      ELSE 'Y'
                 END AS EXCEPT_REG_YN                                          -- 예외등록여부(예외등록여부)
               
               , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN NULL
                      ELSE B.PASS_MAX_VALUE 
                 END AS EXCPT_PASS_MAX_VALUE                                   -- 예외적용지표 적합최대값(적합)
                 
               , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN NULL
                      WHEN MOD( B.PASS_MAX_VALUE, 1) = 0 THEN
                           TO_CHAR(B.PASS_MAX_VALUE) || ' 초과'
                      WHEN TRIM(B.PASS_MAX_VALUE) IS NOT NULL THEN 
                           TO_CHAR(B.PASS_MAX_VALUE, 'FM999990.9999') || ' 초과'     -- GEUM 2021-08-24
                 END AS EXCPT_NOT_PASS_PASS                                    -- 예외적용지표 부적합(부적합)      
               , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN NULL
                      ELSE CD4.CD_NM 
                    END AS EXCPT_YN_DECIDE_DIV_CD_NM                                 -- 예외적용지표 여부값판정구분(여부값판정구분명)      
                  , B.YN_DECIDE_DIV_CD AS EXCPT_YN_DECIDE_DIV_CD                     -- 예외적용지표 여부값판정구분(여부값판정구분코드)   
           FROM 
               (
                SELECT   C.PROGRAM_ID AS PROGRAM_ID
                       , A.PERF_CHECK_INDC_ID
                       , A.PERF_CHECK_INDC_NM 
                       , A.PERF_CHECK_METH_CD              
                       , B.WRKJOB_CD
                       , B.PERF_CHECK_PROGRAM_DIV_CD
                       , B.PASS_MAX_VALUE
                       , B.YN_DECIDE_DIV_CD
                       , C.DBIO
                       , C.PERF_CHECK_AUTO_PASS_YN 
                   FROM  DEPLOY_PERF_CHK_INDC A
                      ,  WJ_PERF_CHK_INDC B
                      ,  DEPLOY_PERF_CHK_ALL_PGM C
                  WHERE  A.INDC_USE_YN = 'Y'
                    AND  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
                    AND  B.INDC_APPLY_YN = 'Y'    
                    AND  B.WRKJOB_CD = C.WRKJOB_CD
                    AND  C.WRKJOB_CD = #{wrkjob_cd}
                    AND  C.PROGRAM_ID = #{program_id}
                ) A     
               , DEPLOY_PERF_CHK_INDC_EXCPT B
               
                    , (
                 -- 한시 점검제외 SET
                 SELECT COUNT(*) AS TEMP_PERF_CHK_CNT
                   FROM DEPLOY_PERF_CHK A
                      , DEPLOY_PERF_CHK_TARGET_PGM B 
                  WHERE A.DEPLOY_CHECK_STATUS_CD = '01'     -- 점검중
                    AND A.PERF_CHECK_ID = B.PERF_CHECK_ID 
                    AND B.EXCEPTION_PRC_METH_CD = '3'       -- 한시 점검제외
                    AND B.PROGRAM_ID = #{program_id}
                   ) C
               , CD CD2
               , CD CD3
               , CD CD4
          WHERE  A.PROGRAM_ID = B.PROGRAM_ID(+)
            AND  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID(+)
               AND  B.DEL_YN(+) = 'N'    
            AND  A.PERF_CHECK_METH_CD = CD2.CD(+)
            AND  CD2.GRP_CD_ID(+) = '1059'
            AND  A.YN_DECIDE_DIV_CD = CD3.CD(+)
            AND  CD3.GRP_CD_ID(+) = '1050'   
            AND  B.YN_DECIDE_DIV_CD = CD4.CD(+)
            AND  CD4.GRP_CD_ID(+) = '1050'  
         ORDER BY A.PERF_CHECK_INDC_ID, A.PERF_CHECK_PROGRAM_DIV_CD
         )A
   </select>
	
	<select id="getPerfCheckStep" parameterType="deployPerfChkIndc"	resultType="deployPerfChkIndc">
	/* PerformanceCheckIndexDao.getPerfCheckStep */
		   SELECT  /* DISPLAY */
              B.WRKJOB_CD,
              A.PERF_CHECK_STEP_NM AS PERF_CHECK_STEP_NM                    -- 성능점검단계명
      
              /* HIDEN */
            , A.PERF_CHECK_STEP_ID AS PERF_CHECK_STEP_ID                    -- 성능점검단계ID
            , A.PERF_CHECK_AUTO_EXEC_YN AS PERF_CHECK_AUTO_EXEC_YN          -- 성능점검자동실행여부
            , A.STEP_ORDERING AS STEP_ORDERING                              -- 단계순서
        FROM DEPLOY_PERF_CHK_STEP A         -- 배포성능점점단계기본
            ,DEPLOY_PERF_CHK_STEP_TEST_DB B -- 배포성능점검단계별테스트DB기본
       WHERE A.PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID 
         AND B.WRKJOB_CD  IN (
                              SELECT WRKJOB_CD
                                FROM WRKJOB_CD
                               WHERE TRIM(UPPER_WRKJOB_CD) IS NULL
                              START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                             CONNECT BY PRIOR UPPER_WRKJOB_CD = WRKJOB_CD 
                             )
       ORDER BY  A.STEP_ORDERING
	</select>
	
	<insert id="insertDeployPerfChkParsingSchema" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.insertDeployPerfChkParsingSchema */
		INSERT INTO   DEPLOY_PERF_CHK_PARSING_SCHEMA 	    -- 배포성능점검단계별파싱스키마내역(TABLE)
		        ( WRKJOB_CD                                                   -- 업무코드
		        , PERF_CHECK_STEP_ID                                          -- 성능점검단계ID
		        , DBID                                                        -- DBID
		        , PARSING_SCHEMA_NAME                                         -- 파싱스키마명
		 ) VALUES (  
		          #{wrkjob_cd}                                                  -- 업무코드
		        , #{perf_check_step_id}                                         -- 성능점검단계ID
		        , #{dbid}                                                       -- DBID
		        , #{parsing_schema_name}                                        -- 파싱스키마명
		        ) 
	</insert>
	
	<update id="updateDeployPerfChkParsingSchema" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkParsingSchema */
			UPDATE  DEPLOY_PERF_CHK_PARSING_SCHEMA A    -- 배포성능점검단계별파싱스키마내역(TABLE)
			   SET  
			        A.DBID = #{dbid}                                                -- DBID
			      , A.PARSING_SCHEMA_NAME = #{parsing_schema_name}                  -- 프로그램구분코드
			      , A.DEL_YN = #{del_yn}                                            -- 삭제여부  2/26      
			 WHERE  A.WRKJOB_CD = #{wrkjob_cd}                                      -- 업무코드
			   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                    -- 성능점검단계ID
	</update>
	
	<update id="updateDeployPerfChkParsingSchemaAll" parameterType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.updateDeployPerfChkParsingSchemaAll */
					UPDATE  DEPLOY_PERF_CHK_PARSING_SCHEMA A    		  			  -- 배포성능점검단계별파싱스키마내역(TABLE)
			   SET  
			        A.DEL_YN = #{del_yn}                							  -- 삭제여부    
			 WHERE  A.WRKJOB_CD IN ( SELECT WRKJOB_CD
			                           FROM WRKJOB_CD
			                         START WITH WRKJOB_CD = #{wrkjob_cd}              -- 업무코드      
			                         CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )
	</update>
	
	<sql id="deployPerfChkParsingSchemaList">
	  /* PerformanceCheckIndexDao.deployPerfChkParsingSchemaList */
	  SELECT
	  		C.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
	  		, A.PERF_CHECK_STEP_ID AS PERF_CHECK_STEP_ID                    -- 성능점검단계ID(점검 단계ID)
	  		, A.PERF_CHECK_STEP_NM AS PERF_CHECK_STEP_NM                    -- 성능점검단계명(점검 단계)
	  		, A.STEP_ORDERING AS STEP_ORDERING                              -- 단계순서(단계순서)
	  		, B.DEL_YN AS DEL_YN                                            -- 삭제여부(삭제여부)
	  		, B.DBID AS DBID                                                -- DBID(DB)
	  		, B.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME                  -- 파스키마명(스키마)
	  		, B.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드
	  		, D.DB_NAME AS DB_NAME                                          -- DB_NAME(디비명)
	  FROM  DEPLOY_PERF_CHK_STEP A
	  		, DEPLOY_PERF_CHK_PARSING_SCHEMA B
	  		, WRKJOB_CD C
	  		, DATABASE D
	  WHERE  A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
	  		AND  B.WRKJOB_CD = C.WRKJOB_CD
	  		AND  C.USE_YN = 'Y'   --> 추가 2022-04-20
	   		AND  B.DBID = D.DBID
	   		AND  D.USE_YN = 'Y'   --> 추가 2022-04-20
	   		AND  A.DEL_YN = 'N'
	 <if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		-- 업무코드가 입력되면
		AND  B.WRKJOB_CD = #{search_wrkjob_cd}
	 </if>
	 <if test="search_del_yn != null and search_del_yn != ''">
		-- 사용 여부가 입력되면
		AND  B.DEL_YN = #{search_del_yn}                                -- 삭제여부
	 </if>
	  ORDER BY B.WRKJOB_CD, A.STEP_ORDERING
	</sql>

	<select id="getDeployPerfChkParsingSchema" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getDeployPerfChkParsingSchema */
		<include refid="deployPerfChkParsingSchemaList"/>
	</select>

	<select id="getDeployPerfChkParsingSchemaByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getDeployPerfChkParsingSchemaByExcelDown */
		<include refid="deployPerfChkParsingSchemaList"/>
	</select>

	<select id="checkDeployPerfChkStepDelYnCnt" parameterType="deployPerfChkIndc"	resultType="int">
   		/* PerformanceCheckIndexDao.checkDeployPerfChkStepDelYnCnt */
			SELECT COUNT(*) AS DEL_YN_CNT
			  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
			 WHERE A.WRKJOB_CD IN (
			                       SELECT WRKJOB_CD
			                         FROM WRKJOB_CD
			                        WHERE TRIM(UPPER_WRKJOB_CD) IS NULL
			                       START WITH WRKJOB_CD = #{wrkjob_cd}              -- 업무코드      
			                       CONNECT BY PRIOR UPPER_WRKJOB_CD = WRKJOB_CD
			                      )  
			   AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
			   AND A.DEL_YN = 'Y'
	</select>
	
	<select id="checkDeployPerfChkParsingSchemaName" parameterType="deployPerfChkIndc"	resultType="int">
   		/* PerformanceCheckIndexDao.checkDeployPerfChkParsingSchemaName */
		        SELECT  COUNT(*) AS DEPLOY_PERF_CHK_CNT                     -- 배포성능점검건수
		  FROM  DEPLOY_PERF_CHK_STEP A    									-- 배포성능점점단계기본(TABLE)
		     ,  DEPLOY_PERF_CHK_STEP_EXEC B
		     ,  DEPLOY_PERF_CHK C
		 WHERE  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}                  -- 성능점검단계ID
		   AND  A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
		   AND  B.PERF_CHECK_ID = C.PERF_CHECK_ID
		   AND  C.DEPLOY_CHECK_STATUS_CD IN ('00', '01')
		   AND  ROWNUM = 1
	</select>
	 
	<sql id="wExcptPrcProgramList">
		/* PerformanceCheckIndexDao.wExcptPrcProgramList */
				WITH W_EXCPT_PRC_PROGRAM AS (
			        SELECT  
			                A.WRKJOB_CD
			              , A.PROGRAM_ID
			              , A.PROGRAM_DIV_CD
			              , A.PERF_CHECK_AUTO_PASS_YN
			              , B.PERF_CHK_INDC_EXCPT_CNT
			          FROM  DEPLOY_PERF_CHK_ALL_PGM A    -- 배포성능점검전체프로그램내역(TABLE)
			              , (
			                 SELECT  -- 지표단위 예외처리 프로그램 set
			                         B.PROGRAM_ID
			                      ,  COUNT(*) AS PERF_CHK_INDC_EXCPT_CNT
			                      ,  MAX(B.EXCEPTION_REQUEST_ID) AS MAX_EXCEPTION_REQUEST_ID   
			                   FROM  DEPLOY_PERF_CHK_INDC_EXCPT B
			                  WHERE  B.DEL_YN = 'N'
			                 GROUP BY B.PROGRAM_ID   
			                ) B  
			              , DEPLOY_PERF_CHK_EXCPT_REQUEST C  
			         WHERE  A.PROGRAM_ID = B.PROGRAM_ID(+)
			           AND  C.EXCEPTION_REQUEST_ID = CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
			                                                   A.EXCEPTION_REQUEST_ID
			                                              WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
			                                                   B.MAX_EXCEPTION_REQUEST_ID
			                                               END
			 ) 
			 SELECT 
			        W.WRKJOB_CD_NM AS WRKJOB_CD_NM                          -- 업무명(업무)    
			     ,  A.SQL_AUTO_PASS_CNT + A.SQL_INDC_UNIT_CNT +
			        PROGRAM_AUTO_PASS_CNT + A.TR_AUTO_PASS_CNT AS TOTAL_EXCPT_CNT  -- 전체(합계)
			     ,  A.SQL_AUTO_PASS_CNT AS SQL_AUTO_PASS_CNT                -- SQL자동통과건수(SQL-자동통과)
			     ,  A.SQL_INDC_UNIT_CNT AS SQL_INDC_UNIT_CNT                -- SQL지표단위건수(SQL-지표단위)
			     ,  A.PROGRAM_AUTO_PASS_CNT AS PROGRAM_AUTO_PASS_CNT        -- 프로그램자동통과건수(프로그램-자동통과)
			     ,  TR_AUTO_PASS_CNT AS TR_AUTO_PASS_CNT                    -- 거래자동통과건수(거래-자동통과)
			  FROM (
			        SELECT  
			                A.WRKJOB_CD AS WRKJOB_CD                                      -- 업무코드
			              , COUNT(*) 
			              , NVL(SUM(CASE WHEN A.PROGRAM_DIV_CD = 'S' AND A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
			                                  1 
			                             ELSE 
			                                  0 
			                        END 
			                   ), 0) AS SQL_AUTO_PASS_CNT                                 -- SQL자동통과건수
			             , NVL(SUM(CASE WHEN A.PROGRAM_DIV_CD = 'S' AND A.PERF_CHECK_AUTO_PASS_YN = 'N' AND A.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
			                                  1 
			                             ELSE 
			                                  0 
			                        END 
			                   ), 0) AS SQL_INDC_UNIT_CNT                                 -- SQL지표단위건수           
			              , NVL(SUM(CASE WHEN A.PROGRAM_DIV_CD = 'P' THEN 
			                                  1                                   
			                             ELSE 
			                                  0 
			                        END 
			                   ), 0) AS PROGRAM_AUTO_PASS_CNT                             -- 프로그램자동통과건수      
			              , NVL(SUM(CASE WHEN A.PROGRAM_DIV_CD = 'T' THEN 
			                                  1 
			                             ELSE 
			                                  0 
			                        END 
			                   ), 0) AS TR_AUTO_PASS_CNT                                  -- 거래자동통과건수                
			          FROM  W_EXCPT_PRC_PROGRAM A    -- 배포성능점검전체프로그램내역(TABLE)
					<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
				        --업무코드가 입력되면   
					        WHERE  A.WRKJOB_CD IN ( SELECT WRKJOB_CD
	                                 FROM WRKJOB_CD
	                                START WITH WRKJOB_CD =  #{search_wrkjob_cd}
	                              CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )
					</if>
			        GROUP BY A.WRKJOB_CD 
			       ) A
			       , WRKJOB_CD W 
			  WHERE A.WRKJOB_CD = W.WRKJOB_CD 
			ORDER BY A.WRKJOB_CD
	</sql>
	
	<select id="getPerfChkIndcListState" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getPerfChkIndcListState */
		<include refid="wExcptPrcProgramList"/>
	</select>

	<select id="getPerfChkIndcListStateByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getPerfChkIndcListStateByExcelDown */
		<include refid="wExcptPrcProgramList"/>
	</select>
	
	<sql id="wExcptPrcProgram2List">
		/* PerformanceCheckIndexDao.wExcptPrcProgram2List */
			WITH W_EXCPT_PRC_PROGRAM AS (
			        SELECT  
			                A.WRKJOB_CD
			              , A.PROGRAM_ID
			              , A.PROGRAM_DIV_CD
			              , A.PERF_CHECK_AUTO_PASS_YN
			              , C.EXCEPTION_REQUEST_WHY_CD
			              , B.PERF_CHK_INDC_EXCPT_CNT
			          FROM  DEPLOY_PERF_CHK_ALL_PGM A    -- 배포성능점검전체프로그램내역(TABLE)
			              , (
			                 SELECT  
			                         B.PROGRAM_ID
			                      ,  COUNT(*) AS PERF_CHK_INDC_EXCPT_CNT
			                      , ( 
			                         SELECT  MAX(EXCEPTION_REQUEST_ID)
			                           FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST
			                          WHERE  PROGRAM_ID = B.PROGRAM_ID
			                        ) AS MAX_EXCEPTION_REQUEST_ID   
			                   FROM  DEPLOY_PERF_CHK_INDC_EXCPT B
			                  WHERE  B.DEL_YN = 'N'
			                 GROUP BY B.PROGRAM_ID   
			                ) B  
			              , DEPLOY_PERF_CHK_EXCPT_REQUEST C  
			         WHERE  A.PROGRAM_ID = B.PROGRAM_ID(+)
			           AND  C.EXCEPTION_REQUEST_ID = CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN 
			                                                   A.EXCEPTION_REQUEST_ID
			                                              WHEN A.PERF_CHECK_AUTO_PASS_YN = 'N' AND B.PERF_CHK_INDC_EXCPT_CNT > 0  THEN 
			                                                   B.MAX_EXCEPTION_REQUEST_ID
			                                               END
			 ) 
			SELECT  W.WRKJOB_CD_NM AS WRKJOB_CD_NM                          -- 업무명(업무)   
			     ,  A.TOTAL_CNT                                             -- 합계
			     ,  A.EXCEPTION_REQUEST_WHY_CD01                            -- 테스트 불가  
			     ,  A.EXCEPTION_REQUEST_WHY_CD02                            -- 배치 전용
			     ,  A.EXCEPTION_REQUEST_WHY_CD03                            -- 센터컷 전용
			     ,  A.EXCEPTION_REQUEST_WHY_CD04                            -- 임시처리
			     ,  A.EXCEPTION_REQUEST_WHY_CD05                            -- 오류처리 전용
			     ,  A.EXCEPTION_REQUEST_WHY_CD06                            -- 에러처리 전용
			     -- ,  A.EXCEPTION_REQUEST_WHY_CD07                            -- 삼성페이 기동거래 (삭제)
			     ,  A.EXCEPTION_REQUEST_WHY_CD08                            -- 데몬 전용
			     ,  A.EXCEPTION_REQUEST_WHY_CD09                            -- 내부거래 전용
			     ,  A.EXCEPTION_REQUEST_WHY_CD10                            -- MQ 전용
			     ,  A.EXCEPTION_REQUEST_WHY_CD_ETC                          -- 기타
			  FROM (
			        SELECT  A.WRKJOB_CD
			             ,  COUNT(*) AS TOTAL_CNT
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '01' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD01
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '02' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD02
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '03' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD03
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '04' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD04
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '05' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD05
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '06' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD06
			             -- ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '07' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD07(삭제)
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '08' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD08             
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '09' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD09
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD = '10' THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD10
			             ,  SUM(CASE WHEN EXCEPTION_REQUEST_WHY_CD NOT IN ('01', '02', '03', '04', '05', '06', '07', '08', '09', '10') THEN 1 ELSE 0 END) AS EXCEPTION_REQUEST_WHY_CD_ETC
			          FROM  W_EXCPT_PRC_PROGRAM A
				<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
			        --업무코드가 입력되면   
				        WHERE  A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                                 FROM WRKJOB_CD
                                START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                              CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )
				</if>
			        GROUP BY A.WRKJOB_CD   
			       ) A 
			       , WRKJOB_CD W 
			 WHERE A.WRKJOB_CD = W.WRKJOB_CD   
			ORDER BY A.WRKJOB_CD 
	</sql>
	<select id="getPerfChkIndcListState2" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getPerfChkIndcListState2 */
		<include refid="wExcptPrcProgram2List"/>
	</select>

	<select id="getPerfChkIndcListState2ByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getPerfChkIndcListState2ByExcelDown */
		<include refid="wExcptPrcProgram2List"/>
	</select>
	
 	 	<sql id="ProPerfExcReqStateList">
		/* PerformanceCheckIndexDao.ProPerfExcReqStateList */
			SELECT  
		        Z.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
		      , C.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID(프로그램ID)
		      , C.PROGRAM_NM AS PROGRAM_NM                                    -- 프로그램명(프로그램명)      
		      , C.DBIO AS DBIO                                                -- DBIO(SQL식별자(DBIO))      
		      , C.FILE_NM AS FILE_NM                                          -- 파일명(파일명)
		      , C.DIR_NM AS DIR_NM                                            -- 디렉토리명(디렉토리명)            
		      , CASE WHEN A.EXCEPTION_PRC_METH_CD = '2' AND A.EXCEPTION_PRC_STATUS_CD = '2' THEN
		                  'Y'
		             WHEN A.EXCEPTION_PRC_STATUS_CD = '1' THEN     
		                  C.PERF_CHECK_AUTO_PASS_YN
		             ELSE
		                  'N'
		         END PERF_CHECK_AUTO_PASS_YN                                  -- 성능점검자동적합여부(자동통과여부) 
		      , CD2.CD_NM AS EXCEPTION_PRC_STATUS_CD_NM                       -- 예외처리상태코드명(예외처리상태)      
		      , A.PERF_CHECK_AUTO_PASS_DEL_YN AS PERF_CHECK_AUTO_PASS_DEL_YN  -- 성능점검자동통과삭제여부
		      , TO_CHAR(A.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_REQUEST_DT                -- 예외요청일시(예외요청일시)      
		      , U2.USER_NM AS EXCEPTION_REQUESTER                             -- 사용자명(예외요청자)      
		      , CD4.CD_NM AS EXCEPTION_REQUEST_WHY_CD_NM                      -- 예외처리사유코드(예외처리사유)      
		      , CD5.CD_NM AS EXCEPTION_PRC_METH_CD_NM                         -- 예외처리방법코드명(예외처리방법)
		      , A.EXCEPTION_REQUEST_WHY AS EXCEPTION_REQUEST_WHY              -- 예외요청사유(예외요청상세사유)
		      , TO_CHAR(A.EXCEPTION_PRC_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_PRC_DT                        -- 예외처리일시(예외처리일시)      
		      , U3.USER_NM AS EXCEPT_PROCESSOR                                -- 사용자명(예외처리자)
		      , A.EXCEPTION_PRC_WHY AS EXCEPTION_PRC_WHY                      -- 예외처리사유(예외처리결과)
		      
		      , B.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
		      , B.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID(배포ID)
		      , B.DEPLOY_NM AS DEPLOY_NM                                      -- 배포명(배포명)
		      , TO_CHAR(B.DEPLOY_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS DEPLOY_REQUEST_DT                      -- 배포요청일시(배포요청일시)
		      , B.DEPLOY_EXPECTED_DAY AS DEPLOY_EXPECTED_DAY                  -- 배표예정일자(배표예정일자)   
		      , B.DEPLOY_REQUESTER AS DEPLOY_REQUESTER                        -- 사용자명(배포요청자)      
		      , CD1.CD_NM AS DEPLOY_CHECK_STATUS_CD_NM                        -- 배포성능점검상태코드명(성능 점검 상태)
		      , NVL(CD3.CD_NM, '미수행') AS PERF_CHECK_RESULT_DIV_CD_NM	      -- 프로그램성능점검결과(프로그램 성능 점검 결과)
		      , C.PROGRAM_DESC AS PROGRAM_DESC 
		      -- HIDDEN
		      , A.EXCEPTION_REQUEST_ID AS EXCEPTION_REQUEST_ID                -- 예외요청ID
		      , A.EXCEPTION_REQUEST_WHY_CD AS EXCEPTION_REQUEST_WHY_CD        -- 예외요청사유코드
		      , A.EXCEPTION_PRC_STATUS_CD AS EXCEPTION_PRC_STATUS_CD          -- 예외처리상태코드
		      , A.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD              -- 예외처리방법코드
		      , A.EXCEPTER_ID AS EXCEPTER_ID                                  -- 예외처리자ID
		      , A.EXCEPTION_REQUEST_GRP_ID AS EXCEPTION_REQUEST_GRP_ID        -- 예외요청그룹ID
		      , A.PERF_CHECK_STEP_ID AS PERF_CHECK_STEP_ID                    -- 성능점검단계ID
		      , A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS                  -- 성능점검수행회차
		      , A.EXCEPTION_REQUESTER_ID AS EXCEPTION_REQUESTER_ID            -- 예외요청자ID
		      , C.PROGRAM_DIV_CD AS PROGRAM_DIV_CD                            -- 프로그램구분코드       
              , CD6.CD_NM AS PROGRAM_TYPE_CD_NM                               -- 프로그램유형명
              , C.SQL_COMMAND_TYPE_CD AS SQL_COMMAND_TYPE_CD                  -- SQL명령 유형코드
              , C.DYNAMIC_SQL_YN AS DYNAMIC_SQL_YN                            -- 다이나믹SQL여부
                
		  FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST A
		     ,  (
		         SELECT B.*
		              , U1.USER_NM AS DEPLOY_REQUESTER 
		           FROM DEPLOY_PERF_CHK B
		              , USERS U1             
		          WHERE B.DEPLOY_REQUESTER_ID = U1.USER_ID
		         ) B  
		     ,  DEPLOY_PERF_CHK_ALL_PGM C    
		     ,  DEPLOY_PERF_CHK_RESULT E
		     ,  WRKJOB_CD Z
		     ,  CD CD1
		     ,  CD CD2
		     ,  CD CD3
		     ,  CD CD4
		     ,  CD CD5
		     ,  CD CD6
		     ,  USERS U2
		     ,  USERS U3
		     
		 WHERE  A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
		   AND  A.PROGRAM_ID = C.PROGRAM_ID
		   AND  E.PERF_CHECK_ID(+) = A.PERF_CHECK_ID
		   AND  E.PERF_CHECK_STEP_ID(+) = A.PERF_CHECK_STEP_ID
		   AND  E.PROGRAM_ID(+) = A.PROGRAM_ID
		   AND  E.PROGRAM_EXECUTE_TMS(+) = A.PROGRAM_EXECUTE_TMS
		   AND  C.WRKJOB_CD = Z.WRKJOB_CD
		   AND  A.EXCEPTION_REQUESTER_ID = U2.USER_ID(+)
		   AND  A.EXCEPTER_ID = U3.USER_ID(+)
		   AND  B.DEPLOY_CHECK_STATUS_CD = CD1.CD(+)
		   AND  CD1.GRP_CD_ID(+) = '1056'   
		   AND  A.EXCEPTION_PRC_STATUS_CD = CD2.CD(+)
		   AND  CD2.GRP_CD_ID(+) = '1051'
		   AND  E.PERF_CHECK_RESULT_DIV_CD = CD3.CD(+)
		   AND  CD3.GRP_CD_ID(+) = '1055'
		   AND  A.EXCEPTION_REQUEST_WHY_CD = CD4.CD(+)
		   AND  CD4.GRP_CD_ID(+) = '1060'   
		   AND  A.EXCEPTION_PRC_METH_CD = CD5.CD(+)
		   AND  CD5.GRP_CD_ID(+) = '1061'
		   AND  C.PROGRAM_TYPE_CD = CD6.CD (+)
           AND  CD6.GRP_CD_ID(+) = '1005'
           AND  C.PROGRAM_TYPE_CD = '1'   -- 온라인
		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
			-- 업무가 입력되면
			AND  C.WRKJOB_CD IN ( SELECT WRKJOB_CD
                                     FROM WRKJOB_CD
                                    START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                                  CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )		
		</if>
		<if test="searchKey != null and searchKey != '' and search_dbio != null and search_dbio != ''">
		   -- SQL식별자(DBIO)가 입력되면
		   AND  UPPER(C.DBIO) LIKE '%'||UPPER(#{search_dbio})||'%'
		</if>
		<if test="searchKey != null and searchKey != '' and search_program_nm != null and search_program_nm != ''">
		   -- 프로그램명, 거래명이 입력되면
		   AND  UPPER(C.PROGRAM_NM) LIKE '%'||UPPER(#{search_program_nm})||'%'
		</if>
		<if test="searchKey != null and searchKey != '' and search_program_desc != null and search_program_desc != ''">
          -- 프로그램설명이 입력되면
          AND  UPPER(C.PROGRAM_DESC) LIKE '%'||UPPER(#{search_program_desc})||'%'
		</if>
		
		<if test="search_from_exception_reqeust_dt != null and search_from_exception_reqeust_dt != '' and search_to_exception_reqeust_dt != null and search_to_exception_reqeust_dt != ''">
		   -- 예외요청일자가 입력되면
		   AND  A.EXCEPTION_REQUEST_DT BETWEEN TO_DATE(#{search_from_exception_reqeust_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{search_to_exception_reqeust_dt}|| ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
		</if>

<!-- 	<if test="search_from_deploy_request_dt != null and search_from_deploy_request_dt != '' and search_to_deploy_request_dt != null and search_to_deploy_request_dt != ''"> -->
<!-- 	   배포요청일자가 입력되면 -->
<!-- 	   AND  B.DEPLOY_REQUEST_DT(+) BETWEEN TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{search_to_deploy_request_dt}|| ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS') -->
<!-- 	</if> -->
		
		<if test="search_exception_prc_status_cd != null and search_exception_prc_status_cd != ''">
         -- 예외처리상태가 입력되면
         AND  A.EXCEPTION_PRC_STATUS_CD = #{search_exception_prc_status_cd}
		</if>
		<if test="search_perf_check_step_id != null and search_perf_check_step_id != ''">
         -- 최종점검단계가 입력되면 
         AND  A.PERF_CHECK_STEP_ID = #{search_perf_check_step_id}
		</if>
		<if test="search_deploy_id != null and search_deploy_id != ''">
         -- 배포ID가 입력되면
         AND  UPPER(B.DEPLOY_ID) LIKE '%'||UPPER(#{search_deploy_id})||'%'
		</if>
		<if test="search_deploy_requester != null and search_deploy_requester != ''">
         -- 배포요청자가 입력되면 
         AND B.DEPLOY_REQUESTER LIKE '%'|| #{search_deploy_requester} || '%'   
		</if>
		
		ORDER BY A.EXCEPTION_REQUEST_DT DESC
	</sql>
 	<sql id="ProPerfExcReqStateListEspc">
		/* PerformanceCheckIndexDao.ProPerfExcReqStateListEspc */
			SELECT  
		        Z.WRKJOB_CD_NM AS WRKJOB_CD_NM                                -- 업무코드명(업무)
              , Z.TOP_WRKJOB_CD AS TOP_WRKJOB_CD								-- 부모 업무 코드명(업무) 20210827 kwj
		      , C.PROGRAM_ID AS PROGRAM_ID                                    -- 프로그램ID(프로그램ID)
		      , C.PROGRAM_NM AS PROGRAM_NM                                    -- 프로그램명(프로그램명)      
		      , C.DBIO AS DBIO                                                -- DBIO(SQL식별자(DBIO))      
		      , C.FILE_NM AS FILE_NM                                          -- 파일명(파일명)
		      , C.DIR_NM AS DIR_NM                                            -- 디렉토리명(디렉토리명)            
		      , CASE WHEN A.EXCEPTION_PRC_METH_CD = '2' AND A.EXCEPTION_PRC_STATUS_CD = '2' THEN
		                  'Y'
		             WHEN A.EXCEPTION_PRC_STATUS_CD = '1' THEN     
		                  C.PERF_CHECK_AUTO_PASS_YN
		             ELSE
		                  'N'
		         END PERF_CHECK_AUTO_PASS_YN                                  -- 성능점검자동적합여부(자동통과여부) 
		      , CD2.CD_NM AS EXCEPTION_PRC_STATUS_CD_NM                       -- 예외처리상태코드명(예외처리상태)      
		      , A.PERF_CHECK_AUTO_PASS_DEL_YN AS PERF_CHECK_AUTO_PASS_DEL_YN  -- 성능점검자동통과삭제여부
		      , TO_CHAR(A.EXCEPTION_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_REQUEST_DT                -- 예외요청일시(예외요청일시)      
		      , U2.USER_NM AS EXCEPTION_REQUESTER                             -- 사용자명(예외요청자)      
		      , CD4.CD_NM AS EXCEPTION_REQUEST_WHY_CD_NM                      -- 예외처리사유코드(예외처리사유)    
		      , CASE WHEN F.PERF_CHECK_EVALUATION_METH_CD IN ('2', '3') THEN
                          CD5.REF_VL_2
                     ELSE     
                          CD5.CD_NM 
                 END AS EXCEPTION_PRC_METH_CD_NM                              -- GEUM 2021-08-12 예외처리방법코드명(예외처리방법)
		      , A.EXCEPTION_REQUEST_WHY AS EXCEPTION_REQUEST_WHY              -- 예외요청사유(예외요청상세사유)
		      , TO_CHAR(A.EXCEPTION_PRC_DT,'YYYY-MM-DD HH24:MI:SS') AS EXCEPTION_PRC_DT                        -- 예외처리일시(예외처리일시)      
		      , U3.USER_NM AS EXCEPT_PROCESSOR                                -- 사용자명(예외처리자)
		      , A.EXCEPTION_PRC_WHY AS EXCEPTION_PRC_WHY                      -- 예외처리사유(예외처리결과)
		      
		      , B.PERF_CHECK_ID AS PERF_CHECK_ID                              -- 성능점검ID
		      , B.DEPLOY_ID AS DEPLOY_ID                                      -- 배포ID(배포ID)
		      , B.DEPLOY_NM AS DEPLOY_NM                                      -- 배포명(배포명)
		      , TO_CHAR(B.DEPLOY_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') AS DEPLOY_REQUEST_DT                      -- 배포요청일시(배포요청일시)
		      , B.DEPLOY_EXPECTED_DAY AS DEPLOY_EXPECTED_DAY                  -- 배표예정일자(배표예정일자)   
		      , B.DEPLOY_REQUESTER AS DEPLOY_REQUESTER                        -- 사용자명(배포요청자)      
		      , CASE WHEN F.PERF_CHECK_EVALUATION_METH_CD IN ('2', '3') THEN
                          CD1.REF_VL_2
                     ELSE      
                          CD1.CD_NM 
                 END AS DEPLOY_CHECK_STATUS_CD_NM                             -- GEUM 2021-08-12 배포성능점검상태코드명(성능 점검 상태)
		      , NVL(CD3.CD_NM, '미수행') AS PERF_CHECK_RESULT_DIV_CD_NM	      -- 프로그램성능점검결과(프로그램 성능 점검 결과)
		      , C.PROGRAM_DESC AS PROGRAM_DESC 
		      -- HIDDEN
		      , A.EXCEPTION_REQUEST_ID AS EXCEPTION_REQUEST_ID                -- 예외요청ID
		      , A.EXCEPTION_REQUEST_WHY_CD AS EXCEPTION_REQUEST_WHY_CD        -- 예외요청사유코드
		      , A.EXCEPTION_PRC_STATUS_CD AS EXCEPTION_PRC_STATUS_CD          -- 예외처리상태코드
		      , A.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD              -- 예외처리방법코드
		      , A.EXCEPTER_ID AS EXCEPTER_ID                                  -- 예외처리자ID
		      , A.EXCEPTION_REQUEST_GRP_ID AS EXCEPTION_REQUEST_GRP_ID        -- 예외요청그룹ID
		      , A.PERF_CHECK_STEP_ID AS PERF_CHECK_STEP_ID                    -- 성능점검단계ID
		      , A.PROGRAM_EXECUTE_TMS AS PROGRAM_EXECUTE_TMS                  -- 성능점검수행회차
		      , A.EXCEPTION_REQUESTER_ID AS EXCEPTION_REQUESTER_ID            -- 예외요청자ID
		      , C.PROGRAM_DIV_CD AS PROGRAM_DIV_CD                            -- 프로그램구분코드       
              , CD6.CD_NM AS PROGRAM_TYPE_CD_NM                               -- 프로그램유형명
              , C.SQL_COMMAND_TYPE_CD AS SQL_COMMAND_TYPE_CD                  -- SQL명령 유형코드
              , C.DYNAMIC_SQL_YN AS DYNAMIC_SQL_YN                            -- 다이나믹SQL여부
              , TO_CHAR(C.REG_DT, 'YYYY-MM-DD HH24:MI:SS') AS REG_DT                  -- 등록일시
  	          , TO_CHAR(C.LAST_UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATE_DT  -- 변경일시
              , CD7.CD_NM AS PROGRAM_DIV_CD_NM                                -- 프로그램구분명(프로그램구분)
		  FROM  DEPLOY_PERF_CHK_EXCPT_REQUEST A
		     ,  (
		         SELECT B.*
		              , U1.USER_NM AS DEPLOY_REQUESTER 
		           FROM DEPLOY_PERF_CHK B
		              , USERS U1             
		          WHERE B.DEPLOY_REQUESTER_ID = U1.USER_ID
		         ) B  
		     ,  DEPLOY_PERF_CHK_ALL_PGM C    
		     ,  DEPLOY_PERF_CHK_RESULT E
         ,  DEPLOY_PERF_CHK_STEP_EXEC F  -- GEUM 2021-08-12
			,(SELECT DISTINCT WRKJOB_CD, WRKJOB_CD_NM, CONNECT_BY_ROOT WRKJOB_CD AS TOP_WRKJOB_CD 
		        FROM WRKJOB_CD 
		        START WITH UPPER_WRKJOB_CD IS NULL
		        CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) Z     				-- 20210827 kwj       
		     ,  CD CD1
		     ,  CD CD2
		     ,  CD CD3
		     ,  CD CD4
		     ,  CD CD5
		     ,  CD CD6
             ,  CD CD7
		     ,  USERS U2		
		     ,  USERS U3
		     
		 WHERE  A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
		   AND  A.PROGRAM_ID = C.PROGRAM_ID
		   AND  E.PERF_CHECK_ID(+) = A.PERF_CHECK_ID
		   AND  E.PERF_CHECK_STEP_ID(+) = A.PERF_CHECK_STEP_ID
		   AND  E.PROGRAM_ID(+) = A.PROGRAM_ID
		   AND  E.PROGRAM_EXECUTE_TMS(+) = A.PROGRAM_EXECUTE_TMS
       AND  F.PERF_CHECK_ID(+) = A.PERF_CHECK_ID             -- GEUM 2021-08-12
       AND  F.PERF_CHECK_STEP_ID(+) = A.PERF_CHECK_STEP_ID   -- GEUM 2021-08-12
		   AND  C.WRKJOB_CD = Z.WRKJOB_CD
		   AND  A.EXCEPTION_REQUESTER_ID = U2.USER_ID(+)
		   AND  A.EXCEPTER_ID = U3.USER_ID(+)
		   AND  B.DEPLOY_CHECK_STATUS_CD = CD1.CD(+)
		   AND  CD1.GRP_CD_ID(+) = '1056'   
		   AND  A.EXCEPTION_PRC_STATUS_CD = CD2.CD(+)
		   AND  CD2.GRP_CD_ID(+) = '1051'
		   AND  E.PERF_CHECK_RESULT_DIV_CD = CD3.CD(+)
		   AND  CD3.GRP_CD_ID(+) = '1055'
		   AND  A.EXCEPTION_REQUEST_WHY_CD = CD4.CD(+)
		   AND  CD4.GRP_CD_ID(+) = '1060'   
		   AND  A.EXCEPTION_PRC_METH_CD = CD5.CD(+)
		   AND  CD5.GRP_CD_ID(+) = '1061'
		   AND  C.PROGRAM_TYPE_CD = CD6.CD(+)
           AND  CD6.GRP_CD_ID(+) = '1005'
   		   AND  C.PROGRAM_DIV_CD = CD7.CD(+)
           AND  CD7.GRP_CD_ID(+) = '1052'  
           AND  C.PROGRAM_TYPE_CD = '1'   -- 온라인
		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
			-- 업무가 입력되면
			AND  C.WRKJOB_CD IN ( SELECT WRKJOB_CD
                                     FROM WRKJOB_CD
                                    START WITH WRKJOB_CD =  #{search_wrkjob_cd}
                                  CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD )		
		</if>
		<if test="searchKey != null and searchKey != '' and search_dbio != null and search_dbio != ''">
		   -- SQL식별자(DBIO)가 입력되면
		   AND  UPPER(C.DBIO) LIKE '%'||UPPER(#{search_dbio})||'%'
		</if>
		<if test="searchKey != null and searchKey != '' and search_program_nm != null and search_program_nm != ''">
		   -- 프로그램명, 거래명이 입력되면
		   AND  UPPER(C.PROGRAM_NM) LIKE '%'||UPPER(#{search_program_nm})||'%'
		</if>
		<if test="searchKey != null and searchKey != '' and search_program_desc != null and search_program_desc != ''">
          -- 프로그램설명이 입력되면
          AND  UPPER(C.PROGRAM_DESC) LIKE '%'||UPPER(#{search_program_desc})||'%'
		</if>

		<if test="search_from_exception_reqeust_dt != null and search_from_exception_reqeust_dt != '' and search_to_exception_reqeust_dt != null and search_to_exception_reqeust_dt != ''">
		   -- 예외요청일자가 입력되면
		   AND  A.EXCEPTION_REQUEST_DT BETWEEN TO_DATE(#{search_from_exception_reqeust_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{search_to_exception_reqeust_dt}|| ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
		</if>

<!-- 	<if test="search_from_deploy_request_dt != null and search_from_deploy_request_dt != '' and search_to_deploy_request_dt != null and search_to_deploy_request_dt != ''"> -->
<!-- 	   배포요청일자가 입력되면 -->
<!-- 	   AND  B.DEPLOY_REQUEST_DT(+) BETWEEN TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{search_to_deploy_request_dt}|| ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS') -->
<!-- 	</if> -->
		
		<if test="search_exception_prc_status_cd != null and search_exception_prc_status_cd != ''">
         -- 예외처리상태가 입력되면
         AND  A.EXCEPTION_PRC_STATUS_CD = #{search_exception_prc_status_cd}
		</if>
		<if test="search_perf_check_step_id != null and search_perf_check_step_id != ''">
         -- 최종점검단계가 입력되면 
         AND  A.PERF_CHECK_STEP_ID = #{search_perf_check_step_id}
		</if>
		<if test="search_deploy_id != null and search_deploy_id != ''">
         -- 배포ID가 입력되면
         AND  UPPER(B.DEPLOY_ID) LIKE '%'||UPPER(#{search_deploy_id})||'%'
		</if>
		<if test="search_deploy_requester != null and search_deploy_requester != ''">
         -- 배포요청자가 입력되면 
         AND B.DEPLOY_REQUESTER LIKE '%'|| #{search_deploy_requester} || '%'   
		</if>
		
		ORDER BY A.EXCEPTION_REQUEST_DT DESC
	</sql>
	
	<select id="getProPerfExcReqState" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getProPerfExcReqState */
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM, AA.*
		    FROM (
				<include refid="ProPerfExcReqStateList"/>
		    ) AA
		    WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
		) AA
		WHERE AA.RNUM > ${pagePerCount} * (${currentPage} - 1)
	</select>

	<select id="getProPerfExcReqStateByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getProPerfExcReqStateByExcelDown */
				<include refid="ProPerfExcReqStateList"/>
	</select>
	
	<select id="getPerfCheckResultStateTableList" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.PerfCheckResultStateTableList */
				SELECT  A.DBIO,
		        A.PERF_CHECK_INDC_NM AS PERF_CHECK_INDC_NM                    -- 성능점검지표명(점검 지표)
		      , CD2.CD_NM            AS PERF_CHECK_METH_CD_NM                 -- 성능점검방법명(점검 방법)  
		      , A.PASS_MAX_VALUE AS PASS_MAX_VALUE                            -- 기준지표 적합최대값(적합)
		      , CASE WHEN MOD( A.PASS_MAX_VALUE, 1) = 0 THEN
		                  TO_CHAR(A.PASS_MAX_VALUE) || ' 초과'
		             WHEN TRIM(A.PASS_MAX_VALUE) IS NOT NULL THEN 
		                  TO_CHAR(A.PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999') || ' 초과'
		        END AS NOT_PASS_PASS                                          -- 기준지표 부적합(부적합)
		      , CD3.CD_NM  AS YN_DECIDE_DIV_CD_NM                             -- 기준지표 여부값판정구분(여부값판정구분)
		      , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN
		                  '자동통과'
		             WHEN A.PERF_CHECK_INDC_ID IS NULL THEN 
		                  'N'
		             ELSE 'Y'
		        END AS EXCEPT_REG_YN                                          -- 예외등록여부(예외등록여부)
		      , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN NULL
		             ELSE A.PASS_MAX_VALUE 
		        END AS EXCPT_PASS_MAX_VALUE                                   -- 예외적용지표 적합최대값(적합)
		      , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN NULL
		             WHEN MOD( B.PASS_MAX_VALUE, 1) = 0 THEN
		                  TO_CHAR(B.PASS_MAX_VALUE) || ' 초과'
		             WHEN TRIM(B.PASS_MAX_VALUE) IS NOT NULL THEN 
		                  TO_CHAR(B.PASS_MAX_VALUE, 'FM999999999999999999999999999990.999999999999999999999999999999') || ' 초과'
		        END AS EXCPT_NOT_PASS_PASS                                    -- 예외적용지표 부적합(부적합)      
		      , CASE WHEN A.PERF_CHECK_AUTO_PASS_YN = 'Y' THEN NULL
		             ELSE CD4.CD_NM 
		        END AS EXCPT_YN_DECIDE_DIV_CD                                 -- 예외적용지표 여부값판정구분(여부값판정구분)      
		  FROM 
		      (
		       SELECT   C.PROGRAM_ID AS PROGRAM_ID
		              , A.PERF_CHECK_INDC_ID
		              , A.PERF_CHECK_INDC_NM 
		              , A.PERF_CHECK_METH_CD              
		              , B.WRKJOB_CD
		              , B.PERF_CHECK_PROGRAM_DIV_CD
		              , B.PASS_MAX_VALUE
		              , B.YN_DECIDE_DIV_CD
		              , C.DBIO
		              , C.PERF_CHECK_AUTO_PASS_YN 
		          FROM  DEPLOY_PERF_CHK_INDC A
		             ,  WJ_PERF_CHK_INDC B
		             ,  DEPLOY_PERF_CHK_ALL_PGM C
		         WHERE  A.INDC_USE_YN = 'Y'
		           AND  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		           AND  B.INDC_APPLY_YN = 'Y'    
		           AND  B.WRKJOB_CD = C.WRKJOB_CD
		           AND  C.WRKJOB_CD = #{wrkjob_cd}           
		           AND  C.PROGRAM_ID = #{program_id}
		       ) A     
		      , DEPLOY_PERF_CHK_INDC_EXCPT B
		      , CD CD2
		      , CD CD3
		      , CD CD4
		 WHERE  A.PROGRAM_ID = B.PROGRAM_ID(+)
		   AND  A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID(+)
		   AND  A.PERF_CHECK_METH_CD = CD2.CD(+)
		   AND  CD2.GRP_CD_ID(+) = '1059'
		   AND  A.YN_DECIDE_DIV_CD = CD3.CD(+)
		   AND  CD3.GRP_CD_ID(+) = '1050'   
		   AND  B.YN_DECIDE_DIV_CD = CD4.CD(+)
		   AND  CD4.GRP_CD_ID(+) = '1050'      
		ORDER BY A.PERF_CHECK_INDC_ID, A.PERF_CHECK_PROGRAM_DIV_CD
	</select>
	
	<sql id="perfCheckStateList0">
		/* PerformanceCheckIndexDao.perfCheckStateList0 */
		/* CM 단위 점검 현황 */
		SELECT /* DISPLAY */
		       WRKJOB_CD_NM -- 업무
		     , REQUEST_CM_CNT -- 요청
		     , COMPLETE_CM_CNT -- 완료
		     , PASS_CM_CNT -- 적합
		     , FAIL_CM_CNT -- 부적합
		     , NONE_COMPLETE_CM_CNT -- 미완료
		     , DEV_CONFIRM_CM_CNT -- 개발확정
		     , CHECKING_CM_CNT -- 점검중
		     , DEV_CONFIRM_CANCEL_CM_CNT -- 개발확정취소
		     , DELETE_CM_CNT -- 배포삭제
		  FROM 
		  (
		        SELECT
		               WC1.WRKJOB_CD_NM -- 업무
		             , COUNT(DISTINCT A.PERF_CHECK_ID) REQUEST_CM_CNT -- 요청 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03') THEN A.PERF_CHECK_ID ELSE NULL END)) COMPLETE_CM_CNT -- 완료 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03') AND A.PERF_CHECK_RESULT_DIV_CD = 'A' THEN A.PERF_CHECK_ID ELSE NULL END)) PASS_CM_CNT -- 적합 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03') AND A.PERF_CHECK_RESULT_DIV_CD != 'A' THEN A.PERF_CHECK_ID ELSE NULL END)) FAIL_CM_CNT -- 부적합 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD NOT IN ('02', '03') THEN A.PERF_CHECK_ID ELSE NULL END)) NONE_COMPLETE_CM_CNT -- 미완료 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD = '00' THEN A.PERF_CHECK_ID ELSE NULL END)) DEV_CONFIRM_CM_CNT -- 개발확정 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD = '01' THEN A.PERF_CHECK_ID ELSE NULL END)) CHECKING_CM_CNT -- 점검중 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD = '04' THEN A.PERF_CHECK_ID ELSE NULL END)) DEV_CONFIRM_CANCEL_CM_CNT -- 개발확정취소 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD = '05' THEN A.PERF_CHECK_ID ELSE NULL END)) DELETE_CM_CNT -- 배포삭제 패키지
		          FROM DEPLOY_PERF_CHK A            -- 배포성능점검기본
		             , DEPLOY_PERF_CHK_STEP_EXEC B  -- 배포성능점검단계별수행내역
		             , WRKJOB_CD WC1
		         WHERE 1=1
		           AND A.PERF_CHECK_ID = B.PERF_CHECK_ID
		           AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID
		           AND A.WRKJOB_CD = WC1.WRKJOB_CD
<!-- 		           AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03','04','05') -->
                  		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		                   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                          FROM WRKJOB_CD
		                                         START WITH WRKJOB_CD = #{search_wrkjob_cd}
		                                       CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
                        </if>  
                   		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       					-- 배포요청일시 선택
        				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       				    -- 점검완료일시 선택
        				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
     					-- 배포예정일시 선택
		                	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
		                		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
		                		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
                   		</if>		                               
		        GROUP BY A.WRKJOB_CD, WC1.WRKJOB_CD_NM
		        ORDER BY A.WRKJOB_CD
		  )		
	</sql>
	
	<sql id="perfCheckStateList00">
		/* PerformanceCheckIndexDao.perfCheckStateList00 */
		SELECT /* DISPLAY */
		       WRKJOB_CD_NM -- 업무
		     , REQUEST_CM_CNT -- 요청 
		     , COMPLETE_CM_CNT -- 완료 
		     , NONE_COMPLETE_CM_CNT -- 미완료 
		     , PASS_CM_CNT -- 적합 
		     , FAIL_CM_CNT -- 부적합 
		     , ALL_PGM_CNT -- 전체 프로그램
		     , PASS_PGM_CNT -- 적합 프로그램
		     , FAIL_PGM_CNT -- 부적합 프로그램
		     , ERROR_PGM_CNT -- 오류 프로그램
		     , NONE_EXEC_PGM_CNT -- 미수행 프로그램
		     , AUTO_PASS_CNT -- 자동통과 프로그램
		  FROM (
		        SELECT 
		               A.WRKJOB_CD_NM -- 업무
		             , COUNT(DISTINCT A.PERF_CHECK_ID) REQUEST_CM_CNT -- 요청 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') THEN A.PERF_CHECK_ID ELSE NULL END)) COMPLETE_CM_CNT -- 완료 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD NOT IN ('02', '03','09') THEN A.PERF_CHECK_ID ELSE NULL END)) NONE_COMPLETE_CM_CNT -- 미완료 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') AND A.PERF_CHECK_RESULT_DIV_CD = 'A' THEN A.PERF_CHECK_ID ELSE NULL END)) PASS_CM_CNT -- 적합 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') AND A.PERF_CHECK_RESULT_DIV_CD != 'A' THEN A.PERF_CHECK_ID ELSE NULL END)) FAIL_CM_CNT -- 부적합 패키지
		             , COUNT(A.PROGRAM_ID) ALL_PGM_CNT -- 전체 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'A' THEN 1 ELSE 0 END) PASS_PGM_CNT -- 적합 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'B' THEN 1 ELSE 0 END) FAIL_PGM_CNT -- 부적합 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'C' THEN 1 ELSE 0 END) ERROR_PGM_CNT -- 오류 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD IS NULL THEN 1 ELSE 0 END) NONE_EXEC_PGM_CNT -- 미수행 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 1 ELSE 0 END) AUTO_PASS_CNT -- 자동통과 프로그램
		          FROM (SELECT A.PERF_CHECK_ID
		                     , A.DEPLOY_CHECK_STATUS_CD 
		                     , A.PERF_CHECK_RESULT_DIV_CD PERF_CHECK_RESULT_DIV_CD
		                     , B.PERF_CHECK_STEP_ID
		                     , B.PERF_CHECK_RESULT_DIV_CD STEP_PERF_CHECK_RESULT_DIV_CD
		                     , C.PROGRAM_ID
		                     , C.EXCEPTION_PRC_METH_CD
		                     , A.WRKJOB_CD
		                     , WC1.WRKJOB_CD_NM
		                  FROM DEPLOY_PERF_CHK A            -- 배포성능점검기본
		                     , DEPLOY_PERF_CHK_STEP_EXEC B  -- 배포성능점검단계별수행내역
		                     , DEPLOY_PERF_CHK_TARGET_PGM C -- 배포성능점검대상프로그램내역
		                     , WRKJOB_CD WC1
		                 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		                   AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID 
		                   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
		                   AND A.WRKJOB_CD = WC1.WRKJOB_CD
		                   AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03','09')
                  		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		                   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                          FROM WRKJOB_CD
		                                         START WITH WRKJOB_CD = #{search_wrkjob_cd}
		                                       CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
                        </if>  
                   		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       					-- 배포요청일시 선택
        				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       				    -- 점검완료일시 선택
        				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
     					-- 배포예정일시 선택
		                	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
		                		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
		                		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
                   		</if>
		                ) A
		             , (SELECT *
		                  FROM (SELECT C.PERF_CHECK_ID  
		                             , C.PERF_CHECK_STEP_ID
		                             , C.PROGRAM_ID
		                             , C.PROGRAM_EXECUTE_TMS 
		                             , C.PERF_CHECK_RESULT_DIV_CD 
		                             , MAX(C.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY C.PERF_CHECK_ID, C.PERF_CHECK_STEP_ID, C.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
		                          FROM DEPLOY_PERF_CHK A            -- 배포성능점검기본
		                             , DEPLOY_PERF_CHK_STEP_EXEC B  -- 배포성능점검단계별수행내역
		                             , DEPLOY_PERF_CHK_RESULT C     -- 배포성능점검결과내역
		                         WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		                           AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID 
		                           AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
		                           AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03','09')
		                           
                  		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		                   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                          FROM WRKJOB_CD
		                                         START WITH WRKJOB_CD = #{search_wrkjob_cd}
		                                       CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
                        </if>  
                   		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       					-- 배포요청일시 선택
        				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       				    -- 점검완료일시 선택
        				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
     					-- 배포예정일시 선택
		                	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
		                		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
		                		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
                   		</if>                 
		                        )
		                  WHERE MAX_PROGRAM_EXECUTE_TMS = PROGRAM_EXECUTE_TMS
		               ) B
		         WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
		           AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID(+)
		           AND A.PROGRAM_ID = B.PROGRAM_ID(+)
		        GROUP BY A.WRKJOB_CD, A.WRKJOB_CD_NM
		        ORDER BY A.WRKJOB_CD
		       )
	</sql>
	
	<select id="getPerfCheckState0" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getPerfCheckState0 */
		<include refid="perfCheckStateList0"/>
	</select>
	
	<select id="getPerfCheckState0ByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getPerfCheckState0ByExcelDown */
		<include refid="perfCheckStateList0"/>
	</select>	
	
	<sql id="perfCheckStateList1">
		/* PerformanceCheckIndexDao.perfCheckStateList1 */
		SELECT /* DISPLAY */
		       WRKJOB_CD_NM -- 업무
		     , ALL_PGM_CNT -- 전체 프로그램
		     , PASS_PGM_CNT -- 적합 프로그램
		     , FAIL_PGM_CNT -- 부적합 프로그램
		     , ERROR_PGM_CNT -- 오류 프로그램
		     , NONE_EXEC_PGM_CNT -- 미수행 프로그램
		     , AUTO_PASS_CNT -- 점검제외 프로그램
		     , NEW_PGM_CNT -- 신규 프로그램
		     , CHANGE_PGM_CNT -- 변경 프로그램
		     , SAME_PGM_CNT -- 동일 프로그램
		  FROM (
		        SELECT
		               A.WRKJOB_CD_NM -- 업무
		             , COUNT(A.PROGRAM_ID) ALL_PGM_CNT -- 전체 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'A' THEN 1 ELSE 0 END) PASS_PGM_CNT -- 적합 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'B' THEN 1 ELSE 0 END) FAIL_PGM_CNT -- 부적합 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'C' THEN 1 ELSE 0 END) ERROR_PGM_CNT -- 오류 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD IS NULL THEN 1 ELSE 0 END) NONE_EXEC_PGM_CNT -- 미수행 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 1 ELSE 0 END) AUTO_PASS_CNT -- 자동통과 프로그램
		             , SUM(CASE WHEN A.PROGRAM_DVLP_DIV_CD = 'N' THEN 1 ELSE 0 END) NEW_PGM_CNT -- 신규 프로그램
		             , SUM(CASE WHEN A.PROGRAM_DVLP_DIV_CD = 'C' THEN 1 ELSE 0 END) CHANGE_PGM_CNT -- 변경 프로그램
		             , SUM(CASE WHEN A.PROGRAM_DVLP_DIV_CD = 'S' THEN 1 ELSE 0 END) SAME_PGM_CNT -- 동일 프로그램
		          FROM (SELECT A.PERF_CHECK_ID
		                     , A.DEPLOY_CHECK_STATUS_CD
		                     , A.PERF_CHECK_RESULT_DIV_CD PERF_CHECK_RESULT_DIV_CD
		                     , B.PERF_CHECK_STEP_ID
		                     , B.PERF_CHECK_RESULT_DIV_CD STEP_PERF_CHECK_RESULT_DIV_CD
		                     , C.PROGRAM_ID
		                     , C.PROGRAM_DVLP_DIV_CD
		                     , C.EXCEPTION_PRC_METH_CD
		                     , A.WRKJOB_CD
		                     , WC1.WRKJOB_CD_NM
		                  FROM DEPLOY_PERF_CHK A            -- 배포성능점검기본
		                     , DEPLOY_PERF_CHK_STEP_EXEC B  -- 배포성능점검단계별수행내역
		                     , DEPLOY_PERF_CHK_TARGET_PGM C -- 배포성능점검대상프로그램내역
		                     , WRKJOB_CD WC1
		                 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		                   AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID
		                   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
		                   AND A.WRKJOB_CD = WC1.WRKJOB_CD
		                   AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03')
                  		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		                   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                          FROM WRKJOB_CD
		                                         START WITH WRKJOB_CD = #{search_wrkjob_cd}
		                                       CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
                        </if>  
                   		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       					-- 배포요청일시 선택
        				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       				    -- 점검완료일시 선택
        				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
     					-- 배포예정일시 선택
		                	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
		                		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
		                		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
                   		</if>

		                ) A
		             , (SELECT *
		                  FROM (SELECT C.PERF_CHECK_ID
		                             , C.PERF_CHECK_STEP_ID
		                             , C.PROGRAM_ID
		                             , C.PROGRAM_EXECUTE_TMS
		                             , C.PERF_CHECK_RESULT_DIV_CD
		                             , MAX(C.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY C.PERF_CHECK_ID, C.PERF_CHECK_STEP_ID, C.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
		                          FROM DEPLOY_PERF_CHK A            -- 배포성능점검기본
		                             , DEPLOY_PERF_CHK_STEP_EXEC B  -- 배포성능점검단계별수행내역
		                             , DEPLOY_PERF_CHK_RESULT C     -- 배포성능점검결과내역
		                         WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		                           AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID
		                           AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
		                           AND A.LAST_PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
		                           AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03')
                  		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		                   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                          FROM WRKJOB_CD
		                                         START WITH WRKJOB_CD = #{search_wrkjob_cd}
		                                       CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
                        </if>  
                   		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       					-- 배포요청일시 선택
        				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       				    -- 점검완료일시 선택
        				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
     					-- 배포예정일시 선택
		                	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
		                		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
		                		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
                   		</if> 

		                        )
		                  WHERE MAX_PROGRAM_EXECUTE_TMS = PROGRAM_EXECUTE_TMS
		               ) B
		         WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
		           AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID(+)
		           AND A.PROGRAM_ID = B.PROGRAM_ID(+)
		        GROUP BY A.WRKJOB_CD, A.WRKJOB_CD_NM
		        ORDER BY A.WRKJOB_CD
		       )		
	</sql>
	
	<sql id="perfCheckStateList11">
		/* PerformanceCheckIndexDao.perfCheckStateList11 */
		SELECT /* DISPLAY */
		       WRKJOB_CD_NM -- 업무
		     , REQUEST_CM_CNT -- 요청 
		     , COMPLETE_CM_CNT -- 완료 
		     , NONE_COMPLETE_CM_CNT -- 미완료 
		     , PASS_CM_CNT -- 적합 
		     , FAIL_CM_CNT -- 부적합 
		     , ALL_PGM_CNT -- 전체 프로그램
		     , PASS_PGM_CNT -- 적합 프로그램
		     , FAIL_PGM_CNT -- 부적합 프로그램
		     , ERROR_PGM_CNT -- 오류 프로그램
		     , NONE_EXEC_PGM_CNT -- 미수행 프로그램
		     , AUTO_PASS_CNT -- 자동통과 프로그램
		  FROM (
		        SELECT 
		               A.WRKJOB_CD_NM -- 업무
		             , COUNT(DISTINCT A.PERF_CHECK_ID) REQUEST_CM_CNT -- 요청 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') THEN A.PERF_CHECK_ID ELSE NULL END)) COMPLETE_CM_CNT -- 완료 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD NOT IN ('02', '03','09') THEN A.PERF_CHECK_ID ELSE NULL END)) NONE_COMPLETE_CM_CNT -- 미완료 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') AND A.PERF_CHECK_RESULT_DIV_CD = 'A' THEN A.PERF_CHECK_ID ELSE NULL END)) PASS_CM_CNT -- 적합 패키지
		             , COUNT(DISTINCT (CASE WHEN A.DEPLOY_CHECK_STATUS_CD IN ('02', '03','09') AND A.PERF_CHECK_RESULT_DIV_CD != 'A' THEN A.PERF_CHECK_ID ELSE NULL END)) FAIL_CM_CNT -- 부적합 패키지
		             , COUNT(A.PROGRAM_ID) ALL_PGM_CNT -- 전체 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'A' THEN 1 ELSE 0 END) PASS_PGM_CNT -- 적합 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'B' THEN 1 ELSE 0 END) FAIL_PGM_CNT -- 부적합 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD = 'C' THEN 1 ELSE 0 END) ERROR_PGM_CNT -- 오류 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.PERF_CHECK_RESULT_DIV_CD IS NULL THEN 1 ELSE 0 END) NONE_EXEC_PGM_CNT -- 미수행 프로그램
		             , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 1 ELSE 0 END) AUTO_PASS_CNT -- 자동통과 프로그램
		          FROM (SELECT A.PERF_CHECK_ID
		                     , A.DEPLOY_CHECK_STATUS_CD 
		                     , A.PERF_CHECK_RESULT_DIV_CD PERF_CHECK_RESULT_DIV_CD
		                     , B.PERF_CHECK_STEP_ID
		                     , B.PERF_CHECK_RESULT_DIV_CD STEP_PERF_CHECK_RESULT_DIV_CD
		                     , C.PROGRAM_ID
		                     , C.EXCEPTION_PRC_METH_CD
		                     , A.WRKJOB_CD
		                     , WC1.WRKJOB_CD_NM
		                  FROM DEPLOY_PERF_CHK A            -- 배포성능점검기본
		                     , DEPLOY_PERF_CHK_STEP_EXEC B  -- 배포성능점검단계별수행내역
		                     , DEPLOY_PERF_CHK_TARGET_PGM C -- 배포성능점검대상프로그램내역
		                     , WRKJOB_CD WC1
		                 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		                   AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID 
		                   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
		                   AND A.WRKJOB_CD = WC1.WRKJOB_CD
		                   AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03','09')
                  		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		                   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                          FROM WRKJOB_CD
		                                         START WITH WRKJOB_CD = #{search_wrkjob_cd}
		                                       CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
                        </if>  
                   		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       					-- 배포요청일시 선택
        				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       				    -- 점검완료일시 선택
        				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
     					-- 배포예정일시 선택
		                	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
		                		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
		                		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
                   		</if>
		                ) A
		             , (SELECT *
		                  FROM (SELECT C.PERF_CHECK_ID  
		                             , C.PERF_CHECK_STEP_ID
		                             , C.PROGRAM_ID
		                             , C.PROGRAM_EXECUTE_TMS 
		                             , C.PERF_CHECK_RESULT_DIV_CD 
		                             , MAX(C.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY C.PERF_CHECK_ID, C.PERF_CHECK_STEP_ID, C.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
		                          FROM DEPLOY_PERF_CHK A            -- 배포성능점검기본
		                             , DEPLOY_PERF_CHK_STEP_EXEC B  -- 배포성능점검단계별수행내역
		                             , DEPLOY_PERF_CHK_RESULT C     -- 배포성능점검결과내역
		                         WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		                           AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID 
		                           AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
		                           AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03','09')
		                           
                  		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
		                   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
		                                          FROM WRKJOB_CD
		                                         START WITH WRKJOB_CD = #{search_wrkjob_cd}
		                                       CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
                        </if>  
                   		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       					-- 배포요청일시 선택
        				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
       				    -- 점검완료일시 선택
        				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
       				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
       				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                   		</if>
                   		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
     					-- 배포예정일시 선택
		                	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
		                		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
		                		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
                   		</if>                 
		                        )
		                  WHERE MAX_PROGRAM_EXECUTE_TMS = PROGRAM_EXECUTE_TMS
		               ) B
		         WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
		           AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID(+)
		           AND A.PROGRAM_ID = B.PROGRAM_ID(+)
		        GROUP BY A.WRKJOB_CD, A.WRKJOB_CD_NM
		        ORDER BY A.WRKJOB_CD
		       )
	</sql>
	
	<select id="getPerfCheckState1" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getPerfCheckState1 */
		<include refid="perfCheckStateList1"/>
	</select>

	<select id="getPerfCheckState1ByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getPerfCheckState1ByExcelDown */
		<include refid="perfCheckStateList1"/>
	</select>
	
	<sql id="perfCheckStateList2">
		/* PerformanceCheckIndexDao.perfCheckStateList2 */
			SELECT /* DISPLAY */
	      	 A.WRKJOB_CD_NM 																	-- 업무
		     , MAX(A.PROGRAM_CNT) ALL_PGM_CNT                                              -- 전체 프로그램
		     , SUM(CASE WHEN A.EXCEPTION_PRC_METH_CD IS NULL AND B.RNUM = 1 THEN B.PROGRAM_CNT ELSE 0 END) FAIL_PGM_CNT               -- 부적합 프로그램  
		     , SUM(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN 1 ELSE 0 END) ELASPSED_TIME       -- 수행시간
		     , SUM(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN 1 ELSE 0 END) BUFFER_GETS         -- 블럭수
		     , SUM(CASE WHEN PERF_CHECK_INDC_ID = 3 THEN 1 ELSE 0 END) ROW_PROCESSED       -- 처리건수
		     , SUM(CASE WHEN PERF_CHECK_INDC_ID = 4 THEN 1 ELSE 0 END) PGA                 -- 메모리사용량(MB)
		     , SUM(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN 1 ELSE 0 END) FULLSCAN            -- 대용량테이블 FULL SCAN
		     , SUM(CASE WHEN PERF_CHECK_INDC_ID = 6 THEN 1 ELSE 0 END) PARTITION_RANGE_ALL -- 전체 파티션 액세스
		  FROM (SELECT A.PERF_CHECK_ID
		             , A.DEPLOY_CHECK_STATUS_CD 
		             , A.PERF_CHECK_RESULT_DIV_CD PERF_CHECK_RESULT_DIV_CD
		             , B.PERF_CHECK_STEP_ID
		             , B.PERF_CHECK_RESULT_DIV_CD STEP_PERF_CHECK_RESULT_DIV_CD
		             , C.PROGRAM_ID
		             , C.EXCEPTION_PRC_METH_CD
		             , A.WRKJOB_CD
		             , WC1.WRKJOB_CD_NM
		             , COUNT(*) OVER(PARTITION BY A.WRKJOB_CD) PROGRAM_CNT
		          FROM DEPLOY_PERF_CHK A            -- 배포성능점검기본
		             , DEPLOY_PERF_CHK_STEP_EXEC B  -- 배포성능점검단계별수행내역
		             , DEPLOY_PERF_CHK_TARGET_PGM C -- 배포성능점검대상프로그램내역
		             , WRKJOB_CD WC1
		         WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		           AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID 
		           AND A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
		           AND A.WRKJOB_CD = WC1.WRKJOB_CD
		           AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03','09')
              		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
             		   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
                                        FROM WRKJOB_CD
                                       START WITH WRKJOB_CD = #{search_wrkjob_cd}
                                     CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
                    </if>  
               		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
   					-- 배포요청일시 선택
    				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
   				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
   				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
               		</if>
               		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
   				    -- 점검완료일시 선택
    				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
   				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
   				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
               		</if>
               		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
 					-- 배포예정일시 선택
		              	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
		              		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
		              		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
               		</if>  
		        ) A
		     , (SELECT A.PERF_CHECK_ID
		             , A.PERF_CHECK_STEP_ID
		             , A.PROGRAM_ID
		             , A.PROGRAM_EXECUTE_TMS
		             , B.PERF_CHECK_INDC_ID 
		             , B.PERF_CHECK_RESULT_DIV_CD 
                     , A.WRKJOB_CD
		             , COUNT(DISTINCT A.PROGRAM_ID) OVER(PARTITION BY A.PERF_CHECK_ID) PROGRAM_CNT
                     , ROW_NUMBER() OVER(PARTITION BY A.PERF_CHECK_ID ORDER BY A.PERF_CHECK_ID) RNUM
		          FROM (SELECT A.WRKJOB_CD
                             , C.PERF_CHECK_ID  
		                     , C.PERF_CHECK_STEP_ID
		                     , C.PROGRAM_ID
		                     , C.PROGRAM_EXECUTE_TMS 
		                     , MAX(C.PROGRAM_EXECUTE_TMS) OVER(PARTITION BY C.PERF_CHECK_ID, C.PERF_CHECK_STEP_ID, C.PROGRAM_ID) MAX_PROGRAM_EXECUTE_TMS
		                  FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
		                     , DEPLOY_PERF_CHK_STEP_EXEC B     -- 배포성능점검단계별수행내역
		                     , DEPLOY_PERF_CHK_RESULT C        -- 배포성능점검결과내역                         WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		                 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID  
		                   AND A.LAST_PERF_CHECK_STEP_ID  = B.PERF_CHECK_STEP_ID 
		                   AND B.PERF_CHECK_ID = C.PERF_CHECK_ID
                   		   AND B.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
		                   AND A.DEPLOY_CHECK_STATUS_CD IN ('00', '01', '02', '03','09')
		                   AND C.PERF_CHECK_RESULT_DIV_CD  = 'B'
		                   
	              		<if test="search_wrkjob_cd != null and search_wrkjob_cd != ''">
	             		   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
	                                        FROM WRKJOB_CD
	                                       START WITH WRKJOB_CD = #{search_wrkjob_cd}
	                                     CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
	                    </if>  
	               		<if test="searchKey != null and searchKey =='01' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
	   					-- 배포요청일시 선택
	    				   AND  A.DEPLOY_REQUEST_DT BETWEEN 
	   				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
	   				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
	               		</if>
	               		<if test="searchKey != null and searchKey =='02' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
	   				    -- 점검완료일시 선택
	    				   AND  A.PERF_CHECK_COMPLETE_DT BETWEEN 
	   				   			TO_DATE(#{search_from_deploy_request_dt}||' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND
	   				   			TO_DATE(#{search_to_deploy_request_dt}||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
	               		</if>
	               		<if test="searchKey != null and searchKey =='03' and search_from_deploy_request_dt != null and search_from_deploy_request_dt != ''">
	 					-- 배포예정일시 선택
			              	AND A.DEPLOY_EXPECTED_DAY BETWEEN 
			              		REPLACE(#{search_from_deploy_request_dt}, '-', '') AND 
			              		REPLACE(#{search_to_deploy_request_dt}, '-', '') 
	               		</if>                    
		                ) A
		              , DEPLOY_PERF_CHK_DETAIL_RESULT B -- 배포성능점검상세결과내역
		          WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		            AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
		            AND A.PROGRAM_ID = B.PROGRAM_ID
		            AND A.PROGRAM_EXECUTE_TMS = B.PROGRAM_EXECUTE_TMS
		            AND A.MAX_PROGRAM_EXECUTE_TMS = A.PROGRAM_EXECUTE_TMS
		            AND B.PERF_CHECK_RESULT_DIV_CD  = 'B'
		       ) B
		 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID(+)
		   AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID(+)
		   AND A.PROGRAM_ID = B.PROGRAM_ID(+)
           AND A.WRKJOB_CD = B.WRKJOB_CD(+)
		GROUP BY A.WRKJOB_CD, A.WRKJOB_CD_NM
		ORDER BY A.WRKJOB_CD
	</sql>
	
	<select id="getPerfCheckState2" parameterType="deployPerfChkIndc" resultType="deployPerfChkIndc">
		/* PerformanceCheckIndexDao.getPerfCheckState2 */
		<include refid="perfCheckStateList2"/>
	</select>

	<select id="getPerfCheckState2ByExcelDown" parameterType="deployPerfChkIndc"	resultType="java.util.LinkedHashMap">
		/* PerformanceCheckIndexDao.getPerfCheckState2ByExcelDown */
		<include refid="perfCheckStateList2"/>
	</select>
</mapper> 