<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  
	2020.05.12	명성태	최초작성
-->
<mapper namespace="omc.spop.dao.PerformanceCheckSqlDao">
	<select id="getInitialFinalDistributionDate" parameterType="performanceCheckSql" resultType="performanceCheckSql">
		/* PerformanceCheckSqlDao.getInitialFinalDistributionDate */
		/* 
		   최초 최종 배포일 조회
		  - 전체 업무에서 최종 배포일
		*/
		SELECT TO_CHAR(MAX(DEPLOY_COMPLETE_DT), 'YYYY-MM-DD') AS DEPLOY_COMPLETE_DT
		FROM DEPLOY_PERF_CHK
		WHERE DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
	</select>
	
	<select id="getConditionFinalDistributionDate" parameterType="performanceCheckSql" resultType="performanceCheckSql">
		/* PerformanceCheckSqlDao.getConditionFinalDistributionDate */
		/* 
		  최종 배포일 
		  - 조회조건 범위내에서 가장 최근에 배포한 일자
		*/
		SELECT TO_CHAR(MAX(DEPLOY_COMPLETE_DT), 'YYYY-MM-DD') AS DEPLOY_COMPLETE_DT
		FROM DEPLOY_PERF_CHK
		WHERE DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
		AND DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
		AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
		
		<if test="wrkjob_cd != null and wrkjob_cd != ''">
			/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
			AND WRKJOB_CD IN ( SELECT WRKJOB_CD
								FROM WRKJOB_CD
								START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
								CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
		</if>
	</select>
	
	<sql id="loadPerformanceCheckSqlRefId">
		/* PerformanceCheckSqlDao.loadPerformanceCheckSqlRefId */
		/* 그리드 */
		WITH 
		-- 대용량 기준건수 
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
						, DATABASE DB
					WHERE PREF_ID IN (12004)) A
				, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
							WHERE PREF_ID IN (12004)
						)
					WHERE PREF_SEQ = MAX_PREF_SEQ
					) B
			WHERE A.DBID = B.DBID(+)
			AND A.PREF_ID = B.PREF_ID(+)
		)
		, TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD -- JMG : 20210129
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				, A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
				, A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
				, A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
				, A.FULL_SCAN_APPLY_YN       -- JMG : 20210129
				, A.PARTITION_APPLY_YN       -- JMG : 20210129  
				, A.ELAPSED_TIME_USE_YN    -- JMG : 20210129
				, A.BUFFER_GETS_USE_YN     -- JMG : 20210129
				, A.ROWS_PROCESSED_USE_YN  -- JMG : 20210129
				, A.FULL_SCAN_USE_YN        -- JMG : 20210129
				, A.PARTITION_USE_YN       -- JMG : 20210129  
				, A.TEST_ELAPSED_TIME
				, A.TEST_BUFFER_GETS
				, A.TEST_FULL_SCAN_YN
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')) PRD_BIG_TABLE_FULLSCAN_YN  -- JMG : 20210129
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')) PRD_PART_ACCESS_ALL_YN        -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')) PRD_ELAPSED_TIME                  -- JMG : 20210129
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')), 0, 1,                      
						FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'))) PRD_BUFFER_GETS             -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')) PRD_ROWS_PROCESSED           -- JMG : 20210129
				, PERF_CHECK_ID
				, DBID -- JMG : 20210129  	
			FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
						A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, EXCEPTION_PRC_METH_CD
						, DEPLOY_COMPLETE_DT
						, ELAPSED_TIME_THRESHOLD
						, BUFFER_GETS_THRESHOLD
						, ROWS_PROCESSED_THRESHOLD -- JMG : 20210129
						, FULL_SCAN_DECIDE_DIV_CD
						, PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						, TEST_ELAPSED_TIME
						, DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) TEST_BUFFER_GETS
						, TEST_FULL_SCAN_YN
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
						, A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
						, A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
						, A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
						, A.FULL_SCAN_APPLY_YN        -- JMG : 20210129
						, A.PARTITION_APPLY_YN       -- JMG : 20210129  
						, A.ELAPSED_TIME_USE_YN    -- JMG : 20210129
						, A.BUFFER_GETS_USE_YN     -- JMG : 20210129
						, A.ROWS_PROCESSED_USE_YN  -- JMG : 20210129
						, A.FULL_SCAN_USE_YN        -- JMG : 20210129
						, A.PARTITION_USE_YN       -- JMG : 20210129	
					FROM (SELECT A.PERF_CHECK_ID
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, C.EXCEPTION_PRC_METH_CD
								, A.DEPLOY_COMPLETE_DT
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN INDC_PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD    -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN INDC_YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								, COUNT(*) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN J.INDC_APPLY_YN  END) AS ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN J.INDC_APPLY_YN END) AS BUFFER_GETS_APPLY_YN     -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN J.INDC_APPLY_YN END) AS ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN J.INDC_APPLY_YN END) AS FULL_SCAN_APPLY_YN        -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN J.INDC_APPLY_YN END) AS PARTITION_APPLY_YN       -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN K.INDC_USE_YN   END) AS ELAPSED_TIME_USE_YN    -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN K.INDC_USE_YN   END) AS BUFFER_GETS_USE_YN     -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN K.INDC_USE_YN   END) AS ROWS_PROCESSED_USE_YN  -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN K.INDC_USE_YN   END) AS FULL_SCAN_USE_YN        -- JMG : 20210129
								, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN K.INDC_USE_YN   END) AS PARTITION_USE_YN       -- JMG : 20210129
							FROM DEPLOY_PERF_CHK A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
									, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
										FROM WRKJOB_CD
										WHERE USE_YN = 'Y'
										START WITH UPPER_WRKJOB_CD IS NULL
										CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_TARGET_PGM C
								, DEPLOY_PERF_CHK_ALL_PGM D
								, DEPLOY_PERF_CHK_DETAIL_RESULT E
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
								, WJ_PERF_CHK_INDC J  -- 업무별성능점검지표내역 -- JMG : 20210129
								, DEPLOY_PERF_CHK_INDC K  -- 배포성능점검지표기본 -- JMG : 20210129
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
							AND C.PROGRAM_ID = D.PROGRAM_ID
							AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							AND C.PROGRAM_ID = E.PROGRAM_ID
							AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND A.WRKJOB_CD = J.WRKJOB_CD                    -- JMG : 20210129
							AND E.PERF_CHECK_INDC_ID = J.PERF_CHECK_INDC_ID  -- JMG : 20210129
							AND J.PERF_CHECK_PROGRAM_DIV_CD = 'S'            -- JMG : 20210129
							AND J.PERF_CHECK_INDC_ID = K.PERF_CHECK_INDC_ID  -- JMG : 20210129
									
							-- 1:SQL수행시간(초), 2:블럭수, 3: 처리건수, 5:대용량 테이블 Full Scan 여부, 6: 대용량 테이블 Full Scan 여부
							AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
							AND E.PERF_CHECK_RESULT_DIV_CD <![CDATA[<]]>> 'C'  --> 오류건 제외
							/* 날짜 검색 */
							AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
													FROM WRKJOB_CD
													START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
													CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							
							GROUP BY A.PERF_CHECK_ID
								, I.DBID --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, D.DBIO
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, C.EXCEPTION_PRC_METH_CD
								, A.DEPLOY_COMPLETE_DT
						) A
						WHERE 1 = 1
						-- 최종회차
						AND A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS) 
													FROM DEPLOY_PERF_CHK_DETAIL_RESULT S
													WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
													AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
													AND S.PROGRAM_ID = A.PROGRAM_ID)
						-- 성능지표가 정상적으로 저장된 경우만 체크
						-- AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4 --> 20200608 AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 3  -- JMG : 20210129
			) A
			
			WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL 제외 시킴
		)
		, TMP_WRKJOB AS
		(
			SELECT WRKJOB_CD
				, UPPER_WRKJOB_CD
				, CONNECT_BY_ROOT WRKJOB_CD AS TOP_WRKJOB_CD
				, (CASE WHEN LEVEL = 1 THEN '-1' ELSE CONNECT_BY_ROOT WRKJOB_CD END) AS PARENT_ID
				, (CASE WHEN LEVEL = 1 THEN '-1' ELSE CONNECT_BY_ROOT WRKJOB_CD END) AS "_parentId"
				, (CASE 
						WHEN LEVEL = 1 THEN WRKJOB_CD_NM 
						ELSE SUBSTR(SYS_CONNECT_BY_PATH(WRKJOB_CD_NM, '/'), LENGTH('/'||CONNECT_BY_ROOT WRKJOB_CD_NM||'/')+1)
					END) AS WRKJOB_CD_NM
				, LEVEL LVL
			FROM (SELECT WRKJOB_CD
					   , UPPER_WRKJOB_CD
					   , REPLACE(WRKJOB_CD_NM, '/', ',') WRKJOB_CD_NM
					   , USE_YN
					   , DEPLOY_CHECK_TARGET_YN
					FROM WRKJOB_CD)
			WHERE USE_YN = 'Y'
			AND DEPLOY_CHECK_TARGET_YN = 'Y'
			START WITH UPPER_WRKJOB_CD IS NULL
			CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
		)
		SELECT WRKJOB_CD_NM, WRKJOB_CD_NM_EXCEL, WRKJOB_CD
			, (CASE WHEN TOP_WRKJOB_CD IS NULL THEN '-1' ELSE TOP_WRKJOB_CD END) PARENT_ID
			, (CASE WHEN TOP_WRKJOB_CD IS NULL THEN '-1' ELSE TOP_WRKJOB_CD END) "_parentId"
			, SQL_CNT
			, NVL(IMPROVE, 0) IMPROVE
			, NVL(REGRESS, 0) REGRESS
			, NVL(FAIL, 0) FAIL
			, NVL("2LESS_THAN", 0) "LESS_THAN_2"
			, NVL("5LESS_THAN", 0) "LESS_THAN_5"
			, NVL("10LESS_THAN", 0) "LESS_THAN_10"
			, NVL("30LESS_THAN", 0) "LESS_THAN_30"
			, NVL("50LESS_THAN", 0) "LESS_THAN_50"
			, NVL("100LESS_THAN", 0) "LESS_THAN_100"
			, NVL("100MORE_THAN", 0) "MORE_THAN_100"
		FROM (
				-- 최상위 업무 SUM
				SELECT WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM AS WRKJOB_CD_NM_EXCEL
					, B.TOP_WRKJOB_CD AS WRKJOB_CD
					, NULL AS TOP_WRKJOB_CD
					, COUNT(*) SQL_CNT
					, SUM(CASE WHEN TEST_BUFFER_GETS >= PRD_BUFFER_GETS THEN 1 END) AS IMPROVE     -- 성능향상
					, SUM(CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) AS REGRESS      -- 성능저하
					, SUM(CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD   <![CDATA[<]]>   PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 1 END) FAIL    -- 부적합 여부,  JMG : 20210129
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >  1   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 2   THEN 1 END) "2LESS_THAN"    --  2X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 2   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 5   THEN 1 END) "5LESS_THAN"    --  5X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 5   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"   --  10X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 10  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 30  THEN 1 END) "30LESS_THAN"   --  30X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 30  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 50  THEN 1 END) "50LESS_THAN"   --  50X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 50  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 100 THEN 1 END) "100LESS_THAN"  --  100X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 100                                              THEN 1 END) "100MORE_THAN"  -->= 100
				FROM TMP_WRKJOB A
					, TMP_DEPLOY_PERF_SQL B
					, TMP_BIG_TABLE_BASE C  -- JMG : 20210129
				WHERE A.WRKJOB_CD = B.TOP_WRKJOB_CD
				AND B.DBID = C.DBID  -- JMG : 20210129
				GROUP BY WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM
					, B.TOP_WRKJOB_CD
				UNION ALL
				-- 하위 업무 조회
				SELECT WRKJOB_CD_NM 
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM AS WRKJOB_CD_NM_EXCEL
					, B.WRKJOB_CD
					, B.TOP_WRKJOB_CD
					, COUNT(*) SQL_CNT
					, SUM(CASE WHEN TEST_BUFFER_GETS >= PRD_BUFFER_GETS THEN 1 END) AS IMPROVE     -- 성능향상
					, SUM(CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) AS REGRESS      -- 성능저하
					, SUM(CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD   <![CDATA[<]]>   PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 1 END) FAIL    -- 부적합 여부,  JMG : 20210129
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >  1   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 2   THEN 1 END) "2LESS_THAN"    --  2X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 2   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 5   THEN 1 END) "5LESS_THAN"    --  5X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 5   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"   --  10X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 10  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 30  THEN 1 END) "30LESS_THAN"   --  30X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 30  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 50  THEN 1 END) "50LESS_THAN"   --  50X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 50  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 100 THEN 1 END) "100LESS_THAN"  --  100X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 100                                              THEN 1 END) "100MORE_THAN"  -->= 100
				FROM TMP_WRKJOB A
					, TMP_DEPLOY_PERF_SQL B
					, TMP_BIG_TABLE_BASE C  -- JMG : 20210129
				WHERE A.WRKJOB_CD = B.WRKJOB_CD
				AND B.DBID = C.DBID  -- JMG : 20210129
				GROUP BY WRKJOB_CD_NM 
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM
					, B.TOP_WRKJOB_CD
					, B.WRKJOB_CD
			)
		START WITH TOP_WRKJOB_CD IS NULL
		CONNECT BY NOCYCLE PRIOR WRKJOB_CD = TOP_WRKJOB_CD --> 20200609 CONNECT BY PRIOR WRKJOB_CD = TOP_WRKJOB_CD
		ORDER SIBLINGS BY WRKJOB_CD
	</sql>
	
	<select id="loadPerformanceCheckSql" parameterType="performanceCheckSql" resultType="performanceCheckSql">
		/* PerformanceCheckSqlDao.loadPerformanceCheckSql */
		<include refid="loadPerformanceCheckSqlRefId"/>
	</select>
	
	<select id="loadPerformanceCheckSqlExcelDown" parameterType="performanceCheckSql" resultType="java.util.LinkedHashMap">
		/* PerformanceCheckSqlDao.loadPerformanceCheckSqlExcelDown */
		<include refid="loadPerformanceCheckSqlRefId"/>
	</select>
</mapper>