<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
	2020.05.25	명성태	OPENPOP V2 최초작업
	2021.08.31	이재우	autoSQLs 추가
-->
<mapper namespace="omc.spop.dao.SqlsDao">
	<sql id="laodSqlsRefId">
		/* SqlsDao.laodSqlsRefId */
		WITH 
		-- 대용량 기준건수 
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
						, DATABASE DB
					WHERE PREF_ID IN (12004)) A
				, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
							WHERE PREF_ID IN (12004)
						)
					WHERE PREF_SEQ = MAX_PREF_SEQ
					) B
			WHERE A.DBID = B.DBID(+)
			AND A.PREF_ID = B.PREF_ID(+)
		)		
		,-- 성능점검 SQL ALL : 검색기간내에 배포된 최종 프로그램 목록(정상, 예외포함)  : 20210311
        TMP_DEPLOY_PERF_SQL_ALL AS
        (
            SELECT PERF_CHECK_ID
                 , WRKJOB_CD
                 , PROGRAM_ID
                 , PROGRAM_NM
                 , DBIO
                 , DEPLOY_COMPLETE_DT
                 , EXCEPTION_PRC_METH_CD    /* 2:영구, 3:한시 */
              FROM (
                    SELECT /*+ LEADING(A C D) USE_NL(C D) */       
                            A.PERF_CHECK_ID
                            , A.WRKJOB_CD 
                            , C.PROGRAM_ID
                            , D.PROGRAM_NM
                            , C.EXCEPTION_PRC_METH_CD
                            , D.DBIO
                            , A.DEPLOY_COMPLETE_DT 
                            , ROW_NUMBER() OVER(PARTITION BY C.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
                        FROM DEPLOY_PERF_CHK A
                            , DEPLOY_PERF_CHK_TARGET_PGM C
                            , DEPLOY_PERF_CHK_ALL_PGM D
                        WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID
                        AND C.PROGRAM_ID = D.PROGRAM_ID
                        AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  --> 20200902
                        
						/* 날짜 검색 */
						AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
						AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                     )
             WHERE LAST_PROGRAM_NUM = 1
        )
        ,-- 지표예외 전체 : 20210311
        TMP_DEPLOY_PERF_EXPT_INDC_ALL AS
        (
            SELECT B.PROGRAM_ID
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD    -- JMG : 20210129
              FROM (
                    SELECT B.PROGRAM_ID, B.PERF_CHECK_INDC_ID, B.PASS_MAX_VALUE, B.YN_DECIDE_DIV_CD
                         , ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
                    FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
                        , DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
                        , TMP_DEPLOY_PERF_SQL_ALL C
                    WHERE A.EXCEPTION_PRC_METH_CD = '1'
                    AND A.EXCEPTION_PRC_STATUS_CD = '2'
                    AND B.DEL_YN = 'N'
                    AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
                    AND A.PROGRAM_ID = C.PROGRAM_ID
                   ) B
            WHERE LAST_EXCEPT_INDC_NUM = 1 -- 여러개의 예외처리한지표중 최종 예외처리지표 
            GROUP BY B.PROGRAM_ID
        )        
		,-- 성능점검 SQL#1
		TMP_DEPLOY_PERF_SQL_BASE AS 
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.DBIO
				, A.PROGRAM_ID
				, A.PROGRAM_NM
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				, A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
				, A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
				, A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
				, A.FULL_SCAN_APPLY_YN       -- JMG : 20210129
				, A.PARTITION_APPLY_YN       -- JMG : 20210129  
				, A.ELAPSED_TIME_USE_YN    -- JMG : 20210129
				, A.BUFFER_GETS_USE_YN     -- JMG : 20210129
				, A.ROWS_PROCESSED_USE_YN  -- JMG : 20210129
				, A.FULL_SCAN_USE_YN        -- JMG : 20210129
				, A.PARTITION_USE_YN       -- JMG : 20210129  				
				, A.TEST_ELAPSED_TIME
				, A.TEST_BUFFER_GETS
				, A.TEST_ROWS_PROCESSED
				, A.TEST_FULL_SCAN_YN
				, A.TEST_SQL_ID
				, A.TEST_PLAN_HASH_VALUE
				, A.DEPLOY_COMPLETE_DT 
				, A.PROGRAM_EXEC_DT
				, B.SQL_ID AFTER_PRD_SQL_ID
				, B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				, FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				, FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_BIG_TAB_FULLSCAN_YN -- JMG : 20210129
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_PART_ACCESS_ALL_YN -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ELAPSED_TIME -- JMG : 20210129
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'))) BEFORE_PRD_BUFFER_GETS  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ROWS_PROCESSED -- JMG : 20210129
				, (CASE WHEN A.TEST_PLAN_HASH_VALUE <![CDATA[<]]>> B.PLAN_HASH_VALUE THEN 'Y' ELSE 'N' END) PRD_PLAN_CHANGE_YN
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, A.PROGRAM_EXECUTE_TMS
				, A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
				, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
				, C.INST_ID
			FROM (SELECT /*+ LEADNG(A) USE_HASH(B) */
						A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_EXECUTE_TMS
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.TEST_SQL_ID
						, A.TEST_PLAN_HASH_VALUE
						, A.DEPLOY_COMPLETE_DT 
						, A.PROGRAM_EXEC_DT
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD
						, A.FULL_SCAN_DECIDE_DIV_CD
						, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						, A.TEST_ELAPSED_TIME
						, A.TEST_BUFFER_GETS
						, A.TEST_ROWS_PROCESSED
						, A.TEST_FULL_SCAN_YN
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
						, A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
						, A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
						, A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
						, A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
						, A.FULL_SCAN_APPLY_YN        -- JMG : 20210129
						, A.PARTITION_APPLY_YN       -- JMG : 20210129  
						, A.ELAPSED_TIME_USE_YN    -- JMG : 20210129
						, A.BUFFER_GETS_USE_YN     -- JMG : 20210129
						, A.ROWS_PROCESSED_USE_YN  -- JMG : 20210129
						, A.FULL_SCAN_USE_YN        -- JMG : 20210129
						, A.PARTITION_USE_YN       -- JMG : 20210129						
					FROM (SELECT /*+ LEADING(A B C D E F G H) USE_HASH(B) USE_NL(C D E F G H) */
								A.PERF_CHECK_ID
								, I.DBID                 --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, A.PROGRAM_ID
								, A.PROGRAM_NM
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, A.EXCEPTION_PRC_METH_CD
								, A.DBIO
								, G.SQL_ID TEST_SQL_ID
								, G.PLAN_HASH_VALUE TEST_PLAN_HASH_VALUE
								, A.DEPLOY_COMPLETE_DT 
								, E.PROGRAM_EXEC_DT
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN F.INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN F.INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN F.INDC_PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.INDC_YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD       -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ROWS_PROCESSED
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.EXEC_RESULT_VALUE END) AS TEST_PARTITION_SCAN_YN           -- JMG : 20210129
								, COUNT(F.PERF_CHECK_INDC_ID) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN J.INDC_APPLY_YN  END) AS ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN J.INDC_APPLY_YN END) AS BUFFER_GETS_APPLY_YN     -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN J.INDC_APPLY_YN END) AS ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN J.INDC_APPLY_YN END) AS FULL_SCAN_APPLY_YN        -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN J.INDC_APPLY_YN END) AS PARTITION_APPLY_YN       -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN K.INDC_USE_YN   END) AS ELAPSED_TIME_USE_YN    -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN K.INDC_USE_YN   END) AS BUFFER_GETS_USE_YN     -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN K.INDC_USE_YN   END) AS ROWS_PROCESSED_USE_YN  -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN K.INDC_USE_YN   END) AS FULL_SCAN_USE_YN        -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN K.INDC_USE_YN   END) AS PARTITION_USE_YN       -- JMG : 20210129
							FROM TMP_DEPLOY_PERF_SQL_ALL A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
										, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
												FROM WRKJOB_CD
												WHERE USE_YN = 'Y'
												START WITH UPPER_WRKJOB_CD IS NULL
												CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_RESULT E
								, DEPLOY_PERF_CHK_DETAIL_RESULT F
								, DEPLOY_PERF_SQL_STAT G
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
								, WJ_PERF_CHK_INDC J  -- 업무별성능점검지표내역 -- JMG : 20210129
								, DEPLOY_PERF_CHK_INDC K  -- 배포성능점검지표기본 -- JMG : 20210129
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							AND A.PROGRAM_ID = E.PROGRAM_ID
							AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = F.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							AND E.PERF_CHECK_ID = G.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = G.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = G.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = G.PROGRAM_EXECUTE_TMS
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND A.WRKJOB_CD = J.WRKJOB_CD                    -- JMG : 20210129
							AND F.PERF_CHECK_INDC_ID = J.PERF_CHECK_INDC_ID  -- JMG : 20210129
							AND J.PERF_CHECK_PROGRAM_DIV_CD = 'S'            -- JMG : 20210129
							AND J.PERF_CHECK_INDC_ID = K.PERF_CHECK_INDC_ID  -- JMG : 20210129
							-- 1:SQL수행시간(초), 2:블럭수, 3: 처리건수, 5:대용량 테이블 Full Scan 여부, 6: 대용량 테이블 Full Scan 여부
							AND F.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
							AND F.PERF_CHECK_RESULT_DIV_CD <![CDATA[<>]]> 'C'
							
							AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							<choose>
								<when test="selectSearchType eq '00' or selectSearchType eq '01'">
									/* 성능 점검 SQL 조회 */
									AND 1 = 1   --> 20200612
								</when>
								<when test="selectSearchType eq '02'">
									/* 예외 처리 SQL 조회 */
									AND 1 = 0   --> 20200612
								</when>
							</choose>
							GROUP BY A.PERF_CHECK_ID
								, I.DBID     --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, A.PROGRAM_ID
								, A.PROGRAM_NM
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, A.EXCEPTION_PRC_METH_CD
								, A.DBIO
								, G.SQL_ID
								, G.PLAN_HASH_VALUE
								, A.DEPLOY_COMPLETE_DT 
								, E.PROGRAM_EXEC_DT
						) A
					WHERE 1 = 1
					-- 최종회차
					AND A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS)
													FROM DEPLOY_PERF_CHK_RESULT S
													WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
													AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
													AND S.PROGRAM_ID = A.PROGRAM_ID)
					-- 성능지표가 정상적으로 저장된 경우만 체크
					--AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4  -- JMG : 20210129
				) A
				, VSQL_TEXT B
				, VSQL_STATS C
			WHERE 1 = 1
			AND A.DBID = B.DBID
			AND A.DBIO = B.DBIO
			AND B.DBID = C.DBID
			AND B.SQL_ID = C.SQL_ID
			AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			--AND A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			
			/* 검색조건 */
			
		) ,
		-- 성능점검 SQL#2
		TMP_DEPLOY_PERF_SQL AS
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DBIO                   -- SQL식별자(DBIO)
				, A.PROGRAM_NM             -- 프로그램
				, A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.TEST_ELAPSED_TIME         -- 배포성능점검 수행시간
				, A.TEST_BUFFER_GETS          -- 배포성능점검 블럭수
				, A.TEST_ROWS_PROCESSED       -- 배포성능점검 처리건수
				, A.TEST_FULL_SCAN_YN
				, A.TEST_SQL_ID
				, A.TEST_PLAN_HASH_VALUE
				, A.DEPLOY_COMPLETE_DT   -- 배포일자
				, A.PROGRAM_EXEC_DT      -- 성능점검일시
				, A.AFTER_PRD_SQL_ID
				, A.AFTER_PRD_PLAN_HASH_VALUE
				, A.BEFORE_PRD_SQL_ID
				, A.BEFORE_PRD_PLAN_HASH_VALUE
				, A.PRD_PLAN_CHANGE_YN
				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, A.AFTER_PRD_PART_ACCESS_ALL_YN    -- JMG : 20210129
				, A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				, A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				, A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				, A.AFTER_EXECUTIONS                -- 운영 수행횟수
				, A.BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, A.BEFORE_PRD_PART_ACCESS_ALL_YN   -- JMG : 20210129
				, A.BEFORE_PRD_ELAPSED_TIME
				, A.BEFORE_PRD_BUFFER_GETS
				, A.BEFORE_PRD_ROWS_PROCESSED        -- 이전 운영 처리건수 , JMG : 20201203
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, A.PROGRAM_EXECUTE_TMS
				--, (CASE WHEN C.PROGRAM_ID IS NULL THEN 'N' ELSE 'Y' END) AS EXCEPT_YN   -- 예외여부 : 20210311
				, 'N' AS EXCEPT_YN
				, (CASE WHEN TEST_ELAPSED_TIME <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME THEN 'Y' ELSE 'N' END) AS ELAPSED_TIME_REGRESS_YN  -- 수행시간 성능저하
				, (CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> AFTER_PRD_BUFFER_GETS THEN 'Y' ELSE 'N' END) AS BUFFER_GETS_REGRESS_YN      -- 블럭수 성능저하
				, (CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND AFTER_PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부,  JMG : 20210129
				, (CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (BEFORE_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> BEFORE_PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND BEFORE_PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'N'))) 
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 'Y' ELSE 'N' END) BEFORE_FAIL_YN  -- 이전 부적합 여부,  JMG : 20210129
				, (CASE WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >  1   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 2   THEN '2XLT'   -- less then 2X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 2   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 5   THEN '5XLT'   -- less then 5X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 5   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 10  THEN '10XLT'  -- less then 10X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 10  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 30  THEN '30XLT'  -- less then 30X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 30  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 50  THEN '50XLT'  -- less then 50X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 50  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 100 THEN '100XLT' -- less then 100X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 100                                                    THEN '100XMT' -- more then 100X
					END) PERF_REGRESSED_METRIC -- 성능저하 율
				, (CASE WHEN AFTER_PRD_BUFFER_GETS > TEST_BUFFER_GETS THEN ROUND(-AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) , 2)
						WHEN AFTER_PRD_BUFFER_GETS <![CDATA[<]]>= TEST_BUFFER_GETS THEN ROUND(TEST_BUFFER_GETS/DECODE(AFTER_PRD_BUFFER_GETS, 0, 1, AFTER_PRD_BUFFER_GETS), 2)
					END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 블럭수 증감율
				, (CASE WHEN AFTER_PRD_ELAPSED_TIME > TEST_ELAPSED_TIME THEN ROUND(-AFTER_PRD_ELAPSED_TIME/DECODE(TEST_ELAPSED_TIME, 0, 1, TEST_ELAPSED_TIME), 2)
						WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]>= TEST_ELAPSED_TIME THEN ROUND(TEST_ELAPSED_TIME/DECODE(AFTER_PRD_ELAPSED_TIME, 0, 1, AFTER_PRD_ELAPSED_TIME), 2)
					END) PRD_ELAP_TIME_INCREASE_RATIO    -- 수행시간 증감율
				, (CASE WHEN AFTER_PRD_ROWS_PROCESSED > TEST_ROWS_PROCESSED THEN ROUND(-AFTER_PRD_ROWS_PROCESSED/DECODE(TEST_ROWS_PROCESSED, 0, 1, TEST_ROWS_PROCESSED), 2)
						WHEN AFTER_PRD_ROWS_PROCESSED <![CDATA[<]]>= TEST_ROWS_PROCESSED THEN ROUND(TEST_ROWS_PROCESSED/DECODE(AFTER_PRD_ROWS_PROCESSED, 0, 1, AFTER_PRD_ROWS_PROCESSED), 2)
					END) PRD_ROWS_PROC_INCREASE_RATIO    -- 처리건수 증감율
			FROM TMP_DEPLOY_PERF_SQL_BASE A, TMP_BIG_TABLE_BASE B
				, (SELECT PROGRAM_ID FROM TMP_DEPLOY_PERF_EXPT_INDC_ALL) C -- 20210311
			WHERE A.DBID = B.DBID
			AND A.PROGRAM_ID = C.PROGRAM_ID(+) -- 20210311
			AND A.MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		,
		-- 예외처리 SQL#1
		TMP_DEPLOY_EXCEPT_SQL_BASE AS 
		(
			SELECT A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.DBID
				, A.DBIO
				, A.PROGRAM_ID
				, A.PROGRAM_NM
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				, A.DEPLOY_COMPLETE_DT 
				, B.SQL_ID AFTER_PRD_SQL_ID
				, B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				, FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				, FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
								, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_BIG_TAB_FULLSCAN_YN  -- JMG : 20210129
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_PART_ACCESS_ALL_YN  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ELAPSED_TIME  -- JMG : 20210129
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'))) BEFORE_PRD_BUFFER_GETS -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ROWS_PROCESSED  -- JMG : 20210129
				, PERF_CHECK_ID
				, PERF_CHECK_STEP_ID
				, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
			FROM (
				SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT 
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD
						, A.FULL_SCAN_DECIDE_DIV_CD
						, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
				FROM (
					SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT

						-- 영구(2)예외인경우 업무별 기준지표, 한시(3)예외인 경우 SQL별 지표(예외지표 적용) : 20210311
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.ELAPSED_TIME_THRESHOLD ELSE NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) END) ELAPSED_TIME_THRESHOLD
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.BUFFER_GETS_THRESHOLD ELSE NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) END) BUFFER_GETS_THRESHOLD
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.ROWS_PROCESSED_THRESHOLD ELSE NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) END) ROWS_PROCESSED_THRESHOLD
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.FULL_SCAN_DECIDE_DIV_CD ELSE NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) END) FULL_SCAN_DECIDE_DIV_CD
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.PARTITION_DECIDE_DIV_CD ELSE NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) END) PARTITION_DECIDE_DIV_CD

						--, NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
						--, NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
						--, NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) ROWS_PROCESSED_THRESHOLD
						--, NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
						--, NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
					FROM (
						SELECT /*+ LEADING(A B E F G H) USE_HASH(B) USE_NL(E F G H) */
							A.PERF_CHECK_ID
							, I.DBID                --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, A.PROGRAM_ID
							, A.PROGRAM_NM
							, B.PERF_CHECK_STEP_ID
							, A.EXCEPTION_PRC_METH_CD
							, A.DBIO
							, A.DEPLOY_COMPLETE_DT 
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						FROM TMP_DEPLOY_PERF_SQL_ALL A
							-- 업무별 최종 단계
							, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
								FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
									, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
										FROM WRKJOB_CD
										WHERE USE_YN = 'Y'
										START WITH UPPER_WRKJOB_CD IS NULL
										CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
								WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
								AND A.DEL_YN(+) = 'N'
								GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
							, WJ_PERF_CHK_INDC E
							, WRKJOB_DB H      --> 20200608
							, DATABASE I       --> 20200608
						WHERE A.WRKJOB_CD = B.WRKJOB_CD
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
						AND H.DBID = I.DBID             --> 20200608
						AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
						-- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
						AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
						AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'     -- S: SQL
						AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
						
						/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
						<if test="wrkjob_cd != null and wrkjob_cd != ''">
							AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
													FROM WRKJOB_CD
													START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
													CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
						</if>
						<choose>
							<when test="selectSearchType eq '00' or selectSearchType eq '02'">
								/* 예외 처리 SQL 조회 */
								AND 1 = 1   --> 20200612
							</when>
							<when test="selectSearchType eq '01'">
								/* 성능 점검 SQL 조회 */
								AND 1 = 0   --> 20200612
							</when>
						</choose>
						GROUP BY A.PERF_CHECK_ID
							, I.DBID               --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, A.PROGRAM_ID
							, A.PROGRAM_NM
							, B.PERF_CHECK_STEP_ID
							, A.EXCEPTION_PRC_METH_CD
							, A.DBIO
							, A.DEPLOY_COMPLETE_DT 
						) A
						, TMP_DEPLOY_PERF_EXPT_INDC_ALL B -- 성능점검 예외 지표 : 20210311
					WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
					) A
				) A
				, VSQL_TEXT B
				, VSQL_STATS C
			WHERE 1 = 1
			AND A.DBID = B.DBID
			AND A.DBIO = B.DBIO
			AND B.DBID = C.DBID
			AND B.SQL_ID = C.SQL_ID
			AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			--AND A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			
			/* 검색조건 */
			
		)
		,
		-- 예외처리 SQL#2
		TMP_DEPLOY_EXCEPT_SQL AS
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DBIO                   -- SQL식별자(DBIO)
				, A.PROGRAM_NM             -- 프로그램
				, A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				, B.CD_NM AS EXCEPTION_PRC_METH_NM -- 예외처리방법명, JMG : 20200119
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.DEPLOY_COMPLETE_DT   -- 배포일자
				, A.AFTER_PRD_SQL_ID
				, A.AFTER_PRD_PLAN_HASH_VALUE 
				, A.BEFORE_PRD_SQL_ID
				, A.BEFORE_PRD_PLAN_HASH_VALUE
				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				, A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				, A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				, A.AFTER_EXECUTIONS                -- 운영 수행횟수
				, A.BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, A.BEFORE_PRD_PART_ACCESS_ALL_YN    -- JMG : 20210129
				, A.BEFORE_PRD_ELAPSED_TIME
				, A.BEFORE_PRD_BUFFER_GETS
				, A.BEFORE_PRD_ROWS_PROCESSED        -- 이전 운영 처리건수, JMG : 20201203
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, 'Y' AS EXCEPT_YN   -- 예외여부
				, (CASE WHEN ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_BUFFER_GETS
						OR (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED))
						OR (AFTER_PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N')) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부 -- JMG : 20210129
				, (CASE WHEN ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_BUFFER_GETS
						OR (ROWS_PROCESSED_THRESHOLD > 0 AND (BEFORE_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> BEFORE_PRD_ROWS_PROCESSED))
						OR (BEFORE_PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR ((PARTITION_DECIDE_DIV_CD = '2' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'N')) THEN 'Y' ELSE 'N' END) BEFORE_FAIL_YN  -- 이전 부적합 여부  -- JMG : 20210129
				, (CASE WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN '0.1XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >  0.1 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN '0.3XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 0.3 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN '1XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 1   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN '3XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 3   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN '10XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 10  AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN '60XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 60                             THEN '60XMT'
					END) ELAPSED_TIME_METIRC   -- 수행시간 구간 메트릭스
			FROM TMP_DEPLOY_EXCEPT_SQL_BASE A
				, CD B
				, TMP_BIG_TABLE_BASE C
			WHERE A.EXCEPTION_PRC_METH_CD = B.CD
			AND B.GRP_CD_ID = '1061'
			AND A.DBID = C.DBID
			AND MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		SELECT A.*
				, NO AS ID
				, (CASE WHEN RNUM = 1 THEN -1 ELSE MIN(NO) OVER(PARTITION BY PROGRAM_ID) END) AS PARENT_ID
		FROM (
				SELECT ROWNUM NO -- NO
					, A.*
				FROM (
						SELECT /*+ LEADING(A) USE_HASH(B) */
							A.DBIO                       -- SQL식별자(DBIO)
							, A.PROGRAM_NM                 -- 프로그램
							, A.AFTER_PRD_SQL_ID           -- SQL_ID
							, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
							, A.PRD_PLAN_CHANGE_YN         -- PLAN 변경 여부
							, A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
							, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
							, DECODE(B.ELAPSED_TIME_ACTIVITY, 0, 0.0001, B.ELAPSED_TIME_ACTIVITY) AS ELAPSED_TIME_ACTIVITY      -- 수행시간 Activity(%)
							, A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
							, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
							, DECODE(B.BUFFER_GETS_ACTIVITY, 0, 0.0001, B.BUFFER_GETS_ACTIVITY) AS BUFFER_GETS_ACTIVITY       -- 블럭수 Activity(%)
							, A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
							, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
							, A.AFTER_EXECUTIONS           -- 운영 수행횟수
							, A.EXCEPT_YN                  -- 예외여부
							, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
							, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
							, A.PROGRAM_EXEC_DT            -- 성능점검일자
							, A.DEPLOY_COMPLETE_DT         -- 배포일자
							, A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
							, A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
							, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
							, A.TEST_SQL_ID                -- 배포 SQL_ID
							, A.TEST_PLAN_HASH_VALUE       -- 배포 PLAN_HASH_VALUE
							, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
							, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
							, A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
							, A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_BUFFER_GETS_INCREASE_RATIO 
								END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 운영 블럭 증감율
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_ELAP_TIME_INCREASE_RATIO 
								END) PRD_ELAP_TIME_INCREASE_RATIO    -- 운영 수행시간 증감율
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_ROWS_PROC_INCREASE_RATIO 
								END) PRD_ROWS_PROC_INCREASE_RATIO    -- 운영 처리건수 증감율
							, A.WRKJOB_CD                  -- 업무코드
							, A.TOP_WRKJOB_CD              -- 최상위 업무코드
							, A.DBID                       -- DBID
							, A.PROGRAM_ID                 -- PROGRAM_ID
							, A.PERF_CHECK_ID              -- 성능점검ID
							, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
							, A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
							, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
							, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
							, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
							, A.EXCEPTION_PRC_METH_NM       -- 예외처리방법, JMG : 20210119
							, SUM(B.ELAPSED_TIME_ACTIVITY) OVER(PARTITION BY A.PROGRAM_ID) AS PROGRAM_ELAPSED_TIME_ACTIVITY  -- DBIO 단위 수행시간 Activity(%), JMG : 20210119 
							, SUM(B.BUFFER_GETS_ACTIVITY) OVER(PARTITION BY A.PROGRAM_ID) AS PROGRAM_BUFFER_GETS_ACTIVITY  -- DBIO 단위 수행시간 Activity(%), JMG : 20210128
							, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY ELAPSED_TIME_ACTIVITY DESC) RNUM   -- DBIO에서 SQL_ID 별 수행시간 Activity(%), JMG : 20210119
						FROM (
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									, A.PROGRAM_NM                 -- 프로그램
									, A.AFTER_PRD_SQL_ID           -- SQL_ID
									, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									, A.PRD_PLAN_CHANGE_YN         -- PLAN 변경 여부
									, A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
									, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									, A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
									, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									, A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
									, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									, A.AFTER_EXECUTIONS           -- 운영 수행횟수
									, A.EXCEPT_YN                  -- 예외여부
									, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									, TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD') PROGRAM_EXEC_DT       -- 성능점검일시
									, TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									, A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
									, NULL ELAPSED_TIME_METIRC     -- 수행시간 구간 메트릭스
									, A.PROGRAM_ID                 -- 프로그램 ID
									, A.PERF_CHECK_ID              -- 성능점검ID
									, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									, A.TEST_SQL_ID                -- 배포 SQL_ID
									, A.TEST_PLAN_HASH_VALUE       -- 배포 PLAN_HASH_VALUE
									, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									, A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
									, A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
									, TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO, 'FM999999999999990.99') PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									, TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO, 'FM999999999999990.99') PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									, TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO, 'FM999999999999990.99') PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									, A.WRKJOB_CD                  -- 업무코드
									, A.TOP_WRKJOB_CD              -- 최상위 업무코드
									, A.DBID                       -- DBID
									, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									, A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
									, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
									, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
									, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
									, (CASE WHEN B.PROGRAM_ID IS NOT NULL THEN '지표' ELSE '' END) EXCEPTION_PRC_METH_NM    -- 예외처리방법, JMG : 20210311
								FROM TMP_DEPLOY_PERF_SQL A, TMP_DEPLOY_PERF_EXPT_INDC_ALL B
								WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
								UNION ALL
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									, A.PROGRAM_NM                 -- 프로그램
									, A.AFTER_PRD_SQL_ID           -- SQL_ID
									, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									, 'N' PRD_PLAN_CHANGE_YN       -- PLAN 변경 여부
									, NULL TEST_ELAPSED_TIME       -- 배포 평균  수행시간
									, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									, NULL TEST_BUFFER_GETS        -- 배포 평균 블럭수
									, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									, NULL TEST_ROWS_PROCESSED     -- 배포 평균  처리건수
									, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									, A.AFTER_EXECUTIONS           -- 운영 수행횟수
									, A.EXCEPT_YN                  -- 예외여부
									, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									, NULL PROGRAM_EXEC_DT         -- 성능점검일시
									, TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									, NULL PERF_REGRESSED_METRIC   -- 성능저하 율 메트릭스
									, A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
									, A.PROGRAM_ID                 -- 프로그램 ID
									, A.PERF_CHECK_ID              -- 성능점검ID
									, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									, NULL TEST_SQL_ID             -- 배포 SQL_ID
									, NULL TEST_PLAN_HASH_VALUE    -- 배포 PLAN_HASH_VALUE
									, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									, NULL ELAPSED_TIME_REGRESS_YN -- 수행시간 성능저하
									, NULL BUFFER_GETS_REGRESS_YN  -- 블럭수 성능저하  
									, NULL PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									, NULL PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									, NULL PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									, A.WRKJOB_CD                  -- 업무코드
									, A.TOP_WRKJOB_CD              -- 최상위 업무코드
									, A.DBID                       -- DBID
									, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									, NULL PROGRAM_EXECUTE_TMS     -- 성능점검 수행회차
									, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
									, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
									, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
									, SUBSTR(A.EXCEPTION_PRC_METH_NM, 1, 2)  EXCEPTION_PRC_METH_NM    -- 예외처리방법, JMG : 20200119
								FROM TMP_DEPLOY_EXCEPT_SQL A
							) A
							, (
								/* ACTIVITY */
								SELECT DBID
									, SQL_ID
									, PLAN_HASH_VALUE
									, ROUND((RATIO_TO_REPORT(SUM(ELAPSED_TIME)) OVER())* 100, 4) AS ELAPSED_TIME_ACTIVITY
									, ROUND((RATIO_TO_REPORT(SUM(BUFFER_GETS)) OVER()) * 100, 4) AS BUFFER_GETS_ACTIVITY
								FROM VSQL_STATS A
								WHERE LAST_ACTIVE_TIME >= TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
								GROUP BY DBID, SQL_ID, PLAN_HASH_VALUE
							) B
						WHERE A.DBID = B.DBID
						AND A.AFTER_PRD_SQL_ID = B.SQL_ID
						AND A.AFTER_PRD_PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
						
						/* 부적합 */
						<if test='after_fail_yn_condition != null and after_fail_yn_condition != ""'>
							AND A.AFTER_FAIL_YN = #{after_fail_yn_condition}
						</if>
						
						/* 성능저하 - 수행시간 */
						/* 성능저하 - 블럭수  */
						<if test='selectSearchType != null and selectSearchType != ""'>
							<choose>
								<when test='selectSearchType eq "01".toString() and is_regress eq "Y"'>
									/* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
									AND A.BUFFER_GETS_REGRESS_YN = 'Y'
								</when>
								<when test='selectSearchType eq "01".toString() and is_regress eq "N"'>
									/* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
									AND A.BUFFER_GETS_REGRESS_YN = 'N'
								</when>
<!-- 								<when test='selectSearchType eq "02".toString() and (selectSqlPerfTrace != null and selectSqlPerfTrace != "") '> -->
<!-- 									/* 성능저하 - 수행시간 */ -->
<!-- 									AND A.ELAPSED_TIME_REGRESS_YN = 'Y' -->
<!-- 								</when> -->
							</choose>
						</if>
						
						/* 성능점검SQL - 콤보 */
						<if test='selectPerfRegressedMetric != null and selectPerfRegressedMetric != ""'>
							AND A.PERF_REGRESSED_METRIC = #{selectPerfRegressedMetric}
						</if>
						
						/* 예외처리방법 : 예외처리SQL 탭에서 전달받은경우*/
						<if test='selectSqlPerfTrace != null and selectSqlPerfTrace != ""'>
--							AND A.EXCEPTION_PRC_METH_CD = '2'
							AND A.EXCEPTION_PRC_METH_CD = #{selectSqlPerfTrace}
						</if>
						
						/* 예외처리SQL - 콤보 */
						<if test='selectElapsedTimeMetirc != null and selectElapsedTimeMetirc != ""'>
							AND A.ELAPSED_TIME_METIRC = #{selectElapsedTimeMetirc}
						</if>
						
						/* SQL_ID */
						<if test='strSqlId != null and strSqlId != ""'>
							AND A.AFTER_PRD_SQL_ID = #{strSqlId} 
						</if>
						
						/* SQL식별자 */
						<if test='strDbio != null and strDbio != ""'>
							AND A.DBIO = #{strDbio}
						</if>
						
						-- SQL식별자별 수행시간Activity(%) Descending, SQL별 평균수행시간(초) Descending 기준 정렬, JMG : 20200119
						ORDER BY PROGRAM_ELAPSED_TIME_ACTIVITY DESC, RNUM, PROGRAM_BUFFER_GETS_ACTIVITY DESC
					) A
				WHERE ROWNUM <![CDATA[<]]>= (${pagePerCount} * ${currentPage} + 1)
			) A
		WHERE NO > ${pagePerCount} * (${currentPage} - 1)
		ORDER BY NO
	</sql>
	
	
	<sql id="laodSqlsRefId_20210311">
		/* SqlsDao.laodSqlsRefId */
		WITH 
		-- 대용량 기준건수 
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
						, DATABASE DB
					WHERE PREF_ID IN (12004)) A
				, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
							WHERE PREF_ID IN (12004)
						)
					WHERE PREF_SEQ = MAX_PREF_SEQ
					) B
			WHERE A.DBID = B.DBID(+)
			AND A.PREF_ID = B.PREF_ID(+)
		)			
		,-- 성능점검 SQL#1
		TMP_DEPLOY_PERF_SQL_BASE AS 
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.DBIO
				, A.PROGRAM_ID
				, A.PROGRAM_NM
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				, A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
				, A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
				, A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
				, A.FULL_SCAN_APPLY_YN       -- JMG : 20210129
				, A.PARTITION_APPLY_YN       -- JMG : 20210129  
				, A.ELAPSED_TIME_USE_YN    -- JMG : 20210129
				, A.BUFFER_GETS_USE_YN     -- JMG : 20210129
				, A.ROWS_PROCESSED_USE_YN  -- JMG : 20210129
				, A.FULL_SCAN_USE_YN        -- JMG : 20210129
				, A.PARTITION_USE_YN       -- JMG : 20210129  				
				, A.TEST_ELAPSED_TIME
				, A.TEST_BUFFER_GETS
				, A.TEST_ROWS_PROCESSED
				, A.TEST_FULL_SCAN_YN
				, A.TEST_SQL_ID
				, A.TEST_PLAN_HASH_VALUE
				, A.DEPLOY_COMPLETE_DT 
				, A.PROGRAM_EXEC_DT
				, B.SQL_ID AFTER_PRD_SQL_ID
				, B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				, FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				, FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_BIG_TAB_FULLSCAN_YN -- JMG : 20210129
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_PART_ACCESS_ALL_YN -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ELAPSED_TIME -- JMG : 20210129
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'))) BEFORE_PRD_BUFFER_GETS  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ROWS_PROCESSED -- JMG : 20210129
				, (CASE WHEN A.TEST_PLAN_HASH_VALUE <![CDATA[<]]>> B.PLAN_HASH_VALUE THEN 'Y' ELSE 'N' END) PRD_PLAN_CHANGE_YN
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, A.PROGRAM_EXECUTE_TMS
				, A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
				, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
				, C.INST_ID
			FROM (SELECT /*+ LEADNG(A) USE_HASH(B) */
						A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_EXECUTE_TMS
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.TEST_SQL_ID
						, A.TEST_PLAN_HASH_VALUE
						, A.DEPLOY_COMPLETE_DT 
						, A.PROGRAM_EXEC_DT
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD
						, A.FULL_SCAN_DECIDE_DIV_CD
						, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						, A.TEST_ELAPSED_TIME
						, A.TEST_BUFFER_GETS
						, A.TEST_ROWS_PROCESSED
						, A.TEST_FULL_SCAN_YN
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
						, A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
						, A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
						, A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
						, A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
						, A.FULL_SCAN_APPLY_YN        -- JMG : 20210129
						, A.PARTITION_APPLY_YN       -- JMG : 20210129  
						, A.ELAPSED_TIME_USE_YN    -- JMG : 20210129
						, A.BUFFER_GETS_USE_YN     -- JMG : 20210129
						, A.ROWS_PROCESSED_USE_YN  -- JMG : 20210129
						, A.FULL_SCAN_USE_YN        -- JMG : 20210129
						, A.PARTITION_USE_YN       -- JMG : 20210129						
					FROM (SELECT /*+ LEADING(A B C D E F G H) USE_HASH(B) USE_NL(C D E F G H) */
								A.PERF_CHECK_ID
								, I.DBID                 --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, D.PROGRAM_NM
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, G.SQL_ID TEST_SQL_ID
								, G.PLAN_HASH_VALUE TEST_PLAN_HASH_VALUE
								, A.DEPLOY_COMPLETE_DT 
								, E.PROGRAM_EXEC_DT
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN F.INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN F.INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN F.INDC_PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.INDC_YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD       -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ROWS_PROCESSED
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.EXEC_RESULT_VALUE END) AS TEST_PARTITION_SCAN_YN           -- JMG : 20210129
								, COUNT(F.PERF_CHECK_INDC_ID) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN J.INDC_APPLY_YN  END) AS ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN J.INDC_APPLY_YN END) AS BUFFER_GETS_APPLY_YN     -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN J.INDC_APPLY_YN END) AS ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN J.INDC_APPLY_YN END) AS FULL_SCAN_APPLY_YN        -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN J.INDC_APPLY_YN END) AS PARTITION_APPLY_YN       -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN K.INDC_USE_YN   END) AS ELAPSED_TIME_USE_YN    -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN K.INDC_USE_YN   END) AS BUFFER_GETS_USE_YN     -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN K.INDC_USE_YN   END) AS ROWS_PROCESSED_USE_YN  -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN K.INDC_USE_YN   END) AS FULL_SCAN_USE_YN        -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN K.INDC_USE_YN   END) AS PARTITION_USE_YN       -- JMG : 20210129
							FROM DEPLOY_PERF_CHK A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
										, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
												FROM WRKJOB_CD
												WHERE USE_YN = 'Y'
												START WITH UPPER_WRKJOB_CD IS NULL
												CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_TARGET_PGM C
								, DEPLOY_PERF_CHK_ALL_PGM D
								, DEPLOY_PERF_CHK_RESULT E
								, DEPLOY_PERF_CHK_DETAIL_RESULT F
								, DEPLOY_PERF_SQL_STAT G
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
								, WJ_PERF_CHK_INDC J  -- 업무별성능점검지표내역 -- JMG : 20210129
								, DEPLOY_PERF_CHK_INDC K  -- 배포성능점검지표기본 -- JMG : 20210129
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
							AND C.PROGRAM_ID = D.PROGRAM_ID
							AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							AND C.PROGRAM_ID = E.PROGRAM_ID
							AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = F.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							AND E.PERF_CHECK_ID = G.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = G.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = G.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = G.PROGRAM_EXECUTE_TMS
							AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  --> 20200902
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND A.WRKJOB_CD = J.WRKJOB_CD                    -- JMG : 20210129
							AND F.PERF_CHECK_INDC_ID = J.PERF_CHECK_INDC_ID  -- JMG : 20210129
							AND J.PERF_CHECK_PROGRAM_DIV_CD = 'S'            -- JMG : 20210129
							AND J.PERF_CHECK_INDC_ID = K.PERF_CHECK_INDC_ID  -- JMG : 20210129
							-- 1:SQL수행시간(초), 2:블럭수, 3: 처리건수, 5:대용량 테이블 Full Scan 여부, 6: 대용량 테이블 Full Scan 여부
							AND F.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
							AND F.PERF_CHECK_RESULT_DIV_CD <![CDATA[<]]>> 'C'
							
							AND C.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL
							
							/* 날짜 검색 */
							AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							<choose>
								<when test="selectSearchType eq '00' or selectSearchType eq '01'">
									/* 성능 점검 SQL 조회 */
									AND 1 = 1   --> 20200612
								</when>
								<when test="selectSearchType eq '02'">
									/* 예외 처리 SQL 조회 */
									AND 1 = 0   --> 20200612
								</when>
							</choose>
							GROUP BY A.PERF_CHECK_ID
								, I.DBID     --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, D.PROGRAM_NM
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, G.SQL_ID
								, G.PLAN_HASH_VALUE
								, A.DEPLOY_COMPLETE_DT 
								, E.PROGRAM_EXEC_DT
						) A
					WHERE 1 = 1
					-- 최종회차
					AND A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS)
													FROM DEPLOY_PERF_CHK_RESULT S
													WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
													AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
													AND S.PROGRAM_ID = A.PROGRAM_ID)
					-- 성능지표가 정상적으로 저장된 경우만 체크
					--AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4  -- JMG : 20210129
				) A
				, VSQL_TEXT B
				, VSQL_STATS C
			WHERE 1 = 1
			AND A.DBID = B.DBID
			AND A.DBIO = B.DBIO
			AND B.DBID = C.DBID
			AND B.SQL_ID = C.SQL_ID
			AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			AND A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			
			/* 검색조건 */
			
		) ,
		-- 성능점검 SQL#2
		TMP_DEPLOY_PERF_SQL AS
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DBIO                   -- SQL식별자(DBIO)
				, A.PROGRAM_NM             -- 프로그램
				, A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.TEST_ELAPSED_TIME         -- 배포성능점검 수행시간
				, A.TEST_BUFFER_GETS          -- 배포성능점검 블럭수
				, A.TEST_ROWS_PROCESSED       -- 배포성능점검 처리건수
				, A.TEST_FULL_SCAN_YN
				, A.TEST_SQL_ID
				, A.TEST_PLAN_HASH_VALUE
				, A.DEPLOY_COMPLETE_DT   -- 배포일자
				, A.PROGRAM_EXEC_DT      -- 성능점검일시
				, A.AFTER_PRD_SQL_ID
				, A.AFTER_PRD_PLAN_HASH_VALUE
				, A.BEFORE_PRD_SQL_ID
				, A.BEFORE_PRD_PLAN_HASH_VALUE
				, A.PRD_PLAN_CHANGE_YN
				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, A.AFTER_PRD_PART_ACCESS_ALL_YN    -- JMG : 20210129
				, A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				, A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				, A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				, A.AFTER_EXECUTIONS                -- 운영 수행횟수
				, A.BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, A.BEFORE_PRD_PART_ACCESS_ALL_YN   -- JMG : 20210129
				, A.BEFORE_PRD_ELAPSED_TIME
				, A.BEFORE_PRD_BUFFER_GETS
				, A.BEFORE_PRD_ROWS_PROCESSED        -- 이전 운영 처리건수 , JMG : 20201203
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, A.PROGRAM_EXECUTE_TMS
				, 'N' AS EXCEPT_YN   -- 예외여부
				, (CASE WHEN TEST_ELAPSED_TIME <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME THEN 'Y' ELSE 'N' END) AS ELAPSED_TIME_REGRESS_YN  -- 수행시간 성능저하
				, (CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> AFTER_PRD_BUFFER_GETS THEN 'Y' ELSE 'N' END) AS BUFFER_GETS_REGRESS_YN      -- 블럭수 성능저하
				, (CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND AFTER_PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부,  JMG : 20210129
				, (CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (BEFORE_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> BEFORE_PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND BEFORE_PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'N'))) 
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 'Y' ELSE 'N' END) BEFORE_FAIL_YN  -- 이전 부적합 여부,  JMG : 20210129
				, (CASE WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >  1   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 2   THEN '2XLT'   -- less then 2X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 2   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 5   THEN '5XLT'   -- less then 5X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 5   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 10  THEN '10XLT'  -- less then 10X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 10  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 30  THEN '30XLT'  -- less then 30X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 30  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 50  THEN '50XLT'  -- less then 50X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 50  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 100 THEN '100XLT' -- less then 100X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 100                                                    THEN '100XMT' -- more then 100X
					END) PERF_REGRESSED_METRIC -- 성능저하 율
				, (CASE WHEN AFTER_PRD_BUFFER_GETS > TEST_BUFFER_GETS THEN ROUND(-AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) , 2)
						WHEN AFTER_PRD_BUFFER_GETS <![CDATA[<]]>= TEST_BUFFER_GETS THEN ROUND(TEST_BUFFER_GETS/DECODE(AFTER_PRD_BUFFER_GETS, 0, 1, AFTER_PRD_BUFFER_GETS), 2)
					END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 블럭수 증감율
				, (CASE WHEN AFTER_PRD_ELAPSED_TIME > TEST_ELAPSED_TIME THEN ROUND(-AFTER_PRD_ELAPSED_TIME/DECODE(TEST_ELAPSED_TIME, 0, 1, TEST_ELAPSED_TIME), 2)
						WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]>= TEST_ELAPSED_TIME THEN ROUND(TEST_ELAPSED_TIME/DECODE(AFTER_PRD_ELAPSED_TIME, 0, 1, AFTER_PRD_ELAPSED_TIME), 2)
					END) PRD_ELAP_TIME_INCREASE_RATIO    -- 수행시간 증감율
				, (CASE WHEN AFTER_PRD_ROWS_PROCESSED > TEST_ROWS_PROCESSED THEN ROUND(-AFTER_PRD_ROWS_PROCESSED/DECODE(TEST_ROWS_PROCESSED, 0, 1, TEST_ROWS_PROCESSED), 2)
						WHEN AFTER_PRD_ROWS_PROCESSED <![CDATA[<]]>= TEST_ROWS_PROCESSED THEN ROUND(TEST_ROWS_PROCESSED/DECODE(AFTER_PRD_ROWS_PROCESSED, 0, 1, AFTER_PRD_ROWS_PROCESSED), 2)
					END) PRD_ROWS_PROC_INCREASE_RATIO    -- 처리건수 증감율
			FROM TMP_DEPLOY_PERF_SQL_BASE A, TMP_BIG_TABLE_BASE B
			WHERE A.DBID = B.DBID
			AND A.MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		,
		-- 예외처리 SQL#1
		TMP_DEPLOY_EXCEPT_SQL_BASE AS 
		(
			SELECT A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.DBID
				, A.DBIO
				, A.PROGRAM_ID
				, A.PROGRAM_NM
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				, A.DEPLOY_COMPLETE_DT 
				, B.SQL_ID AFTER_PRD_SQL_ID
				, B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				, FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				, FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
								, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_BIG_TAB_FULLSCAN_YN  -- JMG : 20210129
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_PART_ACCESS_ALL_YN  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ELAPSED_TIME  -- JMG : 20210129
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'))) BEFORE_PRD_BUFFER_GETS -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ROWS_PROCESSED  -- JMG : 20210129
				, PERF_CHECK_ID
				, PERF_CHECK_STEP_ID
				, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
			FROM (
				SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT 
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD
						, A.FULL_SCAN_DECIDE_DIV_CD
						, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
				FROM (
					SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT 
						, NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
						, NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
						, NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) ROWS_PROCESSED_THRESHOLD
						, NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
						, NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
					FROM (
						SELECT /*+ LEADING(A B C D E F G H) USE_HASH(B) USE_NL(C D E F G H) */
							A.PERF_CHECK_ID
							, I.DBID                --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, C.PROGRAM_ID
							, D.PROGRAM_NM
							, B.PERF_CHECK_STEP_ID
							, C.EXCEPTION_PRC_METH_CD
							, D.DBIO
							, A.DEPLOY_COMPLETE_DT 
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						FROM DEPLOY_PERF_CHK A
							-- 업무별 최종 단계
							, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
								FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
									, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
										FROM WRKJOB_CD
										WHERE USE_YN = 'Y'
										START WITH UPPER_WRKJOB_CD IS NULL
										CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
								WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
								AND A.DEL_YN(+) = 'N'
								GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
							, DEPLOY_PERF_CHK_TARGET_PGM C
							, DEPLOY_PERF_CHK_ALL_PGM D
							, WJ_PERF_CHK_INDC E
							, WRKJOB_DB H      --> 20200608
							, DATABASE I       --> 20200608
						WHERE A.WRKJOB_CD = B.WRKJOB_CD
						AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
						AND C.PROGRAM_ID = D.PROGRAM_ID
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
						AND H.DBID = I.DBID             --> 20200608
						AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  --> 20200902
						AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
						-- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
						AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
						AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'     -- S: SQL
						AND C.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
						
						/* 날짜 검색 */
						AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
						AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
						
						/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
						<if test="wrkjob_cd != null and wrkjob_cd != ''">
							AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
													FROM WRKJOB_CD
													START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
													CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
						</if>
						<choose>
							<when test="selectSearchType eq '00' or selectSearchType eq '02'">
								/* 예외 처리 SQL 조회 */
								AND 1 = 1   --> 20200612
							</when>
							<when test="selectSearchType eq '01'">
								/* 성능 점검 SQL 조회 */
								AND 1 = 0   --> 20200612
							</when>
						</choose>
						GROUP BY A.PERF_CHECK_ID
							, I.DBID               --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, C.PROGRAM_ID
							, D.PROGRAM_NM
							, B.PERF_CHECK_STEP_ID
							, C.EXCEPTION_PRC_METH_CD
							, D.DBIO
							, A.DEPLOY_COMPLETE_DT 
						) A
						-- 성능점검 예외 지표
						,( 
							SELECT B.PROGRAM_ID
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD    -- JMG : 20210129
							FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
								, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
								, (SELECT F.PERF_CHECK_INDC_ID
									FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
										, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
										, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
									WHERE A.WRKJOB_CD = E.WRKJOB_CD
									AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
									AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  --> 20200902
									AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
									AND E.INDC_APPLY_YN = 'Y'
									AND F.INDC_USE_YN = 'Y'
									-- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
									AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)   -- JMG : 20210129
									/* 날짜 검색 */
									AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
									
									/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
									<if test="wrkjob_cd != null and wrkjob_cd != ''">
										AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																FROM WRKJOB_CD
																START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
																CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
									</if>
									<choose>
										<when test="selectSearchType eq '00' or selectSearchType eq '02'">
											/* 예외 처리 SQL 조회 */
											AND 1 = 1   --> 20200612
										</when>
										<when test="selectSearchType eq '01'">
											/* 성능 점검 SQL 조회 */
											AND 1 = 0   --> 20200612
										</when>
									</choose>
								
								) C
							WHERE A.EXCEPTION_PRC_METH_CD = '1'
							AND A.EXCEPTION_PRC_STATUS_CD = '2'
							AND B.DEL_YN = 'N'
							AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
							AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
							GROUP BY B.PROGRAM_ID
						) B
					WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
					) A
				) A
				, VSQL_TEXT B
				, VSQL_STATS C
			WHERE 1 = 1
			AND A.DBID = B.DBID
			AND A.DBIO = B.DBIO
			AND B.DBID = C.DBID
			AND B.SQL_ID = C.SQL_ID
			AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			AND A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			
			/* 검색조건 */
			
		)
		,
		-- 예외처리 SQL#2
		TMP_DEPLOY_EXCEPT_SQL AS
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DBIO                   -- SQL식별자(DBIO)
				, A.PROGRAM_NM             -- 프로그램
				, A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				, B.CD_NM AS EXCEPTION_PRC_METH_NM -- 예외처리방법명, JMG : 20200119
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.DEPLOY_COMPLETE_DT   -- 배포일자
				, A.AFTER_PRD_SQL_ID
				, A.AFTER_PRD_PLAN_HASH_VALUE 
				, A.BEFORE_PRD_SQL_ID
				, A.BEFORE_PRD_PLAN_HASH_VALUE
				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				, A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				, A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				, A.AFTER_EXECUTIONS                -- 운영 수행횟수
				, A.BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, A.BEFORE_PRD_PART_ACCESS_ALL_YN    -- JMG : 20210129
				, A.BEFORE_PRD_ELAPSED_TIME
				, A.BEFORE_PRD_BUFFER_GETS
				, A.BEFORE_PRD_ROWS_PROCESSED        -- 이전 운영 처리건수, JMG : 20201203
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, 'Y' AS EXCEPT_YN   -- 예외여부
				, (CASE WHEN ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_BUFFER_GETS
						OR (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED))
						OR (AFTER_PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N')) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부 -- JMG : 20210129
				, (CASE WHEN ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_BUFFER_GETS
						OR (ROWS_PROCESSED_THRESHOLD > 0 AND (BEFORE_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> BEFORE_PRD_ROWS_PROCESSED))
						OR (BEFORE_PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR ((PARTITION_DECIDE_DIV_CD = '2' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'N')) THEN 'Y' ELSE 'N' END) BEFORE_FAIL_YN  -- 이전 부적합 여부  -- JMG : 20210129
				, (CASE WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN '0.1XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >  0.1 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN '0.3XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 0.3 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN '1XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 1   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN '3XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 3   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN '10XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 10  AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN '60XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 60                             THEN '60XMT'
					END) ELAPSED_TIME_METIRC   -- 수행시간 구간 메트릭스
			FROM TMP_DEPLOY_EXCEPT_SQL_BASE A
				, CD B
				, TMP_BIG_TABLE_BASE C
			WHERE A.EXCEPTION_PRC_METH_CD = B.CD
			AND B.GRP_CD_ID = '1061'
			AND A.DBID = C.DBID
			AND MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		SELECT A.*
				, NO AS ID
				, (CASE WHEN RNUM = 1 THEN -1 ELSE MIN(NO) OVER(PARTITION BY PROGRAM_ID) END) AS PARENT_ID
		FROM (
				SELECT ROWNUM NO -- NO
					, A.*
				FROM (
						SELECT /*+ LEADING(A) USE_HASH(B) */
							A.DBIO                       -- SQL식별자(DBIO)
							, A.PROGRAM_NM                 -- 프로그램
							, A.AFTER_PRD_SQL_ID           -- SQL_ID
							, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
							, A.PRD_PLAN_CHANGE_YN         -- PLAN 변경 여부
							, A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
							, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
							, DECODE(B.ELAPSED_TIME_ACTIVITY, 0, 0.0001, B.ELAPSED_TIME_ACTIVITY) AS ELAPSED_TIME_ACTIVITY      -- 수행시간 Activity(%)
							, A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
							, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
							, DECODE(B.BUFFER_GETS_ACTIVITY, 0, 0.0001, B.BUFFER_GETS_ACTIVITY) AS BUFFER_GETS_ACTIVITY       -- 블럭수 Activity(%)
							, A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
							, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
							, A.AFTER_EXECUTIONS           -- 운영 수행횟수
							, A.EXCEPT_YN                  -- 예외여부
							, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
							, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
							, A.PROGRAM_EXEC_DT            -- 성능점검일자
							, A.DEPLOY_COMPLETE_DT         -- 배포일자
							, A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
							, A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
							, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
							, A.TEST_SQL_ID                -- 배포 SQL_ID
							, A.TEST_PLAN_HASH_VALUE       -- 배포 PLAN_HASH_VALUE
							, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
							, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
							, A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
							, A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_BUFFER_GETS_INCREASE_RATIO 
								END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 운영 블럭 증감율
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_ELAP_TIME_INCREASE_RATIO 
								END) PRD_ELAP_TIME_INCREASE_RATIO    -- 운영 수행시간 증감율
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_ROWS_PROC_INCREASE_RATIO 
								END) PRD_ROWS_PROC_INCREASE_RATIO    -- 운영 처리건수 증감율
							, A.WRKJOB_CD                  -- 업무코드
							, A.TOP_WRKJOB_CD              -- 최상위 업무코드
							, A.DBID                       -- DBID
							, A.PROGRAM_ID                 -- PROGRAM_ID
							, A.PERF_CHECK_ID              -- 성능점검ID
							, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
							, A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
							, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
							, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
							, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
							, A.EXCEPTION_PRC_METH_NM       -- 예외처리방법, JMG : 20210119
							, SUM(B.ELAPSED_TIME_ACTIVITY) OVER(PARTITION BY A.PROGRAM_ID) AS PROGRAM_ELAPSED_TIME_ACTIVITY  -- DBIO 단위 수행시간 Activity(%), JMG : 20210119 
							, SUM(B.BUFFER_GETS_ACTIVITY) OVER(PARTITION BY A.PROGRAM_ID) AS PROGRAM_BUFFER_GETS_ACTIVITY  -- DBIO 단위 수행시간 Activity(%), JMG : 20210128
							, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY ELAPSED_TIME_ACTIVITY DESC) RNUM   -- DBIO에서 SQL_ID 별 수행시간 Activity(%), JMG : 20210119
						FROM (
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									, A.PROGRAM_NM                 -- 프로그램
									, A.AFTER_PRD_SQL_ID           -- SQL_ID
									, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									, A.PRD_PLAN_CHANGE_YN         -- PLAN 변경 여부
									, A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
									, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									, A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
									, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									, A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
									, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									, A.AFTER_EXECUTIONS           -- 운영 수행횟수
									, A.EXCEPT_YN                  -- 예외여부
									, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									, TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD') PROGRAM_EXEC_DT       -- 성능점검일시
									, TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									, A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
									, NULL ELAPSED_TIME_METIRC     -- 수행시간 구간 메트릭스
									, A.PROGRAM_ID                 -- 프로그램 ID
									, A.PERF_CHECK_ID              -- 성능점검ID
									, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									, A.TEST_SQL_ID                -- 배포 SQL_ID
									, A.TEST_PLAN_HASH_VALUE       -- 배포 PLAN_HASH_VALUE
									, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									, A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
									, A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
									, TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO, 'FM999999999999990.99') PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									, TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO, 'FM999999999999990.99') PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									, TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO, 'FM999999999999990.99') PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									, A.WRKJOB_CD                  -- 업무코드
									, A.TOP_WRKJOB_CD              -- 최상위 업무코드
									, A.DBID                       -- DBID
									, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									, A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
									, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
									, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
									, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
									, NULL EXCEPTION_PRC_METH_NM    -- 예외처리방법, JMG : 20200119
								FROM TMP_DEPLOY_PERF_SQL A
								UNION ALL
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									, A.PROGRAM_NM                 -- 프로그램
									, A.AFTER_PRD_SQL_ID           -- SQL_ID
									, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									, 'N' PRD_PLAN_CHANGE_YN       -- PLAN 변경 여부
									, NULL TEST_ELAPSED_TIME       -- 배포 평균  수행시간
									, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									, NULL TEST_BUFFER_GETS        -- 배포 평균 블럭수
									, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									, NULL TEST_ROWS_PROCESSED     -- 배포 평균  처리건수
									, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									, A.AFTER_EXECUTIONS           -- 운영 수행횟수
									, A.EXCEPT_YN                  -- 예외여부
									, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									, NULL PROGRAM_EXEC_DT         -- 성능점검일시
									, TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									, NULL PERF_REGRESSED_METRIC   -- 성능저하 율 메트릭스
									, A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
									, A.PROGRAM_ID                 -- 프로그램 ID
									, A.PERF_CHECK_ID              -- 성능점검ID
									, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									, NULL TEST_SQL_ID             -- 배포 SQL_ID
									, NULL TEST_PLAN_HASH_VALUE    -- 배포 PLAN_HASH_VALUE
									, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									, NULL ELAPSED_TIME_REGRESS_YN -- 수행시간 성능저하
									, NULL BUFFER_GETS_REGRESS_YN  -- 블럭수 성능저하  
									, NULL PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									, NULL PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									, NULL PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									, A.WRKJOB_CD                  -- 업무코드
									, A.TOP_WRKJOB_CD              -- 최상위 업무코드
									, A.DBID                       -- DBID
									, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									, NULL PROGRAM_EXECUTE_TMS     -- 성능점검 수행회차
									, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
									, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
									, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
									, SUBSTR(A.EXCEPTION_PRC_METH_NM, 1, 2)  EXCEPTION_PRC_METH_NM    -- 예외처리방법, JMG : 20200119
								FROM TMP_DEPLOY_EXCEPT_SQL A
							) A
							, (
								/* ACTIVITY */
								SELECT DBID
									, SQL_ID
									, PLAN_HASH_VALUE
									, ROUND((RATIO_TO_REPORT(SUM(ELAPSED_TIME)) OVER())* 100, 4) AS ELAPSED_TIME_ACTIVITY
									, ROUND((RATIO_TO_REPORT(SUM(BUFFER_GETS)) OVER()) * 100, 4) AS BUFFER_GETS_ACTIVITY
								FROM VSQL_STATS A
								WHERE LAST_ACTIVE_TIME >= TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
								GROUP BY DBID, SQL_ID, PLAN_HASH_VALUE
							) B
						WHERE A.DBID = B.DBID
						AND A.AFTER_PRD_SQL_ID = B.SQL_ID
						AND A.AFTER_PRD_PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
						
						/* 부적합 */
						<if test='after_fail_yn_condition != null and after_fail_yn_condition != ""'>
							AND A.AFTER_FAIL_YN = #{after_fail_yn_condition}
						</if>
						
						/* 성능저하 - 수행시간 */
						/* 성능저하 - 블럭수  */
						<if test='selectSearchType != null and selectSearchType != ""'>
							<choose>
								<when test='selectSearchType eq "01".toString() and is_regress eq "Y"'>
									/* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
									AND A.BUFFER_GETS_REGRESS_YN = 'Y'
								</when>
								<when test='selectSearchType eq "01".toString() and is_regress eq "N"'>
									/* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
									AND A.BUFFER_GETS_REGRESS_YN = 'N'
								</when>
<!-- 								<when test='selectSearchType eq "02".toString() and (selectSqlPerfTrace != null and selectSqlPerfTrace != "") '> -->
<!-- 									/* 성능저하 - 수행시간 */ -->
<!-- 									AND A.ELAPSED_TIME_REGRESS_YN = 'Y' -->
<!-- 								</when> -->
							</choose>
						</if>
						
						/* 성능점검SQL - 콤보 */
						<if test='selectPerfRegressedMetric != null and selectPerfRegressedMetric != ""'>
							AND A.PERF_REGRESSED_METRIC = #{selectPerfRegressedMetric}
						</if>
						
						/* 예외처리방법 : 예외처리SQL 탭에서 전달받은경우*/
						<if test='selectSqlPerfTrace != null and selectSqlPerfTrace != ""'>
--							AND A.EXCEPTION_PRC_METH_CD = '2'
							AND A.EXCEPTION_PRC_METH_CD = #{selectSqlPerfTrace}
						</if>
						
						/* 예외처리SQL - 콤보 */
						<if test='selectElapsedTimeMetirc != null and selectElapsedTimeMetirc != ""'>
							AND A.ELAPSED_TIME_METIRC = #{selectElapsedTimeMetirc}
						</if>
						
						/* SQL_ID */
						<if test='strSqlId != null and strSqlId != ""'>
							AND A.AFTER_PRD_SQL_ID = #{strSqlId} 
						</if>
						
						/* SQL식별자 */
						<if test='strDbio != null and strDbio != ""'>
							AND A.DBIO = #{strDbio}
						</if>
						
						-- SQL식별자별 수행시간Activity(%) Descending, SQL별 평균수행시간(초) Descending 기준 정렬, JMG : 20200119
						ORDER BY PROGRAM_ELAPSED_TIME_ACTIVITY DESC, RNUM, PROGRAM_BUFFER_GETS_ACTIVITY DESC
					) A
				WHERE ROWNUM <![CDATA[<]]>= (${pagePerCount} * ${currentPage} + 1)
			) A
		WHERE NO > ${pagePerCount} * (${currentPage} - 1)
		ORDER BY NO
	</sql>
	
	<select id="loadSqls" parameterType="sqls" resultType="sqls">
		/* SqlsDao.loadSqls */
		<include refid="laodSqlsRefId"/>
	</select>
	
	<select id="excelDown_20210311" parameterType="sqls" resultType="java.util.LinkedHashMap">
		/* SqlsDao.excelDown */
		WITH 
		-- 성능점검 SQL#1
		TMP_DEPLOY_PERF_SQL_BASE AS 
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.DBIO
				, A.PROGRAM_ID
				, A.PROGRAM_NM
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.TEST_ELAPSED_TIME
				, A.TEST_BUFFER_GETS
				, A.TEST_ROWS_PROCESSED
				, A.TEST_FULL_SCAN_YN
				, A.TEST_SQL_ID
				, A.TEST_PLAN_HASH_VALUE
				, A.DEPLOY_COMPLETE_DT 
				, A.PROGRAM_EXEC_DT
				, B.SQL_ID AFTER_PRD_SQL_ID
				, B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				, FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				, FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'BEFORE') BEFORE_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE'), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE')) BEFORE_PRD_BUFFER_GETS 
				, (CASE WHEN A.TEST_PLAN_HASH_VALUE <![CDATA[<]]>> B.PLAN_HASH_VALUE THEN 'Y' ELSE 'N' END) PRD_PLAN_CHANGE_YN
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, A.PROGRAM_EXECUTE_TMS
				, A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
				, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
				, C.INST_ID
			FROM (SELECT /*+ LEADING(A B C D E F G H) USE_HASH(B) USE_NL(C D E F G H) */
						A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_EXECUTE_TMS
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.TEST_SQL_ID
						, A.TEST_PLAN_HASH_VALUE
						, A.DEPLOY_COMPLETE_DT 
						, A.PROGRAM_EXEC_DT
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD
						, A.FULL_SCAN_DECIDE_DIV_CD
						, A.TEST_ELAPSED_TIME
						, A.TEST_BUFFER_GETS
						, A.TEST_ROWS_PROCESSED
						, A.TEST_FULL_SCAN_YN
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
						, A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
					FROM (SELECT A.PERF_CHECK_ID
								, I.DBID                 --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, D.PROGRAM_NM
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, G.SQL_ID TEST_SQL_ID
								, G.PLAN_HASH_VALUE TEST_PLAN_HASH_VALUE
								, A.DEPLOY_COMPLETE_DT 
								, E.PROGRAM_EXEC_DT
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN F.INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN F.INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN F.INDC_PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ROWS_PROCESSED
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								, COUNT(F.PERF_CHECK_INDC_ID) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
							FROM DEPLOY_PERF_CHK A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
										, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
												FROM WRKJOB_CD
												WHERE USE_YN = 'Y'
												START WITH UPPER_WRKJOB_CD IS NULL
												CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_TARGET_PGM C
								, DEPLOY_PERF_CHK_ALL_PGM D
								, DEPLOY_PERF_CHK_RESULT E
								, DEPLOY_PERF_CHK_DETAIL_RESULT F
								, DEPLOY_PERF_SQL_STAT G
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
							AND C.PROGRAM_ID = D.PROGRAM_ID
							AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							AND C.PROGRAM_ID = E.PROGRAM_ID
							AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = F.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							AND E.PERF_CHECK_ID = G.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = G.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = G.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = G.PROGRAM_EXECUTE_TMS
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  --> 20200902
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND F.PERF_CHECK_INDC_ID IN (1, 2, 3, 5)  -- 1:SQL수행시간(초), 2:블럭수, 3: 처리건수, 5:대용량 테이블 Full Scan 여부
							AND F.PERF_CHECK_RESULT_DIV_CD <![CDATA[<]]>> 'C'
							
							AND C.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL
							
							/* 날짜 검색 */
							AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							<choose>
								<when test="selectSearchType eq '00' or selectSearchType eq '01'">
									/* 성능 점검 SQL 조회 */
									AND 1 = 1   --> 20200612
								</when>
								<when test="selectSearchType eq '02'">
									/* 예외 처리 SQL 조회 */
									AND 1 = 0   --> 20200612
								</when>
							</choose>
							GROUP BY A.PERF_CHECK_ID
								, I.DBID     --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, C.PROGRAM_ID
								, D.PROGRAM_NM
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, C.EXCEPTION_PRC_METH_CD
								, D.DBIO
								, G.SQL_ID
								, G.PLAN_HASH_VALUE
								, A.DEPLOY_COMPLETE_DT 
								, E.PROGRAM_EXEC_DT
						) A
					WHERE 1 = 1
					-- 최종회차
					AND A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS)
													FROM DEPLOY_PERF_CHK_RESULT S
													WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
													AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
													AND S.PROGRAM_ID = A.PROGRAM_ID)
					-- 성능지표가 정상적으로 저장된 경우만 체크
					AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4
				) A
				, VSQL_TEXT B
				, VSQL_STATS C
			WHERE 1 = 1
			AND A.DBID = B.DBID
			AND A.DBIO = B.DBIO
			AND B.DBID = C.DBID
			AND B.SQL_ID = C.SQL_ID
			AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			AND A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			
			/* 검색조건 */
			
		) ,
		-- 성능점검 SQL#2
		TMP_DEPLOY_PERF_SQL AS
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DBIO                   -- SQL식별자(DBIO)
				, A.PROGRAM_NM             -- 프로그램
				, A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.TEST_ELAPSED_TIME         -- 배포성능점검 수행시간
				, A.TEST_BUFFER_GETS          -- 배포성능점검 블럭수
				, A.TEST_ROWS_PROCESSED       -- 배포성능점검 처리건수
				, A.TEST_FULL_SCAN_YN
				, A.TEST_SQL_ID
				, A.TEST_PLAN_HASH_VALUE
				, A.DEPLOY_COMPLETE_DT   -- 배포일자
				, A.PROGRAM_EXEC_DT      -- 성능점검일시
				, A.AFTER_PRD_SQL_ID
				, A.AFTER_PRD_PLAN_HASH_VALUE
				, A.BEFORE_PRD_SQL_ID
				, A.BEFORE_PRD_PLAN_HASH_VALUE
				, A.PRD_PLAN_CHANGE_YN
				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				, A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				, A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				, A.AFTER_EXECUTIONS                -- 운영 수행횟수
				, A.BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, A.BEFORE_PRD_ELAPSED_TIME
				, A.BEFORE_PRD_BUFFER_GETS
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, A.PROGRAM_EXECUTE_TMS
				, 'N' AS EXCEPT_YN   -- 예외여부
				, (CASE WHEN TEST_ELAPSED_TIME <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME THEN 'Y' ELSE 'N' END) AS ELAPSED_TIME_REGRESS_YN  -- 수행시간 성능저하
				, (CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> AFTER_PRD_BUFFER_GETS THEN 'Y' ELSE 'N' END) AS BUFFER_GETS_REGRESS_YN      -- 블럭수 성능저하
				, (CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> AFTER_PRD_BUFFER_GETS
						OR (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
						OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N') ) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부
				, (CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> BEFORE_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> BEFORE_PRD_BUFFER_GETS
						OR (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
						OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'N') ) THEN 'Y' ELSE 'N' END) BEFORE_FAIL_YN  -- 이전 부적합 여부 
				, (CASE WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >  1   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 2   THEN '2XLT'   -- less then 2X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 2   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 5   THEN '5XLT'   -- less then 5X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 5   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 10  THEN '10XLT'  -- less then 10X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 10  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 30  THEN '30XLT'  -- less then 30X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 30  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 50  THEN '50XLT'  -- less then 50X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 50  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 100 THEN '100XLT' -- less then 100X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 100                                                    THEN '100XMT' -- more then 100X
					END) PERF_REGRESSED_METRIC -- 성능저하 율
				, (CASE WHEN AFTER_PRD_BUFFER_GETS > TEST_BUFFER_GETS THEN ROUND(-DECODE(AFTER_PRD_BUFFER_GETS, 0, 1, AFTER_PRD_BUFFER_GETS)/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) , 2)
						WHEN AFTER_PRD_BUFFER_GETS <![CDATA[<]]>= TEST_BUFFER_GETS THEN ROUND(DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)/DECODE(AFTER_PRD_BUFFER_GETS, 0, 1, AFTER_PRD_BUFFER_GETS), 2)
					END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 블럭수 증감율
				, (CASE WHEN AFTER_PRD_ELAPSED_TIME > TEST_ELAPSED_TIME THEN ROUND(-DECODE(AFTER_PRD_ELAPSED_TIME, 0, 1, AFTER_PRD_ELAPSED_TIME)/DECODE(TEST_ELAPSED_TIME, 0, 1, TEST_ELAPSED_TIME), 2)
						WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]>= TEST_ELAPSED_TIME THEN ROUND(DECODE(TEST_ELAPSED_TIME, 0, 1, TEST_ELAPSED_TIME)/DECODE(AFTER_PRD_ELAPSED_TIME, 0, 1, AFTER_PRD_ELAPSED_TIME), 2)
					END) PRD_ELAP_TIME_INCREASE_RATIO    -- 수행시간 증감율
				, (CASE WHEN AFTER_PRD_ROWS_PROCESSED > TEST_ROWS_PROCESSED THEN ROUND(-DECODE(AFTER_PRD_ROWS_PROCESSED, 0, 1, AFTER_PRD_ROWS_PROCESSED)/DECODE(TEST_ROWS_PROCESSED, 0, 1, TEST_ROWS_PROCESSED), 2)
						WHEN AFTER_PRD_ROWS_PROCESSED <![CDATA[<]]>= TEST_ROWS_PROCESSED THEN ROUND(DECODE(TEST_ROWS_PROCESSED, 0, 1, TEST_ROWS_PROCESSED)/DECODE(AFTER_PRD_ROWS_PROCESSED, 0, 1, AFTER_PRD_ROWS_PROCESSED), 2)
					END) PRD_ROWS_PROC_INCREASE_RATIO    -- 처리건수 증감율
			FROM TMP_DEPLOY_PERF_SQL_BASE A
			WHERE MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		,
		-- 예외처리 SQL#1
		TMP_DEPLOY_EXCEPT_SQL_BASE AS 
		(
			SELECT A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.DBID
				, A.DBIO
				, A.PROGRAM_ID
				, A.PROGRAM_NM
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.DEPLOY_COMPLETE_DT 
				, B.SQL_ID AFTER_PRD_SQL_ID
				, B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				, FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				, FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'BEFORE') BEFORE_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE'), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE')) BEFORE_PRD_BUFFER_GETS
				, PERF_CHECK_ID
				, PERF_CHECK_STEP_ID
				, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
			FROM (
				SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT 
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD
						, A.FULL_SCAN_DECIDE_DIV_CD
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
				FROM (
					SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT 
						, NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
						, NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
						, NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) ROWS_PROCESSED_THRESHOLD
						, NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
					FROM (
						SELECT /*+ LEADING(A B C D E F G H) USE_HASH(B) USE_NL(C D E F G H) */
							A.PERF_CHECK_ID
							, I.DBID                --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, C.PROGRAM_ID
							, D.PROGRAM_NM
							, B.PERF_CHECK_STEP_ID
							, C.EXCEPTION_PRC_METH_CD
							, D.DBIO
							, A.DEPLOY_COMPLETE_DT 
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
						FROM DEPLOY_PERF_CHK A
							-- 업무별 최종 단계
							, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
								FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
									, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
										FROM WRKJOB_CD
										WHERE USE_YN = 'Y'
										START WITH UPPER_WRKJOB_CD IS NULL
										CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
								WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
								AND A.DEL_YN(+) = 'N'
								GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
							, DEPLOY_PERF_CHK_TARGET_PGM C
							, DEPLOY_PERF_CHK_ALL_PGM D
							, WJ_PERF_CHK_INDC E
							, WRKJOB_DB H      --> 20200608
							, DATABASE I       --> 20200608
						WHERE A.WRKJOB_CD = B.WRKJOB_CD
						AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
						AND C.PROGRAM_ID = D.PROGRAM_ID
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
						AND H.DBID = I.DBID             --> 20200608
						AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  --> 20200902
						AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
						AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5)  -- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
						AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'     -- S: SQL
						AND C.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
						
						/* 날짜 검색 */
						AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
						AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
						
						/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
						<if test="wrkjob_cd != null and wrkjob_cd != ''">
							AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
													FROM WRKJOB_CD
													START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
													CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
						</if>
						<choose>
							<when test="selectSearchType eq '00' or selectSearchType eq '02'">
								/* 예외 처리 SQL 조회 */
								AND 1 = 1   --> 20200612
							</when>
							<when test="selectSearchType eq '01'">
								/* 성능 점검 SQL 조회 */
								AND 1 = 0   --> 20200612
							</when>
						</choose>
						GROUP BY A.PERF_CHECK_ID
							, I.DBID               --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, C.PROGRAM_ID
							, D.PROGRAM_NM
							, B.PERF_CHECK_STEP_ID
							, C.EXCEPTION_PRC_METH_CD
							, D.DBIO
							, A.DEPLOY_COMPLETE_DT 
						) A
						-- 성능점검 예외 지표
						,( 
							SELECT B.PROGRAM_ID
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
								, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
							FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
								, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
								, (SELECT F.PERF_CHECK_INDC_ID
									FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
										, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
										, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
									WHERE A.WRKJOB_CD = E.WRKJOB_CD
									AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
									AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  --> 20200902
									AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
									AND E.INDC_APPLY_YN = 'Y'
									AND F.INDC_USE_YN = 'Y'
									AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5)  -- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
									/* 날짜 검색 */
									AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
									
									/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
									<if test="wrkjob_cd != null and wrkjob_cd != ''">
										AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																FROM WRKJOB_CD
																START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
																CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
									</if>
									<choose>
										<when test="selectSearchType eq '00' or selectSearchType eq '02'">
											/* 예외 처리 SQL 조회 */
											AND 1 = 1   --> 20200612
										</when>
										<when test="selectSearchType eq '01'">
											/* 성능 점검 SQL 조회 */
											AND 1 = 0   --> 20200612
										</when>
									</choose>
								
								) C
							WHERE A.EXCEPTION_PRC_METH_CD = '1'
							AND A.EXCEPTION_PRC_STATUS_CD = '2'
							AND B.DEL_YN = 'N'
							AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
							AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
							GROUP BY B.PROGRAM_ID
						) B
					WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
					) A
				) A
				, VSQL_TEXT B
				, VSQL_STATS C
			WHERE 1 = 1
			AND A.DBID = B.DBID
			AND A.DBIO = B.DBIO
			AND B.DBID = C.DBID
			AND B.SQL_ID = C.SQL_ID
			AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			AND A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			
			/* 검색조건 */
			
		)
		,
		-- 예외처리 SQL#2
		TMP_DEPLOY_EXCEPT_SQL AS
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DBIO                   -- SQL식별자(DBIO)
				, A.PROGRAM_NM             -- 프로그램
				, A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.DEPLOY_COMPLETE_DT   -- 배포일자
				, A.AFTER_PRD_SQL_ID
				, A.AFTER_PRD_PLAN_HASH_VALUE 
				, A.BEFORE_PRD_SQL_ID
				, A.BEFORE_PRD_PLAN_HASH_VALUE
				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				, A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				, A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				, A.AFTER_EXECUTIONS                -- 운영 수행횟수
				, A.BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, A.BEFORE_PRD_ELAPSED_TIME
				, A.BEFORE_PRD_BUFFER_GETS
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, 'Y' AS EXCEPT_YN   -- 예외여부
				, (CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> AFTER_PRD_BUFFER_GETS
						OR (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
						OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N') ) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부
				, (CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> BEFORE_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> BEFORE_PRD_BUFFER_GETS
						OR (  (FULL_SCAN_DECIDE_DIV_CD = '2' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
						OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'N') ) THEN 'Y' ELSE 'N' END) BEFORE_FAIL_YN  -- 이전 부적합 여부 
				, (CASE WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN '0.1XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >  0.1 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN '0.3XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 0.3 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN '1XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 1   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN '3XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 3   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN '10XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 10  AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN '60XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 60                             THEN '60XMT'
					END) ELAPSED_TIME_METIRC   -- 수행시간 구간 메트릭스
			FROM TMP_DEPLOY_EXCEPT_SQL_BASE A
			WHERE MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
--		SELECT A.*
--		FROM (
--				SELECT ROWNUM NO -- NO
--					, A.*
--				FROM (
						SELECT /*+ LEADING(A) USE_HASH(B) */
							A.DBIO                       -- SQL식별자(DBIO)
							, A.PROGRAM_NM                 -- 프로그램
							, A.AFTER_PRD_SQL_ID           -- SQL_ID
							, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
							, A.PRD_PLAN_CHANGE_YN         -- PLAN 변경 여부
							, A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
							, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
							, DECODE(B.ELAPSED_TIME_ACTIVITY, 0, 0.0001, B.ELAPSED_TIME_ACTIVITY) AS ELAPSED_TIME_ACTIVITY      -- 수행시간 Activity(%)
							, A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
							, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
							, DECODE(B.BUFFER_GETS_ACTIVITY, 0, 0.0001, B.BUFFER_GETS_ACTIVITY) AS BUFFER_GETS_ACTIVITY       -- 블럭수 Activity(%)
							, A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
							, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
							, A.AFTER_EXECUTIONS           -- 운영 수행횟수
							, A.EXCEPT_YN                  -- 예외여부
							, SUBSTR(CD.CD_NM, 1, 2) EXCEPTION_PRC_METH_NM                                                    -- 예외 방법(한시, 영구)
							, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
							, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
							, A.PROGRAM_EXEC_DT            -- 성능점검일자
							, A.DEPLOY_COMPLETE_DT         -- 배포일자
							, A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
							, A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
							, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
							, A.TEST_SQL_ID                -- 배포 SQL_ID
							, A.TEST_PLAN_HASH_VALUE       -- 배포 PLAN_HASH_VALUE
							, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
							, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
							, A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
							, A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_BUFFER_GETS_INCREASE_RATIO 
								END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 운영 블럭 증감율
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_ELAP_TIME_INCREASE_RATIO 
								END) PRD_ELAP_TIME_INCREASE_RATIO    -- 운영 수행시간 증감율
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_ROWS_PROC_INCREASE_RATIO 
								END) PRD_ROWS_PROC_INCREASE_RATIO    -- 운영 처리건수 증감율
							, A.WRKJOB_CD                  -- 업무코드
							, A.TOP_WRKJOB_CD              -- 최상위 업무코드
							, A.DBID                       -- DBID
							, A.PROGRAM_ID                 -- PROGRAM_ID
							, A.PERF_CHECK_ID              -- 성능점검ID
							, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
							, A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
						FROM (
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									, A.PROGRAM_NM                 -- 프로그램
									, A.AFTER_PRD_SQL_ID           -- SQL_ID
									, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									, A.PRD_PLAN_CHANGE_YN         -- PLAN 변경 여부
									, A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
									, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									, A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
									, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									, A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
									, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									, A.AFTER_EXECUTIONS           -- 운영 수행횟수
									, A.EXCEPT_YN                  -- 예외여부
									, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									, TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD') PROGRAM_EXEC_DT       -- 성능점검일시
									, TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									, A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
									, NULL ELAPSED_TIME_METIRC     -- 수행시간 구간 메트릭스
									, A.PROGRAM_ID                 -- 프로그램 ID
									, A.PERF_CHECK_ID              -- 성능점검ID
									, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									, A.TEST_SQL_ID                -- 배포 SQL_ID
									, A.TEST_PLAN_HASH_VALUE       -- 배포 PLAN_HASH_VALUE
									, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									, A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
									, A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
									, TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO, 'FM999999999999990.99') PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									, TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO, 'FM999999999999990.99') PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									, TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO, 'FM999999999999990.99') PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									, A.WRKJOB_CD                  -- 업무코드
									, A.TOP_WRKJOB_CD              -- 최상위 업무코드
									, A.DBID                       -- DBID
									, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									, A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
								FROM TMP_DEPLOY_PERF_SQL A
								UNION ALL
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									, A.PROGRAM_NM                 -- 프로그램
									, A.AFTER_PRD_SQL_ID           -- SQL_ID
									, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									, 'N' PRD_PLAN_CHANGE_YN       -- PLAN 변경 여부
									, NULL TEST_ELAPSED_TIME       -- 배포 평균  수행시간
									, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									, NULL TEST_BUFFER_GETS        -- 배포 평균 블럭수
									, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									, NULL TEST_ROWS_PROCESSED     -- 배포 평균  처리건수
									, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									, A.AFTER_EXECUTIONS           -- 운영 수행횟수
									, A.EXCEPT_YN                  -- 예외여부
									, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									, NULL PROGRAM_EXEC_DT         -- 성능점검일시
									, TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									, NULL PERF_REGRESSED_METRIC   -- 성능저하 율 메트릭스
									, A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
									, A.PROGRAM_ID                 -- 프로그램 ID
									, A.PERF_CHECK_ID              -- 성능점검ID
									, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									, NULL TEST_SQL_ID             -- 배포 SQL_ID
									, NULL TEST_PLAN_HASH_VALUE    -- 배포 PLAN_HASH_VALUE
									, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									, NULL ELAPSED_TIME_REGRESS_YN -- 수행시간 성능저하
									, NULL BUFFER_GETS_REGRESS_YN  -- 블럭수 성능저하  
									, NULL PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									, NULL PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									, NULL PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									, A.WRKJOB_CD                  -- 업무코드
									, A.TOP_WRKJOB_CD              -- 최상위 업무코드
									, A.DBID                       -- DBID
									, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									, NULL PROGRAM_EXECUTE_TMS     -- 성능점검 수행회차
								FROM TMP_DEPLOY_EXCEPT_SQL A
							) A LEFT OUTER JOIN (SELECT GRP_CD_ID,CD,CD_NM FROM CD WHERE GRP_CD_ID = '1061') CD
                                ON A.EXCEPTION_PRC_METH_CD = CD.CD
							, (
								/* ACTIVITY */
								SELECT DBID
									, SQL_ID
									, PLAN_HASH_VALUE
									, ROUND((RATIO_TO_REPORT(SUM(ELAPSED_TIME)) OVER())* 100, 4) AS ELAPSED_TIME_ACTIVITY
									, ROUND((RATIO_TO_REPORT(SUM(BUFFER_GETS)) OVER()) * 100, 4) AS BUFFER_GETS_ACTIVITY
								FROM VSQL_STATS A
								WHERE LAST_ACTIVE_TIME >= TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
								GROUP BY DBID, SQL_ID, PLAN_HASH_VALUE
							) B
						WHERE A.DBID = B.DBID
						AND A.AFTER_PRD_SQL_ID = B.SQL_ID
						AND A.AFTER_PRD_PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
						
						/* 부적합 */
						<if test='after_fail_yn_condition != null and after_fail_yn_condition != ""'>
							AND A.AFTER_FAIL_YN = #{after_fail_yn_condition}
						</if>
						
						/* 성능저하 - 수행시간 */
						/* 성능저하 - 블럭수  */
						<if test='selectSearchType != null and selectSearchType != ""'>
							<choose>
								<when test='selectSearchType eq "01".toString() and is_regress eq "Y"'>
									/* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
									AND A.BUFFER_GETS_REGRESS_YN = 'Y'
								</when>
								<when test='selectSearchType eq "01".toString() and is_regress eq "N"'>
									/* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
									AND A.BUFFER_GETS_REGRESS_YN = 'N'
								</when>
<!-- 								<when test='selectSearchType eq "02".toString() and (selectSqlPerfTrace != null and selectSqlPerfTrace != "") '> -->
<!-- 									/* 성능저하 - 수행시간 */ -->
<!-- 									AND A.ELAPSED_TIME_REGRESS_YN = 'Y' -->
<!-- 								</when> -->
							</choose>
						</if>
						
						/* 성능점검SQL - 콤보 */
						<if test='selectPerfRegressedMetric != null and selectPerfRegressedMetric != ""'>
							AND A.PERF_REGRESSED_METRIC = #{selectPerfRegressedMetric}
						</if>
						
						/* 예외처리방법 : 예외처리SQL 탭에서 전달받은경우*/
						<if test='selectSqlPerfTrace != null and selectSqlPerfTrace != ""'>
--							AND A.EXCEPTION_PRC_METH_CD = '2'
							AND A.EXCEPTION_PRC_METH_CD = #{selectSqlPerfTrace}
						</if>
						
						/* 예외처리SQL - 콤보 */
						<if test='selectElapsedTimeMetirc != null and selectElapsedTimeMetirc != ""'>
							AND A.ELAPSED_TIME_METIRC = #{selectElapsedTimeMetirc}
						</if>
						
						/* SQL_ID */
						<if test='strSqlId != null and strSqlId != ""'>
							AND A.AFTER_PRD_SQL_ID = #{strSqlId} 
						</if>
						
						/* SQL식별자 */
						<if test='strDbio != null and strDbio != ""'>
							AND A.DBIO = #{strDbio}
						</if>
						
						ORDER BY B.ELAPSED_TIME_ACTIVITY DESC
--					) A
--				WHERE ROWNUM <![CDATA[<]]>= (${pagePerCount} * ${currentPage} + 1)
--			) A
--		WHERE NO > ${pagePerCount} * (${currentPage} - 1)
	</select>
	
	
	<select id="excelDown" parameterType="sqls" resultType="java.util.LinkedHashMap">
		/* SqlsDao.laodSqlsRefId */
		WITH 
		-- 대용량 기준건수 
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
						, DATABASE DB
					WHERE PREF_ID IN (12004)) A
				, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
							WHERE PREF_ID IN (12004)
						)
					WHERE PREF_SEQ = MAX_PREF_SEQ
					) B
			WHERE A.DBID = B.DBID(+)
			AND A.PREF_ID = B.PREF_ID(+)
		)	
		,-- 성능점검 SQL ALL : 검색기간내에 배포된 최종 프로그램 목록(정상, 예외포함)  : 20210311
        TMP_DEPLOY_PERF_SQL_ALL AS
        (
            SELECT PERF_CHECK_ID
                 , WRKJOB_CD
                 , PROGRAM_ID
                 , PROGRAM_NM
                 , DBIO
                 , DEPLOY_COMPLETE_DT
                 , EXCEPTION_PRC_METH_CD    /* 2:영구, 3:한시 */
              FROM (
                    SELECT /*+ LEADING(A C D) USE_NL(C D) */       
                            A.PERF_CHECK_ID
                            , A.WRKJOB_CD 
                            , C.PROGRAM_ID
                            , D.PROGRAM_NM
                            , C.EXCEPTION_PRC_METH_CD
                            , D.DBIO
                            , A.DEPLOY_COMPLETE_DT 
                            , ROW_NUMBER() OVER(PARTITION BY C.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
                        FROM DEPLOY_PERF_CHK A
                            , DEPLOY_PERF_CHK_TARGET_PGM C
                            , DEPLOY_PERF_CHK_ALL_PGM D
                        WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID
                        AND C.PROGRAM_ID = D.PROGRAM_ID
                        AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  --> 20200902
                        
						/* 날짜 검색 */
						AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
						AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                     )
             WHERE LAST_PROGRAM_NUM = 1
        )
        ,-- 지표예외 전체 : 20210311
        TMP_DEPLOY_PERF_EXPT_INDC_ALL AS
        (
            SELECT B.PROGRAM_ID
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
                , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD    -- JMG : 20210129
              FROM (
                    SELECT B.PROGRAM_ID, B.PERF_CHECK_INDC_ID, B.PASS_MAX_VALUE, B.YN_DECIDE_DIV_CD
                         , ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
                    FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
                        , DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
                        , TMP_DEPLOY_PERF_SQL_ALL C
                    WHERE A.EXCEPTION_PRC_METH_CD = '1'
                    AND A.EXCEPTION_PRC_STATUS_CD = '2'
                    AND B.DEL_YN = 'N'
                    AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
                    AND A.PROGRAM_ID = C.PROGRAM_ID
                   ) B
            WHERE LAST_EXCEPT_INDC_NUM = 1 -- 여러개의 예외처리한지표중 최종 예외처리지표 
            GROUP BY B.PROGRAM_ID
        )        
		,-- 성능점검 SQL#1
		TMP_DEPLOY_PERF_SQL_BASE AS 
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.DBIO
				, A.PROGRAM_ID
				, A.PROGRAM_NM
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				, A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
				, A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
				, A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
				, A.FULL_SCAN_APPLY_YN       -- JMG : 20210129
				, A.PARTITION_APPLY_YN       -- JMG : 20210129  
				, A.ELAPSED_TIME_USE_YN    -- JMG : 20210129
				, A.BUFFER_GETS_USE_YN     -- JMG : 20210129
				, A.ROWS_PROCESSED_USE_YN  -- JMG : 20210129
				, A.FULL_SCAN_USE_YN        -- JMG : 20210129
				, A.PARTITION_USE_YN       -- JMG : 20210129  				
				, A.TEST_ELAPSED_TIME
				, A.TEST_BUFFER_GETS
				, A.TEST_ROWS_PROCESSED
				, A.TEST_FULL_SCAN_YN
				, A.TEST_SQL_ID
				, A.TEST_PLAN_HASH_VALUE
				, A.DEPLOY_COMPLETE_DT 
				, A.PROGRAM_EXEC_DT
				, B.SQL_ID AFTER_PRD_SQL_ID
				, B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				, FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				, FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_BIG_TAB_FULLSCAN_YN -- JMG : 20210129
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_PART_ACCESS_ALL_YN -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ELAPSED_TIME -- JMG : 20210129
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'))) BEFORE_PRD_BUFFER_GETS  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ROWS_PROCESSED -- JMG : 20210129
				, (CASE WHEN A.TEST_PLAN_HASH_VALUE <![CDATA[<]]>> B.PLAN_HASH_VALUE THEN 'Y' ELSE 'N' END) PRD_PLAN_CHANGE_YN
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, A.PROGRAM_EXECUTE_TMS
				, A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
				, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
				, C.INST_ID
			FROM (SELECT /*+ LEADNG(A) USE_HASH(B) */
						A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_EXECUTE_TMS
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.TEST_SQL_ID
						, A.TEST_PLAN_HASH_VALUE
						, A.DEPLOY_COMPLETE_DT 
						, A.PROGRAM_EXEC_DT
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD
						, A.FULL_SCAN_DECIDE_DIV_CD
						, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						, A.TEST_ELAPSED_TIME
						, A.TEST_BUFFER_GETS
						, A.TEST_ROWS_PROCESSED
						, A.TEST_FULL_SCAN_YN
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
						, A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
						, A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
						, A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
						, A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
						, A.FULL_SCAN_APPLY_YN        -- JMG : 20210129
						, A.PARTITION_APPLY_YN       -- JMG : 20210129  
						, A.ELAPSED_TIME_USE_YN    -- JMG : 20210129
						, A.BUFFER_GETS_USE_YN     -- JMG : 20210129
						, A.ROWS_PROCESSED_USE_YN  -- JMG : 20210129
						, A.FULL_SCAN_USE_YN        -- JMG : 20210129
						, A.PARTITION_USE_YN       -- JMG : 20210129						
					FROM (SELECT /*+ LEADING(A B C D E F G H) USE_HASH(B) USE_NL(C D E F G H) */
								A.PERF_CHECK_ID
								, I.DBID                 --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, A.PROGRAM_ID
								, A.PROGRAM_NM
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, A.EXCEPTION_PRC_METH_CD
								, A.DBIO
								, G.SQL_ID TEST_SQL_ID
								, G.PLAN_HASH_VALUE TEST_PLAN_HASH_VALUE
								, A.DEPLOY_COMPLETE_DT 
								, E.PROGRAM_EXEC_DT
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN F.INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN F.INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN F.INDC_PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.INDC_YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD       -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ROWS_PROCESSED
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.EXEC_RESULT_VALUE END) AS TEST_PARTITION_SCAN_YN           -- JMG : 20210129
								, COUNT(F.PERF_CHECK_INDC_ID) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN J.INDC_APPLY_YN  END) AS ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN J.INDC_APPLY_YN END) AS BUFFER_GETS_APPLY_YN     -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN J.INDC_APPLY_YN END) AS ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN J.INDC_APPLY_YN END) AS FULL_SCAN_APPLY_YN        -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN J.INDC_APPLY_YN END) AS PARTITION_APPLY_YN       -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN K.INDC_USE_YN   END) AS ELAPSED_TIME_USE_YN    -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN K.INDC_USE_YN   END) AS BUFFER_GETS_USE_YN     -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN K.INDC_USE_YN   END) AS ROWS_PROCESSED_USE_YN  -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN K.INDC_USE_YN   END) AS FULL_SCAN_USE_YN        -- JMG : 20210129
								, MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN K.INDC_USE_YN   END) AS PARTITION_USE_YN       -- JMG : 20210129
							FROM TMP_DEPLOY_PERF_SQL_ALL A
								-- 업무별 최종 단계
								, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
									FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
										, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
												FROM WRKJOB_CD
												WHERE USE_YN = 'Y'
												START WITH UPPER_WRKJOB_CD IS NULL
												CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									AND A.DEL_YN(+) = 'N'
									GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
								, DEPLOY_PERF_CHK_RESULT E
								, DEPLOY_PERF_CHK_DETAIL_RESULT F
								, DEPLOY_PERF_SQL_STAT G
								, WRKJOB_DB H  --> 20200608
								, DATABASE I   --> 20200608
								, WJ_PERF_CHK_INDC J  -- 업무별성능점검지표내역 -- JMG : 20210129
								, DEPLOY_PERF_CHK_INDC K  -- 배포성능점검지표기본 -- JMG : 20210129
							WHERE A.WRKJOB_CD = B.WRKJOB_CD
							AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							AND A.PROGRAM_ID = E.PROGRAM_ID
							AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = F.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							AND E.PERF_CHECK_ID = G.PERF_CHECK_ID
							AND E.PERF_CHECK_STEP_ID = G.PERF_CHECK_STEP_ID
							AND E.PROGRAM_ID = G.PROGRAM_ID
							AND E.PROGRAM_EXECUTE_TMS = G.PROGRAM_EXECUTE_TMS
							AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
							AND H.DBID = I.DBID             --> 20200608
							AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
							AND A.WRKJOB_CD = J.WRKJOB_CD                    -- JMG : 20210129
							AND F.PERF_CHECK_INDC_ID = J.PERF_CHECK_INDC_ID  -- JMG : 20210129
							AND J.PERF_CHECK_PROGRAM_DIV_CD = 'S'            -- JMG : 20210129
							AND J.PERF_CHECK_INDC_ID = K.PERF_CHECK_INDC_ID  -- JMG : 20210129
							-- 1:SQL수행시간(초), 2:블럭수, 3: 처리건수, 5:대용량 테이블 Full Scan 여부, 6: 대용량 테이블 Full Scan 여부
							AND F.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
							AND F.PERF_CHECK_RESULT_DIV_CD <![CDATA[<]]>> 'C'
							
							AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL
							
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
								AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														FROM WRKJOB_CD
														START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							<choose>
								<when test="selectSearchType eq '00' or selectSearchType eq '01'">
									/* 성능 점검 SQL 조회 */
									AND 1 = 1   --> 20200612
								</when>
								<when test="selectSearchType eq '02'">
									/* 예외 처리 SQL 조회 */
									AND 1 = 0   --> 20200612
								</when>
							</choose>
							GROUP BY A.PERF_CHECK_ID
								, I.DBID     --> 20200608 B.DBID
								, B.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, B.WRKJOB_LVL
								, A.PROGRAM_ID
								, A.PROGRAM_NM
								, B.PERF_CHECK_STEP_ID
								, E.PROGRAM_EXECUTE_TMS
								, A.EXCEPTION_PRC_METH_CD
								, A.DBIO
								, G.SQL_ID
								, G.PLAN_HASH_VALUE
								, A.DEPLOY_COMPLETE_DT 
								, E.PROGRAM_EXEC_DT
						) A
					WHERE 1 = 1
					-- 최종회차
					AND A.PROGRAM_EXECUTE_TMS = (SELECT MAX(PROGRAM_EXECUTE_TMS)
													FROM DEPLOY_PERF_CHK_RESULT S
													WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
													AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
													AND S.PROGRAM_ID = A.PROGRAM_ID)
					-- 성능지표가 정상적으로 저장된 경우만 체크
					--AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4  -- JMG : 20210129
				) A
				, VSQL_TEXT B
				, VSQL_STATS C
			WHERE 1 = 1
			AND A.DBID = B.DBID
			AND A.DBIO = B.DBIO
			AND B.DBID = C.DBID
			AND B.SQL_ID = C.SQL_ID
			AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			--AND A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			
			/* 검색조건 */
			
		) ,
		-- 성능점검 SQL#2
		TMP_DEPLOY_PERF_SQL AS
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DBIO                   -- SQL식별자(DBIO)
				, A.PROGRAM_NM             -- 프로그램
				, A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.TEST_ELAPSED_TIME         -- 배포성능점검 수행시간
				, A.TEST_BUFFER_GETS          -- 배포성능점검 블럭수
				, A.TEST_ROWS_PROCESSED       -- 배포성능점검 처리건수
				, A.TEST_FULL_SCAN_YN
				, A.TEST_SQL_ID
				, A.TEST_PLAN_HASH_VALUE
				, A.DEPLOY_COMPLETE_DT   -- 배포일자
				, A.PROGRAM_EXEC_DT      -- 성능점검일시
				, A.AFTER_PRD_SQL_ID
				, A.AFTER_PRD_PLAN_HASH_VALUE
				, A.BEFORE_PRD_SQL_ID
				, A.BEFORE_PRD_PLAN_HASH_VALUE
				, A.PRD_PLAN_CHANGE_YN
				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, A.AFTER_PRD_PART_ACCESS_ALL_YN    -- JMG : 20210129
				, A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				, A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				, A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				, A.AFTER_EXECUTIONS                -- 운영 수행횟수
				, A.BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, A.BEFORE_PRD_PART_ACCESS_ALL_YN   -- JMG : 20210129
				, A.BEFORE_PRD_ELAPSED_TIME
				, A.BEFORE_PRD_BUFFER_GETS
				, A.BEFORE_PRD_ROWS_PROCESSED        -- 이전 운영 처리건수 , JMG : 20201203
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, A.PROGRAM_EXECUTE_TMS
				--, (CASE WHEN C.PROGRAM_ID IS NULL THEN 'N' ELSE 'Y' END) AS EXCEPT_YN   -- 예외여부 : 20210311
				, 'N' AS EXCEPT_YN
				, (CASE WHEN TEST_ELAPSED_TIME <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME THEN 'Y' ELSE 'N' END) AS ELAPSED_TIME_REGRESS_YN  -- 수행시간 성능저하
				, (CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> AFTER_PRD_BUFFER_GETS THEN 'Y' ELSE 'N' END) AS BUFFER_GETS_REGRESS_YN      -- 블럭수 성능저하
				, (CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND AFTER_PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부,  JMG : 20210129
				, (CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (BEFORE_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> BEFORE_PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND BEFORE_PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'N'))) 
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 'Y' ELSE 'N' END) BEFORE_FAIL_YN  -- 이전 부적합 여부,  JMG : 20210129
				, (CASE WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >  1   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 2   THEN '2XLT'   -- less then 2X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 2   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 5   THEN '5XLT'   -- less then 5X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 5   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 10  THEN '10XLT'  -- less then 10X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 10  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 30  THEN '30XLT'  -- less then 30X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 30  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 50  THEN '50XLT'  -- less then 50X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 50  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 100 THEN '100XLT' -- less then 100X
						WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 100                                                    THEN '100XMT' -- more then 100X
					END) PERF_REGRESSED_METRIC -- 성능저하 율
				, (CASE WHEN AFTER_PRD_BUFFER_GETS > TEST_BUFFER_GETS THEN ROUND(-AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) , 2)
						WHEN AFTER_PRD_BUFFER_GETS <![CDATA[<]]>= TEST_BUFFER_GETS THEN ROUND(TEST_BUFFER_GETS/DECODE(AFTER_PRD_BUFFER_GETS, 0, 1, AFTER_PRD_BUFFER_GETS), 2)
					END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 블럭수 증감율
				, (CASE WHEN AFTER_PRD_ELAPSED_TIME > TEST_ELAPSED_TIME THEN ROUND(-AFTER_PRD_ELAPSED_TIME/DECODE(TEST_ELAPSED_TIME, 0, 1, TEST_ELAPSED_TIME), 2)
						WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]>= TEST_ELAPSED_TIME THEN ROUND(TEST_ELAPSED_TIME/DECODE(AFTER_PRD_ELAPSED_TIME, 0, 1, AFTER_PRD_ELAPSED_TIME), 2)
					END) PRD_ELAP_TIME_INCREASE_RATIO    -- 수행시간 증감율
				, (CASE WHEN AFTER_PRD_ROWS_PROCESSED > TEST_ROWS_PROCESSED THEN ROUND(-AFTER_PRD_ROWS_PROCESSED/DECODE(TEST_ROWS_PROCESSED, 0, 1, TEST_ROWS_PROCESSED), 2)
						WHEN AFTER_PRD_ROWS_PROCESSED <![CDATA[<]]>= TEST_ROWS_PROCESSED THEN ROUND(TEST_ROWS_PROCESSED/DECODE(AFTER_PRD_ROWS_PROCESSED, 0, 1, AFTER_PRD_ROWS_PROCESSED), 2)
					END) PRD_ROWS_PROC_INCREASE_RATIO    -- 처리건수 증감율
			FROM TMP_DEPLOY_PERF_SQL_BASE A, TMP_BIG_TABLE_BASE B
				, (SELECT PROGRAM_ID FROM TMP_DEPLOY_PERF_EXPT_INDC_ALL) C -- 20210311
			WHERE A.DBID = B.DBID
			AND A.PROGRAM_ID = C.PROGRAM_ID(+) -- 20210311
			AND A.MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		,
		-- 예외처리 SQL#1
		TMP_DEPLOY_EXCEPT_SQL_BASE AS 
		(
			SELECT A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.DBID
				, A.DBIO
				, A.PROGRAM_ID
				, A.PROGRAM_NM
				, A.EXCEPTION_PRC_METH_CD
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				, A.DEPLOY_COMPLETE_DT 
				, B.SQL_ID AFTER_PRD_SQL_ID
				, B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				, FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				, FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
								, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_BIG_TAB_FULLSCAN_YN  -- JMG : 20210129
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_PART_ACCESS_ALL_YN  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ELAPSED_TIME  -- JMG : 20210129
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')), 0, 1,
					FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'))) BEFORE_PRD_BUFFER_GETS -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'BEFORE', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE')) BEFORE_PRD_ROWS_PROCESSED  -- JMG : 20210129
				, PERF_CHECK_ID
				, PERF_CHECK_STEP_ID
				, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
			FROM (
				SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT 
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD
						, A.FULL_SCAN_DECIDE_DIV_CD
						, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
				FROM (
					SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.PROGRAM_NM
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT

						-- 영구(2)예외인경우 업무별 기준지표, 한시(3)예외인 경우 SQL별 지표(예외지표 적용) : 20210311
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.ELAPSED_TIME_THRESHOLD ELSE NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) END) ELAPSED_TIME_THRESHOLD
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.BUFFER_GETS_THRESHOLD ELSE NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) END) BUFFER_GETS_THRESHOLD
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.ROWS_PROCESSED_THRESHOLD ELSE NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) END) ROWS_PROCESSED_THRESHOLD
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.FULL_SCAN_DECIDE_DIV_CD ELSE NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) END) FULL_SCAN_DECIDE_DIV_CD
						, (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.PARTITION_DECIDE_DIV_CD ELSE NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) END) PARTITION_DECIDE_DIV_CD

						--, NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
						--, NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
						--, NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) ROWS_PROCESSED_THRESHOLD
						--, NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
						--, NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
					FROM (
						SELECT /*+ LEADING(A B E F G H) USE_HASH(B) USE_NL(E F G H) */
							A.PERF_CHECK_ID
							, I.DBID                --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, A.PROGRAM_ID
							, A.PROGRAM_NM
							, B.PERF_CHECK_STEP_ID
							, A.EXCEPTION_PRC_METH_CD
							, A.DBIO
							, A.DEPLOY_COMPLETE_DT 
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
							, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						FROM TMP_DEPLOY_PERF_SQL_ALL A
							-- 업무별 최종 단계
							, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
								FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
									, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
										FROM WRKJOB_CD
										WHERE USE_YN = 'Y'
										START WITH UPPER_WRKJOB_CD IS NULL
										CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
								WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
								AND A.DEL_YN(+) = 'N'
								GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
							, WJ_PERF_CHK_INDC E
							, WRKJOB_DB H      --> 20200608
							, DATABASE I       --> 20200608
						WHERE A.WRKJOB_CD = B.WRKJOB_CD
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
						AND H.DBID = I.DBID             --> 20200608
						AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
						-- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
						AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
						AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'     -- S: SQL
						AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
						
						/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
						<if test="wrkjob_cd != null and wrkjob_cd != ''">
							AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
													FROM WRKJOB_CD
													START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
													CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
						</if>
						<choose>
							<when test="selectSearchType eq '00' or selectSearchType eq '02'">
								/* 예외 처리 SQL 조회 */
								AND 1 = 1   --> 20200612
							</when>
							<when test="selectSearchType eq '01'">
								/* 성능 점검 SQL 조회 */
								AND 1 = 0   --> 20200612
							</when>
						</choose>
						GROUP BY A.PERF_CHECK_ID
							, I.DBID               --> 20200608 B.DBID
							, B.TOP_WRKJOB_CD
							, A.WRKJOB_CD 
							, B.WRKJOB_LVL
							, A.PROGRAM_ID
							, A.PROGRAM_NM
							, B.PERF_CHECK_STEP_ID
							, A.EXCEPTION_PRC_METH_CD
							, A.DBIO
							, A.DEPLOY_COMPLETE_DT 
						) A
						, TMP_DEPLOY_PERF_EXPT_INDC_ALL B -- 성능점검 예외 지표 : 20210311
					WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
					) A
				) A
				, VSQL_TEXT B
				, VSQL_STATS C
			WHERE 1 = 1
			AND A.DBID = B.DBID
			AND A.DBIO = B.DBIO
			AND B.DBID = C.DBID
			AND B.SQL_ID = C.SQL_ID
			AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			--AND A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
			
			/* 검색조건 */
			
		)
		,
		-- 예외처리 SQL#2
		TMP_DEPLOY_EXCEPT_SQL AS
		(
			SELECT A.DBID
				, A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.DBIO                   -- SQL식별자(DBIO)
				, A.PROGRAM_NM             -- 프로그램
				, A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				, B.CD_NM AS EXCEPTION_PRC_METH_NM -- 예외처리방법명, JMG : 20200119
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.DEPLOY_COMPLETE_DT   -- 배포일자
				, A.AFTER_PRD_SQL_ID
				, A.AFTER_PRD_PLAN_HASH_VALUE 
				, A.BEFORE_PRD_SQL_ID
				, A.BEFORE_PRD_PLAN_HASH_VALUE
				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				, A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				, A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				, A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				, A.AFTER_EXECUTIONS                -- 운영 수행횟수
				, A.BEFORE_PRD_BIG_TAB_FULLSCAN_YN
				, A.BEFORE_PRD_PART_ACCESS_ALL_YN    -- JMG : 20210129
				, A.BEFORE_PRD_ELAPSED_TIME
				, A.BEFORE_PRD_BUFFER_GETS
				, A.BEFORE_PRD_ROWS_PROCESSED        -- 이전 운영 처리건수, JMG : 20201203
				, A.PERF_CHECK_ID
				, A.PERF_CHECK_STEP_ID
				, 'Y' AS EXCEPT_YN   -- 예외여부
				, (CASE WHEN ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_BUFFER_GETS
						OR (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED))
						OR (AFTER_PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N')) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부 -- JMG : 20210129
				, (CASE WHEN ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_ELAPSED_TIME
						OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  BEFORE_PRD_BUFFER_GETS
						OR (ROWS_PROCESSED_THRESHOLD > 0 AND (BEFORE_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> BEFORE_PRD_ROWS_PROCESSED))
						OR (BEFORE_PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND BEFORE_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						OR ((PARTITION_DECIDE_DIV_CD = '2' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND BEFORE_PRD_PART_ACCESS_ALL_YN = 'N')) THEN 'Y' ELSE 'N' END) BEFORE_FAIL_YN  -- 이전 부적합 여부  -- JMG : 20210129
				, (CASE WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN '0.1XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >  0.1 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN '0.3XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 0.3 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN '1XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 1   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN '3XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 3   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN '10XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 10  AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN '60XLT'
						WHEN AFTER_PRD_ELAPSED_TIME >= 60                             THEN '60XMT'
					END) ELAPSED_TIME_METIRC   -- 수행시간 구간 메트릭스
			FROM TMP_DEPLOY_EXCEPT_SQL_BASE A
				, CD B
				, TMP_BIG_TABLE_BASE C
			WHERE A.EXCEPTION_PRC_METH_CD = B.CD
			AND B.GRP_CD_ID = '1061'
			AND A.DBID = C.DBID
			AND MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
				SELECT ROWNUM NO -- NO
					, A.*
				FROM (
						SELECT /*+ LEADING(A) USE_HASH(B) */
							A.DBIO                       -- SQL식별자(DBIO)
							, A.PROGRAM_NM                 -- 프로그램
							, A.AFTER_PRD_SQL_ID           -- SQL_ID
							, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
							, A.PRD_PLAN_CHANGE_YN         -- PLAN 변경 여부
							, A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
							, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
							, DECODE(B.ELAPSED_TIME_ACTIVITY, 0, 0.0001, B.ELAPSED_TIME_ACTIVITY) AS ELAPSED_TIME_ACTIVITY      -- 수행시간 Activity(%)
							, A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
							, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
							, DECODE(B.BUFFER_GETS_ACTIVITY, 0, 0.0001, B.BUFFER_GETS_ACTIVITY) AS BUFFER_GETS_ACTIVITY       -- 블럭수 Activity(%)
							, A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
							, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
							, A.AFTER_EXECUTIONS           -- 운영 수행횟수
							, A.EXCEPT_YN                  -- 예외여부
							, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
							, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
							, A.PROGRAM_EXEC_DT            -- 성능점검일자
							, A.DEPLOY_COMPLETE_DT         -- 배포일자
							, A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
							, A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
							, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
							, A.TEST_SQL_ID                -- 배포 SQL_ID
							, A.TEST_PLAN_HASH_VALUE       -- 배포 PLAN_HASH_VALUE
							, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
							, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
							, A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
							, A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_BUFFER_GETS_INCREASE_RATIO 
								END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 운영 블럭 증감율
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_ELAP_TIME_INCREASE_RATIO 
								END) PRD_ELAP_TIME_INCREASE_RATIO    -- 운영 수행시간 증감율
							, (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,1) 
										|| '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									ELSE A.PRD_ROWS_PROC_INCREASE_RATIO 
								END) PRD_ROWS_PROC_INCREASE_RATIO    -- 운영 처리건수 증감율
							, A.WRKJOB_CD                  -- 업무코드
							, A.TOP_WRKJOB_CD              -- 최상위 업무코드
							, A.DBID                       -- DBID
							, A.PROGRAM_ID                 -- PROGRAM_ID
							, A.PERF_CHECK_ID              -- 성능점검ID
							, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
							, A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
							, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
							, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
							, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
							, A.EXCEPTION_PRC_METH_NM       -- 예외처리방법, JMG : 20210119
							, SUM(B.ELAPSED_TIME_ACTIVITY) OVER(PARTITION BY A.PROGRAM_ID) AS PROGRAM_ELAPSED_TIME_ACTIVITY  -- DBIO 단위 수행시간 Activity(%), JMG : 20210119 
							, SUM(B.BUFFER_GETS_ACTIVITY) OVER(PARTITION BY A.PROGRAM_ID) AS PROGRAM_BUFFER_GETS_ACTIVITY  -- DBIO 단위 수행시간 Activity(%), JMG : 20210128
							, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY ELAPSED_TIME_ACTIVITY DESC) RNUM   -- DBIO에서 SQL_ID 별 수행시간 Activity(%), JMG : 20210119
						FROM (
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									, A.PROGRAM_NM                 -- 프로그램
									, A.AFTER_PRD_SQL_ID           -- SQL_ID
									, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									, A.PRD_PLAN_CHANGE_YN         -- PLAN 변경 여부
									, A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
									, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									, A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
									, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									, A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
									, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									, A.AFTER_EXECUTIONS           -- 운영 수행횟수
									, A.EXCEPT_YN                  -- 예외여부
									, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									, TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD') PROGRAM_EXEC_DT       -- 성능점검일시
									, TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									, A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
									, NULL ELAPSED_TIME_METIRC     -- 수행시간 구간 메트릭스
									, A.PROGRAM_ID                 -- 프로그램 ID
									, A.PERF_CHECK_ID              -- 성능점검ID
									, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									, A.TEST_SQL_ID                -- 배포 SQL_ID
									, A.TEST_PLAN_HASH_VALUE       -- 배포 PLAN_HASH_VALUE
									, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									, A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
									, A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
									, TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO, 'FM999999999999990.99') PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									, TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO, 'FM999999999999990.99') PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									, TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO, 'FM999999999999990.99') PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									, A.WRKJOB_CD                  -- 업무코드
									, A.TOP_WRKJOB_CD              -- 최상위 업무코드
									, A.DBID                       -- DBID
									, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									, A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
									, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
									, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
									, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
									, (CASE WHEN B.PROGRAM_ID IS NOT NULL THEN '지표' ELSE '' END) EXCEPTION_PRC_METH_NM    -- 예외처리방법, JMG : 20210311
								FROM TMP_DEPLOY_PERF_SQL A, TMP_DEPLOY_PERF_EXPT_INDC_ALL B
								WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
								UNION ALL
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									, A.PROGRAM_NM                 -- 프로그램
									, A.AFTER_PRD_SQL_ID           -- SQL_ID
									, A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									, 'N' PRD_PLAN_CHANGE_YN       -- PLAN 변경 여부
									, NULL TEST_ELAPSED_TIME       -- 배포 평균  수행시간
									, A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									, NULL TEST_BUFFER_GETS        -- 배포 평균 블럭수
									, A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									, NULL TEST_ROWS_PROCESSED     -- 배포 평균  처리건수
									, A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									, A.AFTER_EXECUTIONS           -- 운영 수행횟수
									, A.EXCEPT_YN                  -- 예외여부
									, A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									, A.BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									, NULL PROGRAM_EXEC_DT         -- 성능점검일시
									, TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									, NULL PERF_REGRESSED_METRIC   -- 성능저하 율 메트릭스
									, A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
									, A.PROGRAM_ID                 -- 프로그램 ID
									, A.PERF_CHECK_ID              -- 성능점검ID
									, A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									, NULL TEST_SQL_ID             -- 배포 SQL_ID
									, NULL TEST_PLAN_HASH_VALUE    -- 배포 PLAN_HASH_VALUE
									, A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									, A.BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									, NULL ELAPSED_TIME_REGRESS_YN -- 수행시간 성능저하
									, NULL BUFFER_GETS_REGRESS_YN  -- 블럭수 성능저하  
									, NULL PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									, NULL PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									, NULL PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									, A.WRKJOB_CD                  -- 업무코드
									, A.TOP_WRKJOB_CD              -- 최상위 업무코드
									, A.DBID                       -- DBID
									, A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									, NULL PROGRAM_EXECUTE_TMS     -- 성능점검 수행회차
									, A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
									, A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
									, A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
									, SUBSTR(A.EXCEPTION_PRC_METH_NM, 1, 2)  EXCEPTION_PRC_METH_NM    -- 예외처리방법, JMG : 20200119
								FROM TMP_DEPLOY_EXCEPT_SQL A
							) A
							, (
								/* ACTIVITY */
								SELECT DBID
									, SQL_ID
									, PLAN_HASH_VALUE
									, ROUND((RATIO_TO_REPORT(SUM(ELAPSED_TIME)) OVER())* 100, 4) AS ELAPSED_TIME_ACTIVITY
									, ROUND((RATIO_TO_REPORT(SUM(BUFFER_GETS)) OVER()) * 100, 4) AS BUFFER_GETS_ACTIVITY
								FROM VSQL_STATS A
								WHERE LAST_ACTIVE_TIME >= TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
								GROUP BY DBID, SQL_ID, PLAN_HASH_VALUE
							) B
						WHERE A.DBID = B.DBID
						AND A.AFTER_PRD_SQL_ID = B.SQL_ID
						AND A.AFTER_PRD_PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
						
						/* 부적합 */
						<if test='after_fail_yn_condition != null and after_fail_yn_condition != ""'>
							AND A.AFTER_FAIL_YN = #{after_fail_yn_condition}
						</if>
						
						/* 성능저하 - 수행시간 */
						/* 성능저하 - 블럭수  */
						<if test='selectSearchType != null and selectSearchType != ""'>
							<choose>
								<when test='selectSearchType eq "01".toString() and is_regress eq "Y"'>
									/* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
									AND A.BUFFER_GETS_REGRESS_YN = 'Y'
								</when>
								<when test='selectSearchType eq "01".toString() and is_regress eq "N"'>
									/* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
									AND A.BUFFER_GETS_REGRESS_YN = 'N'
								</when>
<!-- 								<when test='selectSearchType eq "02".toString() and (selectSqlPerfTrace != null and selectSqlPerfTrace != "") '> -->
<!-- 									/* 성능저하 - 수행시간 */ -->
<!-- 									AND A.ELAPSED_TIME_REGRESS_YN = 'Y' -->
<!-- 								</when> -->
							</choose>
						</if>
						
						/* 성능점검SQL - 콤보 */
						<if test='selectPerfRegressedMetric != null and selectPerfRegressedMetric != ""'>
							AND A.PERF_REGRESSED_METRIC = #{selectPerfRegressedMetric}
						</if>
						
						/* 예외처리방법 : 예외처리SQL 탭에서 전달받은경우*/
						<if test='selectSqlPerfTrace != null and selectSqlPerfTrace != ""'>
--							AND A.EXCEPTION_PRC_METH_CD = '2'
							AND A.EXCEPTION_PRC_METH_CD = #{selectSqlPerfTrace}
						</if>
						
						/* 예외처리SQL - 콤보 */
						<if test='selectElapsedTimeMetirc != null and selectElapsedTimeMetirc != ""'>
							AND A.ELAPSED_TIME_METIRC = #{selectElapsedTimeMetirc}
						</if>
						
						/* SQL_ID */
						<if test='strSqlId != null and strSqlId != ""'>
							AND A.AFTER_PRD_SQL_ID = #{strSqlId} 
						</if>
						
						/* SQL식별자 */
						<if test='strDbio != null and strDbio != ""'>
							AND A.DBIO = #{strDbio}
						</if>
						
						-- SQL식별자별 수행시간Activity(%) Descending, SQL별 평균수행시간(초) Descending 기준 정렬, JMG : 20200119
						ORDER BY PROGRAM_ELAPSED_TIME_ACTIVITY DESC, RNUM, PROGRAM_BUFFER_GETS_ACTIVITY DESC
					) A
	</select>
	
	<select id="perfChkRequestTuningDupChk" parameterType="tuningTargetSql" resultType="int">
		/* SqlsDao.perfChkRequestTuningDupChk */
		SELECT COUNT(*) FROM TUNING_TARGET_SQL
		WHERE PERF_CHECK_ID=#{perf_check_id}
		AND PROGRAM_ID=#{program_id}
		AND TUNING_STATUS_CD NOT IN ('4', '7', '8', 'A')   --4:튜닝반려, 7:적용반려, 8:튜닝종료, A:요청취소
	</select>
	
	<insert id="insertTuningTargetSqlBindFromVsqlBindCapture" parameterType="sqls" useGeneratedKeys="false">
		/* SqlsDao.insertTuningTargetSqlBindFromVsqlBindCapture */
		INSERT
		INTO TUNING_TARGET_SQL_BIND
		(
			TUNING_NO
			, BIND_SET_SEQ
			, BIND_SEQ
			, BIND_VAR_NM
			, BIND_VAR_VALUE
			, BIND_VAR_TYPE
			, MANDATORY_YN
		)
		SELECT #{tuning_no}
			, 1
			, POSITION
			, NAME
			, VALUE_STRING
			, 'string'
			, ''
		FROM VSQL_BIND_CAPTURE A
		WHERE DBID = #{dbid}
		AND SQL_ID = #{after_prd_sql_id}
		AND LAST_CAPTURED = (SELECT MAX(LAST_CAPTURED) FROM VSQL_BIND_CAPTURE S WHERE S.DBID = A.DBID AND S.SQL_ID = A.SQL_ID)
		AND SNAP_TIME = (SELECT MAX(SNAP_TIME) FROM VSQL_BIND_CAPTURE S WHERE S.DBID = A.DBID AND S.SQL_ID = A.SQL_ID)
		ORDER BY POSITION
	</insert>
	
	<select id="beforeOperationPerformance" parameterType="sqls" resultType="sqls">
		/* SqlsDao.beforeOperationPerformance */
		/********** SQL 성능 추적 탭 **************/
		/* 
		   이전 운영 성능
		  before_prd_sql_id: 139vwxrd16ahp
		  before_prd_plan_hash_value : 3650652662
		*/
		SELECT SQL_ID                                                                    -- SQL_ID
			, PLAN_HASH_VALUE                                                           -- PLAN_HASH_VALUE
			, ROUND(ELAPSED_TIME/1000000/DECODE(EXECUTIONS, 0, 1, EXECUTIONS), 4) ELAPSED_TIME  -- 수행시간
			, ROUND(BUFFER_GETS/DECODE(EXECUTIONS, 0, 1, EXECUTIONS)) BUFFER_GETS       -- 블럭수
			, ROUND(ROWS_PROCESSED/DECODE(EXECUTIONS, 0, 1, EXECUTIONS)) ROWS_PROCESSED -- 처리건수
			, TO_CHAR(LAST_ACTIVE_TIME, 'YYYY-MM-DD HH24:MI') LAST_ACTIVE_TIME          -- 최종수행시간
			, DBID
		FROM VSQL_STATS A
		WHERE DBID = #{dbid}
		AND SQL_ID = #{before_prd_sql_id}
		AND PLAN_HASH_VALUE = #{before_prd_plan_hash_value}
	</select>
	
	
	<select id="performanceCheck" parameterType="sqls" resultType="sqls">
		/* SqlsDao.performanceCheck */
		/********** SQL 성능 추적 탭 **************/
		/* 
		   성능점검 
		   아래 항목은 SQLs_검색 결과에서 전달받아 출
		  - 성능점검일시 : PROGRAM_EXEC_DT
		  - 배포일자     : DEPLOY_COMPLETE_DT
		
		  test_sql_id : 71sv3rwpjx8ny
		*/
		SELECT A.SQL_ID, A.PLAN_HASH_VALUE
			, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(B.EXEC_RESULT_VALUE) END) ELAPSED_TIME   -- 수행시간
			, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(B.EXEC_RESULT_VALUE) END) BUFFER_GETS    -- 블럭수
			, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN TO_NUMBER(B.EXEC_RESULT_VALUE) END) ROWS_PROCESSED -- 처리건수
		FROM DEPLOY_PERF_SQL_STAT A, DEPLOY_PERF_CHK_DETAIL_RESULT B
		WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		AND A.PERF_CHECK_STEP_ID = B.PERF_CHECK_STEP_ID
		AND A.PROGRAM_ID = B.PROGRAM_ID
		AND A.PROGRAM_EXECUTE_TMS = B.PROGRAM_EXECUTE_TMS
		AND A.PERF_CHECK_ID = #{perf_check_id}
		AND A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
		AND A.PROGRAM_ID = #{program_id}
		AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
		AND B.PERF_CHECK_INDC_ID IN (1, 2, 3)
		GROUP BY A.SQL_ID, A.PLAN_HASH_VALUE
	</select>

	<select id="afterDistributionOperationPerformance" parameterType="sqls" resultType="sqls">
		/* SqlsDao.afterDistributionOperationPerformance */
		/********** SQL 성능 추적 탭 **************/
		/* 
		   배포후 운영성능 
		   아래 항목은 SQLs_검색 결과에서 전달받아 출력
		  - 수행시간 Activity(%) : ELAPSED_TIME_ACTIVITY
		  - 블럭수 Activity(%)   : BUFFER_GETS_ACTIVITY
		  - 수행시간 증감율      : PRD_ELAP_TIME_INCREASE_RATIO
		  - 블럭수 증감율        : PRD_BUFFER_GETS_INCREASE_RATIO
		  - 처리건수 증감율      : PRD_ROWS_PROC_INCREASE_RATIO
		
		  :after_prd_sql_id	: 0ttxf3hxf7tm1
		  :after_prd_plan_hash_value	: 1757325671
		
		*/
		SELECT SQL_ID                                                                    -- SQL_ID
			, PLAN_HASH_VALUE                                                           -- PLAN_HASH_VALUE
			, ROUND(ELAPSED_TIME/1000000/DECODE(EXECUTIONS, 0, 1, EXECUTIONS), 4) ELAPSED_TIME  -- 수행시간
			, ROUND(BUFFER_GETS/DECODE(EXECUTIONS, 0, 1, EXECUTIONS)) BUFFER_GETS       -- 블럭수
			, ROUND(ROWS_PROCESSED/DECODE(EXECUTIONS, 0, 1, EXECUTIONS)) ROWS_PROCESSED -- 처리건수
			, TO_CHAR(LAST_ACTIVE_TIME, 'YYYY-MM-DD HH24:MI') LAST_ACTIVE_TIME          -- 최종수행시간
			, DBID
		FROM VSQL_STATS A
		WHERE DBID = #{dbid}
		AND SQL_ID = #{after_prd_sql_id}
		AND PLAN_HASH_VALUE = #{after_prd_plan_hash_value}
	</select>
	
	<select id="sqlTextPerformanceCheck" parameterType="sqls" resultType="sqls">
		/* SqlsDao.sqlTextPerformanceCheck */
		/* 
		   성능 점검 SQL
		*/
		/* 1) SQL TEXT */
		SELECT PROGRAM_SOURCE_DESC
		FROM DEPLOY_PERF_CHK_ALL_PGM
		WHERE PROGRAM_ID = #{program_id}
	</select>
	
	<select id="sqlBindPerformanceCheck" parameterType="sqls" resultType="sqls">
		/* SqlsDao.sqlTextPerformanceCheck */
		/* 
		   성능 점검 SQL
		*/
		/* 1) SQL BIND */
		SELECT BIND_VAR_NM AS NAME
			, BIND_VAR_VALUE AS VALUE_STRING
		FROM DEPLOY_PERF_CHK_EXEC_BIND
		WHERE PERF_CHECK_ID = #{perf_check_id}
		AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
		AND PROGRAM_ID = #{program_id}
		AND PROGRAM_EXECUTE_TMS = #{program_execute_tms}
		ORDER BY BIND_SEQ
	</select>
	
	<select id="sqlPlanPerformanceCheck" parameterType="sqls" resultType="sqls">
		/* SqlsDao.sqlPlanPerformanceCheck */
		/* 
		   성능 점검 SQL
		*/
		/* 3) SQL PLAN */
		SELECT ROUND(COST/DECODE(TOTAL_COST, 0, 1, TOTAL_COST)*100, 2) "COST_PERCENT"
			, ROUND(CPU_COST/DECODE(TOTAL_CPU_COST, 0, 1, TOTAL_CPU_COST)*100, 2) "CPU_COST_PERCENT"
			, ROUND(IO_COST/DECODE(TOTAL_IO_COST, 0, 1, TOTAL_IO_COST)*100, 2) "IO_COST_PERCENT"
			, ID
			, LPAD(' ',2*(LEVEL-1)) || OPERATION || ' ' || OPTIONS || ' ' ||
			(CASE 
					WHEN OBJECT_NAME IS NOT NULL THEN OBJECT_NAME 
					ELSE ''
				END) AS OPERATION
			, COST
			,CPU_COST
			, IO_COST
		FROM (
				SELECT ID
					, (CASE WHEN ID = 0 THEN NULL ELSE PARENT_ID END) PARENT_ID
					, TRIM(OPERATION) OPERATION
					, TRIM(OPTIONS) OPTIONS
					, TRIM(OBJECT_OWNER) OBJECT_OWNER
					, TRIM(OBJECT_NAME) OBJECT_NAME
					, COST
					, CPU_COST
					, IO_COST
					, MAX(COST) OVER() TOTAL_COST
					, MAX(CPU_COST) OVER() TOTAL_CPU_COST
					, MAX(IO_COST) OVER() TOTAL_IO_COST
				FROM DEPLOY_PERF_SQL_PLAN A
				WHERE PERF_CHECK_ID = #{perf_check_id}
				AND PERF_CHECK_STEP_ID = #{perf_check_step_id}
				AND PROGRAM_ID = #{program_id}
				AND PROGRAM_EXECUTE_TMS = #{program_execute_tms}
				AND CHILD_NUMBER = (SELECT MAX(CHILD_NUMBER) 
									FROM DEPLOY_PERF_SQL_PLAN S
									WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID
									AND S.PERF_CHECK_STEP_ID = A.PERF_CHECK_STEP_ID
									AND S.PROGRAM_ID = A.PROGRAM_ID
									AND S.PROGRAM_EXECUTE_TMS = A.PROGRAM_EXECUTE_TMS)
			)
		CONNECT BY PRIOR ID = PARENT_ID
		START WITH ID = 0
		ORDER BY ID
	</select>
	
	<select id="sqlBindOperation" parameterType="sqls" resultType="sqls">
		/* SqlsDao.sqlBindOperation */
		/* 
		   운영 SQL
		*/
		/* 2) SQL BIND */
		SELECT NAME
			, VALUE_STRING
		FROM VSQL_BIND_CAPTURE A
		WHERE DBID = #{dbid}
		AND SQL_ID = #{after_prd_sql_id}
		AND LAST_CAPTURED = (SELECT MAX(LAST_CAPTURED) FROM VSQL_BIND_CAPTURE S WHERE S.DBID = A.DBID AND S.SQL_ID = A.SQL_ID)
		AND SNAP_TIME = (SELECT MAX(SNAP_TIME) FROM VSQL_BIND_CAPTURE S WHERE S.DBID = A.DBID AND S.SQL_ID = A.SQL_ID)
		ORDER BY POSITION
	</select>
	
	<select id="sqlPlanOperation" parameterType="sqls" resultType="sqls">
		/* SqlsDao.sqlPlanOperation */
		/* 
		   운영 SQL
		*/
		/* 3) SQL PLAN */
		SELECT ROUND(COST/DECODE(TOTAL_COST, 0, 1, TOTAL_COST)*100, 2) "COST_PERCENT"
			, ROUND(CPU_COST/DECODE(TOTAL_CPU_COST, 0, 1, TOTAL_CPU_COST)*100, 2) "CPU_COST_PERCENT"
			, ROUND(IO_COST/DECODE(TOTAL_IO_COST, 0, 1, TOTAL_IO_COST)*100, 2) "IO_COST_PERCENT"
			, ID
			, LPAD(' ',2*(LEVEL-1)) || OPERATION || ' ' || OPTIONS || ' ' ||
			(CASE 
					WHEN OBJECT_NAME IS NOT NULL THEN OBJECT_NAME 
					ELSE ''
				END) AS OPERATION
			, COST
			, CPU_COST
			, IO_COST
		FROM (
				SELECT ID
					, (CASE WHEN ID = 0 THEN NULL ELSE PARENT_ID END) PARENT_ID
					, TRIM(OPERATION) OPERATION
					, TRIM(OPTIONS) OPTIONS
					, TRIM(OBJECT_OWNER) OBJECT_OWNER
					, TRIM(OBJECT_NAME) OBJECT_NAME
					, COST
					, CPU_COST
					, IO_COST
					, MAX(COST) OVER() TOTAL_COST
					, MAX(CPU_COST) OVER() TOTAL_CPU_COST
					, MAX(IO_COST) OVER() TOTAL_IO_COST
				FROM VSQL_PLAN A
				WHERE DBID = #{dbid}
				AND PLAN_HASH_VALUE = #{after_prd_plan_hash_value}
			)
		CONNECT BY PRIOR ID = PARENT_ID
		START WITH ID = 0
		ORDER BY ID
	</select>
	
	<select id="bigTableThresholdCnt" parameterType="sqls" resultType="sqls">
		/* SqlsDao.bigTableThresholdCnt */
		/********** 성능점검결과 탭 **************/
		-- 배포전 성능점검 화면과 동일하고 아래 대용량 테이블 기준 만 추가됨
		
		-- 대용량 테이블 기준 : xxxxxx 건
		SELECT TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
		FROM SPOP_PREFERENCES A
			, (SELECT B.DBID, B.PREF_ID, B.PREF_SEQ, B.PREF_VALUE
				FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
							, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
						FROM DB_PREFERENCES
						WHERE DBID = #{dbid}
						AND PREF_ID IN (12004)
					) B
				WHERE B.PREF_SEQ = B.MAX_PREF_SEQ
			) B
		WHERE A.PREF_ID = B.PREF_ID(+)
		AND A.PREF_ID IN (12004)
	</select>
	
	<select id="loadPerfCheckAllPgm" parameterType="sqls" resultType="sqls">
		/* SqlsDao.loadPerfCheckAllPgm */
		SELECT
			W.WRKJOB_CD_NM                                                          -- 업무명
			, U.USER_NM                                                             -- 배포요청자
			, CD1.CD_NM AS PROGRAM_DIV_NM                                           -- 프로그램 구분
			, A.PROGRAM_NM AS PROGRAM_NM                                            -- 프로그램명
			, A.DBIO AS DBIO                                                        -- DBIO
			, CD3.CD_NM PROGRAM_TYPE_NM                                             -- 프로그램유형
			, A.PROGRAM_TYPE_CD
			, CD4.CD_NM SQL_COMMAND_TYPE_NM                                         -- SQL 명령 유형
			, A.SQL_COMMAND_TYPE_CD
			, A.DYNAMIC_SQL_YN                                                      -- 다이나믹 SQL 여부
			, REPLACE(A.PROGRAM_DESC ,CHR(10),'<![CDATA[<BR/>]]>') AS PROGRAM_DESC  -- 프로그램설명(with br tag)
			, A.FILE_NM AS FILE_NM                                                  -- 파일명
			, A.DIR_NM AS DIR_NM                                                    -- 디렉토리명
			, TO_CHAR(A.REG_DT, 'YYYY-MM-DD HH24:MI:SS') AS REG_DT                  -- 등록일시
			, TO_CHAR(A.LAST_UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS LAST_UPDATE_DT  -- 변경일시
			, B.EXCEPTION_PRC_METH_CD AS EXCEPTION_PRC_METH_CD                      -- 점검제외코드
			, CD2.CD_NM AS EXCEPTION_PRC_METH_NM                                    -- 점검제외명
--			, (CASE WHEN B.EXCEPTION_PRC_METH_CD IN ('2', '3') THEN 'Y' ELSE 'N' END) AS PERF_CHECK_AUTO_PASS_YN  -- 자동통과여부
--			, A.DIR_NM || '/' || A.FILE_NM AS TR_CD                           -- TR_CD  
--			, A.PROGRAM_SOURCE_DESC AS PROGRAM_SOURCE_DESC                          -- SQL
		FROM  DEPLOY_PERF_CHK_ALL_PGM A    -- 배포성능점검전체프로그램내역
			, DEPLOY_PERF_CHK_TARGET_PGM B -- 배포성능점검대상프로그램내역
			, DEPLOY_PERF_CHK C -- 배포성능점검기본
			, WRKJOB_CD W
			, USERS U
			, CD CD1
			, CD CD2
			, CD CD3
			, CD CD4
		WHERE A.PROGRAM_ID = B.PROGRAM_ID
		AND B.PERF_CHECK_ID = C.PERF_CHECK_ID
		AND C.WRKJOB_CD = W.WRKJOB_CD
		AND C.DEPLOY_REQUESTER_ID = U.USER_ID(+)
		AND A.PROGRAM_DIV_CD = CD1.CD
		AND CD1.GRP_CD_ID = '1052'
		AND B.EXCEPTION_PRC_METH_CD = CD2.CD(+)
		AND CD2.GRP_CD_ID(+) = '1061'
		AND A.PROGRAM_TYPE_CD = CD3.CD(+)
		AND CD3.GRP_CD_ID(+) = '1005'
		AND A.SQL_COMMAND_TYPE_CD = CD4.CD(+)
		AND CD4.GRP_CD_ID(+) = '1068'
		AND A.PROGRAM_ID = #{program_id}
		AND B.PERF_CHECK_ID = #{perf_check_id}
	</select>
	
	<select id="sqlTextAll" parameterType="sqls" resultType="sqls">
		/* SqlsDao.sqlTextAll */
		/********** SQL TEXT : 기존 SQL **************/
		-- DBID = 212539114
		-- SQL_ID = '8xk9jfk0kt4tj'
		-- PLAN_HASH_VALUE = 328995939
		
		/* omc.spop.dao.SQLInformationDao.sqlTextAll */
		SELECT DBID, SQL_FULLTEXT AS SQL_TEXT
		FROM VSQL_TEXT
		WHERE DBID = #{dbid}
		AND SQL_ID = #{after_prd_sql_id}
		AND ROWNUM = 1
	</select>
	
	<select id="bindValueListAll" parameterType="sqlsDetail" resultType="sqlsDetail">
		/* SqlsDao.bindValueListAll */
		/********** Bind Value : 기존 SQL **************/
		/* omc.spop.dao.SQLInformationDao.bindValueListAll */
		WITH SQL_STAT AS
		(
			SELECT B.DBID, B.SQL_ID,
				MAX(B.PLAN_HASH_VALUE) PLAN_HASH_VALUE ,
				--ROUND(AVG(B.ELAPSED_TIME /DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS))/1000000, 4) AVG_ELAP ,
				--ROUND(MAX(B.ELAPSED_TIME /DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS))/1000000, 4) MAX_ELAP ,
				--ROUND(AVG(B.CPU_TIME /DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS))/1000000, 4) AVG_CPU ,
				--TRUNC(AVG(B.BUFFER_GETS /DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS)) ) AVG_BGET ,
				--TRUNC(AVG(B.DISK_READS /DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS)) ) AVG_DRDS ,
				--TRUNC(AVG(B.ROWS_PROCESSED/DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS)) ) AVG_ROWS ,
				--SUM(B.EXECUTIONS) EXES ,
				ROUND(SUM(B.ELAPSED_TIME)  /DECODE(SUM(B.EXECUTIONS), 0, 1, SUM(B.EXECUTIONS))/1000000,4) AVG_ELAP,
				ROUND(MAX(B.ELAPSED_TIME   /DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS))/1000000,4)          MAX_ELAP,
				ROUND(SUM(B.CPU_TIME)      /DECODE(SUM(B.EXECUTIONS), 0, 1, SUM(B.EXECUTIONS))/1000000,4) AVG_CPU,
				TRUNC(SUM(B.BUFFER_GETS)   /DECODE(SUM(B.EXECUTIONS), 0, 1, SUM(B.EXECUTIONS))          ) AVG_BGET,
				TRUNC(SUM(B.DISK_READS)    /DECODE(SUM(B.EXECUTIONS), 0, 1, SUM(B.EXECUTIONS))          ) AVG_DRDS,
				TRUNC(SUM(B.ROWS_PROCESSED)/DECODE(SUM(B.EXECUTIONS), 0, 1, SUM(B.EXECUTIONS))          ) AVG_ROWS,
				DECODE(SUM(B.EXECUTIONS), 0, 1, SUM(B.EXECUTIONS))                                              EXES,
				SUM(B.ELAPSED_TIME) ELAP ,
				SUM(B.PARSE_CALLS) PARSE ,
				SUM(B.FETCHES) FETCH ,
				MAX(B.INST_ID) INSTANCE_NUMBER
			FROM VSQL_STATS B
			WHERE B.DBID = #{dbid} --> PARAMETER
			AND B.EXECUTIONS > 0
			AND B.SQL_ID = #{sql_id} --> PARAMETER
			GROUP BY B.DBID, B.SQL_ID
		)
		SELECT *
		FROM (SELECT ROWNUM AS RNUM,
					LOWER(NAME) AS NAME,
					DECODE(VALUE_STRING, 'NULL', '', VALUE_STRING) AS VALUE,
					FN_NUM_TO_CHAR_FORMAT(DECODE(SEQ, 1, AVG_ELAP, NULL)) AS ELAPSED_TIME,
					DECODE(SEQ, 1, AVG_BGET, NULL) AS BUFFER_GETS,
					DECODE(SEQ, 1, AVG_ROWS, NULL) AS ROWS_PROCESSED,
					DECODE(SEQ, 1, PLAN_HASH_VALUE, NULL) AS PLAN_HASH_VALUE,
					DECODE(SEQ, 1, LAST_CAPTURED, NULL) AS EXEC_TIME,
					DECODE(SEQ, 1, INSTANCE_NUMBER, NULL) AS INSTANCE_NUMBER,
					SEQ
				FROM (
					SELECT A.NAME,
						A.POSITION,
						A.VALUE_STRING,
						B.AVG_ELAP,
						B.AVG_BGET,
						B.AVG_ROWS,
						B.PLAN_HASH_VALUE,
						A.LAST_CAPTURED,
						B.INSTANCE_NUMBER,
						ROW_NUMBER() OVER (PARTITION BY A.LAST_CAPTURED ORDER BY A.POSITION) SEQ,
						MIN(A.POSITION) OVER (PARTITION BY A.LAST_CAPTURED, A.NAME) MIN_POSITION
					FROM VSQL_BIND_CAPTURE A,
						SQL_STAT B
					WHERE A.DBID = B.DBID
					AND A.SQL_ID = B.SQL_ID
					ORDER BY A.LAST_CAPTURED,
						A.POSITION
				)
				WHERE POSITION = MIN_POSITION
				AND ROWNUM  <![CDATA[<]]>=  (${pagePerCount} * ${currentPage}))
		WHERE RNUM >= (${pagePerCount} * (${currentPage} - 1) + 1)
	</select>
	
	<select id="sqlTextPlanListAll" parameterType="odsHistSqlText" resultType="odsHistSqlText">
		/* SqlsDao.sqlTextPlanListAll */
		/********** Text Plan : 기존 SQL **************/
		/* omc.spop.dao.SQLInformationDao.sqlTextPlanListAll */
		WITH TUN AS (
			SELECT *
			FROM VSQL_PLAN
			WHERE DBID = #{dbid}
			AND PLAN_HASH_VALUE = #{plan_hash_value}
		)
		SELECT TO_CHAR(ID,'9999')||' '||LPAD(' ',2*LEVEL)
			|| OPERATION
			|| DECODE(OPTIONS, NULL, '', ' ' || OPTIONS)
			|| DECODE(OBJECT_NAME, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME)
			|| DECODE(OBJECT_TYPE, NULL, '', '(' || OBJECT_TYPE || ')')
			|| NVL((CASE WHEN ID = 0 THEN ' OPTIMIZER=' || OPTIMIZER ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN '(' ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL THEN 'COST=' || COST ELSE '' END)
			  || (CASE WHEN CARDINALITY IS NOT NULL THEN ' ' || 'CARD=' || CARDINALITY ELSE '' END)
			  || (CASE WHEN BYTES IS NOT NULL THEN ' ' || 'BYTES=' || BYTES ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN ')' ELSE '' END), ' ')
			AS EXECUTION_PLAN
		FROM TUN
		CONNECT BY PRIOR ID = PARENT_ID
		START WITH ID = 0
		ORDER BY ID
	</select>
	
	<select id="sqlTreePlanListAll" parameterType="sqlGrid" resultType="sqlGrid">
		/* SqlsDao.sqlTreePlanListAll */
		/********** Tree Plan : 기존 SQL **************/
		/* omc.spop.dao.SQLInformationDao.sqlTreePlanListAll */
		WITH TUN AS (
			SELECT *
			FROM VSQL_PLAN
			WHERE DBID = #{dbid}
			AND PLAN_HASH_VALUE = #{plan_hash_value}
		)
		SELECT /*+  */
			ID, NVL(PARENT_ID,'-1') AS PARENT_ID, DECODE(SUBSTR(OBJECT_TYPE,1,5),'TABLE',1,'INDEX',2,0) IMID,
			(OPERATION
			|| DECODE(OPTIONS, NULL, '', ' ' || OPTIONS)
			|| DECODE(OBJECT_NAME, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME)
			|| DECODE(OBJECT_TYPE, NULL, '', '(' || OBJECT_TYPE || ')')
			|| NVL((CASE WHEN ID = 0 THEN ' OPTIMIZER=' || OPTIMIZER ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN '(' ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL THEN 'COST=' || COST || ' ' ELSE '' END)
			  || (CASE WHEN CARDINALITY IS NOT NULL THEN 'CARD=' || CARDINALITY || ' ' ELSE '' END)
			  || (CASE WHEN BYTES IS NOT NULL THEN 'BYTES=' || BYTES ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN ')' ELSE '' END), ' ')
			) AS TEXT
		FROM TUN
		ORDER BY ID
	</select>
	
	<select id="sqlGridPlanListAll" parameterType="sqlGrid" resultType="sqlGrid">
		/* SqlsDao.sqlGridPlanListAll */
		/********** Grid Plan : 기존 SQL **************/
		/* omc.spop.dao.SQLInformationDao.sqlGridPlanListAll */
		WITH TUN AS (
			SELECT *
			FROM VSQL_PLAN
			WHERE DBID = #{dbid}
			AND PLAN_HASH_VALUE = #{plan_hash_value}
		)
		SELECT ID, NVL(PARENT_ID,'-1') AS PARENT_ID, DECODE(SUBSTR(OBJECT_TYPE,1,5),'TABLE',1,'INDEX',2,0) IMID,
			(OPERATION
			|| DECODE(OPTIONS, NULL, '', ' ' || OPTIONS)
			|| DECODE(OBJECT_NAME, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME)
			|| DECODE(OBJECT_TYPE, NULL, '', '(' || OBJECT_TYPE || ')')
			|| NVL((CASE WHEN ID = 0 THEN ' OPTIMIZER=' || OPTIMIZER ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN '(' ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL THEN 'COST=' || COST || ' ' ELSE '' END)
			  || (CASE WHEN CARDINALITY IS NOT NULL THEN 'CARD=' || CARDINALITY || ' ' ELSE '' END)
			  || (CASE WHEN BYTES IS NOT NULL THEN 'BYTES=' || BYTES ELSE '' END)
			  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN ')' ELSE '' END), ' ')
			) AS OPERATION,
			OBJECT_NODE,
			OBJECT# AS OBJECT,
			OBJECT_OWNER,
			OBJECT_NAME,
			OBJECT_TYPE,
			OPTIMIZER,
			COST,
			CARDINALITY,
			BYTES,
			OTHER_TAG,
			PARTITION_START,
			PARTITION_STOP,
			CPU_COST,
			IO_COST,
			ACCESS_PREDICATES,
			FILTER_PREDICATES,
			PROJECTION,
			TIME,
			QBLOCK_NAME,
			TIMESTAMP
		FROM TUN
		ORDER BY ID
	</select>
	
	<select id="outLineListAll" parameterType="odsHistSqlstat" resultType="odsHistSqlstat">
		/* SqlsDao.outLineListAll */
		/********** Outline : 기존 SQL **************/
		/* omc.spop.dao.SQLInformationDao.outLineListAll */
		SELECT EXTRACTVALUE(VALUE(T), '.') HINT
		FROM TABLE(
				SELECT HINT
				FROM (
					SELECT ROWNUM RNUM, XMLSEQUENCE(EXTRACT(XMLTYPE(OTHER_XML), '/other_xml/outline_data/hint')) HINT
					FROM VSQL_PLAN
					WHERE DBID = #{dbid}
					AND PLAN_HASH_VALUE = #{plan_hash_value}
					AND OTHER_XML IS NOT NULL
				)
				WHERE RNUM = 1
		) T
	</select>
	
	<select id="sqlStatTrend" parameterType="sqls" resultType="sqls">
		/* SqlsDao.sqlStatTrend */
		SELECT A.LOG_DT
			, SUM(A.EXECUTIONS) EXECUTIONS
			, TRUNC(SUM(A.BUFFER_GETS) / DECODE(SUM(A.EXECUTIONS), 0, 1, SUM(A.EXECUTIONS)) ) BUFFER_GETS
			, TRUNC(SUM(A.DISK_READS) /DECODE(SUM(A.EXECUTIONS), 0, 1, SUM(A.EXECUTIONS)) ) DISK_READS
			, RTRIM(TO_CHAR(ROUND(SUM(A.ELAPSED_TIME) /DECODE(SUM(A.EXECUTIONS), 0, 1, SUM(A.EXECUTIONS))/1000000, 4), 'FM999999999999990.9999'), '.') ELAPSED_TIME
		FROM (SELECT LOG_DT
					, DBID
					, SQL_ID
					-- 성능정보가 당일 초기화 되면 "당일성능정보", 누적이면 "전일성능정보" - "당일성능정보" 로 계산
					, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN BUFFER_GETS ELSE BUFFER_GETS - LAG(BUFFER_GETS) OVER(ORDER BY LOG_DT) END) BUFFER_GETS
					, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN DISK_READS ELSE DISK_READS - LAG(DISK_READS) OVER(ORDER BY LOG_DT) END) DISK_READS
					, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN ELAPSED_TIME ELSE ELAPSED_TIME - LAG(ELAPSED_TIME) OVER(ORDER BY LOG_DT) END) ELAPSED_TIME
					, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN EXECUTIONS ELSE EXECUTIONS - LAG(EXECUTIONS) OVER(ORDER BY LOG_DT) END) EXECUTIONS
					, ROW_NUMBER() OVER(ORDER BY LOG_DT) RNUM
				FROM (SELECT TO_CHAR(A.LOG_DT,'MM/DD') AS LOG_DT
							, DBID
							, SQL_ID
							, SUM(BUFFER_GETS_TOTAL) BUFFER_GETS
							, SUM(DISK_READS_TOTAL) DISK_READS
							, SUM(ELAPSED_TIME_TOTAL) ELAPSED_TIME
							, SUM(EXECUTIONS_TOTAL) EXECUTIONS
							, (CASE
									WHEN SUM(BUFFER_GETS_TOTAL) - LAG(SUM(BUFFER_GETS_TOTAL)) OVER(ORDER BY TO_CHAR(A.LOG_DT,'MM/DD')) <![CDATA[<]]> 0 OR
									SUM(DISK_READS_TOTAL) - LAG(SUM(DISK_READS_TOTAL)) OVER(ORDER BY TO_CHAR(A.LOG_DT,'MM/DD')) <![CDATA[<]]> 0 OR
									SUM(ELAPSED_TIME_TOTAL) - LAG(SUM(ELAPSED_TIME_TOTAL)) OVER(ORDER BY TO_CHAR(A.LOG_DT,'MM/DD')) <![CDATA[<]]> 0 OR
									SUM(EXECUTIONS_TOTAL) - LAG(SUM(EXECUTIONS_TOTAL)) OVER(ORDER BY TO_CHAR(A.LOG_DT,'MM/DD')) <![CDATA[<]]> 0 THEN 'Y'
									ELSE 'N'
								END) STATS_INITIALIZE_YN -- 성능정보 초기화 되었는지 여부
						FROM VSQL_STATS_D A
						WHERE A.DBID = #{dbid}
						AND A.SQL_ID = #{after_prd_sql_id}
						AND A.LOG_DT >= TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') - 1
						GROUP BY TO_CHAR(A.LOG_DT,'MM/DD')
							, DBID
							, SQL_ID
					)
			) A
		WHERE A.RNUM > 1
		GROUP BY A.LOG_DT
		ORDER BY A.LOG_DT ASC
	</select>
	
	<select id="sqlPerformHistoryList" parameterType="sqls" resultType="sqls">
		/* SqlsDao.sqlPerformHistoryList */
		/********** SQL Stat History  : 기존 SQL 변경 **************/
		/* omc.spop.dao.SQLInformationDao.sqlPerformHistoryList */
		SELECT *
		FROM (
				SELECT ROWNUM RNUM, X.*
				FROM (
						SELECT
							A.LOG_DT
							, A.INST_ID
							, A.SQL_ID
							, A.PLAN_HASH_VALUE
							, B.MODULE
							, TRUNC(A.BUFFER_GETS /DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS) ) BUFFER_GETS
							, TRUNC(A.DISK_READS /DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS) ) DISK_READS
							, TRUNC(A.ROWS_PROCESSED/DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS) ) ROWS_PROCESSED
							, RTRIM(TO_CHAR(ROUND(A.ELAPSED_TIME /DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS)/1000000, 4), 'FM999999999999990.9999'), '.') ELAPSED_TIME
							, RTRIM(TO_CHAR(ROUND(A.CPU_TIME /DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS)/1000000, 4), 'FM999999999999990.9999'), '.') CPU_TIME
							, RTRIM(TO_CHAR(ROUND(A.CLWAIT / DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS) / 1000000, 4), 'FM999999999999990.9999'), '.') CLWAIT_TIME
							, RTRIM(TO_CHAR(ROUND(A.IOWAIT / DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS) / 1000000, 4), 'FM999999999999990.9999'), '.') IOWAIT_TIME
							, RTRIM(TO_CHAR(ROUND(A.APWAIT / DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS) / 1000000, 4), 'FM999999999999990.9999'), '.') APWAIT_TIME
							, RTRIM(TO_CHAR(ROUND(A.CCWAIT / DECODE(A.EXECUTIONS, 0, 1, A.EXECUTIONS) / 1000000, 4), 'FM999999999999990.9999'), '.') CCWAIT_TIME
							, RTRIM(TO_CHAR(ROUND(CPU_TIME/DECODE(A.ELAPSED_TIME, 0, 1, A.ELAPSED_TIME) * 100,2), 'FM990.99'), '.') CPU_RATE
							, RTRIM(TO_CHAR(ROUND(CLWAIT/DECODE(A.ELAPSED_TIME, 0, 1, A.ELAPSED_TIME) * 100,2), 'FM990.99'), '.') CLWAIT_RATE
							, RTRIM(TO_CHAR(ROUND(IOWAIT/DECODE(A.ELAPSED_TIME, 0, 1, A.ELAPSED_TIME) * 100,2), 'FM990.99'), '.') IOWAIT_RATE
							, RTRIM(TO_CHAR(ROUND(APWAIT/DECODE(A.ELAPSED_TIME, 0, 1, A.ELAPSED_TIME) * 100,2), 'FM990.99'), '.') APWAIT_RATE
							, RTRIM(TO_CHAR(ROUND(CCWAIT/DECODE(A.ELAPSED_TIME, 0, 1, A.ELAPSED_TIME) * 100,2), 'FM990.99'), '.') CCWAIT_RATE
							, A.EXECUTIONS EXECUTIONS
							, A.PARSE_CALLS PARSE_CALLS
							, A.FETCHES FETCHES
						FROM ( SELECT LOG_DT
									, DBID
									, INST_ID
									, SQL_ID
									, PLAN_HASH_VALUE
									-- 성능정보가 당일 초기화 되면 "당일성능정보", 누적이면 "전일성능정보" - "당일성능정보" 로 계산
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN BUFFER_GETS ELSE BUFFER_GETS - LAG(BUFFER_GETS) OVER(ORDER BY LOG_DT) END) BUFFER_GETS
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN DISK_READS ELSE DISK_READS - LAG(DISK_READS) OVER(ORDER BY LOG_DT) END) DISK_READS
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN ROWS_PROCESSED ELSE ROWS_PROCESSED - LAG(ROWS_PROCESSED) OVER(ORDER BY LOG_DT) END) ROWS_PROCESSED
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN ELAPSED_TIME ELSE ELAPSED_TIME - LAG(ELAPSED_TIME) OVER(ORDER BY LOG_DT) END) ELAPSED_TIME
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN EXECUTIONS ELSE EXECUTIONS - LAG(EXECUTIONS) OVER(ORDER BY LOG_DT) END) EXECUTIONS
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN CPU_TIME ELSE CPU_TIME - LAG(CPU_TIME) OVER(ORDER BY LOG_DT) END) CPU_TIME
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN CLWAIT ELSE CLWAIT - LAG(CLWAIT) OVER(ORDER BY LOG_DT) END) CLWAIT
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN IOWAIT ELSE IOWAIT - LAG(IOWAIT) OVER(ORDER BY LOG_DT) END) IOWAIT
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN APWAIT ELSE APWAIT - LAG(APWAIT) OVER(ORDER BY LOG_DT) END) APWAIT
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN CCWAIT ELSE CCWAIT - LAG(CCWAIT) OVER(ORDER BY LOG_DT) END) CCWAIT
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN PARSE_CALLS ELSE PARSE_CALLS - LAG(PARSE_CALLS) OVER(ORDER BY LOG_DT) END) PARSE_CALLS
									, (CASE WHEN STATS_INITIALIZE_YN = 'Y' THEN FETCHES ELSE FETCHES - LAG(FETCHES) OVER(ORDER BY LOG_DT) END) FETCHES
									, ROW_NUMBER() OVER(ORDER BY LOG_DT) RNUM
								FROM (SELECT TO_CHAR(A.LOG_DT,'YYYY-MM-DD HH24:MI:SS') AS LOG_DT
											, DBID
											, INST_ID
											, SQL_ID
											, MAX(PLAN_HASH_VALUE) PLAN_HASH_VALUE
											, SUM(BUFFER_GETS_TOTAL) BUFFER_GETS
											, SUM(DISK_READS_TOTAL) DISK_READS
											, SUM(ELAPSED_TIME_TOTAL) ELAPSED_TIME
											, SUM(ROWS_PROCESSED_TOTAL) ROWS_PROCESSED
											, SUM(CPU_TIME_TOTAL) CPU_TIME
											, SUM(CLWAIT_TOTAL) CLWAIT
											, SUM(IOWAIT_TOTAL) IOWAIT
											, SUM(APWAIT_TOTAL) APWAIT
											, SUM(CCWAIT_TOTAL) CCWAIT
											, SUM(EXECUTIONS_TOTAL) EXECUTIONS
											, SUM(PARSE_CALLS_TOTAL) PARSE_CALLS
											, SUM(FETCHES_TOTAL) FETCHES
											, (CASE
													WHEN SUM(BUFFER_GETS_TOTAL) - LAG(SUM(BUFFER_GETS_TOTAL)) OVER(ORDER BY TO_CHAR(A.LOG_DT,'YYYY-MM-DD HH24:MI:SS')) <![CDATA[<]]> 0 OR
													SUM(DISK_READS_TOTAL) - LAG(SUM(DISK_READS_TOTAL)) OVER(ORDER BY TO_CHAR(A.LOG_DT,'YYYY-MM-DD HH24:MI:SS')) <![CDATA[<]]> 0 OR
													SUM(ELAPSED_TIME_TOTAL) - LAG(SUM(ELAPSED_TIME_TOTAL)) OVER(ORDER BY TO_CHAR(A.LOG_DT,'YYYY-MM-DD HH24:MI:SS')) <![CDATA[<]]> 0 OR
													SUM(EXECUTIONS_TOTAL) - LAG(SUM(EXECUTIONS_TOTAL)) OVER(ORDER BY TO_CHAR(A.LOG_DT,'YYYY-MM-DD HH24:MI:SS')) <![CDATA[<]]> 0 THEN 'Y'
													ELSE 'N'
												END) STATS_INITIALIZE_YN -- 성능정보 초기화 되었는지 여부
										FROM VSQL_STATS_D A
										WHERE A.DBID = #{dbid}
										AND A.SQL_ID = #{after_prd_sql_id}
										AND A.LOG_DT >= TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') - 1
										GROUP BY TO_CHAR(A.LOG_DT,'YYYY-MM-DD HH24:MI:SS')
											, DBID
											, INST_ID
											, SQL_ID
									) A
							) A
							, (SELECT MAX(MODULE) MODULE
								FROM VSQL_MODULE
								WHERE DBID = #{dbid}
								AND SQL_ID = #{after_prd_sql_id}
							) B
						WHERE A.RNUM > 1
						--전체 데이터를 대상으로 조회 변경
						ORDER BY A.LOG_DT DESC
					) X
				WHERE ROWNUM  <![CDATA[<]]>= (${pagePerCount} * ${currentPage})
			)
		WHERE RNUM >= (${pagePerCount} * (${currentPage} - 1) + 1)
	</select>
	
	<insert id="insertTuningTargetSql" parameterType="sqls">
		/* SqlsDao.insertTuningTargetSql */	
		INSERT INTO TUNING_TARGET_SQL(
			TUNING_NO --튜닝번호
			, DBID --DBID
			, SQL_ID --SQL_ID
			, CHOICE_DIV_CD --선정구분코드
			, TUNING_STATUS_CD --튜닝상태코드
			, PERFR_ID --성능담당자ID
			, TUNING_REQUESTER_ID --튜닝요청자ID
			, TUNING_REQUESTER_WRKJOB_CD --튜닝요청자업무코드
			, TUNING_REQUESTER_TEL_NUM --튜닝요청자전화번호
			, TUNING_REQUEST_DT --튜닝요청일시
			, PLAN_HASH_VALUE --PLAN_HASH_VALUE
			, MODULE --MODULE
			, PARSING_SCHEMA_NAME --PARSING_SCHEMA_NAME
			, EXECUTIONS --EXECUTIONS
			, AVG_BUFFER_GETS --AVG_BUFFER_GETS
			, MAX_BUFFER_GETS --MAX_BUFFER_GETS
			, TOTAL_BUFFER_GETS --TOTAL_BUFFER_GETS
			, AVG_ELAPSED_TIME --AVG_BUFFER_GETS
			, MAX_ELAPSED_TIME --MAX_ELAPSED_TIME
			, AVG_CPU_TIME --AVG_CPU_TIME
			, AVG_DISK_READS --AVG_DISK_READS
			, AVG_ROW_PROCESSED --AVG_ROW_PROCESSED
			, RATIO_BUFFER_GET_TOTAL --RATIO_BUFFER_GET_TOTAL
			, RATIO_CPU_TOTAL --RATIO_CPU_TOTAL
			, RATIO_CPU_PER_EXECUTIONS --RATIO_CPU_PER_EXECUTIONS
			, SQL_TEXT --SQL_TEXT
			, PERF_CHECK_ID --성능점검ID'
			, PROGRAM_ID --프로그램ID'
			, PROJECT_ID --프로젝트ID'
			<if test="sql_auto_perf_check_id != null and sql_auto_perf_check_id != ''">
			, SQL_AUTO_PERF_CHECK_ID
			</if>
			, TUNING_PRGRS_STEP_SEQ --튜닝진행단계일련번호
			, DBIO -- DBIO
		)VALUES(
			  #{tuning_no} -->채번한 값 --튜닝번호
			, #{dbid} --> A.DBID --DBID
			, #{sql_id} --> A.AFTER_PRD_SQL_ID --SQL_ID
			, #{choice_div_cd} --> 'F' --선정구분코드(F:배포후성능점검)
			, #{tuning_status_cd} --> '3' --튜닝상태코드 (3:튜닝대기)
			, #{perfr_id} --> CommonDao.getTuner --성능담당자ID
			, #{tuning_requester_id} --> '' --튜닝요청자ID
			, #{tuning_requester_wrkjob_cd, jdbcType=VARCHAR} --> '' --튜닝요청자업무코드
			, #{tuning_requester_tel_num, jdbcType=VARCHAR} --> '' --튜닝요청자전화번호
			, SYSDATE --> 기존로직이용 --튜닝요청일시
			, #{plan_hash_value} --> A.AFTER_PRD_PLAN_HASH_VALUE --PLAN_HASH_VALUE
			, #{module, jdbcType=VARCHAR} --> '' --MODULE
			, #{parsing_schema_name} --> --PARSING_SCHEMA_NAME
			, #{executions} --> A.AFTER_EXECUTIONS --EXECUTIONS
			, #{avg_buffer_gets} --> A.AFTER_PRD_BUFFER_GETS --AVG_BUFFER_GETS
			, #{max_buffer_gets, jdbcType=INTEGER} --> '' --MAX_BUFFER_GETS
			, #{total_buffer_gets, jdbcType=INTEGER} --> '' --TOTAL_BUFFER_GETS
			, #{avg_elapsed_time} --> A.AFTER_PRD_ELAPSED_TIME --AVG_BUFFER_GETS
			, #{max_elapsed_time, jdbcType=INTEGER} --> '' --MAX_ELAPSED_TIME
			, #{avg_cpu_time, jdbcType=INTEGER} --> '' --AVG_CPU_TIME
			, #{avg_disk_reads, jdbcType=INTEGER} --> '' --AVG_DISK_READS
			, #{avg_row_processed} --> A.AFTER_PRD_ROWS_PROCESSED --AVG_ROW_PROCESSED
			, #{ratio_buffer_get_total, jdbcType=INTEGER} --> '' --RATIO_BUFFER_GET_TOTAL
			, #{ratio_cpu_total, jdbcType=INTEGER} --> '' --RATIO_CPU_TOTAL
			, #{ratio_cpu_per_executions, jdbcType=INTEGER} --> '' --RATIO_CPU_PER_EXECUTIONS
			, (SELECT SQL_FULLTEXT FROM VSQL_TEXT WHERE DBID = #{dbid} AND SQL_ID = #{sql_id} AND ROWNUM = 1)
			, #{perf_check_id} --> A.PERF_CHECK_ID --성능점검ID'
			, #{program_id} --> A.PROGRAM_ID --프로그램ID'
			, #{project_id} --> 튜닝요청 시 입력 받은 값 --프로젝트ID'
			<if test="sql_auto_perf_check_id != null and sql_auto_perf_check_id != ''">
			, #{sql_auto_perf_check_id} --> 점검팩 ID
			</if>
			, #{tuning_prgrs_step_seq} --> 튜닝요청 시 입력 받은 값 --튜닝진행단계일련번호
			, #{dbio} --> DBIO
		)
	</insert>
	
	<insert id="insertTuningStatusHistory" parameterType="sqls">
		/* SqlsDao.insertTuningStatusHistory */ -->
		INSERT INTO SQL_TUNING_STATUS_HISTORY (
			TUNING_NO, TUNING_STATUS_CHANGE_DT, TUNING_STATUS_CD, TUNING_STATUS_CHANGE_WHY, TUNING_STATUS_CHANGER_ID )
		VALUES (
			#{tuning_no},
			SYSDATE,
			#{tuning_status_cd}, --> '3' 튜닝대기
			#{tuning_status_change_why}, --> '배포후성능점검 튜닝대상선정 및 접수'
			#{tuning_status_changer_id}
		)
	</insert>
	
	<select id="selectParsingSchemaName" parameterType="sqls" resultType="sqls">
		/* SqlsDao.selectParsingSchemaName */
		SELECT PARSING_SCHEMA_NAME
		FROM DEPLOY_PERF_CHK_PARSING_SCHEMA
		WHERE WRKJOB_CD = #{wrkjob_cd}                    --(=A.WRKJOB_CD)
		AND PERF_CHECK_STEP_ID = #{perf_check_step_id}    --(=A.PERF_CHECK_STEP_ID)
	</select>
	
	<select id="selectSqlText" parameterType="sqls" resultType="sqls">
		/* SqlsDao.selectSqlText */
		SELECT SQL_FULLTEXT FROM VSQL_TEXT WHERE DBID = #{dbid} AND SQL_ID = #{sql_id} AND ROWNUM = 1
	</select>
	
	<select id="performanceCheckResult" parameterType="sqls" resultType="sqls">
		/* SqlsDao.performanceCheckResult */
		SELECT A.PERF_CHECK_INDC_NM -- 점검지표
			, A.INDC_PASS_MAX_VALUE -- 지표여부값판정구분코드
			, A.EXEC_RESULT_VALUE -- 배포전 성능점검결과값
			, A.PERF_CHECK_RESULT_DIV_NM -- 배포전 성능점검결과
			, B.EXEC_RESULT_VALUE AS PRD_EXEC_RESULT_VALUE -- 배포후 성능점검결과값
			, NVL(CD1.CD_NM, 'N/A') AS PRD_PERF_CHECK_RESULT_DIV_NM -- 배포후 성능점검결과
			, A.EXCEPTION_YN -- 예외등록여부
			, (CASE WHEN A.PERF_CHECK_INDC_ID = 4 THEN '운영DB 수집 부하를 줄이기 위하여 메모리사용량은 수집하지 않음'
					ELSE A.PERF_CHECK_RESULT_DESC
				END) PERF_CHECK_RESULT_DESC -- 성능점검 결과내용
			, A.PERF_CHECK_RESULT_DIV_CD                                    -- 배포전 성능점검결과
			, B.PERF_CHECK_RESULT_DIV_CD AS PRD_PERF_CHECK_RESULT_DIV_CD    -- 배포후 성능점검결과
			, A.PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
			, A.PERF_CHECK_METH_CD
		FROM (SELECT /* DISPLAY */
					B.PERF_CHECK_INDC_NM -- 점검지표
					-- 적합
					, CASE WHEN INSTR(A.INDC_PASS_MAX_VALUE,'.',1) > 0 THEN TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999990.9999') ELSE TO_CHAR(A.INDC_PASS_MAX_VALUE) END INDC_PASS_MAX_VALUE
					-- 성능점검결과값
					, CASE WHEN INSTR(A.EXEC_RESULT_VALUE,'.',1) > 0 THEN TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999999999999999990.9999') ELSE TO_CHAR(A.EXEC_RESULT_VALUE) END EXEC_RESULT_VALUE
					, CD2.CD_NM AS PERF_CHECK_RESULT_DIV_NM -- 성능점검결과
					, (CASE WHEN C.PROGRAM_ID IS NOT NULL THEN 'Y' ELSE 'N' END) EXCEPTION_YN -- 예외등록여부
					/* HIDDEN */
					, A.INDC_YN_DECIDE_DIV_CD                     -- 지표여부값판정구분코드
					, A.PERF_CHECK_INDC_ID                        -- 성능점검지표ID
					, A.PERF_CHECK_RESULT_DIV_CD                  -- 성능점검결과구분코드
					, B.PERF_CHECK_METH_CD                        -- 성능점검방법코드
					, CD1.CD_NM AS PERF_CHECK_METH_NM             -- 성능점검방법
					, A.PERF_CHECK_RESULT_DESC                    -- 성능점검결과설명
				FROM DEPLOY_PERF_CHK_DETAIL_RESULT A             -- 배포성능점검상세결과내역
					,DEPLOY_PERF_CHK_INDC B                      -- 배포성능점검지표기본
					,(SELECT *
						FROM (SELECT A.PROGRAM_ID
									,B.PERF_CHECK_INDC_ID
									,ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
								FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A     -- 배포성능점검예외요청내역
									,DEPLOY_PERF_CHK_INDC_EXCPT B        -- 배포성능점검지표예외내역
								WHERE A.EXCEPTION_PRC_METH_CD = '1'
								AND A.EXCEPTION_PRC_STATUS_CD = '2'
								AND B.DEL_YN = 'N'
								AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID
								AND B.PROGRAM_ID = #{program_id}
							)
						WHERE LAST_EXCEPT_INDC_NUM = 1
					) C
					,CD CD1
					,CD CD2
				WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
				AND A.PROGRAM_ID = C.PROGRAM_ID(+)
				AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
				AND B.PERF_CHECK_METH_CD = CD1.CD
				AND CD1.GRP_CD_ID = '1059'
				AND A.PERF_CHECK_RESULT_DIV_CD = CD2.CD
				AND CD2.GRP_CD_ID = '1055'
				AND A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
				AND A.PERF_CHECK_STEP_ID = '1'                                     -- 성능점검단계ID
				AND A.PROGRAM_ID = #{program_id}                                   -- 프로그램ID
				AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
			) A
			, (SELECT A.PERF_CHECK_INDC_ID
					, A.PERF_CHECK_METH_CD -- 성능점검방법코드
					-- 성능점검결과값
					,(CASE 
							WHEN A.PERF_CHECK_INDC_ID IN (1, 2, 3) THEN 
								(CASE 
									WHEN INSTR(NVL(B.EXEC_RESULT_VALUE, 0),'.',1) > 0 THEN TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0), 'FM999999999999999990.9999') 
									ELSE TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0)) 
								END) 
							WHEN A.PERF_CHECK_INDC_ID IN (4) THEN 'N/A'
							WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
								(CASE 
									WHEN EXEC_RESULT_VALUE > 0 THEN 'Y' 
									ELSE 'N' 
								END)
						END) EXEC_RESULT_VALUE
					-- 성능점검결과구분코드
					-- 1. 지표(PERF_CHECK_INDC_ID)가 ROW_PROCESSED(3) 인경우 실행결과값(EXEC_RESULT_VALUE)이 0건은 부적합으로 판정
					-- 2. 나머지 지표는 지표값을 초과한 경우 부적합으로 판정
					,(CASE
						WHEN A.PERF_CHECK_INDC_ID IN (1, 2) THEN (CASE WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' ELSE 'A' END) 
						WHEN A.PERF_CHECK_INDC_ID = 3          THEN 
							(CASE 
								WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) = 0 THEN 'A'
								WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN 'B' 
								WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' 
								ELSE 'A' 
							END) 
						WHEN A.PERF_CHECK_INDC_ID = 4 THEN 'N/A'
						WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
							(CASE 
								WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'A'
								ELSE
									(CASE
										WHEN B.EXEC_RESULT_VALUE > 0 THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'A', '2', 'B')
										WHEN B.EXEC_RESULT_VALUE = 0  OR B.EXEC_RESULT_VALUE IS NULL THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'B', '2', 'A')
									END)
							END)
					END) AS PERF_CHECK_RESULT_DIV_CD -- 성능점검결과구분코드
				FROM -- 성능점검기본 지표 
					(SELECT E.PERF_CHECK_INDC_ID
							, E.PERF_CHECK_PROGRAM_DIV_CD
							, E.PASS_MAX_VALUE
							, E.YN_DECIDE_DIV_CD
							, F.PERF_CHECK_INDC_NM
							, F.PERF_CHECK_METH_CD
							, E.WRKJOB_CD
						FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
							, DEPLOY_PERF_CHK_STEP_EXEC B     -- 배포성능점검단계별수행내역
							, DEPLOY_PERF_CHK_STEP C          -- 배포성능점점단계기본
							, DEPLOY_PERF_CHK_STEP_TEST_DB D  -- 배포성능점검단계별테스트DB기본
							, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
							, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
						WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
						AND B.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
						AND D.WRKJOB_CD = #{top_wrkjob_cd}
						AND C.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
						AND A.PERF_CHECK_ID = #{perf_check_id}
						AND B.PERF_CHECK_STEP_ID = #{perf_check_step_id}
						AND D.PROGRAM_DIV_CD = E.PERF_CHECK_PROGRAM_DIV_CD
						AND E.INDC_APPLY_YN = 'Y'
						AND F.INDC_USE_YN = 'Y'
						AND F.PERF_CHECK_INDC_ID IN (1,2,3,4,5,6)
					) A
					,(SELECT B1.PERF_CHECK_INDC_ID
							, (CASE 
									WHEN B1.PERF_CHECK_INDC_ID IN (1, 2, 3, 4) THEN B1.EXEC_RESULT_VALUE
									WHEN B1.PERF_CHECK_INDC_ID = 5 AND  B2.EXEC_RESULT_VALUE > 0
										AND ( (B1.COMMAND_TYPE  = 3 AND B1.BUFFER_GETS > B2.BIG_TABLE_THRESHOLD_CNT)
												OR (B1.COMMAND_TYPE <![CDATA[<]]>> 3 AND 1 = 1)) THEN 1
									WHEN B1.PERF_CHECK_INDC_ID = 6 AND  B2.EXEC_RESULT_VALUE > 0 THEN 1
									ELSE 0
								END) EXEC_RESULT_VALUE
						-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (1,2,3,4)
						FROM (SELECT PERF_CHECK_INDC_ID
									, MAX(CASE 
												WHEN PERF_CHECK_INDC_ID = 1 THEN A.ELAPSED_TIME 
												WHEN PERF_CHECK_INDC_ID = 2 THEN A.BUFFER_GETS
												WHEN PERF_CHECK_INDC_ID = 3 THEN A.ROWS_PROCESSED
												WHEN PERF_CHECK_INDC_ID = 4 THEN NULL
											END) EXEC_RESULT_VALUE
									, MAX(A.COMMAND_TYPE) COMMAND_TYPE
									, MAX(A.BUFFER_GETS) BUFFER_GETS
								FROM (SELECT ROUND(ELAPSED_TIME/1000000/EXECUTIONS, 4) ELAPSED_TIME
											, ROUND(BUFFER_GETS/EXECUTIONS) BUFFER_GETS
											, ROUND(ROWS_PROCESSED/EXECUTIONS) ROWS_PROCESSED
											, (SELECT COMMAND_TYPE 
												FROM VSQL_TEXT ST
												WHERE ST.DBID = #{dbid}                          -- 배포후 운영 DBID
												AND ST.SQL_ID = #{after_prd_sql_id}              -- 배포후 운영 SQL_ID
												AND ROWNUM = 1) COMMAND_TYPE
										FROM (SELECT NVL(SUM(A.ELAPSED_TIME), 0) AS ELAPSED_TIME
													, NVL(SUM(A.BUFFER_GETS), 0) AS BUFFER_GETS
													, NVL(SUM(A.ROWS_PROCESSED), 0) AS ROWS_PROCESSED
													, NVL(DECODE(SUM(A.EXECUTIONS), 0, 1, SUM(A.EXECUTIONS)), 1) AS EXECUTIONS
												FROM VSQL_STATS A    -- 배포성능점검SQL성능내역(TABLE)
												WHERE A.DBID = #{dbid}                                -- 배포후 운영 DBID
												AND A.SQL_ID = #{after_prd_sql_id}                    -- 배포후 운영 SQL_ID
												AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}  -- 배포후 운영 PLAN_HASH_VALUE
											) A
									) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL <![CDATA[<]]>= 6)
								GROUP BY PERF_CHECK_INDC_ID
							) B1
							-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (5, 6)
							,(SELECT B.PERF_CHECK_INDC_ID
									, B.EXEC_RESULT_VALUE
									, C.BIG_TABLE_THRESHOLD_CNT
								FROM (SELECT PERF_CHECK_INDC_ID
											, SUM(CASE 
														WHEN D.PERF_CHECK_INDC_ID = 5 AND A.OPERATION IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN') THEN 1
														WHEN D.PERF_CHECK_INDC_ID = 6 AND A.OPERATION IN ('PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL') THEN 1 
														ELSE 0 
													END) EXEC_RESULT_VALUE
										FROM (SELECT  ID, OPERATION || ' ' || OPTIONS AS OPERATION
												FROM  (SELECT A.STATEMENT_ID, A.ID, A.OPERATION, A.OPTIONS
															, MAX(A.STATEMENT_ID) OVER (PARTITION BY NULL) AS MAX_STATEMENT_ID
														FROM VSQL_PLAN A                               -- 배포성능점검SQL플랜내역(TABLE)
														WHERE A.DBID = #{dbid}                          -- 배포후 운영 DBID
														AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}    -- 배포후 운영 PLAN_HASH_VALUE
														AND (A.OBJECT_OWNER, A.OBJECT_NAME) NOT IN (SELECT 'SYS', 'DUAL' FROM DUAL)
														AND A.OBJECT_TYPE <![CDATA[<]]>> 'TABLE (TEMP)'
													) A
												WHERE  A.STATEMENT_ID = A.MAX_STATEMENT_ID
												AND  A.OPERATION || ' ' || A.OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN', 'PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL')
											) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL <![CDATA[<]]>= 6) D
										GROUP BY PERF_CHECK_INDC_ID
									) B
									-- 대용량 기준건수 
									,(SELECT TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
										FROM SPOP_PREFERENCES A
										, (SELECT B.DBID, B.PREF_ID, B.PREF_SEQ, B.PREF_VALUE
											FROM -- DBID 조회
												(SELECT C.DBID 
													FROM DEPLOY_PERF_CHK A
														, WRKJOB_DB B
														, DATABASE C
													WHERE A.WRKJOB_CD = B.WRKJOB_CD   
													AND B.DBID = C.DBID             
													AND C.DB_OPERATE_TYPE_CD = '3'  -- DB운영유형코드 1:개발, 2:테스트, 3:운영
													AND A.PERF_CHECK_ID = #{perf_check_id}
													AND ROWNUM = 1
												) A
												, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
														, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
													FROM DB_PREFERENCES
													WHERE PREF_ID IN (12004)
												) B
											WHERE A.DBID = B.DBID
											AND B.PREF_SEQ = B.MAX_PREF_SEQ
										) B
										WHERE A.PREF_ID = B.PREF_ID(+)
										AND A.PREF_ID IN (12004)
									) C
							) B2
						WHERE B1.PERF_CHECK_INDC_ID = B2.PERF_CHECK_INDC_ID(+)
					) B
					-- 성능점검 예외 지표
					,(SELECT *
						FROM (SELECT B.PERF_CHECK_INDC_ID
									, B.PASS_MAX_VALUE
									, B.YN_DECIDE_DIV_CD
									, ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
								FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
									, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
								WHERE A.EXCEPTION_PRC_METH_CD = '1'
								AND A.EXCEPTION_PRC_STATUS_CD = '2'
								AND B.DEL_YN = 'N'
								AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
								AND A.PROGRAM_ID = B.PROGRAM_ID
								AND B.PROGRAM_ID = #{program_id}
							)
						WHERE LAST_EXCEPT_INDC_NUM = 1
					) C
				WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID(+)
				AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
			) B,
			CD CD1
		WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		AND B.PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1055'
		ORDER BY A.PERF_CHECK_INDC_ID
	</select>
	

	<select id="performanceCheckResult_20210311" parameterType="sqls" resultType="sqls">
		/* SqlsDao.performanceCheckResult */
		SELECT A.PERF_CHECK_INDC_NM -- 점검지표
			, A.INDC_PASS_MAX_VALUE -- 지표여부값판정구분코드
			, A.EXEC_RESULT_VALUE -- 배포전 성능점검결과값
			, A.PERF_CHECK_RESULT_DIV_NM -- 배포전 성능점검결과
			, B.EXEC_RESULT_VALUE AS PRD_EXEC_RESULT_VALUE -- 배포후 성능점검결과값
			, NVL(CD1.CD_NM, 'N/A') AS PRD_PERF_CHECK_RESULT_DIV_NM -- 배포후 성능점검결과
			, A.EXCEPTION_YN -- 예외등록여부
			, (CASE WHEN A.PERF_CHECK_INDC_ID = 4 THEN '운영DB 수집 부하를 줄이기 위하여 메모리사용량은 수집하지 않음'
					ELSE A.PERF_CHECK_RESULT_DESC
				END) PERF_CHECK_RESULT_DESC -- 성능점검 결과내용
			, A.PERF_CHECK_RESULT_DIV_CD                                    -- 배포전 성능점검결과
			, B.PERF_CHECK_RESULT_DIV_CD AS PRD_PERF_CHECK_RESULT_DIV_CD    -- 배포후 성능점검결과
			, A.PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
			, A.PERF_CHECK_METH_CD
		FROM (SELECT /* DISPLAY */
					B.PERF_CHECK_INDC_NM -- 점검지표
					-- 적합
					, CASE WHEN INSTR(A.INDC_PASS_MAX_VALUE,'.',1) > 0 THEN TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999990.9999') ELSE TO_CHAR(A.INDC_PASS_MAX_VALUE) END INDC_PASS_MAX_VALUE
					-- 성능점검결과값
					, CASE WHEN INSTR(A.EXEC_RESULT_VALUE,'.',1) > 0 THEN TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999999999999999990.9999') ELSE TO_CHAR(A.EXEC_RESULT_VALUE) END EXEC_RESULT_VALUE
					, CD2.CD_NM AS PERF_CHECK_RESULT_DIV_NM -- 성능점검결과
					, (CASE WHEN C.PERF_CHECK_ID IS NOT NULL THEN 'Y' ELSE 'N' END) EXCEPTION_YN -- 예외등록여부
					/* HIDDEN */
					, A.INDC_YN_DECIDE_DIV_CD                     -- 지표여부값판정구분코드
					, A.PERF_CHECK_INDC_ID                        -- 성능점검지표ID
					, A.PERF_CHECK_RESULT_DIV_CD                  -- 성능점검결과구분코드
					, B.PERF_CHECK_METH_CD                        -- 성능점검방법코드
					, CD1.CD_NM AS PERF_CHECK_METH_NM             -- 성능점검방법
					, A.PERF_CHECK_RESULT_DESC                    -- 성능점검결과설명
				FROM DEPLOY_PERF_CHK_DETAIL_RESULT A             -- 배포성능점검상세결과내역
					,DEPLOY_PERF_CHK_INDC B                      -- 배포성능점검지표기본
					,(SELECT A.PERF_CHECK_ID
							,A.PROGRAM_ID
							,B.PERF_CHECK_INDC_ID
						FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A     -- 배포성능점검예외요청내역
							,DEPLOY_PERF_CHK_INDC_EXCPT B        -- 배포성능점검지표예외내역
						WHERE A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID
						AND A.PERF_CHECK_ID = #{perf_check_id}
						AND A.PROGRAM_ID = #{program_id}
					) C
					,CD CD1
					,CD CD2
				WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
				AND A.PERF_CHECK_ID = C.PERF_CHECK_ID(+)
				AND A.PROGRAM_ID = C.PROGRAM_ID(+)
				AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
				AND B.PERF_CHECK_METH_CD = CD1.CD
				AND CD1.GRP_CD_ID = '1059'
				AND A.PERF_CHECK_RESULT_DIV_CD = CD2.CD
				AND CD2.GRP_CD_ID = '1055'
				AND A.PERF_CHECK_ID = #{perf_check_id}                             -- 성능점검ID
				AND A.PERF_CHECK_STEP_ID = '1'                                     -- 성능점검단계ID
				AND A.PROGRAM_ID = #{program_id}                                   -- 프로그램ID
				AND A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
			) A
			, (SELECT A.PERF_CHECK_INDC_ID
					, A.PERF_CHECK_METH_CD -- 성능점검방법코드
					-- 성능점검결과값
					,(CASE 
							WHEN A.PERF_CHECK_INDC_ID IN (1, 2, 3) THEN 
								(CASE 
									WHEN INSTR(NVL(B.EXEC_RESULT_VALUE, 0),'.',1) > 0 THEN TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0), 'FM999999999999999990.9999') 
									ELSE TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0)) 
								END) 
							WHEN A.PERF_CHECK_INDC_ID IN (4) THEN 'N/A'
							WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
								(CASE 
									WHEN EXEC_RESULT_VALUE > 0 THEN 'Y' 
									ELSE 'N' 
								END)
						END) EXEC_RESULT_VALUE
					-- 성능점검결과구분코드
					-- 1. 지표(PERF_CHECK_INDC_ID)가 ROW_PROCESSED(3) 인경우 실행결과값(EXEC_RESULT_VALUE)이 0건은 부적합으로 판정
					-- 2. 나머지 지표는 지표값을 초과한 경우 부적합으로 판정
					,(CASE
						WHEN A.PERF_CHECK_INDC_ID IN (1, 2) THEN (CASE WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' ELSE 'A' END) 
						WHEN A.PERF_CHECK_INDC_ID = 3          THEN 
							(CASE 
								WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) = 0 THEN 'A'
								WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN 'B' 
								WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' 
								ELSE 'A' 
							END) 
						WHEN A.PERF_CHECK_INDC_ID = 4 THEN 'N/A'
						WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
							(CASE 
								WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'A'
								ELSE
									(CASE
										WHEN B.EXEC_RESULT_VALUE > 0 THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'A', '2', 'B')
										WHEN B.EXEC_RESULT_VALUE = 0  OR B.EXEC_RESULT_VALUE IS NULL THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'B', '2', 'A')
									END)
							END)
					END) AS PERF_CHECK_RESULT_DIV_CD -- 성능점검결과구분코드
				FROM -- 성능점검기본 지표 
					(SELECT E.PERF_CHECK_INDC_ID
							, E.PERF_CHECK_PROGRAM_DIV_CD
							, E.PASS_MAX_VALUE
							, E.YN_DECIDE_DIV_CD
							, F.PERF_CHECK_INDC_NM
							, F.PERF_CHECK_METH_CD
							, E.WRKJOB_CD
						FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
							, DEPLOY_PERF_CHK_STEP_EXEC B     -- 배포성능점검단계별수행내역
							, DEPLOY_PERF_CHK_STEP C          -- 배포성능점점단계기본
							, DEPLOY_PERF_CHK_STEP_TEST_DB D  -- 배포성능점검단계별테스트DB기본
							, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
							, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
						WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
						AND B.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
						AND D.WRKJOB_CD = #{top_wrkjob_cd}
						AND C.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
						AND A.PERF_CHECK_ID = #{perf_check_id}
						AND B.PERF_CHECK_STEP_ID = #{perf_check_step_id}
						AND D.PROGRAM_DIV_CD = E.PERF_CHECK_PROGRAM_DIV_CD
						AND E.INDC_APPLY_YN = 'Y'
						AND F.INDC_USE_YN = 'Y'
						AND F.PERF_CHECK_INDC_ID IN (1,2,3,4,5,6)
					) A
					,(SELECT B1.PERF_CHECK_INDC_ID
							, (CASE 
									WHEN B1.PERF_CHECK_INDC_ID IN (1, 2, 3, 4) THEN B1.EXEC_RESULT_VALUE
									WHEN B1.PERF_CHECK_INDC_ID = 5 AND  B2.EXEC_RESULT_VALUE > 0
										AND ( (B1.COMMAND_TYPE  = 3 AND B1.BUFFER_GETS > B2.BIG_TABLE_THRESHOLD_CNT)
												OR (B1.COMMAND_TYPE <![CDATA[<]]>> 3 AND 1 = 1)) THEN 1
									WHEN B1.PERF_CHECK_INDC_ID = 6 AND  B2.EXEC_RESULT_VALUE > 0 THEN 1
									ELSE 0
								END) EXEC_RESULT_VALUE
						-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (1,2,3,4)
						FROM (SELECT PERF_CHECK_INDC_ID
									, MAX(CASE 
												WHEN PERF_CHECK_INDC_ID = 1 THEN A.ELAPSED_TIME 
												WHEN PERF_CHECK_INDC_ID = 2 THEN A.BUFFER_GETS
												WHEN PERF_CHECK_INDC_ID = 3 THEN A.ROWS_PROCESSED
												WHEN PERF_CHECK_INDC_ID = 4 THEN NULL
											END) EXEC_RESULT_VALUE
									, MAX(A.COMMAND_TYPE) COMMAND_TYPE
									, MAX(A.BUFFER_GETS) BUFFER_GETS
								FROM (SELECT ROUND(ELAPSED_TIME/1000000/EXECUTIONS, 4) ELAPSED_TIME
											, ROUND(BUFFER_GETS/EXECUTIONS) BUFFER_GETS
											, ROUND(ROWS_PROCESSED/EXECUTIONS) ROWS_PROCESSED
											, (SELECT COMMAND_TYPE 
												FROM VSQL_TEXT ST
												WHERE ST.DBID = #{dbid}                          -- 배포후 운영 DBID
												AND ST.SQL_ID = #{after_prd_sql_id}              -- 배포후 운영 SQL_ID
												AND ROWNUM = 1) COMMAND_TYPE
										FROM (SELECT NVL(SUM(A.ELAPSED_TIME), 0) AS ELAPSED_TIME
													, NVL(SUM(A.BUFFER_GETS), 0) AS BUFFER_GETS
													, NVL(SUM(A.ROWS_PROCESSED), 0) AS ROWS_PROCESSED
													, NVL(DECODE(SUM(A.EXECUTIONS), 0, 1, SUM(A.EXECUTIONS)), 1) AS EXECUTIONS
												FROM VSQL_STATS A    -- 배포성능점검SQL성능내역(TABLE)
												WHERE A.DBID = #{dbid}                                -- 배포후 운영 DBID
												AND A.SQL_ID = #{after_prd_sql_id}                    -- 배포후 운영 SQL_ID
												AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}  -- 배포후 운영 PLAN_HASH_VALUE
											) A
									) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL <![CDATA[<]]>= 6)
								GROUP BY PERF_CHECK_INDC_ID
							) B1
							-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (5, 6)
							,(SELECT B.PERF_CHECK_INDC_ID
									, B.EXEC_RESULT_VALUE
									, C.BIG_TABLE_THRESHOLD_CNT
								FROM (SELECT PERF_CHECK_INDC_ID
											, SUM(CASE 
														WHEN D.PERF_CHECK_INDC_ID = 5 AND A.OPERATION IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN') THEN 1
														WHEN D.PERF_CHECK_INDC_ID = 6 AND A.OPERATION IN ('PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL') THEN 1 
														ELSE 0 
													END) EXEC_RESULT_VALUE
										FROM (SELECT  ID, OPERATION || ' ' || OPTIONS AS OPERATION
												FROM  (SELECT A.STATEMENT_ID, A.ID, A.OPERATION, A.OPTIONS
															, MAX(A.STATEMENT_ID) OVER (PARTITION BY NULL) AS MAX_STATEMENT_ID
														FROM VSQL_PLAN A                               -- 배포성능점검SQL플랜내역(TABLE)
														WHERE A.DBID = #{dbid}                          -- 배포후 운영 DBID
														AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}    -- 배포후 운영 PLAN_HASH_VALUE
														AND (A.OBJECT_OWNER, A.OBJECT_NAME) NOT IN (SELECT 'SYS', 'DUAL' FROM DUAL)
														AND A.OBJECT_TYPE <![CDATA[<]]>> 'TABLE (TEMP)'
													) A
												WHERE  A.STATEMENT_ID = A.MAX_STATEMENT_ID
												AND  A.OPERATION || ' ' || A.OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN', 'PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL')
											) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL <![CDATA[<]]>= 6) D
										GROUP BY PERF_CHECK_INDC_ID
									) B
									-- 대용량 기준건수 
									,(SELECT TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
										FROM SPOP_PREFERENCES A
										, (SELECT B.DBID, B.PREF_ID, B.PREF_SEQ, B.PREF_VALUE
											FROM -- DBID 조회
												(SELECT C.DBID 
													FROM DEPLOY_PERF_CHK A
														, WRKJOB_DB B
														, DATABASE C
													WHERE A.WRKJOB_CD = B.WRKJOB_CD   
													AND B.DBID = C.DBID             
													AND C.DB_OPERATE_TYPE_CD = '3'  -- DB운영유형코드 1:개발, 2:테스트, 3:운영
													AND A.PERF_CHECK_ID = #{perf_check_id}
													AND ROWNUM = 1
												) A
												, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
														, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
													FROM DB_PREFERENCES
													WHERE PREF_ID IN (12004)
												) B
											WHERE A.DBID = B.DBID
											AND B.PREF_SEQ = B.MAX_PREF_SEQ
										) B
										WHERE A.PREF_ID = B.PREF_ID(+)
										AND A.PREF_ID IN (12004)
									) C
							) B2
						WHERE B1.PERF_CHECK_INDC_ID = B2.PERF_CHECK_INDC_ID(+)
					) B
					-- 성능점검 예외 지표
					,(SELECT B.PERF_CHECK_INDC_ID
							, B.PASS_MAX_VALUE
							, B.YN_DECIDE_DIV_CD
						FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
							, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
							, (SELECT F.PERF_CHECK_INDC_ID
								FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
									, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
									, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
								WHERE A.WRKJOB_CD = E.WRKJOB_CD
								AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
								AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
								AND A.PERF_CHECK_ID = #{perf_check_id}
								AND E.INDC_APPLY_YN = 'Y'
								AND F.INDC_USE_YN = 'Y'
							) C
						WHERE A.EXCEPTION_PRC_METH_CD = '1'
						AND A.EXCEPTION_PRC_STATUS_CD = '2'
						AND B.DEL_YN = 'N'
						AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
						AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
						AND B.PROGRAM_ID = #{program_id}
					) C
				WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID(+)
				AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
			) B,
			CD CD1
		WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		AND B.PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1055'
		ORDER BY A.PERF_CHECK_INDC_ID
	</select>	
	
	<select id="performanceCheckResultException" parameterType="sqls" resultType="sqls">
		<![CDATA[
		/* SqlsDao.performanceCheckResultException */
		SELECT B.PERF_CHECK_INDC_NM -- 점검지표
			, B.INDC_PASS_MAX_VALUE -- 지표여부값판정구분코드
			, 'N/A' EXEC_RESULT_VALUE -- 배포전 성능점검결과값
			, 'N/A' PERF_CHECK_RESULT_DIV_NM -- 배포전 성능점검결과
			, B.EXEC_RESULT_VALUE AS PRD_EXEC_RESULT_VALUE -- 배포후 성능점검결과값
			, NVL(CD1.CD_NM, 'N/A') AS PRD_PERF_CHECK_RESULT_DIV_NM -- 배포후 성능점검결과
			-- 영구점검인경우 '영구점검제외', 한시점검제외 or 지표단위예외 인경우 Y/N 으로 출력 (JMG: 20210120)
			--, 'N/A' EXCEPTION_YN -- 예외등록여부
			, (CASE 
					WHEN B.EXCEPTION_PRC_METH_CD = '2' THEN B.EXCEPTION_PRC_METH_NM 
					ELSE EXCEPTION_YN
				END) EXCEPTION_YN
			,(CASE
				WHEN B.PERF_CHECK_INDC_ID = 1 AND B.INDC_PASS_MAX_VALUE < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN
					'SQL 수행시간 : ' || TO_CHAR(B.EXEC_RESULT_VALUE, 'FM999999999999999990.9999') || '초 ==> ' || TO_CHAR(B.INDC_PASS_MAX_VALUE, 'FM999999999999999990.9999') || '초 이하로 개선 필요'
				WHEN B.PERF_CHECK_INDC_ID = 2 AND B.INDC_PASS_MAX_VALUE < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN
					'블럭수 : ' || TO_NUMBER(B.EXEC_RESULT_VALUE) || ' ==> ' || B.INDC_PASS_MAX_VALUE || ' 이하로 개선 필요'
				WHEN B.PERF_CHECK_INDC_ID = 3 THEN
					(CASE
						WHEN B.INDC_PASS_MAX_VALUE <> 0 AND B.INDC_PASS_MAX_VALUE < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN '처리건수 : ' || TO_NUMBER(B.EXEC_RESULT_VALUE) || '건, ' || B.INDC_PASS_MAX_VALUE || '건 이하로 처리(조회)되도록 개선 필요'
						WHEN B.INDC_PASS_MAX_VALUE <> 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN '처리건수 : 0건 ==> 데이터를 조회할 수 있는 바인드 값으로 변경하여 재 수행 필요'
						WHEN B.INDC_PASS_MAX_VALUE = 0 THEN '지표 설정값이 0건인 경우 처리건수와 상관없이 항상 적합처리됨'
						ELSE ''
					END)
				WHEN B.PERF_CHECK_INDC_ID = 4 THEN '운영DB 수집 부하를 줄이기 위하여 메모리사용량은 수집하지 않음'
				WHEN B.PERF_CHECK_INDC_ID = 5 AND NOT ((B.EXEC_RESULT_VALUE = 'N' AND B.YN_DECIDE_DIV_CD = '2') OR (B.EXEC_RESULT_VALUE = 'Y' AND B.YN_DECIDE_DIV_CD = '1')) THEN 
					'TABLE FULL SCAN : ' || B.EXEC_RESULT_VALUE || '개 ==> INDEX 추가 검토'
				WHEN B.PERF_CHECK_INDC_ID = 6 AND NOT ((B.EXEC_RESULT_VALUE = 'N' AND B.YN_DECIDE_DIV_CD = '2') OR (B.EXEC_RESULT_VALUE = 'Y' AND B.YN_DECIDE_DIV_CD = '1')) THEN 
					'전체 파티션 탐색 : ' || B.EXEC_RESULT_VALUE || '개 ==> WHERE에 파티션 키 컬럼 추가 필요'   
				ELSE ''
			END) AS PERF_CHECK_RESULT_DESC -- 성능점검결과설명			

			, 'N/A' PERF_CHECK_RESULT_DIV_CD                                    -- 배포전 성능점검결과
			, B.PERF_CHECK_RESULT_DIV_CD AS PRD_PERF_CHECK_RESULT_DIV_CD    -- 배포후 성능점검결과
			, B.PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
			, B.PERF_CHECK_METH_CD
		FROM (SELECT A.PERF_CHECK_INDC_ID
					, A.PERF_CHECK_METH_CD -- 성능점검방법코드
					-- 성능점검결과값
					,(CASE 
							WHEN A.PERF_CHECK_INDC_ID IN (1, 2, 3) THEN 
								(CASE 
									WHEN INSTR(NVL(B.EXEC_RESULT_VALUE, 0),'.',1) > 0 THEN TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0), 'FM999999999999999990.9999') 
									ELSE TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0)) 
								END) 
							WHEN A.PERF_CHECK_INDC_ID IN (4) THEN 'N/A'
							WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
								(CASE 
									WHEN EXEC_RESULT_VALUE > 0 THEN 'Y' 
									ELSE 'N' 
								END)
						END) EXEC_RESULT_VALUE
					-- 성능점검결과구분코드
					-- 1. 지표(PERF_CHECK_INDC_ID)가 ROW_PROCESSED(3) 인경우 실행결과값(EXEC_RESULT_VALUE)이 0건은 부적합으로 판정
					-- 2. 나머지 지표는 지표값을 초과한 경우 부적합으로 판정
					,(CASE
                        --  영구점검제외(2)인경우 기본지표로 성능점검
                        WHEN A.EXCEPTION_PRC_METH_CD = '2' THEN
                            CASE
                                WHEN A.PERF_CHECK_INDC_ID IN (1, 2) THEN (CASE WHEN A.PASS_MAX_VALUE < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' ELSE 'A' END) 
                                WHEN A.PERF_CHECK_INDC_ID = 3          THEN 
                                    (CASE 
                                        WHEN A.PASS_MAX_VALUE = 0 THEN 'A'
                                        WHEN A.PASS_MAX_VALUE > 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN 'B' 
                                        WHEN A.PASS_MAX_VALUE > 0 AND A.PASS_MAX_VALUE < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' 
                                        ELSE 'A' 
                                    END) 
                                WHEN A.PERF_CHECK_INDC_ID = 4 THEN 'N/A'
                                WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
                                    (CASE 
                                        WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'A'
                                        ELSE
                                            (CASE
                                                WHEN B.EXEC_RESULT_VALUE > 0 THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'A', '2', 'B')
                                                WHEN B.EXEC_RESULT_VALUE = 0  OR B.EXEC_RESULT_VALUE IS NULL THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'B', '2', 'A')
                                            END)
                                    END)
                            END
                        ELSE
                            CASE
                                WHEN A.PERF_CHECK_INDC_ID IN (1, 2) THEN (CASE WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' ELSE 'A' END) 
                                WHEN A.PERF_CHECK_INDC_ID = 3          THEN 
                                    (CASE 
                                        WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) = 0 THEN 'A'
                                        WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN 'B' 
                                        WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' 
                                        ELSE 'A' 
                                    END) 
                                WHEN A.PERF_CHECK_INDC_ID = 4 THEN 'N/A'
                                WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
                                    (CASE 
                                        WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'A'
                                        ELSE
                                            (CASE
                                                WHEN B.EXEC_RESULT_VALUE > 0 THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'A', '2', 'B')
                                                WHEN B.EXEC_RESULT_VALUE = 0  OR B.EXEC_RESULT_VALUE IS NULL THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'B', '2', 'A')
                                            END)
                                    END)
                            END
                      END) AS PERF_CHECK_RESULT_DIV_CD -- 성능점검결과구분코드
					, A.PERF_CHECK_INDC_NM -- 점검지표
					, CASE WHEN INSTR(A.PASS_MAX_VALUE,'.',1) > 0 THEN TO_CHAR(A.PASS_MAX_VALUE, 'FM999999999999999990.9999') ELSE TO_CHAR(A.PASS_MAX_VALUE) END INDC_PASS_MAX_VALUE  -- JMG : 20210121
					/* HIDDEN */
					, A.YN_DECIDE_DIV_CD                     -- 지표여부값판정구분코드
					, A.PERF_CHECK_METH_NM             -- 성능점검방법
					, (CASE WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'Y' ELSE 'N' END) EXCEPTION_YN
                    , A.EXCEPTION_PRC_METH_CD
					, A.EXCEPTION_PRC_METH_NM
				FROM -- 성능점검기본 지표 
					(SELECT E.PERF_CHECK_INDC_ID
							, E.PERF_CHECK_PROGRAM_DIV_CD
							, E.PASS_MAX_VALUE
							, E.YN_DECIDE_DIV_CD
							, F.PERF_CHECK_INDC_NM
							, F.PERF_CHECK_METH_CD
							, E.WRKJOB_CD
							, CD1.CD_NM AS PERF_CHECK_METH_NM             -- 성능점검방법
                            , G.EXCEPTION_PRC_METH_CD                     -- 예외처리방법코드(2:영구점검, 3:한시점검) (JMG : 20210120 추가)
                            , CD2.CD_NM AS EXCEPTION_PRC_METH_NM          -- 예외처리방법 (JMG : 20210120 추가)
						FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
							, DEPLOY_PERF_CHK_STEP_EXEC B     -- 배포성능점검단계별수행내역
							, DEPLOY_PERF_CHK_STEP C          -- 배포성능점점단계기본
							, DEPLOY_PERF_CHK_STEP_TEST_DB D  -- 배포성능점검단계별테스트DB기본
							, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
							, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
							, CD CD1
                            , DEPLOY_PERF_CHK_TARGET_PGM G     -- 배포성능점검대상프로그램내역 (JMG : 20210120 추가)
                            , CD CD2                           -- (JMG : 20210120 추가)
						WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
						AND B.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
						AND D.WRKJOB_CD = #{top_wrkjob_cd}
						AND C.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
						AND F.PERF_CHECK_METH_CD = CD1.CD
						AND CD1.GRP_CD_ID = '1059'
						AND A.PERF_CHECK_ID = #{perf_check_id}
						AND B.PERF_CHECK_STEP_ID = '1'
						AND D.PROGRAM_DIV_CD = E.PERF_CHECK_PROGRAM_DIV_CD
						AND E.INDC_APPLY_YN = 'Y'
						AND F.INDC_USE_YN = 'Y'
						AND F.PERF_CHECK_INDC_ID IN (1,2,3,4,5,6)
                        AND A.PERF_CHECK_ID = G.PERF_CHECK_ID  -- (JMG : 20210120 추가)
                        AND G.PROGRAM_ID = #{program_id}       -- (JMG : 20210120 추가)
                        AND G.EXCEPTION_PRC_METH_CD = CD2.CD   -- (JMG : 20210120 추가)
                        AND CD2.GRP_CD_ID = '1061'             -- (JMG : 20210120 추가)
					) A
					,(SELECT B1.PERF_CHECK_INDC_ID
							, (CASE 
									WHEN B1.PERF_CHECK_INDC_ID IN (1, 2, 3, 4) THEN B1.EXEC_RESULT_VALUE
									WHEN B1.PERF_CHECK_INDC_ID = 5 AND  B2.EXEC_RESULT_VALUE > 0
										AND ( (B1.COMMAND_TYPE  = 3 AND B1.BUFFER_GETS > B2.BIG_TABLE_THRESHOLD_CNT)
												OR (B1.COMMAND_TYPE <> 3 AND 1 = 1)) THEN 1
									WHEN B1.PERF_CHECK_INDC_ID = 6 AND  B2.EXEC_RESULT_VALUE > 0 THEN 1
									ELSE 0
								END) EXEC_RESULT_VALUE
						-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (1,2,3,4)
						FROM (SELECT PERF_CHECK_INDC_ID
									, MAX(CASE 
											WHEN PERF_CHECK_INDC_ID = 1 THEN A.ELAPSED_TIME 
											WHEN PERF_CHECK_INDC_ID = 2 THEN A.BUFFER_GETS
											WHEN PERF_CHECK_INDC_ID = 3 THEN A.ROWS_PROCESSED
											WHEN PERF_CHECK_INDC_ID = 4 THEN NULL
										END) EXEC_RESULT_VALUE
									, MAX(A.COMMAND_TYPE) COMMAND_TYPE
									, MAX(A.BUFFER_GETS) BUFFER_GETS
								FROM (SELECT ROUND(ELAPSED_TIME/1000000/EXECUTIONS, 4) ELAPSED_TIME
											, ROUND(BUFFER_GETS/EXECUTIONS) BUFFER_GETS
											, ROUND(ROWS_PROCESSED/EXECUTIONS) ROWS_PROCESSED
											, (SELECT COMMAND_TYPE 
												FROM VSQL_TEXT ST
												WHERE ST.DBID = #{dbid}                          -- 배포후 운영 DBID
												AND ST.SQL_ID = #{after_prd_sql_id}              -- 배포후 운영 SQL_ID
												AND ROWNUM = 1) COMMAND_TYPE
										FROM (SELECT NVL(SUM(A.ELAPSED_TIME), 0) AS ELAPSED_TIME
													, NVL(SUM(A.BUFFER_GETS), 0) AS BUFFER_GETS
													, NVL(SUM(A.ROWS_PROCESSED), 0) AS ROWS_PROCESSED
													, NVL(DECODE(SUM(A.EXECUTIONS), 0, 1, SUM(A.EXECUTIONS)), 1) AS EXECUTIONS
												FROM VSQL_STATS A    -- 배포성능점검SQL성능내역(TABLE)
												WHERE A.DBID = #{dbid}                                -- 배포후 운영 DBID
												AND A.SQL_ID = #{after_prd_sql_id}                    -- 배포후 운영 SQL_ID
												AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}  -- 배포후 운영 PLAN_HASH_VALUE
											) A
									) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL <= 6)
								GROUP BY PERF_CHECK_INDC_ID
							) B1
							-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (5, 6)
							,(SELECT B.PERF_CHECK_INDC_ID
									, B.EXEC_RESULT_VALUE
									, C.BIG_TABLE_THRESHOLD_CNT
								FROM (SELECT PERF_CHECK_INDC_ID
											, SUM(CASE 
													WHEN D.PERF_CHECK_INDC_ID = 5 AND A.OPERATION IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN') THEN 1
													WHEN D.PERF_CHECK_INDC_ID = 6 AND A.OPERATION IN ('PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL') THEN 1 
													ELSE 0 
												END) EXEC_RESULT_VALUE
										FROM (SELECT  ID, OPERATION || ' ' || OPTIONS AS OPERATION
												FROM (SELECT A.STATEMENT_ID, A.ID, A.OPERATION, A.OPTIONS
															, MAX(A.STATEMENT_ID) OVER (PARTITION BY NULL) AS MAX_STATEMENT_ID
														FROM VSQL_PLAN A                               -- 배포성능점검SQL플랜내역(TABLE)
														WHERE A.DBID = #{dbid}                          -- 배포후 운영 DBID
														AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}    -- 배포후 운영 PLAN_HASH_VALUE
														AND (A.OBJECT_OWNER, A.OBJECT_NAME) NOT IN (SELECT 'SYS', 'DUAL' FROM DUAL)
														AND A.OBJECT_TYPE <> 'TABLE (TEMP)'
													) A
												WHERE  A.STATEMENT_ID = A.MAX_STATEMENT_ID
												AND  A.OPERATION || ' ' || A.OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN', 'PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL')
											) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL  <= 6) D
										GROUP BY PERF_CHECK_INDC_ID
									) B
									-- 대용량 기준건수 
									,(SELECT TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
										FROM SPOP_PREFERENCES A
											, (SELECT B.DBID, B.PREF_ID, B.PREF_SEQ, B.PREF_VALUE
												FROM -- DBID 조회
													(SELECT DBID 
														FROM DEPLOY_PERF_CHK A
															, DEPLOY_PERF_CHK_PARSING_SCHEMA B
														WHERE A.WRKJOB_CD = B.WRKJOB_CD
														AND A.PERF_CHECK_ID = #{perf_check_id}
														AND B.PERF_CHECK_STEP_ID = '1'
													) A
													, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
																, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
														FROM DB_PREFERENCES
														WHERE PREF_ID IN (12004)
													) B
												WHERE A.DBID = B.DBID
													AND B.PREF_SEQ = B.MAX_PREF_SEQ
											) B
										WHERE A.PREF_ID = B.PREF_ID(+)
										AND A.PREF_ID IN (12004)
									) C
							) B2
						WHERE B1.PERF_CHECK_INDC_ID = B2.PERF_CHECK_INDC_ID(+)
					) B
					-- 성능점검 예외 지표
					,(SELECT *
						FROM (SELECT B.PERF_CHECK_INDC_ID
									, B.PASS_MAX_VALUE
									, B.YN_DECIDE_DIV_CD
									, ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
								FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
									, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
								WHERE A.EXCEPTION_PRC_METH_CD = '1'
								AND A.EXCEPTION_PRC_STATUS_CD = '2'
								AND B.DEL_YN = 'N'
								AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
								AND B.PROGRAM_ID = #{program_id}
							)
						WHERE LAST_EXCEPT_INDC_NUM = 1
					) C
				WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID(+)
				AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
			) B,
			CD CD1
		WHERE B.PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1055'
		ORDER BY B.PERF_CHECK_INDC_ID
		]]>
	</select>
	

	<select id="performanceCheckResultException_20210311" parameterType="sqls" resultType="sqls">
		<![CDATA[
		/* SqlsDao.performanceCheckResultException */
		SELECT B.PERF_CHECK_INDC_NM -- 점검지표
			, B.INDC_PASS_MAX_VALUE -- 지표여부값판정구분코드
			, 'N/A' EXEC_RESULT_VALUE -- 배포전 성능점검결과값
			, 'N/A' PERF_CHECK_RESULT_DIV_NM -- 배포전 성능점검결과
			, B.EXEC_RESULT_VALUE AS PRD_EXEC_RESULT_VALUE -- 배포후 성능점검결과값
			, NVL(CD1.CD_NM, 'N/A') AS PRD_PERF_CHECK_RESULT_DIV_NM -- 배포후 성능점검결과
			-- 영구점검인경우 '영구점검제외', 한시점검제외 or 지표단위예외 인경우 Y/N 으로 출력 (JMG: 20210120)
			--, 'N/A' EXCEPTION_YN -- 예외등록여부
			, (CASE 
					WHEN B.EXCEPTION_PRC_METH_CD = '2' THEN B.EXCEPTION_PRC_METH_NM 
					ELSE EXCEPTION_YN
				END) EXCEPTION_YN
			, (CASE WHEN B.PERF_CHECK_INDC_ID = 4 THEN '운영DB 수집 부하를 줄이기 위하여 메모리사용량은 수집하지 않음' END) PERF_CHECK_RESULT_DESC -- 성능점검 결과내용
			, 'N/A' PERF_CHECK_RESULT_DIV_CD                                    -- 배포전 성능점검결과
			, B.PERF_CHECK_RESULT_DIV_CD AS PRD_PERF_CHECK_RESULT_DIV_CD    -- 배포후 성능점검결과
			, B.PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
			, B.PERF_CHECK_METH_CD
		FROM (SELECT A.PERF_CHECK_INDC_ID
					, A.PERF_CHECK_METH_CD -- 성능점검방법코드
					-- 성능점검결과값
					,(CASE 
							WHEN A.PERF_CHECK_INDC_ID IN (1, 2, 3) THEN 
								(CASE 
									WHEN INSTR(NVL(B.EXEC_RESULT_VALUE, 0),'.',1) > 0 THEN TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0), 'FM999999999999999990.9999') 
									ELSE TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0)) 
								END) 
							WHEN A.PERF_CHECK_INDC_ID IN (4) THEN 'N/A'
							WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
								(CASE 
									WHEN EXEC_RESULT_VALUE > 0 THEN 'Y' 
									ELSE 'N' 
								END)
						END) EXEC_RESULT_VALUE
					-- 성능점검결과구분코드
					-- 1. 지표(PERF_CHECK_INDC_ID)가 ROW_PROCESSED(3) 인경우 실행결과값(EXEC_RESULT_VALUE)이 0건은 부적합으로 판정
					-- 2. 나머지 지표는 지표값을 초과한 경우 부적합으로 판정
					,(CASE
                        --  영구점검제외(2)인경우 기본지표로 성능점검
                        WHEN A.EXCEPTION_PRC_METH_CD = '2' THEN
                            CASE
                                WHEN A.PERF_CHECK_INDC_ID IN (1, 2) THEN (CASE WHEN A.PASS_MAX_VALUE < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' ELSE 'A' END) 
                                WHEN A.PERF_CHECK_INDC_ID = 3          THEN 
                                    (CASE 
                                        WHEN A.PASS_MAX_VALUE = 0 THEN 'A'
                                        WHEN A.PASS_MAX_VALUE > 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN 'B' 
                                        WHEN A.PASS_MAX_VALUE > 0 AND A.PASS_MAX_VALUE < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' 
                                        ELSE 'A' 
                                    END) 
                                WHEN A.PERF_CHECK_INDC_ID = 4 THEN 'N/A'
                                WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
                                    (CASE 
                                        WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'A'
                                        ELSE
                                            (CASE
                                                WHEN B.EXEC_RESULT_VALUE > 0 THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'A', '2', 'B')
                                                WHEN B.EXEC_RESULT_VALUE = 0  OR B.EXEC_RESULT_VALUE IS NULL THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'B', '2', 'A')
                                            END)
                                    END)
                            END
                        ELSE
                            CASE
                                WHEN A.PERF_CHECK_INDC_ID IN (1, 2) THEN (CASE WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' ELSE 'A' END) 
                                WHEN A.PERF_CHECK_INDC_ID = 3          THEN 
                                    (CASE 
                                        WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) = 0 THEN 'A'
                                        WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN 'B'
                                        WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) < TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' 
                                        ELSE 'A' 
                                    END) 
                                WHEN A.PERF_CHECK_INDC_ID = 4 THEN 'N/A'
                                WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
                                    (CASE 
                                        WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'A'
                                        ELSE
                                            (CASE
                                                WHEN B.EXEC_RESULT_VALUE > 0 THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'A', '2', 'B')
                                                WHEN B.EXEC_RESULT_VALUE = 0  OR B.EXEC_RESULT_VALUE IS NULL THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'B', '2', 'A')
                                            END)
                                    END)
                            END
                      END) AS PERF_CHECK_RESULT_DIV_CD -- 성능점검결과구분코드
					, A.PERF_CHECK_INDC_NM -- 점검지표
					, CASE WHEN INSTR(A.PASS_MAX_VALUE,'.',1) > 0 THEN TO_CHAR(A.PASS_MAX_VALUE, 'FM999999999999999990.9999') ELSE TO_CHAR(A.PASS_MAX_VALUE) END INDC_PASS_MAX_VALUE  -- JMG : 20210121
					/* HIDDEN */
					, A.YN_DECIDE_DIV_CD                     -- 지표여부값판정구분코드
					, A.PERF_CHECK_METH_NM             -- 성능점검방법
					, (CASE WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'Y' ELSE 'N' END) EXCEPTION_YN
					, A.EXCEPTION_PRC_METH_CD
					, A.EXCEPTION_PRC_METH_NM
				FROM -- 성능점검기본 지표 
					(SELECT E.PERF_CHECK_INDC_ID
							, E.PERF_CHECK_PROGRAM_DIV_CD
							, E.PASS_MAX_VALUE
							, E.YN_DECIDE_DIV_CD
							, F.PERF_CHECK_INDC_NM
							, F.PERF_CHECK_METH_CD
							, E.WRKJOB_CD
							, CD1.CD_NM AS PERF_CHECK_METH_NM             -- 성능점검방법
							, G.EXCEPTION_PRC_METH_CD                     -- 예외처리방법코드(2:영구점검, 3:한시점검) (JMG : 20210120 추가)
							, CD2.CD_NM AS EXCEPTION_PRC_METH_NM          -- 예외처리방법 (JMG : 20210120 추가)
						FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
							, DEPLOY_PERF_CHK_STEP_EXEC B     -- 배포성능점검단계별수행내역
							, DEPLOY_PERF_CHK_STEP C          -- 배포성능점점단계기본
							, DEPLOY_PERF_CHK_STEP_TEST_DB D  -- 배포성능점검단계별테스트DB기본
							, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
							, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
							, CD CD1
							, DEPLOY_PERF_CHK_TARGET_PGM G     -- 배포성능점검대상프로그램내역 (JMG : 20210120 추가)
							, CD CD2                           -- (JMG : 20210120 추가)
						WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
						AND B.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
						AND D.WRKJOB_CD = #{top_wrkjob_cd}
						AND C.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
						AND A.WRKJOB_CD = E.WRKJOB_CD
						AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
						AND F.PERF_CHECK_METH_CD = CD1.CD
						AND CD1.GRP_CD_ID = '1059'
						AND A.PERF_CHECK_ID = #{perf_check_id}
						AND B.PERF_CHECK_STEP_ID = '1'
						AND D.PROGRAM_DIV_CD = E.PERF_CHECK_PROGRAM_DIV_CD
						AND E.INDC_APPLY_YN = 'Y'
						AND F.INDC_USE_YN = 'Y'
						AND F.PERF_CHECK_INDC_ID IN (1,2,3,4,5,6)
						AND A.PERF_CHECK_ID = G.PERF_CHECK_ID  -- (JMG : 20210120 추가)
						AND G.PROGRAM_ID = #{program_id}       -- (JMG : 20210120 추가)
						AND G.EXCEPTION_PRC_METH_CD = CD2.CD   -- (JMG : 20210120 추가)
						AND CD2.GRP_CD_ID = '1061'             -- (JMG : 20210120 추가)
					) A
					,(SELECT B1.PERF_CHECK_INDC_ID
							, (CASE 
									WHEN B1.PERF_CHECK_INDC_ID IN (1, 2, 3, 4) THEN B1.EXEC_RESULT_VALUE
									WHEN B1.PERF_CHECK_INDC_ID = 5 AND  B2.EXEC_RESULT_VALUE > 0
										AND ( (B1.COMMAND_TYPE  = 3 AND B1.BUFFER_GETS > B2.BIG_TABLE_THRESHOLD_CNT)
												OR (B1.COMMAND_TYPE <> 3 AND 1 = 1)) THEN 1
									WHEN B1.PERF_CHECK_INDC_ID = 6 AND  B2.EXEC_RESULT_VALUE > 0 THEN 1
									ELSE 0
								END) EXEC_RESULT_VALUE
						-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (1,2,3,4)
						FROM (SELECT PERF_CHECK_INDC_ID
									, MAX(CASE 
											WHEN PERF_CHECK_INDC_ID = 1 THEN A.ELAPSED_TIME 
											WHEN PERF_CHECK_INDC_ID = 2 THEN A.BUFFER_GETS
											WHEN PERF_CHECK_INDC_ID = 3 THEN A.ROWS_PROCESSED
											WHEN PERF_CHECK_INDC_ID = 4 THEN NULL
										END) EXEC_RESULT_VALUE
									, MAX(A.COMMAND_TYPE) COMMAND_TYPE
									, MAX(A.BUFFER_GETS) BUFFER_GETS
								FROM (SELECT ROUND(ELAPSED_TIME/1000000/EXECUTIONS, 4) ELAPSED_TIME
											, ROUND(BUFFER_GETS/EXECUTIONS) BUFFER_GETS
											, ROUND(ROWS_PROCESSED/EXECUTIONS) ROWS_PROCESSED
											, (SELECT COMMAND_TYPE 
												FROM VSQL_TEXT ST
												WHERE ST.DBID = #{dbid}                          -- 배포후 운영 DBID
												AND ST.SQL_ID = #{after_prd_sql_id}              -- 배포후 운영 SQL_ID
												AND ROWNUM = 1) COMMAND_TYPE
										FROM (SELECT NVL(SUM(A.ELAPSED_TIME), 0) AS ELAPSED_TIME
													, NVL(SUM(A.BUFFER_GETS), 0) AS BUFFER_GETS
													, NVL(SUM(A.ROWS_PROCESSED), 0) AS ROWS_PROCESSED
													, NVL(DECODE(SUM(A.EXECUTIONS), 0, 1, SUM(A.EXECUTIONS)), 1) AS EXECUTIONS
												FROM VSQL_STATS A    -- 배포성능점검SQL성능내역(TABLE)
												WHERE A.DBID = #{dbid}                                -- 배포후 운영 DBID
												AND A.SQL_ID = #{after_prd_sql_id}                    -- 배포후 운영 SQL_ID
												AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}  -- 배포후 운영 PLAN_HASH_VALUE
											) A
									) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL <= 6)
								GROUP BY PERF_CHECK_INDC_ID
							) B1
							-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (5, 6)
							,(SELECT B.PERF_CHECK_INDC_ID
									, B.EXEC_RESULT_VALUE
									, C.BIG_TABLE_THRESHOLD_CNT
								FROM (SELECT PERF_CHECK_INDC_ID
											, SUM(CASE 
													WHEN D.PERF_CHECK_INDC_ID = 5 AND A.OPERATION IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN') THEN 1
													WHEN D.PERF_CHECK_INDC_ID = 6 AND A.OPERATION IN ('PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL') THEN 1 
													ELSE 0 
												END) EXEC_RESULT_VALUE
										FROM (SELECT  ID, OPERATION || ' ' || OPTIONS AS OPERATION
												FROM (SELECT A.STATEMENT_ID, A.ID, A.OPERATION, A.OPTIONS
															, MAX(A.STATEMENT_ID) OVER (PARTITION BY NULL) AS MAX_STATEMENT_ID
														FROM VSQL_PLAN A                               -- 배포성능점검SQL플랜내역(TABLE)
														WHERE A.DBID = #{dbid}                          -- 배포후 운영 DBID
														AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}    -- 배포후 운영 PLAN_HASH_VALUE
														AND (A.OBJECT_OWNER, A.OBJECT_NAME) NOT IN (SELECT 'SYS', 'DUAL' FROM DUAL)
														AND A.OBJECT_TYPE <> 'TABLE (TEMP)'
													) A
												WHERE  A.STATEMENT_ID = A.MAX_STATEMENT_ID
												AND  A.OPERATION || ' ' || A.OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN', 'PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL')
											) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL  <= 6) D
										GROUP BY PERF_CHECK_INDC_ID
									) B
									-- 대용량 기준건수 
									,(SELECT TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
										FROM SPOP_PREFERENCES A
											, (SELECT B.DBID, B.PREF_ID, B.PREF_SEQ, B.PREF_VALUE
												FROM -- DBID 조회
													(SELECT DBID 
														FROM DEPLOY_PERF_CHK A
															, DEPLOY_PERF_CHK_PARSING_SCHEMA B
														WHERE A.WRKJOB_CD = B.WRKJOB_CD
														AND A.PERF_CHECK_ID = #{perf_check_id}
														AND B.PERF_CHECK_STEP_ID = '1'
													) A
													, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
																, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
														FROM DB_PREFERENCES
														WHERE PREF_ID IN (12004)
													) B
												WHERE A.DBID = B.DBID
													AND B.PREF_SEQ = B.MAX_PREF_SEQ
											) B
										WHERE A.PREF_ID = B.PREF_ID(+)
										AND A.PREF_ID IN (12004)
									) C
							) B2
						WHERE B1.PERF_CHECK_INDC_ID = B2.PERF_CHECK_INDC_ID(+)
					) B
					-- 성능점검 예외 지표
					,(SELECT B.PERF_CHECK_INDC_ID
							, B.PASS_MAX_VALUE
							, B.YN_DECIDE_DIV_CD
						FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
							, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
							, (SELECT F.PERF_CHECK_INDC_ID
								FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
									, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
									, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
								WHERE A.WRKJOB_CD = E.WRKJOB_CD
								AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
								AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
								AND A.PERF_CHECK_ID = #{perf_check_id}
								AND E.INDC_APPLY_YN = 'Y'
								AND F.INDC_USE_YN = 'Y'
							) C
						WHERE A.EXCEPTION_PRC_METH_CD = '1'
						AND A.EXCEPTION_PRC_STATUS_CD = '2'
						AND B.DEL_YN = 'N'
						AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
						AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
						AND B.PROGRAM_ID = #{program_id}
					) C
				WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID(+)
				AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
			) B,
			CD CD1
		WHERE B.PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1055'
		ORDER BY B.PERF_CHECK_INDC_ID
		]]>
	</select>
	
	
	
	<sql id="laodAutoSqlsRefId">
		/* SqlsDao.laodAutoSqlsRefId */
		WITH 
		-- 대용량 기준건수 
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				   A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			  FROM (SELECT /*+ LEADING(DB) */
						   DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					  FROM SPOP_PREFERENCES SP
						 , DATABASE DB
					 WHERE PREF_ID IN (12004)
				   ) A
				 , (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					  FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								 , MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							  FROM DB_PREFERENCES B
							 WHERE PREF_ID IN (12004)
						   )
					 WHERE PREF_SEQ = MAX_PREF_SEQ
				   ) B
			 WHERE A.DBID = B.DBID(+)
			   AND A.PREF_ID = B.PREF_ID(+)
		)
		,-- 성능점검 SQL ALL : 검색기간내에 배포된 최종 프로그램 목록(정상, 예외포함) 
		TMP_DEPLOY_PERF_SQL_ALL AS
		(
			SELECT PERF_CHECK_ID
				 , WRKJOB_CD
				 , PROGRAM_ID
				 , PROGRAM_NM
				 , DBIO
				 , DEPLOY_COMPLETE_DT
				 , EXCEPTION_PRC_METH_CD    /* 2:영구, 3:한시 */
			  FROM (
					SELECT /*+ LEADING(A C D) USE_NL(C D) */
						   A.PERF_CHECK_ID
						 , A.WRKJOB_CD 
						 , C.PROGRAM_ID
						 , D.PROGRAM_NM
						 , C.EXCEPTION_PRC_METH_CD
						 , D.DBIO
						 , A.DEPLOY_COMPLETE_DT 
						 , ROW_NUMBER() OVER(PARTITION BY C.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					  FROM DEPLOY_PERF_CHK A
						 , DEPLOY_PERF_CHK_TARGET_PGM C
						 , DEPLOY_PERF_CHK_ALL_PGM D
					 WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID
					   AND C.PROGRAM_ID = D.PROGRAM_ID
					   AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  
					   
					   /* 날짜 검색 */
					   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
													AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				   )
			 WHERE LAST_PROGRAM_NUM = 1
		)
		, -- 지표예외 전체 
		TMP_DEPLOY_PERF_EXPT_INDC_ALL AS
		(
			SELECT B.PROGRAM_ID
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
			  FROM (
					SELECT B.PROGRAM_ID, B.PERF_CHECK_INDC_ID, B.PASS_MAX_VALUE, B.YN_DECIDE_DIV_CD
						 , ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
					  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
						 , DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
						 , TMP_DEPLOY_PERF_SQL_ALL C
					 WHERE A.EXCEPTION_PRC_METH_CD = '1'
					   AND A.EXCEPTION_PRC_STATUS_CD = '2'
					   AND B.DEL_YN = 'N'
					   AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
					   AND A.PROGRAM_ID = C.PROGRAM_ID
				   ) B
			WHERE LAST_EXCEPT_INDC_NUM = 1 -- 여러개의 예외처리한지표중 최종 예외처리지표 
			GROUP BY B.PROGRAM_ID
		)
		,-- 성능점검 SQL#1
		TMP_DEPLOY_PERF_SQL_BASE AS 
		(
			SELECT A.DBID
				 , A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.DBIO
				 , A.PROGRAM_ID
				 , A.PROGRAM_NM
				 , A.EXCEPTION_PRC_METH_CD
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				 , A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
				 , A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
				 , A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
				 , A.FULL_SCAN_APPLY_YN       -- JMG : 20210129
				 , A.PARTITION_APPLY_YN       -- JMG : 20210129
				 , A.ELAPSED_TIME_USE_YN      -- JMG : 20210129
				 , A.BUFFER_GETS_USE_YN       -- JMG : 20210129
				 , A.ROWS_PROCESSED_USE_YN    -- JMG : 20210129
				 , A.FULL_SCAN_USE_YN         -- JMG : 20210129
				 , A.PARTITION_USE_YN         -- JMG : 20210129
				 , A.TEST_ELAPSED_TIME
				 , A.TEST_BUFFER_GETS
				 , A.TEST_ROWS_PROCESSED
				 , A.TEST_FULL_SCAN_YN
				 , A.DEPLOY_COMPLETE_DT 
				 , A.PROGRAM_EXEC_DT
				 , B.SQL_ID AFTER_PRD_SQL_ID
				 , B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				 , FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				 , FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				 , FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
				     FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				 , A.PERF_CHECK_ID
				 , A.PERF_CHECK_STEP_ID
				 , A.PROGRAM_EXECUTE_TMS
				 , A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
				 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									 ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
				 , C.INST_ID
			  FROM (
					SELECT /*+ LEADNG(A) USE_HASH(B) */
						   A.PERF_CHECK_ID
						 , A.PERF_CHECK_STEP_ID
						 , A.PROGRAM_ID
						 , A.PROGRAM_EXECUTE_TMS
						 , A.PROGRAM_NM
						 , A.EXCEPTION_PRC_METH_CD
						 , A.DBIO
						 , A.DBID
						 , A.TOP_WRKJOB_CD
						 , A.WRKJOB_CD
						 , A.WRKJOB_LVL
						 , A.DEPLOY_COMPLETE_DT 
						 , A.PROGRAM_EXEC_DT
						 , A.ELAPSED_TIME_THRESHOLD
						 , A.BUFFER_GETS_THRESHOLD
						 , A.ROWS_PROCESSED_THRESHOLD
						 , A.FULL_SCAN_DECIDE_DIV_CD
						 , A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						 , A.TEST_ELAPSED_TIME
						 , A.TEST_BUFFER_GETS
						 , A.TEST_ROWS_PROCESSED
						 , A.TEST_FULL_SCAN_YN
						 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
						 , A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
						 , A.ELAPSED_TIME_APPLY_YN      -- JMG : 20210129
						 , A.BUFFER_GETS_APPLY_YN       -- JMG : 20210129
						 , A.ROWS_PROCESSED_APPLY_YN    -- JMG : 20210129
						 , A.FULL_SCAN_APPLY_YN         -- JMG : 20210129
						 , A.PARTITION_APPLY_YN         -- JMG : 20210129
						 , A.ELAPSED_TIME_USE_YN        -- JMG : 20210129
						 , A.BUFFER_GETS_USE_YN         -- JMG : 20210129
						 , A.ROWS_PROCESSED_USE_YN      -- JMG : 20210129
						 , A.FULL_SCAN_USE_YN           -- JMG : 20210129
						 , A.PARTITION_USE_YN           -- JMG : 20210129
					  FROM (SELECT /*+ LEADING(A B C D E F G H) USE_HASH(B) USE_NL(C D E F G H) */
								   A.PERF_CHECK_ID
								 , I.DBID                 --> 20200608 B.DBID
								 , B.TOP_WRKJOB_CD
								 , A.WRKJOB_CD 
								 , B.WRKJOB_LVL
								 , A.PROGRAM_ID
								 , A.PROGRAM_NM
								 , B.PERF_CHECK_STEP_ID
								 , E.PROGRAM_EXECUTE_TMS
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DEPLOY_COMPLETE_DT 
								 , E.PROGRAM_EXEC_DT
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN F.INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN F.INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN F.INDC_PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.INDC_YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ROWS_PROCESSED
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.EXEC_RESULT_VALUE END) AS TEST_PARTITION_SCAN_YN
								 , COUNT(F.PERF_CHECK_INDC_ID) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN J.INDC_APPLY_YN  END) AS ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN J.INDC_APPLY_YN END) AS BUFFER_GETS_APPLY_YN     -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN J.INDC_APPLY_YN END) AS ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN J.INDC_APPLY_YN END) AS FULL_SCAN_APPLY_YN        -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN J.INDC_APPLY_YN END) AS PARTITION_APPLY_YN       -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN K.INDC_USE_YN   END) AS ELAPSED_TIME_USE_YN    -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN K.INDC_USE_YN   END) AS BUFFER_GETS_USE_YN     -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN K.INDC_USE_YN   END) AS ROWS_PROCESSED_USE_YN  -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN K.INDC_USE_YN   END) AS FULL_SCAN_USE_YN        -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN K.INDC_USE_YN   END) AS PARTITION_USE_YN       -- JMG : 20210129
							  FROM TMP_DEPLOY_PERF_SQL_ALL A
								  -- 업무별 최종 단계
								 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
									  FROM (SELECT DBID
												 , WRKJOB_CD
												 , PERF_CHECK_STEP_ID
												 , PERF_CHECK_EVALUATION_METH_CD
												 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
											  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
											 WHERE A.DEL_YN = 'N'
										   ) A
										 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
											  FROM WRKJOB_CD
											 WHERE USE_YN = 'Y'
											 START WITH UPPER_WRKJOB_CD IS NULL
										   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
										   ) B
									 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									   AND A.RNUM(+) = 1) B
								 , DEPLOY_PERF_CHK_RESULT E
								 , DEPLOY_PERF_CHK_DETAIL_RESULT F
								 , WRKJOB_DB H
								 , DATABASE I
								 , WJ_PERF_CHK_INDC J  -- 업무별성능점검지표내역
								 , DEPLOY_PERF_CHK_INDC K  -- 배포성능점검지표기본
							 WHERE A.WRKJOB_CD = B.WRKJOB_CD
							   AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							   AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							   AND A.PROGRAM_ID = E.PROGRAM_ID
							   AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							   AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							   AND E.PROGRAM_ID = F.PROGRAM_ID
							   AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							   AND E.PERF_CHECK_EVALUATION_METH_CD = B.PERF_CHECK_EVALUATION_METH_CD  -- 성능검증대상 회차(평균 또는 최대 성능을 관리하는 회차)
							   AND A.WRKJOB_CD = H.WRKJOB_CD
							   AND H.DBID = I.DBID
							   AND I.DB_OPERATE_TYPE_CD = '3'-- DB운영유형코드 1:개발, 2:테스트, 3:운영
							
							   AND A.WRKJOB_CD = J.WRKJOB_CD
							   AND F.PERF_CHECK_INDC_ID = J.PERF_CHECK_INDC_ID
							   AND J.PERF_CHECK_PROGRAM_DIV_CD = 'S'
							   AND J.PERF_CHECK_INDC_ID = K.PERF_CHECK_INDC_ID
							   -- 1:SQL수행시간(초), 2:블럭수, 3: 처리건수, 5:대용량 테이블 Full Scan 여부, 6: 대용량 테이블 Full Scan 여부
							   AND F.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6) 
							   AND F.PERF_CHECK_RESULT_DIV_CD  <![CDATA[<>]]> 'C'
							  
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
							   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
													  FROM WRKJOB_CD
													 START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
												   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							<choose>
								<when test="selectSearchType eq '00' or selectSearchType eq '01'">
							   /* 성능 점검 SQL 조회 */
							   AND 1 = 1 
								</when>
								<when test="selectSearchType eq '02'">
							   /* 예외 처리 SQL 조회 */
							   AND 1 = 0
								</when>
							</choose>
							 GROUP BY A.PERF_CHECK_ID
								 , I.DBID
								 , B.TOP_WRKJOB_CD
								 , A.WRKJOB_CD 
								 , B.WRKJOB_LVL
								 , A.PROGRAM_ID
								 , A.PROGRAM_NM
								 , B.PERF_CHECK_STEP_ID
								 , E.PROGRAM_EXECUTE_TMS
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DEPLOY_COMPLETE_DT 
								 , E.PROGRAM_EXEC_DT
						   ) A
				   ) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE 1 = 1
			   AND A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			   
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME) 
									FROM VSQL_TEXT VS 
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID)
			   AND A.LAST_PROGRAM_NUM = 1
			   AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL
			
		) 
		-- 성능점검 SQL#2
		, TMP_DEPLOY_PERF_SQL AS
		(
			SELECT A.DBID
				 , A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.PROGRAM_ID
				 , A.DBIO                   -- SQL식별자(DBIO)
				 , A.PROGRAM_NM             -- 프로그램
				 , A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.TEST_ELAPSED_TIME         -- 배포성능점검 수행시간
				 , A.TEST_BUFFER_GETS          -- 배포성능점검 블럭수
				 , A.TEST_ROWS_PROCESSED       -- 배포성능점검 처리건수
				 , A.TEST_FULL_SCAN_YN
				 , A.DEPLOY_COMPLETE_DT   -- 배포일자
				 , A.PROGRAM_EXEC_DT      -- 성능점검일시
				 , A.AFTER_PRD_SQL_ID
				 , A.AFTER_PRD_PLAN_HASH_VALUE
				 , A.BEFORE_PRD_SQL_ID
				 , A.BEFORE_PRD_PLAN_HASH_VALUE				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				 , A.AFTER_PRD_PART_ACCESS_ALL_YN
				 , A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				 , A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				 , A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				 , A.AFTER_EXECUTIONS                -- 운영 수행횟수
				 , A.PERF_CHECK_ID
				 , A.PERF_CHECK_STEP_ID
				 , A.PROGRAM_EXECUTE_TMS
				 
				 , 'N' AS EXCEPT_YN
				 , (CASE WHEN TEST_ELAPSED_TIME <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME THEN 'Y' ELSE 'N' END) AS ELAPSED_TIME_REGRESS_YN  -- 수행시간 성능저하
				 , (CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> AFTER_PRD_BUFFER_GETS THEN 'Y' ELSE 'N' END) AS BUFFER_GETS_REGRESS_YN      -- 블럭수 성능저하
				 , (CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_ELAPSED_TIME)
						 OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_BUFFER_GETS)
						 OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED)))
						 OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND AFTER_PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
						     OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						 OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
						     OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부,  JMG : 20210129
				 , (CASE WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >  1   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 2   THEN '2XLT'   -- less then 2X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 2   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 5   THEN '5XLT'   -- less then 5X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 5   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 10  THEN '10XLT'  -- less then 10X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 10  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 30  THEN '30XLT'  -- less then 30X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 30  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 50  THEN '50XLT'  -- less then 50X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 50  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 100 THEN '100XLT' -- less then 100X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 100                                                    THEN '100XMT' -- more then 100X
					 END) PERF_REGRESSED_METRIC -- 성능저하 율
				 , (CASE WHEN AFTER_PRD_BUFFER_GETS > TEST_BUFFER_GETS THEN ROUND(-AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) , 2)
						 WHEN AFTER_PRD_BUFFER_GETS <![CDATA[<=]]> TEST_BUFFER_GETS THEN ROUND(TEST_BUFFER_GETS/DECODE(AFTER_PRD_BUFFER_GETS, 0, 1, AFTER_PRD_BUFFER_GETS), 2)
					 END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 블럭수 증감율
				 , (CASE WHEN AFTER_PRD_ELAPSED_TIME > TEST_ELAPSED_TIME THEN ROUND(-AFTER_PRD_ELAPSED_TIME/DECODE(TEST_ELAPSED_TIME, 0, 1, TEST_ELAPSED_TIME), 2)
						 WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<=]]> TEST_ELAPSED_TIME THEN ROUND(TEST_ELAPSED_TIME/DECODE(AFTER_PRD_ELAPSED_TIME, 0, 1, AFTER_PRD_ELAPSED_TIME), 2)
					 END) PRD_ELAP_TIME_INCREASE_RATIO    -- 수행시간 증감율
				 , (CASE WHEN AFTER_PRD_ROWS_PROCESSED > TEST_ROWS_PROCESSED THEN ROUND(-AFTER_PRD_ROWS_PROCESSED/DECODE(TEST_ROWS_PROCESSED, 0, 1, TEST_ROWS_PROCESSED), 2)
						 WHEN AFTER_PRD_ROWS_PROCESSED <![CDATA[<=]]> TEST_ROWS_PROCESSED THEN ROUND(TEST_ROWS_PROCESSED/DECODE(AFTER_PRD_ROWS_PROCESSED, 0, 1, AFTER_PRD_ROWS_PROCESSED), 2)
					 END) PRD_ROWS_PROC_INCREASE_RATIO    -- 처리건수 증감율
			  FROM TMP_DEPLOY_PERF_SQL_BASE A, TMP_BIG_TABLE_BASE B
				 , (SELECT PROGRAM_ID FROM TMP_DEPLOY_PERF_EXPT_INDC_ALL) C
			 WHERE A.DBID = B.DBID
			   AND A.PROGRAM_ID = C.PROGRAM_ID(+)
			   AND A.MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		-- 예외처리 SQL#1
		, TMP_DEPLOY_EXCEPT_SQL_BASE AS 
		(
			SELECT A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.DBID
				 , A.DBIO
				 , A.PROGRAM_ID
				 , A.PROGRAM_NM
				 , A.EXCEPTION_PRC_METH_CD
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.PARTITION_DECIDE_DIV_CD
				 , A.DEPLOY_COMPLETE_DT 
				 , B.SQL_ID AFTER_PRD_SQL_ID
				 , B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				 , FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				 , FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				 , FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
						  FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				 , PERF_CHECK_ID
				 , PERF_CHECK_STEP_ID
				 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
								ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
			  FROM (
					SELECT A.PERF_CHECK_ID
						 , A.PERF_CHECK_STEP_ID
						 , A.PROGRAM_ID
						 , A.PROGRAM_NM
						 , A.EXCEPTION_PRC_METH_CD
						 , A.DBIO
						 , A.DBID
						 , A.TOP_WRKJOB_CD
						 , A.WRKJOB_CD
						 , A.WRKJOB_LVL
						 , A.DEPLOY_COMPLETE_DT 
						 , A.ELAPSED_TIME_THRESHOLD
						 , A.BUFFER_GETS_THRESHOLD
						 , A.ROWS_PROCESSED_THRESHOLD
						 , A.FULL_SCAN_DECIDE_DIV_CD
						 , A.PARTITION_DECIDE_DIV_CD
						 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					  FROM (
							SELECT A.PERF_CHECK_ID
								 , A.PERF_CHECK_STEP_ID
								 , A.PROGRAM_ID
								 , A.PROGRAM_NM
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DBID
								 , A.TOP_WRKJOB_CD
								 , A.WRKJOB_CD
								 , A.WRKJOB_LVL
								 , A.DEPLOY_COMPLETE_DT
								
								 -- 영구(2)예외인경우 업무별 기준지표, 한시(3)예외인 경우 SQL별 지표(예외지표 적용) : 20210311
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.ELAPSED_TIME_THRESHOLD ELSE NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) END) ELAPSED_TIME_THRESHOLD
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.BUFFER_GETS_THRESHOLD ELSE NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) END) BUFFER_GETS_THRESHOLD
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.ROWS_PROCESSED_THRESHOLD ELSE NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) END) ROWS_PROCESSED_THRESHOLD
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.FULL_SCAN_DECIDE_DIV_CD ELSE NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) END) FULL_SCAN_DECIDE_DIV_CD
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.PARTITION_DECIDE_DIV_CD ELSE NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) END) PARTITION_DECIDE_DIV_CD
							  FROM (
									SELECT /*+ LEADING(A B E F G H) USE_HASH(B) USE_NL(E F G H) */
										   A.PERF_CHECK_ID
										 , I.DBID                --> 20200608 B.DBID
										 , B.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , B.WRKJOB_LVL
										 , A.PROGRAM_ID
										 , A.PROGRAM_NM
										 , B.PERF_CHECK_STEP_ID
										 , A.EXCEPTION_PRC_METH_CD
										 , A.DBIO
										 , A.DEPLOY_COMPLETE_DT 
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
									  FROM TMP_DEPLOY_PERF_SQL_ALL A
										   -- 업무별 최종 단계
										 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
											  FROM (SELECT DBID
														 , WRKJOB_CD
														 , PERF_CHECK_STEP_ID
														 , PERF_CHECK_EVALUATION_METH_CD
														 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
													  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
													 WHERE A.DEL_YN = 'N'
												   ) A
												 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
													  FROM WRKJOB_CD
													 WHERE USE_YN = 'Y'
													 START WITH UPPER_WRKJOB_CD IS NULL
												   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
												   ) B
											 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
											   AND A.RNUM(+) = 1
										   ) B
										 , WJ_PERF_CHK_INDC E
										 , WRKJOB_DB H
										 , DATABASE I
									 WHERE A.WRKJOB_CD = B.WRKJOB_CD
									   AND A.WRKJOB_CD = E.WRKJOB_CD
									   AND A.WRKJOB_CD = H.WRKJOB_CD
									   AND H.DBID = I.DBID
									   AND I.DB_OPERATE_TYPE_CD = '3'   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
									    -- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
									   AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)
									   AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
									
									<if test="wrkjob_cd != null and wrkjob_cd != ''">
									/* 업무 검색 필수조건 */
									   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
															  FROM WRKJOB_CD
															 START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
									</if>
									<choose>
										<when test="selectSearchType eq '00' or selectSearchType eq '02'">
									   /* 예외 처리 SQL 조회 */
									   AND 1 = 1
										</when>
										<when test="selectSearchType eq '01'">
									   /* 성능 점검 SQL 조회 */
									   AND 1 = 0
										</when>
									</choose>
									 GROUP BY A.PERF_CHECK_ID
										 , I.DBID
										 , B.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , B.WRKJOB_LVL
										 , A.PROGRAM_ID
										 , A.PROGRAM_NM
										 , B.PERF_CHECK_STEP_ID
										 , A.EXCEPTION_PRC_METH_CD
										 , A.DBIO
										 , A.DEPLOY_COMPLETE_DT 
								   ) A
								 , TMP_DEPLOY_PERF_EXPT_INDC_ALL B -- 성능점검 예외 지표 : 20210311
							 WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
						   ) A
				   ) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE 1 = 1
			   AND A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			   AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
			   AND A.LAST_PROGRAM_NUM = 1
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME)
									FROM VSQL_TEXT VS 
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID)
		)
		-- 예외처리 SQL#2
		, TMP_DEPLOY_EXCEPT_SQL AS
		(
			SELECT A.DBID
				 , A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.PROGRAM_ID
				 , A.DBIO                   -- SQL식별자(DBIO)
				 , A.PROGRAM_NM             -- 프로그램
				 , A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				 , B.CD_NM AS EXCEPTION_PRC_METH_NM -- 예외처리방법명
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.DEPLOY_COMPLETE_DT   -- 배포일자
				 , A.AFTER_PRD_SQL_ID
				 , A.AFTER_PRD_PLAN_HASH_VALUE
				 , A.BEFORE_PRD_SQL_ID
				 , A.BEFORE_PRD_PLAN_HASH_VALUE
				 , A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				 , A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				 , A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				 , A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				 , A.AFTER_EXECUTIONS                -- 운영 수행횟수
				 , A.PERF_CHECK_ID
				 , A.PERF_CHECK_STEP_ID
				 , 'Y' AS EXCEPT_YN   -- 예외여부
				 , (CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME
						 OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> AFTER_PRD_BUFFER_GETS
						 OR (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED))
						 OR (AFTER_PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
						     OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						 OR ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
						     OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N')) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부
				 , (CASE WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> = 0.1                            THEN '0.1XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >  0.1 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN '0.3XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 0.3 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN '1XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 1   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN '3XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 3   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN '10XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 10  AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN '60XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 60                             THEN '60XMT'
					 END) ELAPSED_TIME_METIRC   -- 수행시간 구간 메트릭스
			  FROM TMP_DEPLOY_EXCEPT_SQL_BASE A
				 , CD B
				 , TMP_BIG_TABLE_BASE C
			 WHERE A.EXCEPTION_PRC_METH_CD = B.CD
			   AND B.GRP_CD_ID = '1061'
			   AND A.DBID = C.DBID
			   AND MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		SELECT A.*
			 , A.NO AS ID
			 , (CASE WHEN ROWNUM = 1 OR RNUM = 1 THEN -1 ELSE MIN(NO) OVER(PARTITION BY DBIO) END) AS PARENT_ID
		  FROM (
				SELECT A.*
				  FROM (
						SELECT /*+ LEADING(A) USE_HASH(B) */
							   A.DBIO                       -- SQL식별자(DBIO)
							 , A.PROGRAM_NM                 -- 프로그램
							 , A.AFTER_PRD_SQL_ID           -- SQL_ID
							 , A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
							 , A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
							 , A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
							 , DECODE(B.ELAPSED_TIME_ACTIVITY, 0, 0.0001, B.ELAPSED_TIME_ACTIVITY) AS ELAPSED_TIME_ACTIVITY      -- 수행시간 Activity(%)
							 , A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
							 , A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
							 , DECODE(B.BUFFER_GETS_ACTIVITY, 0, 0.0001, B.BUFFER_GETS_ACTIVITY) AS BUFFER_GETS_ACTIVITY       -- 블럭수 Activity(%)
							 , A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
							 , A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
							 , A.AFTER_EXECUTIONS           -- 운영 수행횟수
							 , A.EXCEPT_YN                  -- 예외여부
							 , A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
							 , NULL BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
							 , A.PROGRAM_EXEC_DT            -- 성능점검일자
							 , A.DEPLOY_COMPLETE_DT         -- 배포일자
							 , A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
							 , A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
							 , A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
							 , A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
							 , NULL BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
							 , NULL ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
							 , A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
							 , (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									 REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,1) 
										 || '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									 ELSE A.PRD_BUFFER_GETS_INCREASE_RATIO 
								 END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 운영 블럭 증감율
							 , (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									 REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,1) 
										 || '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									 ELSE A.PRD_ELAP_TIME_INCREASE_RATIO 
								 END) PRD_ELAP_TIME_INCREASE_RATIO    -- 운영 수행시간 증감율
							 , (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									 REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,1) 
										 || '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									 ELSE A.PRD_ROWS_PROC_INCREASE_RATIO 
								 END) PRD_ROWS_PROC_INCREASE_RATIO    -- 운영 처리건수 증감율
							 , A.WRKJOB_CD                  -- 업무코드
							 , A.TOP_WRKJOB_CD              -- 최상위 업무코드
							 , A.DBID                       -- DBID
							 , A.PROGRAM_ID                 -- PROGRAM_ID
							 , A.PERF_CHECK_ID              -- 성능점검ID
							 , A.PERF_CHECK_STEP_ID         -- 성능점검 단계
							 , A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
							 , A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간
							 , A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수
							 , A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수
							 , A.EXCEPTION_PRC_METH_NM       -- 예외처리방법
							 , SUM(B.ELAPSED_TIME_ACTIVITY) OVER(PARTITION BY A.DBIO) AS PROGRAM_ELAPSED_TIME_ACTIVITY  -- DBIO 단위 수행시간 Activity(%)
							 , SUM(B.BUFFER_GETS_ACTIVITY) OVER(PARTITION BY A.DBIO) AS PROGRAM_BUFFER_GETS_ACTIVITY  -- DBIO 단위 수행시간 Activity(%)
							 , ROW_NUMBER() OVER(PARTITION BY A.DBIO ORDER BY B.ELAPSED_TIME_ACTIVITY DESC) RNUM   -- DBIO에서 SQL_ID 별 수행시간 Activity(%)
							 , ROW_NUMBER() OVER(ORDER BY A.DBIO, B.ELAPSED_TIME_ACTIVITY DESC) NO
						  FROM (
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									 , A.PROGRAM_NM                 -- 프로그램
									 , A.AFTER_PRD_SQL_ID           -- SQL_ID
									 , A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									
									 , A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
									 , A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									 , A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
									 , A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									 , A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
									 , A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									 , A.AFTER_EXECUTIONS           -- 운영 수행횟수
									 , A.EXCEPT_YN                  -- 예외여부
									 , A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									 , NULL BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									 , TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD') PROGRAM_EXEC_DT       -- 성능점검일시
									 , TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									 , A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
									 , NULL ELAPSED_TIME_METIRC     -- 수행시간 구간 메트릭스
									 , A.PROGRAM_ID                 -- 프로그램 ID
									 , A.PERF_CHECK_ID              -- 성능점검ID
									 , A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									
									 , NULL BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									 , NULL BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									 , A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
									 , A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
									 , TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO, 'FM999999999999990.99') PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									 , TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO, 'FM999999999999990.99') PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									 , TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO, 'FM999999999999990.99') PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									 , A.WRKJOB_CD                  -- 업무코드
									 , A.TOP_WRKJOB_CD              -- 최상위 업무코드
									 , A.DBID                       -- DBID
									 , A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									 , A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
									 , NULL BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
									 , NULL BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
									 , NULL BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
									 , (CASE WHEN B.PROGRAM_ID IS NOT NULL THEN '지표' ELSE '' END) EXCEPTION_PRC_METH_NM    -- 예외처리방법, JMG : 20210311
								  FROM TMP_DEPLOY_PERF_SQL A, TMP_DEPLOY_PERF_EXPT_INDC_ALL B
								 WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
								 UNION ALL
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									 , A.PROGRAM_NM                 -- 프로그램
									 , A.AFTER_PRD_SQL_ID           -- SQL_ID
									 , A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									
									 , NULL TEST_ELAPSED_TIME       -- 배포 평균  수행시간
									 , A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									 , NULL TEST_BUFFER_GETS        -- 배포 평균 블럭수
									 , A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									 , NULL TEST_ROWS_PROCESSED     -- 배포 평균  처리건수
									 , A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									 , A.AFTER_EXECUTIONS           -- 운영 수행횟수
									 , A.EXCEPT_YN                  -- 예외여부
									 , A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									 , NULL BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									 , NULL PROGRAM_EXEC_DT         -- 성능점검일시
									 , TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									 , NULL PERF_REGRESSED_METRIC   -- 성능저하 율 메트릭스
									 , A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
									 , A.PROGRAM_ID                 -- 프로그램 ID
									 , A.PERF_CHECK_ID              -- 성능점검ID
									 , A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									
									 , NULL BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									 , NULL BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									 , NULL ELAPSED_TIME_REGRESS_YN -- 수행시간 성능저하
									 , NULL BUFFER_GETS_REGRESS_YN  -- 블럭수 성능저하  
									 , NULL PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									 , NULL PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									 , NULL PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									 , A.WRKJOB_CD                  -- 업무코드
									 , A.TOP_WRKJOB_CD              -- 최상위 업무코드
									 , A.DBID                       -- DBID
									 , A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									 , NULL PROGRAM_EXECUTE_TMS     -- 성능점검 수행회차
									 , NULL BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간
									 , NULL BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수
									 , NULL BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수
									 , SUBSTR(A.EXCEPTION_PRC_METH_NM, 1, 2)  EXCEPTION_PRC_METH_NM    -- 예외처리방법
								  FROM TMP_DEPLOY_EXCEPT_SQL A
							   ) A
							 , (
								/* ACTIVITY */
								SELECT DBID
									 , SQL_ID
									 , PLAN_HASH_VALUE
									 , ROUND((RATIO_TO_REPORT(SUM(ELAPSED_TIME)) OVER())* 100, 4) AS ELAPSED_TIME_ACTIVITY
									 , ROUND((RATIO_TO_REPORT(SUM(BUFFER_GETS)) OVER()) * 100, 4) AS BUFFER_GETS_ACTIVITY
								  FROM VSQL_STATS A
								 WHERE LAST_ACTIVE_TIME >= TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
								 GROUP BY DBID, SQL_ID, PLAN_HASH_VALUE
							   ) B
						 WHERE A.DBID = B.DBID
						   AND A.AFTER_PRD_SQL_ID = B.SQL_ID
						   AND A.AFTER_PRD_PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
							
							<if test='after_fail_yn_condition != null and after_fail_yn_condition != ""'>
						   /* 부적합 */
						   AND A.AFTER_FAIL_YN = #{after_fail_yn_condition}
							</if>
							
							<if test='selectSearchType != null and selectSearchType != ""'>
						   /* 성능저하 - 수행시간 */
						   /* 성능저하 - 블럭수  */
								<choose>
									<when test='selectSearchType eq "01".toString() and is_regress eq "Y"'>
						   /* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
						   AND A.BUFFER_GETS_REGRESS_YN = 'Y'
									</when>
									<when test='selectSearchType eq "01".toString() and is_regress eq "N"'>
						   /* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
						   AND A.BUFFER_GETS_REGRESS_YN = 'N'
									</when>
								</choose>
							</if>
							
							<if test='selectPerfRegressedMetric != null and selectPerfRegressedMetric != ""'>
						   /* 성능점검SQL - 콤보 */
						   AND A.PERF_REGRESSED_METRIC = #{selectPerfRegressedMetric}
							</if>
							
							<if test='selectSqlPerfTrace != null and selectSqlPerfTrace != ""'>
						   /* 예외처리방법 : 예외처리SQL 탭에서 전달받은경우*/
						   AND A.EXCEPTION_PRC_METH_CD = #{selectSqlPerfTrace}
							</if>
							
							<if test='selectElapsedTimeMetirc != null and selectElapsedTimeMetirc != ""'>
						   /* 예외처리SQL - 콤보 */
						   AND A.ELAPSED_TIME_METIRC = #{selectElapsedTimeMetirc}
							</if>
							
							<if test='strSqlId != null and strSqlId != ""'>
						   /* SQL_ID */
						   AND A.AFTER_PRD_SQL_ID = #{strSqlId} 
							</if>
							
							<if test='strDbio != null and strDbio != ""'>
						   /* SQL식별자 */
						   AND A.DBIO = #{strDbio}
							</if>
						 ORDER BY DBIO, PROGRAM_ELAPSED_TIME_ACTIVITY DESC, RNUM, PROGRAM_BUFFER_GETS_ACTIVITY DESC
					   ) A
				 WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
			   ) A
		 WHERE NO > ${pagePerCount} * (${currentPage} - 1)
		 ORDER BY NO
	</sql>
	
	
	<select id="loadAutoSqls" parameterType="sqls" resultType="sqls">
		/* SqlsDao.loadAutoSqls */
		<include refid="laodAutoSqlsRefId"/>
	</select>
	
	<select id="excelAutoDown" parameterType="sqls" resultType="java.util.LinkedHashMap">
		/* SqlsDao.excelAutoDown */
		/* SqlsDao.laodAutoSqlsRefId */
		WITH 
		-- 대용량 기준건수 
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				   A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			  FROM (SELECT /*+ LEADING(DB) */
						   DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					  FROM SPOP_PREFERENCES SP
						 , DATABASE DB
					 WHERE PREF_ID IN (12004)
				   ) A
				 , (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					  FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								 , MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							  FROM DB_PREFERENCES B
							 WHERE PREF_ID IN (12004)
						   )
					 WHERE PREF_SEQ = MAX_PREF_SEQ
				   ) B
			 WHERE A.DBID = B.DBID(+)
			   AND A.PREF_ID = B.PREF_ID(+)
		)
		,-- 성능점검 SQL ALL : 검색기간내에 배포된 최종 프로그램 목록(정상, 예외포함) 
		TMP_DEPLOY_PERF_SQL_ALL AS
		(
			SELECT PERF_CHECK_ID
				 , WRKJOB_CD
				 , PROGRAM_ID
				 , PROGRAM_NM
				 , DBIO
				 , DEPLOY_COMPLETE_DT
				 , EXCEPTION_PRC_METH_CD    /* 2:영구, 3:한시 */
			  FROM (
					SELECT /*+ LEADING(A C D) USE_NL(C D) */
						   A.PERF_CHECK_ID
						 , A.WRKJOB_CD 
						 , C.PROGRAM_ID
						 , D.PROGRAM_NM
						 , C.EXCEPTION_PRC_METH_CD
						 , D.DBIO
						 , A.DEPLOY_COMPLETE_DT 
						 , ROW_NUMBER() OVER(PARTITION BY C.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					  FROM DEPLOY_PERF_CHK A
						 , DEPLOY_PERF_CHK_TARGET_PGM C
						 , DEPLOY_PERF_CHK_ALL_PGM D
					 WHERE A.PERF_CHECK_ID = C.PERF_CHECK_ID
					   AND C.PROGRAM_ID = D.PROGRAM_ID
					   AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료  
					   
					   /* 날짜 검색 */
					   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
													AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				   )
			 WHERE LAST_PROGRAM_NUM = 1
		)
		, -- 지표예외 전체 
		TMP_DEPLOY_PERF_EXPT_INDC_ALL AS
		(
			SELECT B.PROGRAM_ID
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
				 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
			  FROM (
					SELECT B.PROGRAM_ID, B.PERF_CHECK_INDC_ID, B.PASS_MAX_VALUE, B.YN_DECIDE_DIV_CD
						 , ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
					  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
						 , DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
						 , TMP_DEPLOY_PERF_SQL_ALL C
					 WHERE A.EXCEPTION_PRC_METH_CD = '1'
					   AND A.EXCEPTION_PRC_STATUS_CD = '2'
					   AND B.DEL_YN = 'N'
					   AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
					   AND A.PROGRAM_ID = C.PROGRAM_ID
				   ) B
			WHERE LAST_EXCEPT_INDC_NUM = 1 -- 여러개의 예외처리한지표중 최종 예외처리지표 
			GROUP BY B.PROGRAM_ID
		)
		,-- 성능점검 SQL#1
		TMP_DEPLOY_PERF_SQL_BASE AS 
		(
			SELECT A.DBID
				 , A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.DBIO
				 , A.PROGRAM_ID
				 , A.PROGRAM_NM
				 , A.EXCEPTION_PRC_METH_CD
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				 , A.ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
				 , A.BUFFER_GETS_APPLY_YN     -- JMG : 20210129
				 , A.ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
				 , A.FULL_SCAN_APPLY_YN       -- JMG : 20210129
				 , A.PARTITION_APPLY_YN       -- JMG : 20210129
				 , A.ELAPSED_TIME_USE_YN      -- JMG : 20210129
				 , A.BUFFER_GETS_USE_YN       -- JMG : 20210129
				 , A.ROWS_PROCESSED_USE_YN    -- JMG : 20210129
				 , A.FULL_SCAN_USE_YN         -- JMG : 20210129
				 , A.PARTITION_USE_YN         -- JMG : 20210129
				 , A.TEST_ELAPSED_TIME
				 , A.TEST_BUFFER_GETS
				 , A.TEST_ROWS_PROCESSED
				 , A.TEST_FULL_SCAN_YN
				 , A.DEPLOY_COMPLETE_DT 
				 , A.PROGRAM_EXEC_DT
				 , B.SQL_ID AFTER_PRD_SQL_ID
				 , B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				 , FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				 , FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				 , FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
				     FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				 , A.PERF_CHECK_ID
				 , A.PERF_CHECK_STEP_ID
				 , A.PROGRAM_EXECUTE_TMS
				 , A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
				 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
									 ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
				 , C.INST_ID
			  FROM (
					SELECT /*+ LEADNG(A) USE_HASH(B) */
						   A.PERF_CHECK_ID
						 , A.PERF_CHECK_STEP_ID
						 , A.PROGRAM_ID
						 , A.PROGRAM_EXECUTE_TMS
						 , A.PROGRAM_NM
						 , A.EXCEPTION_PRC_METH_CD
						 , A.DBIO
						 , A.DBID
						 , A.TOP_WRKJOB_CD
						 , A.WRKJOB_CD
						 , A.WRKJOB_LVL
						 , A.DEPLOY_COMPLETE_DT 
						 , A.PROGRAM_EXEC_DT
						 , A.ELAPSED_TIME_THRESHOLD
						 , A.BUFFER_GETS_THRESHOLD
						 , A.ROWS_PROCESSED_THRESHOLD
						 , A.FULL_SCAN_DECIDE_DIV_CD
						 , A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						 , A.TEST_ELAPSED_TIME
						 , A.TEST_BUFFER_GETS
						 , A.TEST_ROWS_PROCESSED
						 , A.TEST_FULL_SCAN_YN
						 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
						 , A.DEPLOY_PERF_CHK_INDC_EXEC_CNT
						 , A.ELAPSED_TIME_APPLY_YN      -- JMG : 20210129
						 , A.BUFFER_GETS_APPLY_YN       -- JMG : 20210129
						 , A.ROWS_PROCESSED_APPLY_YN    -- JMG : 20210129
						 , A.FULL_SCAN_APPLY_YN         -- JMG : 20210129
						 , A.PARTITION_APPLY_YN         -- JMG : 20210129
						 , A.ELAPSED_TIME_USE_YN        -- JMG : 20210129
						 , A.BUFFER_GETS_USE_YN         -- JMG : 20210129
						 , A.ROWS_PROCESSED_USE_YN      -- JMG : 20210129
						 , A.FULL_SCAN_USE_YN           -- JMG : 20210129
						 , A.PARTITION_USE_YN           -- JMG : 20210129
					  FROM (SELECT /*+ LEADING(A B C D E F G H) USE_HASH(B) USE_NL(C D E F G H) */
								   A.PERF_CHECK_ID
								 , I.DBID                 --> 20200608 B.DBID
								 , B.TOP_WRKJOB_CD
								 , A.WRKJOB_CD 
								 , B.WRKJOB_LVL
								 , A.PROGRAM_ID
								 , A.PROGRAM_NM
								 , B.PERF_CHECK_STEP_ID
								 , E.PROGRAM_EXECUTE_TMS
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DEPLOY_COMPLETE_DT 
								 , E.PROGRAM_EXEC_DT
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN F.INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN F.INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN F.INDC_PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.INDC_YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN TO_NUMBER(F.EXEC_RESULT_VALUE) END) AS TEST_ROWS_PROCESSED
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN F.EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN F.EXEC_RESULT_VALUE END) AS TEST_PARTITION_SCAN_YN
								 , COUNT(F.PERF_CHECK_INDC_ID) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN J.INDC_APPLY_YN  END) AS ELAPSED_TIME_APPLY_YN    -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN J.INDC_APPLY_YN END) AS BUFFER_GETS_APPLY_YN     -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN J.INDC_APPLY_YN END) AS ROWS_PROCESSED_APPLY_YN  -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN J.INDC_APPLY_YN END) AS FULL_SCAN_APPLY_YN        -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN J.INDC_APPLY_YN END) AS PARTITION_APPLY_YN       -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 1 THEN K.INDC_USE_YN   END) AS ELAPSED_TIME_USE_YN    -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 2 THEN K.INDC_USE_YN   END) AS BUFFER_GETS_USE_YN     -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 3 THEN K.INDC_USE_YN   END) AS ROWS_PROCESSED_USE_YN  -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 5 THEN K.INDC_USE_YN   END) AS FULL_SCAN_USE_YN        -- JMG : 20210129
								 , MAX(CASE WHEN F.PERF_CHECK_INDC_ID = 6 THEN K.INDC_USE_YN   END) AS PARTITION_USE_YN       -- JMG : 20210129
							  FROM TMP_DEPLOY_PERF_SQL_ALL A
								  -- 업무별 최종 단계
								 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
									  FROM (SELECT DBID
												 , WRKJOB_CD
												 , PERF_CHECK_STEP_ID
												 , PERF_CHECK_EVALUATION_METH_CD
												 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
											  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
											 WHERE A.DEL_YN = 'N'
										   ) A
										 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
											  FROM WRKJOB_CD
											 WHERE USE_YN = 'Y'
											 START WITH UPPER_WRKJOB_CD IS NULL
										   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
										   ) B
									 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									   AND A.RNUM(+) = 1) B
								 , DEPLOY_PERF_CHK_RESULT E
								 , DEPLOY_PERF_CHK_DETAIL_RESULT F
								 , WRKJOB_DB H
								 , DATABASE I
								 , WJ_PERF_CHK_INDC J  -- 업무별성능점검지표내역
								 , DEPLOY_PERF_CHK_INDC K  -- 배포성능점검지표기본
							 WHERE A.WRKJOB_CD = B.WRKJOB_CD
							   AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
							   AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
							   AND A.PROGRAM_ID = E.PROGRAM_ID
							   AND E.PERF_CHECK_ID = F.PERF_CHECK_ID
							   AND E.PERF_CHECK_STEP_ID = F.PERF_CHECK_STEP_ID
							   AND E.PROGRAM_ID = F.PROGRAM_ID
							   AND E.PROGRAM_EXECUTE_TMS = F.PROGRAM_EXECUTE_TMS
							   AND E.PERF_CHECK_EVALUATION_METH_CD = B.PERF_CHECK_EVALUATION_METH_CD  -- 성능검증대상 회차(평균 또는 최대 성능을 관리하는 회차)
							   AND A.WRKJOB_CD = H.WRKJOB_CD
							   AND H.DBID = I.DBID
							   AND I.DB_OPERATE_TYPE_CD = '3'-- DB운영유형코드 1:개발, 2:테스트, 3:운영
							
							   AND A.WRKJOB_CD = J.WRKJOB_CD
							   AND F.PERF_CHECK_INDC_ID = J.PERF_CHECK_INDC_ID
							   AND J.PERF_CHECK_PROGRAM_DIV_CD = 'S'
							   AND J.PERF_CHECK_INDC_ID = K.PERF_CHECK_INDC_ID
							   -- 1:SQL수행시간(초), 2:블럭수, 3: 처리건수, 5:대용량 테이블 Full Scan 여부, 6: 대용량 테이블 Full Scan 여부
							   AND F.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6) 
							   AND F.PERF_CHECK_RESULT_DIV_CD  <![CDATA[<>]]> 'C'
							  
							/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
							<if test="wrkjob_cd != null and wrkjob_cd != ''">
							   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
													  FROM WRKJOB_CD
													 START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
												   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
							</if>
							<choose>
								<when test="selectSearchType eq '00' or selectSearchType eq '01'">
							   /* 성능 점검 SQL 조회 */
							   AND 1 = 1 
								</when>
								<when test="selectSearchType eq '02'">
							   /* 예외 처리 SQL 조회 */
							   AND 1 = 0
								</when>
							</choose>
							 GROUP BY A.PERF_CHECK_ID
								 , I.DBID
								 , B.TOP_WRKJOB_CD
								 , A.WRKJOB_CD 
								 , B.WRKJOB_LVL
								 , A.PROGRAM_ID
								 , A.PROGRAM_NM
								 , B.PERF_CHECK_STEP_ID
								 , E.PROGRAM_EXECUTE_TMS
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DEPLOY_COMPLETE_DT 
								 , E.PROGRAM_EXEC_DT
						   ) A
				   ) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE 1 = 1
			   AND A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			   
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME) 
									FROM VSQL_TEXT VS 
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID)
			   AND A.LAST_PROGRAM_NUM = 1
			   AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL
			
		) 
		-- 성능점검 SQL#2
		, TMP_DEPLOY_PERF_SQL AS
		(
			SELECT A.DBID
				 , A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.PROGRAM_ID
				 , A.DBIO                   -- SQL식별자(DBIO)
				 , A.PROGRAM_NM             -- 프로그램
				 , A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.TEST_ELAPSED_TIME         -- 배포성능점검 수행시간
				 , A.TEST_BUFFER_GETS          -- 배포성능점검 블럭수
				 , A.TEST_ROWS_PROCESSED       -- 배포성능점검 처리건수
				 , A.TEST_FULL_SCAN_YN
				 , A.DEPLOY_COMPLETE_DT   -- 배포일자
				 , A.PROGRAM_EXEC_DT      -- 성능점검일시
				 , A.AFTER_PRD_SQL_ID
				 , A.AFTER_PRD_PLAN_HASH_VALUE
				 , A.BEFORE_PRD_SQL_ID
				 , A.BEFORE_PRD_PLAN_HASH_VALUE				, A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				 , A.AFTER_PRD_PART_ACCESS_ALL_YN
				 , A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				 , A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				 , A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				 , A.AFTER_EXECUTIONS                -- 운영 수행횟수
				 , A.PERF_CHECK_ID
				 , A.PERF_CHECK_STEP_ID
				 , A.PROGRAM_EXECUTE_TMS
				 
				 , 'N' AS EXCEPT_YN
				 , (CASE WHEN TEST_ELAPSED_TIME <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME THEN 'Y' ELSE 'N' END) AS ELAPSED_TIME_REGRESS_YN  -- 수행시간 성능저하
				 , (CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> AFTER_PRD_BUFFER_GETS THEN 'Y' ELSE 'N' END) AS BUFFER_GETS_REGRESS_YN      -- 블럭수 성능저하
				 , (CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_ELAPSED_TIME)
						 OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  AFTER_PRD_BUFFER_GETS)
						 OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED)))
						 OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND AFTER_PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
						     OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						 OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
						     OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부,  JMG : 20210129
				 , (CASE WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >  1   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 2   THEN '2XLT'   -- less then 2X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 2   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 5   THEN '5XLT'   -- less then 5X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 5   AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 10  THEN '10XLT'  -- less then 10X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 10  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 30  THEN '30XLT'  -- less then 30X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 30  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 50  THEN '50XLT'  -- less then 50X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 50  AND (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) <![CDATA[<]]> 100 THEN '100XLT' -- less then 100X
						 WHEN (AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS)) >= 100                                                    THEN '100XMT' -- more then 100X
					 END) PERF_REGRESSED_METRIC -- 성능저하 율
				 , (CASE WHEN AFTER_PRD_BUFFER_GETS > TEST_BUFFER_GETS THEN ROUND(-AFTER_PRD_BUFFER_GETS/DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) , 2)
						 WHEN AFTER_PRD_BUFFER_GETS <![CDATA[<=]]> TEST_BUFFER_GETS THEN ROUND(TEST_BUFFER_GETS/DECODE(AFTER_PRD_BUFFER_GETS, 0, 1, AFTER_PRD_BUFFER_GETS), 2)
					 END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 블럭수 증감율
				 , (CASE WHEN AFTER_PRD_ELAPSED_TIME > TEST_ELAPSED_TIME THEN ROUND(-AFTER_PRD_ELAPSED_TIME/DECODE(TEST_ELAPSED_TIME, 0, 1, TEST_ELAPSED_TIME), 2)
						 WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<=]]> TEST_ELAPSED_TIME THEN ROUND(TEST_ELAPSED_TIME/DECODE(AFTER_PRD_ELAPSED_TIME, 0, 1, AFTER_PRD_ELAPSED_TIME), 2)
					 END) PRD_ELAP_TIME_INCREASE_RATIO    -- 수행시간 증감율
				 , (CASE WHEN AFTER_PRD_ROWS_PROCESSED > TEST_ROWS_PROCESSED THEN ROUND(-AFTER_PRD_ROWS_PROCESSED/DECODE(TEST_ROWS_PROCESSED, 0, 1, TEST_ROWS_PROCESSED), 2)
						 WHEN AFTER_PRD_ROWS_PROCESSED <![CDATA[<=]]> TEST_ROWS_PROCESSED THEN ROUND(TEST_ROWS_PROCESSED/DECODE(AFTER_PRD_ROWS_PROCESSED, 0, 1, AFTER_PRD_ROWS_PROCESSED), 2)
					 END) PRD_ROWS_PROC_INCREASE_RATIO    -- 처리건수 증감율
			  FROM TMP_DEPLOY_PERF_SQL_BASE A, TMP_BIG_TABLE_BASE B
				 , (SELECT PROGRAM_ID FROM TMP_DEPLOY_PERF_EXPT_INDC_ALL) C
			 WHERE A.DBID = B.DBID
			   AND A.PROGRAM_ID = C.PROGRAM_ID(+)
			   AND A.MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		-- 예외처리 SQL#1
		, TMP_DEPLOY_EXCEPT_SQL_BASE AS 
		(
			SELECT A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.DBID
				 , A.DBIO
				 , A.PROGRAM_ID
				 , A.PROGRAM_NM
				 , A.EXCEPTION_PRC_METH_CD
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.PARTITION_DECIDE_DIV_CD
				 , A.DEPLOY_COMPLETE_DT 
				 , B.SQL_ID AFTER_PRD_SQL_ID
				 , B.PLAN_HASH_VALUE AFTER_PRD_PLAN_HASH_VALUE
				 , FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_SQL_ID
				 , FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'BEFORE') BEFORE_PRD_PLAN_HASH_VALUE
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_BIG_TAB_FULLSCAN_YN
				 , FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_PART_ACCESS_ALL_YN
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ELAPSED_TIME
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
						  FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) AFTER_PRD_BUFFER_GETS 
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_PRD_ROWS_PROCESSED
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 4, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) AFTER_EXECUTIONS
				 , PERF_CHECK_ID
				 , PERF_CHECK_STEP_ID
				 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID, C.DBID, C.SQL_ID 
								ORDER BY FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) DESC, C.INST_ID) MIN_INST_ID
			  FROM (
					SELECT A.PERF_CHECK_ID
						 , A.PERF_CHECK_STEP_ID
						 , A.PROGRAM_ID
						 , A.PROGRAM_NM
						 , A.EXCEPTION_PRC_METH_CD
						 , A.DBIO
						 , A.DBID
						 , A.TOP_WRKJOB_CD
						 , A.WRKJOB_CD
						 , A.WRKJOB_LVL
						 , A.DEPLOY_COMPLETE_DT 
						 , A.ELAPSED_TIME_THRESHOLD
						 , A.BUFFER_GETS_THRESHOLD
						 , A.ROWS_PROCESSED_THRESHOLD
						 , A.FULL_SCAN_DECIDE_DIV_CD
						 , A.PARTITION_DECIDE_DIV_CD
						 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					  FROM (
							SELECT A.PERF_CHECK_ID
								 , A.PERF_CHECK_STEP_ID
								 , A.PROGRAM_ID
								 , A.PROGRAM_NM
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DBID
								 , A.TOP_WRKJOB_CD
								 , A.WRKJOB_CD
								 , A.WRKJOB_LVL
								 , A.DEPLOY_COMPLETE_DT
								
								 -- 영구(2)예외인경우 업무별 기준지표, 한시(3)예외인 경우 SQL별 지표(예외지표 적용) : 20210311
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.ELAPSED_TIME_THRESHOLD ELSE NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) END) ELAPSED_TIME_THRESHOLD
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.BUFFER_GETS_THRESHOLD ELSE NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) END) BUFFER_GETS_THRESHOLD
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.ROWS_PROCESSED_THRESHOLD ELSE NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) END) ROWS_PROCESSED_THRESHOLD
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.FULL_SCAN_DECIDE_DIV_CD ELSE NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) END) FULL_SCAN_DECIDE_DIV_CD
								 , (CASE WHEN EXCEPTION_PRC_METH_CD = '2' THEN A.PARTITION_DECIDE_DIV_CD ELSE NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) END) PARTITION_DECIDE_DIV_CD
							  FROM (
									SELECT /*+ LEADING(A B E F G H) USE_HASH(B) USE_NL(E F G H) */
										   A.PERF_CHECK_ID
										 , I.DBID                --> 20200608 B.DBID
										 , B.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , B.WRKJOB_LVL
										 , A.PROGRAM_ID
										 , A.PROGRAM_NM
										 , B.PERF_CHECK_STEP_ID
										 , A.EXCEPTION_PRC_METH_CD
										 , A.DBIO
										 , A.DEPLOY_COMPLETE_DT 
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
										 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
									  FROM TMP_DEPLOY_PERF_SQL_ALL A
										   -- 업무별 최종 단계
										 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
											  FROM (SELECT DBID
														 , WRKJOB_CD
														 , PERF_CHECK_STEP_ID
														 , PERF_CHECK_EVALUATION_METH_CD
														 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
													  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
													 WHERE A.DEL_YN = 'N'
												   ) A
												 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
													  FROM WRKJOB_CD
													 WHERE USE_YN = 'Y'
													 START WITH UPPER_WRKJOB_CD IS NULL
												   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
												   ) B
											 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
											   AND A.RNUM(+) = 1
										   ) B
										 , WJ_PERF_CHK_INDC E
										 , WRKJOB_DB H
										 , DATABASE I
									 WHERE A.WRKJOB_CD = B.WRKJOB_CD
									   AND A.WRKJOB_CD = E.WRKJOB_CD
									   AND A.WRKJOB_CD = H.WRKJOB_CD
									   AND H.DBID = I.DBID
									   AND I.DB_OPERATE_TYPE_CD = '3'   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
									    -- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
									   AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)
									   AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
									
									<if test="wrkjob_cd != null and wrkjob_cd != ''">
									/* 업무 검색 필수조건 */
									   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
															  FROM WRKJOB_CD
															 START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
									</if>
									<choose>
										<when test="selectSearchType eq '00' or selectSearchType eq '02'">
									   /* 예외 처리 SQL 조회 */
									   AND 1 = 1
										</when>
										<when test="selectSearchType eq '01'">
									   /* 성능 점검 SQL 조회 */
									   AND 1 = 0
										</when>
									</choose>
									 GROUP BY A.PERF_CHECK_ID
										 , I.DBID
										 , B.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , B.WRKJOB_LVL
										 , A.PROGRAM_ID
										 , A.PROGRAM_NM
										 , B.PERF_CHECK_STEP_ID
										 , A.EXCEPTION_PRC_METH_CD
										 , A.DBIO
										 , A.DEPLOY_COMPLETE_DT 
								   ) A
								 , TMP_DEPLOY_PERF_EXPT_INDC_ALL B -- 성능점검 예외 지표 : 20210311
							 WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
						   ) A
				   ) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE 1 = 1
			   AND A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			   AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
			   AND A.LAST_PROGRAM_NUM = 1
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME)
									FROM VSQL_TEXT VS 
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID)
		)
		-- 예외처리 SQL#2
		, TMP_DEPLOY_EXCEPT_SQL AS
		(
			SELECT A.DBID
				 , A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.PROGRAM_ID
				 , A.DBIO                   -- SQL식별자(DBIO)
				 , A.PROGRAM_NM             -- 프로그램
				 , A.EXCEPTION_PRC_METH_CD  -- 예외처리방법코드
				 , B.CD_NM AS EXCEPTION_PRC_METH_NM -- 예외처리방법명
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.DEPLOY_COMPLETE_DT   -- 배포일자
				 , A.AFTER_PRD_SQL_ID
				 , A.AFTER_PRD_PLAN_HASH_VALUE
				 , A.BEFORE_PRD_SQL_ID
				 , A.BEFORE_PRD_PLAN_HASH_VALUE
				 , A.AFTER_PRD_BIG_TAB_FULLSCAN_YN
				 , A.AFTER_PRD_ELAPSED_TIME          -- 운영 수행시간
				 , A.AFTER_PRD_BUFFER_GETS           -- 운영 블럭수
				 , A.AFTER_PRD_ROWS_PROCESSED        -- 운영 처리건수
				 , A.AFTER_EXECUTIONS                -- 운영 수행횟수
				 , A.PERF_CHECK_ID
				 , A.PERF_CHECK_STEP_ID
				 , 'Y' AS EXCEPT_YN   -- 예외여부
				 , (CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> AFTER_PRD_ELAPSED_TIME
						 OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> AFTER_PRD_BUFFER_GETS
						 OR (ROWS_PROCESSED_THRESHOLD > 0 AND (AFTER_PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> AFTER_PRD_ROWS_PROCESSED))
						 OR (AFTER_PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'Y')
						     OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND AFTER_PRD_BIG_TAB_FULLSCAN_YN = 'N')))
						 OR ((PARTITION_DECIDE_DIV_CD = '2' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'Y')
						     OR (PARTITION_DECIDE_DIV_CD = '1' AND AFTER_PRD_PART_ACCESS_ALL_YN = 'N')) THEN 'Y' ELSE 'N' END) AFTER_FAIL_YN    -- 부적합 여부
				 , (CASE WHEN AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> = 0.1                            THEN '0.1XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >  0.1 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN '0.3XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 0.3 AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN '1XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 1   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN '3XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 3   AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN '10XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 10  AND AFTER_PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN '60XLT'
						 WHEN AFTER_PRD_ELAPSED_TIME >= 60                             THEN '60XMT'
					 END) ELAPSED_TIME_METIRC   -- 수행시간 구간 메트릭스
			  FROM TMP_DEPLOY_EXCEPT_SQL_BASE A
				 , CD B
				 , TMP_BIG_TABLE_BASE C
			 WHERE A.EXCEPTION_PRC_METH_CD = B.CD
			   AND B.GRP_CD_ID = '1061'
			   AND A.DBID = C.DBID
			   AND MIN_INST_ID = 1 -- SQL_ID 기준으로 중복을 제거하기 위한 조건
		)
		SELECT A.*
			 , A.NO AS ID
			 , (CASE WHEN ROWNUM = 1 OR RNUM = 1 THEN -1 ELSE MIN(NO) OVER(PARTITION BY DBIO) END) AS PARENT_ID
		  FROM (
				SELECT A.*
				  FROM (
						SELECT /*+ LEADING(A) USE_HASH(B) */
							   A.DBIO                       -- SQL식별자(DBIO)
							 , A.PROGRAM_NM                 -- 프로그램
							 , A.AFTER_PRD_SQL_ID           -- SQL_ID
							 , A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
							 , A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
							 , A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
							 , DECODE(B.ELAPSED_TIME_ACTIVITY, 0, 0.0001, B.ELAPSED_TIME_ACTIVITY) AS ELAPSED_TIME_ACTIVITY      -- 수행시간 Activity(%)
							 , A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
							 , A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
							 , DECODE(B.BUFFER_GETS_ACTIVITY, 0, 0.0001, B.BUFFER_GETS_ACTIVITY) AS BUFFER_GETS_ACTIVITY       -- 블럭수 Activity(%)
							 , A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
							 , A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
							 , A.AFTER_EXECUTIONS           -- 운영 수행횟수
							 , A.EXCEPT_YN                  -- 예외여부
							 , A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
							 , NULL BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
							 , A.PROGRAM_EXEC_DT            -- 성능점검일자
							 , A.DEPLOY_COMPLETE_DT         -- 배포일자
							 , A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
							 , A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
							 , A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
							 , A.BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
							 , NULL BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
							 , NULL ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
							 , A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
							 , (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									 REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,1) 
										 || '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									 ELSE A.PRD_BUFFER_GETS_INCREASE_RATIO 
								 END) PRD_BUFFER_GETS_INCREASE_RATIO  -- 운영 블럭 증감율
							 , (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									 REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,1) 
										 || '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									 ELSE A.PRD_ELAP_TIME_INCREASE_RATIO 
								 END) PRD_ELAP_TIME_INCREASE_RATIO    -- 운영 수행시간 증감율
							 , (CASE WHEN A.PROGRAM_EXECUTE_TMS IS NOT NULL THEN 
									 REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,1) 
										 || '.' || RPAD(NVL(REGEXP_SUBSTR(TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO),'[^.]+',1,2), '00'), 2, '0')
									 ELSE A.PRD_ROWS_PROC_INCREASE_RATIO 
								 END) PRD_ROWS_PROC_INCREASE_RATIO    -- 운영 처리건수 증감율
							 , A.WRKJOB_CD                  -- 업무코드
							 , A.TOP_WRKJOB_CD              -- 최상위 업무코드
							 , A.DBID                       -- DBID
							 , A.PROGRAM_ID                 -- PROGRAM_ID
							 , A.PERF_CHECK_ID              -- 성능점검ID
							 , A.PERF_CHECK_STEP_ID         -- 성능점검 단계
							 , A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
							 , A.BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간
							 , A.BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수
							 , A.BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수
							 , A.EXCEPTION_PRC_METH_NM       -- 예외처리방법
							 , SUM(B.ELAPSED_TIME_ACTIVITY) OVER(PARTITION BY A.DBIO) AS PROGRAM_ELAPSED_TIME_ACTIVITY  -- DBIO 단위 수행시간 Activity(%)
							 , SUM(B.BUFFER_GETS_ACTIVITY) OVER(PARTITION BY A.DBIO) AS PROGRAM_BUFFER_GETS_ACTIVITY  -- DBIO 단위 수행시간 Activity(%)
							 , ROW_NUMBER() OVER(PARTITION BY A.DBIO ORDER BY B.ELAPSED_TIME_ACTIVITY DESC) RNUM   -- DBIO에서 SQL_ID 별 수행시간 Activity(%)
							 , ROW_NUMBER() OVER(ORDER BY A.DBIO, B.ELAPSED_TIME_ACTIVITY DESC) NO
						  FROM (
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									 , A.PROGRAM_NM                 -- 프로그램
									 , A.AFTER_PRD_SQL_ID           -- SQL_ID
									 , A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									
									 , A.TEST_ELAPSED_TIME          -- 배포 평균  수행시간
									 , A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									 , A.TEST_BUFFER_GETS           -- 배포 평균 블럭수
									 , A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									 , A.TEST_ROWS_PROCESSED        -- 배포 평균  처리건수
									 , A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									 , A.AFTER_EXECUTIONS           -- 운영 수행횟수
									 , A.EXCEPT_YN                  -- 예외여부
									 , A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									 , NULL BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									 , TO_CHAR(A.PROGRAM_EXEC_DT, 'YYYY-MM-DD') PROGRAM_EXEC_DT       -- 성능점검일시
									 , TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									 , A.PERF_REGRESSED_METRIC      -- 성능저하 율 메트릭스
									 , NULL ELAPSED_TIME_METIRC     -- 수행시간 구간 메트릭스
									 , A.PROGRAM_ID                 -- 프로그램 ID
									 , A.PERF_CHECK_ID              -- 성능점검ID
									 , A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									
									 , NULL BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									 , NULL BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									 , A.ELAPSED_TIME_REGRESS_YN    -- 수행시간 성능저하
									 , A.BUFFER_GETS_REGRESS_YN     -- 블럭수 성능저하 (Y:성능향상, N:성능저하)
									 , TO_CHAR(A.PRD_BUFFER_GETS_INCREASE_RATIO, 'FM999999999999990.99') PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									 , TO_CHAR(A.PRD_ELAP_TIME_INCREASE_RATIO, 'FM999999999999990.99') PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									 , TO_CHAR(A.PRD_ROWS_PROC_INCREASE_RATIO, 'FM999999999999990.99') PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									 , A.WRKJOB_CD                  -- 업무코드
									 , A.TOP_WRKJOB_CD              -- 최상위 업무코드
									 , A.DBID                       -- DBID
									 , A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									 , A.PROGRAM_EXECUTE_TMS        -- 성능점검 수행회차
									 , NULL BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간, JMG : 20201203
									 , NULL BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수, JMG : 20201203
									 , NULL BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수, JMG : 20201203
									 , (CASE WHEN B.PROGRAM_ID IS NOT NULL THEN '지표' ELSE '' END) EXCEPTION_PRC_METH_NM    -- 예외처리방법, JMG : 20210311
								  FROM TMP_DEPLOY_PERF_SQL A, TMP_DEPLOY_PERF_EXPT_INDC_ALL B
								 WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
								 UNION ALL
								SELECT A.DBIO                       -- SQL식별자(DBIO)
									 , A.PROGRAM_NM                 -- 프로그램
									 , A.AFTER_PRD_SQL_ID           -- SQL_ID
									 , A.AFTER_PRD_PLAN_HASH_VALUE  -- PLAN_HASH_VALUE
									
									 , NULL TEST_ELAPSED_TIME       -- 배포 평균  수행시간
									 , A.AFTER_PRD_ELAPSED_TIME     -- 운영 평균 수행시간
									 , NULL TEST_BUFFER_GETS        -- 배포 평균 블럭수
									 , A.AFTER_PRD_BUFFER_GETS      -- 운영 평균 블럭수
									 , NULL TEST_ROWS_PROCESSED     -- 배포 평균  처리건수
									 , A.AFTER_PRD_ROWS_PROCESSED   -- 운영 평균 처리건수
									 , A.AFTER_EXECUTIONS           -- 운영 수행횟수
									 , A.EXCEPT_YN                  -- 예외여부
									 , A.AFTER_FAIL_YN              -- 부적합 여부(Y:부적합, N:적합)
									 , NULL BEFORE_FAIL_YN             -- 이전 부적합 여부(Y:부적합, N:적합)
									 , NULL PROGRAM_EXEC_DT         -- 성능점검일시
									 , TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY-MM-DD') DEPLOY_COMPLETE_DT -- 배포일자
									 , NULL PERF_REGRESSED_METRIC   -- 성능저하 율 메트릭스
									 , A.ELAPSED_TIME_METIRC        -- 수행시간 구간 메트릭스
									 , A.PROGRAM_ID                 -- 프로그램 ID
									 , A.PERF_CHECK_ID              -- 성능점검ID
									 , A.EXCEPTION_PRC_METH_CD      -- 예외처리방법코드
									
									 , NULL BEFORE_PRD_SQL_ID          -- 이전 운영 SQL_ID
									 , NULL BEFORE_PRD_PLAN_HASH_VALUE -- 이전 운영 PLAN_HASH_VALUE
									 , NULL ELAPSED_TIME_REGRESS_YN -- 수행시간 성능저하
									 , NULL BUFFER_GETS_REGRESS_YN  -- 블럭수 성능저하  
									 , NULL PRD_BUFFER_GETS_INCREASE_RATIO -- 운영 블럭 증감율
									 , NULL PRD_ELAP_TIME_INCREASE_RATIO   -- 운영 수행시간 증감율
									 , NULL PRD_ROWS_PROC_INCREASE_RATIO   -- 운영 처리건수 증감율
									 , A.WRKJOB_CD                  -- 업무코드
									 , A.TOP_WRKJOB_CD              -- 최상위 업무코드
									 , A.DBID                       -- DBID
									 , A.PERF_CHECK_STEP_ID         -- 성능점검 단계
									 , NULL PROGRAM_EXECUTE_TMS     -- 성능점검 수행회차
									 , NULL BEFORE_PRD_ELAPSED_TIME     -- 이전 운영 평균 수행시간
									 , NULL BEFORE_PRD_BUFFER_GETS      -- 이전 운영 평균 블럭수
									 , NULL BEFORE_PRD_ROWS_PROCESSED   -- 이전 운영 평균 처리건수
									 , SUBSTR(A.EXCEPTION_PRC_METH_NM, 1, 2)  EXCEPTION_PRC_METH_NM    -- 예외처리방법
								  FROM TMP_DEPLOY_EXCEPT_SQL A
							   ) A
							 , (
								/* ACTIVITY */
								SELECT DBID
									 , SQL_ID
									 , PLAN_HASH_VALUE
									 , ROUND((RATIO_TO_REPORT(SUM(ELAPSED_TIME)) OVER())* 100, 4) AS ELAPSED_TIME_ACTIVITY
									 , ROUND((RATIO_TO_REPORT(SUM(BUFFER_GETS)) OVER()) * 100, 4) AS BUFFER_GETS_ACTIVITY
								  FROM VSQL_STATS A
								 WHERE LAST_ACTIVE_TIME >= TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
								 GROUP BY DBID, SQL_ID, PLAN_HASH_VALUE
							   ) B
						 WHERE A.DBID = B.DBID
						   AND A.AFTER_PRD_SQL_ID = B.SQL_ID
						   AND A.AFTER_PRD_PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
							
							<if test='after_fail_yn_condition != null and after_fail_yn_condition != ""'>
						   /* 부적합 */
						   AND A.AFTER_FAIL_YN = #{after_fail_yn_condition}
							</if>
							
							<if test='selectSearchType != null and selectSearchType != ""'>
						   /* 성능저하 - 수행시간 */
						   /* 성능저하 - 블럭수  */
								<choose>
									<when test='selectSearchType eq "01".toString() and is_regress eq "Y"'>
						   /* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
						   AND A.BUFFER_GETS_REGRESS_YN = 'Y'
									</when>
									<when test='selectSearchType eq "01".toString() and is_regress eq "N"'>
						   /* 성능저하 - 블럭수, 성능점검SQL탭에서 성능향상/성능저하 조건으로 같이 사용됨 */
						   AND A.BUFFER_GETS_REGRESS_YN = 'N'
									</when>
								</choose>
							</if>
							
							<if test='selectPerfRegressedMetric != null and selectPerfRegressedMetric != ""'>
						   /* 성능점검SQL - 콤보 */
						   AND A.PERF_REGRESSED_METRIC = #{selectPerfRegressedMetric}
							</if>
							
							<if test='selectSqlPerfTrace != null and selectSqlPerfTrace != ""'>
						   /* 예외처리방법 : 예외처리SQL 탭에서 전달받은경우*/
						   AND A.EXCEPTION_PRC_METH_CD = #{selectSqlPerfTrace}
							</if>
							
							<if test='selectElapsedTimeMetirc != null and selectElapsedTimeMetirc != ""'>
						   /* 예외처리SQL - 콤보 */
						   AND A.ELAPSED_TIME_METIRC = #{selectElapsedTimeMetirc}
							</if>
							
							<if test='strSqlId != null and strSqlId != ""'>
						   /* SQL_ID */
						   AND A.AFTER_PRD_SQL_ID = #{strSqlId} 
							</if>
							
							<if test='strDbio != null and strDbio != ""'>
						   /* SQL식별자 */
						   AND A.DBIO = #{strDbio}
							</if>
						 ORDER BY DBIO, PROGRAM_ELAPSED_TIME_ACTIVITY DESC, RNUM, PROGRAM_BUFFER_GETS_ACTIVITY DESC
					   ) A
			   ) A
		 ORDER BY NO
	</select>
	
	<select id="autoPerformanceCheck" parameterType="sqls" resultType="sqls">
		/* SqlsDao.autoPerformanceCheck */
		/********** SQL 성능 추적 탭 **************/
		/* 
		   성능점검 
		   아래 항목은 SQLs_검색 결과에서 전달받아 출
		  - 성능점검일시 : PROGRAM_EXEC_DT
		  - 배포일자     : DEPLOY_COMPLETE_DT
		
		  test_sql_id : 71sv3rwpjx8ny
		*/
		SELECT MAX(CASE WHEN C.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(C.EXEC_RESULT_VALUE) END) ELAPSED_TIME   -- 수행시간
			 , MAX(CASE WHEN C.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(C.EXEC_RESULT_VALUE) END) BUFFER_GETS    -- 블럭수
			 , MAX(CASE WHEN C.PERF_CHECK_INDC_ID = 3 THEN TO_NUMBER(C.EXEC_RESULT_VALUE) END) ROWS_PROCESSED -- 처리건수
			 , MAX(CD1.CD_NM) PERF_CHECK_EVAL_METH_CD_NM                                                      -- 성능점검평가방법코드(2:평군, 3:최대)
		  FROM DEPLOY_PERF_CHK A, DEPLOY_PERF_CHK_RESULT B, DEPLOY_PERF_CHK_DETAIL_RESULT C
			 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
				  FROM (SELECT DBID
							 , WRKJOB_CD
							 , PERF_CHECK_STEP_ID
							 , PERF_CHECK_EVALUATION_METH_CD
							 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
						  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
						 WHERE A.DEL_YN = 'N'
					   ) A
					 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
						  FROM WRKJOB_CD
						 WHERE USE_YN = 'Y'
						 START WITH UPPER_WRKJOB_CD IS NULL
					   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
					   ) B
				 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
				   AND A.RNUM(+) = 1
			   ) D
			 , CD CD1
		 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		   AND B.PERF_CHECK_ID = C.PERF_CHECK_ID
		   AND B.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
		   AND B.PROGRAM_ID = C.PROGRAM_ID
		   AND B.PROGRAM_EXECUTE_TMS = C.PROGRAM_EXECUTE_TMS
		   
		   AND A.WRKJOB_CD = D.WRKJOB_CD
		   AND B.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
		   AND B.PERF_CHECK_EVALUATION_METH_CD = D.PERF_CHECK_EVALUATION_METH_CD
		   
		   AND D.PERF_CHECK_EVALUATION_METH_CD = CD1.CD
		   AND CD1.GRP_CD_ID = '1091'
		   
		   AND B.PERF_CHECK_ID = #{perf_check_id}
		   AND B.PROGRAM_ID = #{program_id}
		   AND C.PERF_CHECK_INDC_ID IN (1, 2, 3)
	</select>
	
	<select id="autoPerformanceCheckResult" parameterType="sqls" resultType="sqls">
		/* SqlsDao.autoPerformanceCheckResult */
		WITH TMP_DEPLOY_PERF_CHK_STEP AS
		(
			SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
			  FROM (SELECT DBID
						 , WRKJOB_CD
						 , PERF_CHECK_STEP_ID
						 , PERF_CHECK_EVALUATION_METH_CD
						 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
					  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
					 WHERE A.DEL_YN = 'N'
				   ) A
				 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
					  FROM WRKJOB_CD
					 WHERE USE_YN = 'Y'
					 START WITH UPPER_WRKJOB_CD IS NULL
				   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
			 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
			   AND A.RNUM(+) = 1
		)
		SELECT A.PERF_CHECK_INDC_NM                                          -- 점검지표
			 , A.INDC_PASS_MAX_VALUE                                         -- 지표여부값판정구분코드
			 , A.EXEC_RESULT_VALUE                                           -- 배포전 성능점검결과값
			 , A.PERF_CHECK_RESULT_DIV_NM                                    -- 배포전 성능점검결과
			 , B.EXEC_RESULT_VALUE AS PRD_EXEC_RESULT_VALUE                  -- 배포후 성능점검결과값
			 , NVL(CD1.CD_NM, 'N/A') AS PRD_PERF_CHECK_RESULT_DIV_NM         -- 배포후 성능점검결과
			 , A.EXCEPTION_YN                                                -- 예외등록여부

			,(CASE
				WHEN A.PERF_CHECK_INDC_ID = 1 AND A.INDC_PASS_MAX_VALUE <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN
					'SQL 수행시간 : ' || TO_CHAR(B.EXEC_RESULT_VALUE, 'FM999999999999999990.9999') || '초 ==> ' || TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999990.9999') || '초 이하로 개선 필요'
				WHEN A.PERF_CHECK_INDC_ID = 2 AND A.INDC_PASS_MAX_VALUE <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN
					'블럭수 : ' || TO_NUMBER(B.EXEC_RESULT_VALUE) || ' ==> ' || A.INDC_PASS_MAX_VALUE || ' 이하로 개선 필요'
				WHEN A.PERF_CHECK_INDC_ID = 3 THEN
					(CASE
						WHEN A.INDC_PASS_MAX_VALUE <![CDATA[<>]]> 0 AND A.INDC_PASS_MAX_VALUE <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN '처리건수 : ' || TO_NUMBER(B.EXEC_RESULT_VALUE) || '건, ' || A.INDC_PASS_MAX_VALUE || '건 이하로 처리(조회)되도록 개선 필요'
						WHEN A.INDC_PASS_MAX_VALUE <![CDATA[<>]]> 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN '처리건수 : 0건 ==> 데이터를 조회할 수 있는 바인드 값으로 변경하여 재 수행 필요'
						WHEN A.INDC_PASS_MAX_VALUE = 0 THEN '지표 설정값이 0건인 경우 처리건수와 상관없이 항상 적합처리됨'
						ELSE ''
					END)
				WHEN A.PERF_CHECK_INDC_ID = 4 THEN '운영DB 수집 부하를 줄이기 위하여 메모리사용량은 수집하지 않음'
				WHEN A.PERF_CHECK_INDC_ID = 5 AND NOT ((B.EXEC_RESULT_VALUE = 'N' AND B.YN_DECIDE_DIV_CD = '2') OR (B.EXEC_RESULT_VALUE = 'Y' AND B.YN_DECIDE_DIV_CD = '1')) THEN 
					'TABLE FULL SCAN : ' || B.EXEC_RESULT_VALUE || '개 ==> INDEX 추가 검토'
				WHEN A.PERF_CHECK_INDC_ID = 6 AND NOT ((B.EXEC_RESULT_VALUE = 'N' AND B.YN_DECIDE_DIV_CD = '2') OR (B.EXEC_RESULT_VALUE = 'Y' AND B.YN_DECIDE_DIV_CD = '1')) THEN 
					'전체 파티션 탐색 : ' || B.EXEC_RESULT_VALUE || '개 ==> WHERE에 파티션 키 컬럼 추가 필요'   
				ELSE ''
			END) AS PERF_CHECK_RESULT_DESC -- 성능점검결과설명

			 , A.PERF_CHECK_RESULT_DIV_CD                                    -- 배포전 성능점검결과
			 , B.PERF_CHECK_RESULT_DIV_CD AS PRD_PERF_CHECK_RESULT_DIV_CD    -- 배포후 성능점검결과
			 , A.PERF_CHECK_INDC_ID                                          -- 성능점검지표ID
			 , A.PERF_CHECK_METH_CD
		  FROM (SELECT /* DISPLAY */
					   B.PERF_CHECK_INDC_NM                                  -- 점검지표
					 -- 적합
					 , CASE WHEN INSTR(A.INDC_PASS_MAX_VALUE,'.',1) > 0 THEN TO_CHAR(A.INDC_PASS_MAX_VALUE, 'FM999999999999999990.9999') ELSE TO_CHAR(A.INDC_PASS_MAX_VALUE) END INDC_PASS_MAX_VALUE
					 -- 성능점검결과값
					 , CASE WHEN INSTR(A.EXEC_RESULT_VALUE,'.',1) > 0 THEN TO_CHAR(A.EXEC_RESULT_VALUE, 'FM999999999999999990.9999') ELSE TO_CHAR(A.EXEC_RESULT_VALUE) END EXEC_RESULT_VALUE
					 , CD2.CD_NM AS PERF_CHECK_RESULT_DIV_NM                 -- 성능점검결과
					 , (CASE WHEN C.PROGRAM_ID IS NOT NULL THEN 'Y' ELSE 'N' END) EXCEPTION_YN -- 예외등록여부
					 /* HIDDEN */
					 , A.INDC_YN_DECIDE_DIV_CD                     -- 지표여부값판정구분코드
					 , A.PERF_CHECK_INDC_ID                        -- 성능점검지표ID
					 , A.PERF_CHECK_RESULT_DIV_CD                  -- 성능점검결과구분코드
					 , B.PERF_CHECK_METH_CD                        -- 성능점검방법코드
					 , CD1.CD_NM AS PERF_CHECK_METH_NM             -- 성능점검방법
					 , A.PERF_CHECK_RESULT_DESC                    -- 성능점검결과설명
				  FROM DEPLOY_PERF_CHK_DETAIL_RESULT A             -- 배포성능점검상세결과내역
					 , DEPLOY_PERF_CHK_INDC B                      -- 배포성능점검지표기본
					 , (SELECT *
						  FROM (SELECT A.PROGRAM_ID
									 , B.PERF_CHECK_INDC_ID
									 , ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
								  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A     -- 배포성능점검예외요청내역
									 , DEPLOY_PERF_CHK_INDC_EXCPT B        -- 배포성능점검지표예외내역
								 WHERE A.EXCEPTION_PRC_METH_CD = '1'
								   AND A.EXCEPTION_PRC_STATUS_CD = '2'
								   AND B.DEL_YN = 'N'
								   AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID
								   AND B.PROGRAM_ID = #{program_id}
							   )
						 WHERE LAST_EXCEPT_INDC_NUM = 1
					   ) C
					 , DEPLOY_PERF_CHK D
					 , DEPLOY_PERF_CHK_RESULT E
					 , TMP_DEPLOY_PERF_CHK_STEP F
					 , CD CD1
					 , CD CD2
				 WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
				   AND A.PROGRAM_ID = C.PROGRAM_ID(+)
				   AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
				   AND B.PERF_CHECK_METH_CD = CD1.CD
				   AND CD1.GRP_CD_ID = '1059'
				   AND A.PERF_CHECK_RESULT_DIV_CD = CD2.CD
				   AND CD2.GRP_CD_ID = '1055'
				   AND A.PERF_CHECK_ID = D.PERF_CHECK_ID
				   AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
				   AND A.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
				   AND A.PROGRAM_ID = E.PROGRAM_ID
				   AND A.PROGRAM_EXECUTE_TMS = E.PROGRAM_EXECUTE_TMS
				   AND D.WRKJOB_CD = F.WRKJOB_CD
				   AND F.PERF_CHECK_EVALUATION_METH_CD = E.PERF_CHECK_EVALUATION_METH_CD
				   AND A.PERF_CHECK_ID = #{perf_check_id}                                -- 성능점검ID
				   AND A.PROGRAM_ID = #{program_id}                                      -- 프로그램ID
			   ) A
			 , (SELECT A.PERF_CHECK_INDC_ID
					 , A.PERF_CHECK_METH_CD -- 성능점검방법코드
					 -- 성능점검결과값
					 , (CASE 
							 WHEN A.PERF_CHECK_INDC_ID IN (1, 2, 3) THEN 
								  (CASE 
										WHEN INSTR(NVL(B.EXEC_RESULT_VALUE, 0),'.',1) > 0 THEN TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0), 'FM999999999999999990.9999') 
										ELSE TO_CHAR(NVL(B.EXEC_RESULT_VALUE, 0)) 
								  END) 
							 WHEN A.PERF_CHECK_INDC_ID IN (4) THEN 'N/A'
							 WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
								  (CASE 
										 WHEN EXEC_RESULT_VALUE > 0 THEN 'Y' 
										 ELSE 'N' 
								  END)
						 END) EXEC_RESULT_VALUE
					 -- 성능점검결과구분코드
					 -- 1. 지표(PERF_CHECK_INDC_ID)가 ROW_PROCESSED(3) 인경우 실행결과값(EXEC_RESULT_VALUE)이 0건은 부적합으로 판정
					 -- 2. 나머지 지표는 지표값을 초과한 경우 부적합으로 판정
					 , (CASE
							 WHEN A.PERF_CHECK_INDC_ID IN (1, 2) THEN (CASE WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B' ELSE 'A' END) 
							 WHEN A.PERF_CHECK_INDC_ID = 3    THEN
								  (CASE 
										WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) = 0 THEN 'A'
										WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND TO_NUMBER(B.EXEC_RESULT_VALUE) = 0 THEN 'B' 
										WHEN NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) > 0 AND NVL(C.PASS_MAX_VALUE, A.PASS_MAX_VALUE) <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE) THEN 'B'
										ELSE 'A'
								  END) 
							 WHEN A.PERF_CHECK_INDC_ID = 4 THEN 'N/A'
							 WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN 
								  (CASE 
										WHEN C.PERF_CHECK_INDC_ID IS NOT NULL THEN 'A'
										ELSE
											 (CASE
												   WHEN B.EXEC_RESULT_VALUE > 0 THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'A', '2', 'B')
												   WHEN B.EXEC_RESULT_VALUE = 0  OR B.EXEC_RESULT_VALUE IS NULL THEN DECODE(A.YN_DECIDE_DIV_CD, '1', 'B', '2', 'A')
											  END)
								  END)
						 END) AS PERF_CHECK_RESULT_DIV_CD -- 성능점검결과구분코드
						, A.YN_DECIDE_DIV_CD
				  FROM -- 성능점검기본 지표 
					   (SELECT E.PERF_CHECK_INDC_ID
							 , E.PERF_CHECK_PROGRAM_DIV_CD
							 , E.PASS_MAX_VALUE
							 , E.YN_DECIDE_DIV_CD
							 , F.PERF_CHECK_INDC_NM
							 , F.PERF_CHECK_METH_CD
							 , E.WRKJOB_CD
						  FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
							 , DEPLOY_PERF_CHK_STEP_EXEC B     -- 배포성능점검단계별수행내역
							 , DEPLOY_PERF_CHK_STEP C          -- 배포성능점점단계기본
							 , DEPLOY_PERF_CHK_STEP_TEST_DB D  -- 배포성능점검단계별테스트DB기본
							 , WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
							 , DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
						 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
						   AND B.PERF_CHECK_STEP_ID = C.PERF_CHECK_STEP_ID
						   AND D.WRKJOB_CD = #{top_wrkjob_cd}
						   AND C.PERF_CHECK_STEP_ID = D.PERF_CHECK_STEP_ID
						   AND A.WRKJOB_CD = E.WRKJOB_CD
						   AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
						   AND A.PERF_CHECK_ID = #{perf_check_id}
						   AND B.PERF_CHECK_STEP_ID = (SELECT MAX(PERF_CHECK_STEP_ID) 
														 FROM DEPLOY_PERF_CHK_STEP_EXEC S 
														WHERE S.PERF_CHECK_ID = A.PERF_CHECK_ID)
						   AND D.PROGRAM_DIV_CD = E.PERF_CHECK_PROGRAM_DIV_CD
						   AND E.INDC_APPLY_YN = 'Y'
						   AND F.INDC_USE_YN = 'Y'
						   AND F.PERF_CHECK_INDC_ID IN (1,2,3,4,5,6)
					   ) A
					 , (SELECT B1.PERF_CHECK_INDC_ID
							 , (CASE 
									 WHEN B1.PERF_CHECK_INDC_ID IN (1, 2, 3, 4) THEN B1.EXEC_RESULT_VALUE
									 WHEN B1.PERF_CHECK_INDC_ID = 5 AND  B2.EXEC_RESULT_VALUE > 0
										  AND ( (B1.COMMAND_TYPE  = 3 AND B1.BUFFER_GETS > B2.BIG_TABLE_THRESHOLD_CNT)
												 OR (B1.COMMAND_TYPE <![CDATA[<>]]> 3 AND 1 = 1)) THEN 1
									 WHEN B1.PERF_CHECK_INDC_ID = 6 AND  B2.EXEC_RESULT_VALUE > 0 THEN 1
									 ELSE 0
								 END) EXEC_RESULT_VALUE
						  -- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (1,2,3,4)
						  FROM (SELECT PERF_CHECK_INDC_ID
									 , MAX(CASE 
												WHEN PERF_CHECK_INDC_ID = 1 THEN A.ELAPSED_TIME
												WHEN PERF_CHECK_INDC_ID = 2 THEN A.BUFFER_GETS
												WHEN PERF_CHECK_INDC_ID = 3 THEN A.ROWS_PROCESSED
												WHEN PERF_CHECK_INDC_ID = 4 THEN NULL
											 END) EXEC_RESULT_VALUE
									 , MAX(A.COMMAND_TYPE) COMMAND_TYPE
									 , MAX(A.BUFFER_GETS) BUFFER_GETS
								  FROM (SELECT ROUND(ELAPSED_TIME/1000000/EXECUTIONS, 4) ELAPSED_TIME
											 , ROUND(BUFFER_GETS/EXECUTIONS) BUFFER_GETS
											 , ROUND(ROWS_PROCESSED/EXECUTIONS) ROWS_PROCESSED
											 , (SELECT COMMAND_TYPE 
												  FROM VSQL_TEXT ST
												 WHERE ST.DBID = #{dbid}                          -- 배포후 운영 DBID
												   AND ST.SQL_ID = #{after_prd_sql_id}            -- 배포후 운영 SQL_ID
												   AND ROWNUM = 1) COMMAND_TYPE
										  FROM (SELECT NVL(SUM(A.ELAPSED_TIME), 0) AS ELAPSED_TIME
													 , NVL(SUM(A.BUFFER_GETS), 0) AS BUFFER_GETS
													 , NVL(SUM(A.ROWS_PROCESSED), 0) AS ROWS_PROCESSED
													 , NVL(DECODE(SUM(A.EXECUTIONS), 0, 1, SUM(A.EXECUTIONS)), 1) AS EXECUTIONS
												  FROM VSQL_STATS A                                     -- 배포성능점검SQL성능내역(TABLE)
												 WHERE A.DBID = #{dbid}                                 -- 배포후 운영 DBID
												   AND A.SQL_ID = #{after_prd_sql_id}                   -- 배포후 운영 SQL_ID
												   AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value} -- 배포후 운영 PLAN_HASH_VALUE
											   ) A
									   ) A
									 , (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL <![CDATA[<=]]> 6)
								 GROUP BY PERF_CHECK_INDC_ID
							   ) B1
						 	-- 성능점검결과 ==> PERF_CHECK_INDC_ID IN (5, 6)
							 , (SELECT B.PERF_CHECK_INDC_ID
									 , B.EXEC_RESULT_VALUE
									 , C.BIG_TABLE_THRESHOLD_CNT
								  FROM (SELECT PERF_CHECK_INDC_ID
											 , SUM(CASE 
														WHEN D.PERF_CHECK_INDC_ID = 5 AND A.OPERATION IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN') THEN 1
														WHEN D.PERF_CHECK_INDC_ID = 6 AND A.OPERATION IN ('PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL') THEN 1 
														ELSE 0 
												   END) EXEC_RESULT_VALUE
										  FROM (SELECT ID, OPERATION || ' ' || OPTIONS AS OPERATION
												  FROM (SELECT A.STATEMENT_ID, A.ID, A.OPERATION, A.OPTIONS
															 , MAX(A.STATEMENT_ID) OVER (PARTITION BY NULL) AS MAX_STATEMENT_ID
														  FROM VSQL_PLAN A                               -- 배포성능점검SQL플랜내역(TABLE)
														 WHERE A.DBID = #{dbid}                          -- 배포후 운영 DBID
														   AND A.PLAN_HASH_VALUE = #{after_prd_plan_hash_value}    -- 배포후 운영 PLAN_HASH_VALUE
														   AND (A.OBJECT_OWNER, A.OBJECT_NAME) NOT IN (SELECT 'SYS', 'DUAL' FROM DUAL)
														   AND A.OBJECT_TYPE <![CDATA[<>]]> 'TABLE (TEMP)'
													   ) A
												 WHERE A.STATEMENT_ID = A.MAX_STATEMENT_ID
												   AND A.OPERATION || ' ' || A.OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN', 'PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL')
											   ) A, (SELECT LEVEL PERF_CHECK_INDC_ID FROM DUAL CONNECT BY LEVEL <![CDATA[<=]]> 6) D
										 GROUP BY PERF_CHECK_INDC_ID
									   ) B
									 -- 대용량 기준건수 
									 , (SELECT TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
										  FROM SPOP_PREFERENCES A
											 , (SELECT B.DBID, B.PREF_ID, B.PREF_SEQ, B.PREF_VALUE
												  FROM -- DBID 조회
													   (SELECT C.DBID 
														  FROM DEPLOY_PERF_CHK A
															 , WRKJOB_DB B
															 , DATABASE C
														 WHERE A.WRKJOB_CD = B.WRKJOB_CD
														   AND B.DBID = C.DBID
														   AND C.DB_OPERATE_TYPE_CD = '3'  -- DB운영유형코드 1:개발, 2:테스트, 3:운영
														   AND A.PERF_CHECK_ID = #{perf_check_id}
														   AND ROWNUM = 1
													   ) A
													 , (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
															 , MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
														  FROM DB_PREFERENCES
														 WHERE PREF_ID IN (12004)
													   ) B
												 WHERE A.DBID = B.DBID
												   AND B.PREF_SEQ = B.MAX_PREF_SEQ
										 ) B
										 WHERE A.PREF_ID = B.PREF_ID(+)
										   AND A.PREF_ID IN (12004)
									   ) C
							   ) B2
						 WHERE B1.PERF_CHECK_INDC_ID = B2.PERF_CHECK_INDC_ID(+)
					   ) B
					 -- 성능점검 예외 지표
					 , (SELECT *
						  FROM (SELECT B.PERF_CHECK_INDC_ID
									 , B.PASS_MAX_VALUE
									 , B.YN_DECIDE_DIV_CD
									 , ROW_NUMBER() OVER(PARTITION BY B.PROGRAM_ID, B.PERF_CHECK_INDC_ID ORDER BY B.EXCEPTION_REQUEST_ID DESC) LAST_EXCEPT_INDC_NUM
								  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
									 , DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
								 WHERE A.EXCEPTION_PRC_METH_CD = '1'
								   AND A.EXCEPTION_PRC_STATUS_CD = '2'
								   AND B.DEL_YN = 'N'
								   AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID
								   AND A.PROGRAM_ID = B.PROGRAM_ID
								   AND B.PROGRAM_ID = #{program_id}
							   )
						 WHERE LAST_EXCEPT_INDC_NUM = 1
					   ) C
				 WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID(+)
				   AND A.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID(+)
			   ) B
			 , CD CD1
		 WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
		   AND B.PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
		   AND CD1.GRP_CD_ID(+) = '1055'
		 ORDER BY A.PERF_CHECK_INDC_ID
	</select>
</mapper>