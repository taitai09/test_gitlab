<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
	2018.02.21	이원식	OPENPOP V2 최초작업
	2020.06.03	이재우	기능개선
-->
<mapper namespace="omc.spop.dao.ImprovementManagementDao">
	
	<select id="getImprovementSummary" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.getImprovementSummary */
		<if test="(tuning_requester_id != null and tuning_requester_id != '') and (wrkjob_mgr_id != null and wrkjob_mgr_id != '')">
			WITH USER_LIST AS
			(
				SELECT A.USER_ID
				FROM USERS A,
					 USER_WRKJOB B,
					 (SELECT WRKJOB_CD, WRKJOB_CD_NM, CONNECT_BY_ROOT WRKJOB_CD TOP_WRKJOB_CD 
					  FROM WRKJOB_CD
					  START WITH WRKJOB_CD = #{wrkjob_cd}
					  CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) C
				WHERE A.USER_ID = B.USER_ID
				AND B.WRKJOB_CD = C.WRKJOB_CD
				<if test="(leader_yn != null and (leader_yn eq 'N'.toString()))">
					AND (B.WRKJOB_CD <![CDATA[ <> ]]> #{wrkjob_cd} OR (B.WRKJOB_CD = #{wrkjob_cd} AND A.USER_ID = #{wrkjob_mgr_id}))
				</if>
			)
		</if>
		SELECT COUNT(*) AS PROCESS_ALL																  -- 전체
			,NVL(SUM(CASE WHEN A.TUNING_STATUS_CD IN ('1', '2') THEN 1 ELSE 0 END),0) AS PROCESS_1	  -- 튜닝요청(선정/요청)
			,NVL(SUM(CASE WHEN A.TUNING_STATUS_CD IN ('3')	  THEN 1 ELSE 0 END),0) AS PROCESS_3	  -- 튜닝대기(접수)
			,NVL(SUM(CASE WHEN A.TUNING_STATUS_CD IN ('5')		THEN 1 ELSE 0 END),0) AS PROCESS_5	  -- 튜닝중
			,NVL(SUM(CASE WHEN A.TUNING_STATUS_CD IN ('6')	  THEN 1 ELSE 0 END),0) AS PROCESS_6	  -- 적용대기
			,NVL(SUM(CASE WHEN A.TUNING_STATUS_CD IN ('7')	  THEN 1 ELSE 0 END),0) AS PROCESS_7	  -- 튜닝종료
			,NVL(SUM(CASE WHEN A.TUNING_STATUS_CD IN ('8')	  THEN 1 ELSE 0 END),0) AS PROCESS_8	  -- 적용반려
			,NVL(SUM(CASE WHEN A.TUNING_STATUS_CD IN ('4')	  THEN 1 ELSE 0 END),0) AS PROCESS_4	  -- 튜닝반려
		FROM TUNING_TARGET_SQL A, SQL_TUNING B  
		WHERE A.TUNING_NO = B.TUNING_NO(+)
		<include refid="getImprovementSummarySearchCondition2"></include>
	</select>
	
	<sql id="getImprovementSummarySearchCondition2">
		/* ImprovementManagementDao.getImprovementSummarySearchCondition2 */
		<choose>
			<when test="(strGubun != null and (strGubun eq '01'.toString()))"> <!-- 튜닝요청일자 -->
				AND A.TUNING_REQUEST_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
			<when test="(strGubun != null and (strGubun eq '02'.toString()))"> <!-- 튜닝반려일자 -->
				AND A.TUNING_RCESS_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
			<when test="(strGubun != null and (strGubun eq '03'.toString()))"> <!-- 튜닝완료일자 -->
				AND B.TUNING_COMPLETE_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
			<when test="(strGubun != null and (strGubun eq '04'.toString()))"> <!-- 튜닝적용일자 -->
				AND B.TUNING_APPLY_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
			<when test="(strGubun != null and (strGubun eq '05'.toString()))"> <!-- 튜닝종료일자 -->
				AND B.TUNING_END_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
		</choose>		
		<if test="dbid != null and dbid != ''">
			AND A.DBID = #{dbid}
		</if>
		<if test="choice_div_cd != null and choice_div_cd != ''">
			AND A.CHOICE_DIV_CD = #{choice_div_cd}
		</if>	
		<if test="(tuning_requester_id != null and tuning_requester_id != '') and (wrkjob_mgr_id != null and wrkjob_mgr_id != '')">
			AND (A.TUNING_REQUESTER_ID IN (SELECT USER_ID FROM USER_LIST) OR A.WRKJOB_MGR_ID IN (SELECT USER_ID FROM USER_LIST))
		</if>	
		<!-- 2020-03-03 JMG 추가 -->
		<if test="perfr_id != null and perfr_id != ''">
			AND (A.PERFR_ID = #{perfr_id} OR A.TUNING_REQUESTER_ID = #{perfr_id})
		</if>
	</sql>
	
	<sql id="getImprovementSummarySearchCondition1">
		/* ImprovementManagementDao.getImprovementSummarySearchCondition1 */
		<choose>
			<when test="(strGubun != null and (strGubun eq '01'.toString()))"> <!-- 튜닝요청일자 -->
				AND A.TUNING_REQUEST_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
			<when test="(strGubun != null and (strGubun eq '02'.toString()))"> <!-- 튜닝반려일자 -->
				AND A.TUNING_RCESS_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
			<when test="(strGubun != null and (strGubun eq '03'.toString()))"> <!-- 튜닝완료일자 -->
				AND B.TUNING_COMPLETE_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
			<when test="(strGubun != null and (strGubun eq '04'.toString()))"> <!-- 튜닝적용일자 -->
				AND B.TUNING_APPLY_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
			<when test="(strGubun != null and (strGubun eq '05'.toString()))"> <!-- 튜닝종료일자 -->
				AND B.TUNING_END_DT BETWEEN TO_DATE(#{strStartDt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE(#{strEndDt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			</when>
		</choose>		
		<if test="search_tuning_no != null and search_tuning_no != '' and headerBtnIsClicked != 'Y'.toString()">
			AND A.TUNING_NO = #{search_tuning_no}
		</if>		
		<if test="dbid != null and dbid != ''">
			AND A.DBID = #{dbid}
		</if>
		<if test="perfr_id != null and perfr_id != ''">
<!-- 			AND A.PERFR_ID = #{perfr_id} -->
			AND (A.PERFR_ID = #{perfr_id} OR A.TUNING_REQUESTER_ID = #{perfr_id})
		</if>
		<if test="choice_div_cd != null and choice_div_cd != ''">
			AND A.CHOICE_DIV_CD = #{choice_div_cd}
		</if>		
		<if test="(tuning_requester_id != null and tuning_requester_id != '') and (wrkjob_mgr_id != null and wrkjob_mgr_id != '')">
			AND (A.TUNING_REQUESTER_ID IN (SELECT USER_ID FROM USER_LIST) OR A.WRKJOB_MGR_ID IN (SELECT USER_ID FROM USER_LIST))
		</if>
<!-- 		<if test="first_tuning_status_cd != null and first_tuning_status_cd != ''"> -->
<!-- 			<choose> -->
<!-- 				<when test="first_tuning_status_cd != null and (first_tuning_status_cd eq '1'.toString() or first_tuning_status_cd eq '2'.toString() )"> -->
<!-- 					AND A.TUNING_STATUS_CD IN ('1','2') -->
<!-- 				</when> -->
<!-- 				<when test="first_tuning_status_cd != null and first_tuning_status_cd eq '4'.toString()"> -->
<!-- 					AND A.TUNING_STATUS_CD IN ('4') -->
<!-- 				</when> -->
<!-- 				<otherwise> -->
<!-- 					AND A.TUNING_STATUS_CD = #{first_tuning_status_cd} -->
<!-- 				</otherwise> -->
<!-- 			</choose>	 -->
<!-- 		</if> -->
		<if test="tuning_status_cd != null and tuning_status_cd != ''">
			<choose>
				<when test="tuning_status_cd != null and (tuning_status_cd eq '1'.toString() or tuning_status_cd eq '2'.toString() )">
					AND A.TUNING_STATUS_CD IN ('1','2')
				</when>
				<when test="tuning_status_cd != null and tuning_status_cd eq '4'.toString()">
					AND A.TUNING_STATUS_CD IN ('4')
				</when>
				<otherwise>
					AND A.TUNING_STATUS_CD = #{tuning_status_cd}
				</otherwise>
			</choose>	
		</if>
		<choose>
			<when test="(searchKey != null and (searchKey eq '01'.toString())) and headerBtnIsClicked != 'Y'.toString()">
				AND A.PERFR_ID IN (SELECT USER_ID FROM USERS WHERE USER_NM LIKE #{searchValue} || '%')
			</when>
			<when test="(searchKey != null and (searchKey eq '02'.toString())) and headerBtnIsClicked != 'Y'.toString()">
				AND A.TUNING_REQUESTER_ID IN (SELECT USER_ID FROM USERS WHERE USER_NM LIKE #{searchValue} || '%')
			</when>
			<when test="(searchKey != null and (searchKey eq '03'.toString())) and headerBtnIsClicked != 'Y'.toString()">
				AND A.WRKJOB_MGR_ID IN (SELECT USER_ID FROM USERS WHERE USER_NM LIKE #{searchValue} || '%')
			</when>
		</choose>
		<if test="tr_cd != null and tr_cd != '' and headerBtnIsClicked != 'Y'.toString()">
			AND A.TR_CD LIKE #{tr_cd} || '%'
		</if>
		<if test="dbio != null and dbio != '' and headerBtnIsClicked != 'Y'.toString()">
			AND A.DBIO LIKE #{dbio} || '%'
		</if>
		<if test="sql_id != null and sql_id != '' and headerBtnIsClicked != 'Y'.toString()">
			AND A.SQL_ID = #{sql_id}
		</if>
		<choose>
			<when test="(is_completed == 'Y'.toString()) and (headerBtnIsClicked != 'Y'.toString())">
				AND A.TUNING_STATUS_CD IN ('8')
			</when>
			<when test="(is_completed == 'N'.toString()) and (headerBtnIsClicked != 'Y'.toString())">
				AND A.TUNING_STATUS_CD NOT IN ('8')
			</when>
			<otherwise>
			</otherwise>
		</choose>	
		
		 AND A.PROJECT_ID = E.PROJECT_ID(+)
		 --AND A.TUNING_PRGRS_STEP_SEQ = E.TUNING_PRGRS_STEP_SEQ(+)
		 AND A.PROJECT_ID = F.PROJECT_ID(+)
		 AND A.TUNING_PRGRS_STEP_SEQ = F.TUNING_PRGRS_STEP_SEQ(+)
		 AND A.PROJECT_ID = G.PROJECT_ID(+)
		 AND A.SQL_AUTO_PERF_CHECK_ID = G.SQL_AUTO_PERF_CHECK_ID(+)
		 
		<if test="project_id != null and project_id != '' and headerBtnIsClicked != 'Y'.toString()">
		 -- 프로젝트가 선택되면
		 AND A.PROJECT_ID = #{project_id}
		 </if>
		<if test="tuning_prgrs_step_seq != null and tuning_prgrs_step_seq != '' and headerBtnIsClicked != 'Y'.toString()">
		 -- 튜닝진행단계가 선택되면
		 AND A.TUNING_PRGRS_STEP_SEQ = #{tuning_prgrs_step_seq}
		 </if>
		<if test="sql_auto_perf_check_id != null and sql_auto_perf_check_id != '' and headerBtnIsClicked != 'Y'.toString()">
		 -- SQL점검팩이 선택되면
		 AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
		</if>
	</sql>

	<select id="improvementStatusList" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.improvementStatusList */
		SELECT *
		FROM (
			SELECT ROWNUM RNUM, A.*
			FROM (
				<include refid="improvementStatusListRefId"/>	
			) A
			WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
		) A
		WHERE A.RNUM > ${pagePerCount} * (${currentPage} - 1)
	</select>
	
	<select id="improvementStatusList4Excel" parameterType="tuningTargetSql" resultType="java.util.LinkedHashMap">
		/* ImprovementManagementDao.improvementStatusList4Excel */
		<include refid="improvementStatusListRefId"/>	
	</select>
	
	<sql id="improvementStatusListRefId">
		<if test="(tuning_requester_id != null and tuning_requester_id != '') and (wrkjob_mgr_id != null and wrkjob_mgr_id != '')">
			WITH USER_LIST AS
			(
				SELECT A.USER_ID
				FROM USERS A,
					 USER_WRKJOB B,
					 (SELECT WRKJOB_CD, WRKJOB_CD_NM, CONNECT_BY_ROOT WRKJOB_CD TOP_WRKJOB_CD 
					  FROM WRKJOB_CD
					  START WITH WRKJOB_CD = #{wrkjob_cd}
					  CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) C
				WHERE A.USER_ID = B.USER_ID
				AND B.WRKJOB_CD = C.WRKJOB_CD
				<if test="(leader_yn != null and (leader_yn eq 'N'.toString()))">
					AND (B.WRKJOB_CD <![CDATA[ <> ]]> #{wrkjob_cd} OR (B.WRKJOB_CD = #{wrkjob_cd} AND A.USER_ID = #{wrkjob_mgr_id}))
				</if>
			)		
		</if>
		SELECT A.TUNING_NO
			 , A.BEFORE_TUNING_NO
			 , A.DBID
			 , D.DB_NAME
			 , A.CHOICE_DIV_CD
			 , CD1.CD_NM AS CHOICE_DIV_CD_NM
			 , SQL_ID
			 , TR_CD
			 , DBIO
			 , MODULE
			 , PERFR_ID
			 , U.USER_NM AS PERFR_NM
			 , TUNING_STATUS_CD
			 , CD2.CD_NM AS TUNING_STATUS_NM
			 , CASE
				 WHEN A.TUNING_STATUS_CD = '6' THEN CD3.CD_NM
				 WHEN A.TUNING_STATUS_CD = '8' THEN CD4.CD_NM
				 ELSE ''
			   END AS TUNING_WHY_NM
			 , TO_CHAR(A.TUNING_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') TUNING_REQUEST_DT
			 , U2.USER_NM AS TUNING_REQUESTER_NM
			 , U3.USER_NM AS WRKJOB_MGR_NM
			 , TO_CHAR(B.TUNING_COMPLETE_DT,'YYYY-MM-DD HH24:MI:SS') TUNING_COMPLETE_DT
			 , B.TEMPORARY_SAVE_YN
			 , TO_CHAR(B.TEMPORARY_SAVE_DT,'YYYY-MM-DD HH24:MI:SS') TEMPORARY_SAVE_DT
			 , B.IMPRB_ELAP_TIME
			 , B.IMPRB_BUFFER_CNT
			 , B.IMPRA_ELAP_TIME
			 , B.IMPRA_BUFFER_CNT
			 , B.ELAP_TIME_IMPR_RATIO
			 , B.BUFFER_IMPR_RATIO
			 , A.AFTER_TUNING_NO
			 , TO_CHAR(B.TUNING_APPLY_DT,'YYYY-MM-DD HH24:MI:SS') TUNING_APPLY_DT
			 
			 , E.PROJECT_NM AS PROJECT_NM
			 , F.TUNING_PRGRS_STEP_NM
			 , G.PERF_CHECK_NAME
			 -- HIDDEN
			 , E.PROJECT_ID
			 , F.TUNING_PRGRS_STEP_SEQ
			 , G.SQL_AUTO_PERF_CHECK_ID
			 
			 
		  FROM TUNING_TARGET_SQL A
			 , SQL_TUNING B
			 , USERS U
			 , USERS U2
			 , USERS U3
			 , DATABASE D
			 , CD CD1
			 , CD CD2
			 , CD CD3
			 , CD CD4
			 , PROJECT E
			 , PROJECT_TUNING_PRGRS_STEP F
			 , SQL_AUTO_PERF_CHK G
<!-- 			 , (SELECT A.PROJECT_ID -->
<!-- 				   , A.PROJECT_NM -->
<!-- 				   , B.TUNING_PRGRS_STEP_SEQ -->
<!-- 				   , B.TUNING_PRGRS_STEP_NM -->
<!-- 				FROM PROJECT A -->
<!-- 				   , PROJECT_TUNING_PRGRS_STEP B -->
<!-- 			   WHERE A.PROJECT_ID = B.PROJECT_ID -->
<!-- 			 ) E -->
			 
			 
		 WHERE A.TUNING_NO = B.TUNING_NO(+)
		   AND A.PERFR_ID = U.USER_ID(+)
		   AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
		   AND A.WRKJOB_MGR_ID = U3.USER_ID(+)
		   AND A.DBID = D.DBID
		   AND A.CHOICE_DIV_CD = CD1.CD
		   AND CD1.GRP_CD_ID = '1003'
		   AND A.TUNING_STATUS_CD = CD2.CD
		   AND CD2.GRP_CD_ID = '1004'
		   AND B.TUNING_COMPLETE_WHY_CD = CD3.CD(+)
		   AND CD3.GRP_CD_ID(+) = '1008'
		   AND B.TUNING_END_WHY_CD = CD4.CD(+)
		   AND CD4.GRP_CD_ID(+) = '1009'
		   <include refid="getImprovementSummarySearchCondition1"></include>
		ORDER BY A.TUNING_NO DESC
	</sql>
	
	<sql id="improvementStatusListRefId_old">
		<if test="(tuning_requester_id != null and tuning_requester_id != '') and (wrkjob_mgr_id != null and wrkjob_mgr_id != '')">
			WITH USER_LIST AS
			(
				SELECT A.USER_ID
				FROM USERS A,
					 USER_WRKJOB B,
					 (SELECT WRKJOB_CD, WRKJOB_CD_NM, CONNECT_BY_ROOT WRKJOB_CD TOP_WRKJOB_CD 
					  FROM WRKJOB_CD
					  START WITH WRKJOB_CD = #{wrkjob_cd}
					  CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) C
				WHERE A.USER_ID = B.USER_ID
				AND B.WRKJOB_CD = C.WRKJOB_CD
				<if test="(leader_yn != null and (leader_yn eq 'N'.toString()))">
					AND (B.WRKJOB_CD <![CDATA[ <> ]]> #{wrkjob_cd} OR (B.WRKJOB_CD = #{wrkjob_cd} AND A.USER_ID = #{wrkjob_mgr_id}))
				</if>
			)		
		</if>
		SELECT A.TUNING_NO
			 , A.BEFORE_TUNING_NO
			 , A.DBID
			 , D.DB_NAME
			 , A.CHOICE_DIV_CD
			 , CD1.CD_NM AS CHOICE_DIV_CD_NM
			 , SQL_ID
			 , TR_CD
			 , DBIO
			 , MODULE
			 , PERFR_ID
			 , U.USER_NM AS PERFR_NM
			 , TUNING_STATUS_CD
			 , CD2.CD_NM AS TUNING_STATUS_NM
			 , CASE
				 WHEN A.TUNING_STATUS_CD = '6' THEN CD3.CD_NM
				 WHEN A.TUNING_STATUS_CD = '8' THEN CD4.CD_NM
				 ELSE ''
			   END AS TUNING_WHY_NM
			 , TO_CHAR(A.TUNING_REQUEST_DT,'YYYY-MM-DD HH24:MI:SS') TUNING_REQUEST_DT
			 , U2.USER_NM AS TUNING_REQUESTER_NM
			 , U3.USER_NM AS WRKJOB_MGR_NM
			 , TO_CHAR(B.TUNING_COMPLETE_DT,'YYYY-MM-DD HH24:MI:SS') TUNING_COMPLETE_DT
			 , B.TEMPORARY_SAVE_YN
			 , TO_CHAR(B.TEMPORARY_SAVE_DT,'YYYY-MM-DD HH24:MI:SS') TEMPORARY_SAVE_DT
			 , B.IMPRB_ELAP_TIME
			 , B.IMPRB_BUFFER_CNT
			 , B.IMPRA_ELAP_TIME
			 , B.IMPRA_BUFFER_CNT
			 , B.ELAP_TIME_IMPR_RATIO
			 , B.BUFFER_IMPR_RATIO
			 , A.AFTER_TUNING_NO
			 , TO_CHAR(B.TUNING_APPLY_DT,'YYYY-MM-DD HH24:MI:SS') TUNING_APPLY_DT
		  FROM TUNING_TARGET_SQL A
			 , SQL_TUNING B
			 , USERS U
			 , USERS U2
			 , USERS U3
			 , DATABASE D
			 , CD CD1
			 , CD CD2
			 , CD CD3
			 , CD CD4
		 WHERE A.TUNING_NO = B.TUNING_NO(+)
		   AND A.PERFR_ID = U.USER_ID(+)
		   AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
		   AND A.WRKJOB_MGR_ID = U3.USER_ID(+)
		   AND A.DBID = D.DBID
		   AND A.CHOICE_DIV_CD = CD1.CD
		   AND CD1.GRP_CD_ID = '1003'
		   AND A.TUNING_STATUS_CD = CD2.CD
		   AND CD2.GRP_CD_ID = '1004'
		   AND B.TUNING_COMPLETE_WHY_CD = CD3.CD(+)
		   AND CD3.GRP_CD_ID(+) = '1008'
		   AND B.TUNING_END_WHY_CD = CD4.CD(+)
		   AND CD4.GRP_CD_ID(+) = '1009'
		   <include refid="getImprovementSummarySearchCondition1"></include>
		ORDER BY A.TUNING_NO DESC
	</sql>
		
	<select id="getImprBeforeAfter" parameterType="tuningTargetSql" resultType="sqlTuning">
		/* ImprovementManagementDao.getImprBeforeAfter */
		SELECT * FROM SQL_TUNING
		WHERE TUNING_NO = #{tuning_no}
	</select>
	
	<select id="getSQLTuning" parameterType="tuningTargetSql" resultType="sqlTuning">
		/* ImprovementManagementDao.getSQLTuning */
		SELECT A.TUNING_NO
			 , A.DBID
			 , DB.DB_NAME
			 , A.PARSING_SCHEMA_NAME
			 , A.CHOICE_DIV_CD
			 , A.TUNING_STATUS_CD
			 , CD1.CD_NM AS TUNING_STATUS_NM
			 , A.PERFR_ID
			 , A.WRKJOB_MGR_ID
			 , U1.USER_NM AS WRKJOB_MGR_NM
			 , A.WRKJOB_MGR_WRKJOB_CD
			 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM
			 , A.WRKJOB_MGR_TEL_NUM
			 , A.TUNING_REQUESTER_ID
			 , NVL(B.EXCEPT_TARGET_YN,'N') AS EXCEPT_TARGET_YN
			 , B.TUNING_COMPLETE_WHY_CD
			 , TUNING_COMPLETE_WHY
<!-- 			 , TO_CHAR(TUNING_COMPLETE_DT, 'YYYY-MM-DD HH24:MI:SS') AS TUNING_COMPLETE_DT -->
			 , (CASE
								 WHEN B.TEMPORARY_SAVE_YN = 'Y' THEN TO_CHAR(TEMPORARY_SAVE_DT, 'YYYY-MM-DD HH24:MI:SS')
								 ELSE TO_CHAR(B.TUNING_COMPLETE_DT, 'YYYY-MM-DD HH24:MI:SS')
							   END) TUNING_COMPLETE_DT
			 , A.TUNING_RCESS_WHY
			 , TO_CHAR(A.TUNING_RCESS_DT, 'YYYY-MM-DD HH24:MI:SS') AS TUNING_RCESS_DT
			 , TUNING_APPLY_RCESS_WHY
			 , TO_CHAR(TUNING_APPLY_RCESS_DT, 'YYYY-MM-DD HH24:MI:SS') AS TUNING_APPLY_RCESS_DT
			 , TUNING_END_WHY_CD
			 , TUNING_END_WHY
			 , TO_CHAR(TUNING_END_DT, 'YYYY-MM-DD HH24:MI:SS') AS TUNING_END_DT
			 , NVL(TUNING_CASE_POSTING_YN,'Y') AS TUNING_CASE_POSTING_YN
			 , TUNING_CASE_POSTING_TITLE
			 , BEFORE_TUNING_NO
			 , AFTER_TUNING_NO
		  FROM TUNING_TARGET_SQL A
			 , SQL_TUNING B
			 , DATABASE DB
			 , USERS U1
			 , WRKJOB_CD W1
			 , CD CD1
		 WHERE A.TUNING_NO = #{tuning_no}
		   AND A.DBID = DB.DBID
		   AND A.TUNING_STATUS_CD = CD1.CD(+)
		   AND CD1.GRP_CD_ID(+) = '1004'
		   AND A.TUNING_NO = B.TUNING_NO(+)
		   AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
		   AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
	</select>

	<select id="getSelection" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.getSelection */
		SELECT A.TUNING_NO
			 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY
			 , CD1.CD_NM AS CHOICE_DIV_CD_NM
			 , A.TUNING_REQUESTER_ID
			 , U2.USER_NM AS TUNING_REQUESTER_NM
			 , A.TUNING_REQUESTER_WRKJOB_CD
			 , W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM
			 , A.TUNING_REQUESTER_TEL_NUM
			 , U1.USER_NM AS WRKJOB_MGR_NM
			 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM
			 , A.WRKJOB_MGR_TEL_NUM
			 , B.DB_NAME
			 , SQL_ID
			 , PLAN_HASH_VALUE
			 , NVL(FN_NUM_TO_CHAR_FORMAT(AVG_ELAPSED_TIME), '') AS AVG_ELAPSED_TIME
			 , AVG_BUFFER_GETS
			 , AVG_ROW_PROCESSED
			 , EXECUTIONS
			 , MODULE
			 , PARSING_SCHEMA_NAME
			 , TR_CD
			 , DBIO
		  <!--, REPLACE(A.SQL_TEXT ,CHR(10)||CHR(13),'<![CDATA[<BR/>]]>') AS SQL_TEXT -->
		  , A.SQL_TEXT
		  FROM TUNING_TARGET_SQL A
			 , DATABASE B
			 , CD CD1
			 , USERS U1
			 , USERS U2
			 , WRKJOB_CD W1
			 , WRKJOB_CD W2
		 WHERE A.DBID = B.DBID
		   AND A.CHOICE_DIV_CD = CD1.CD(+)
		   AND CD1.GRP_CD_ID(+) = '1003'
		   AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
		   AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
		   AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
		   AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
		   AND A.TUNING_NO = #{tuning_no}
	</select>
	
	<select id="getRequest" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.getRequest */
		SELECT A.TUNING_NO, A.TUNING_REQUEST_DT,A.PARSING_SCHEMA_NAME, CD3.CD_NM AS CHOICE_DIV_CD_NM,
			A.TUNING_REQUESTER_ID, A.TUNING_REQUESTER_WRKJOB_CD, U1.USER_NM AS TUNING_REQUESTER_NM, W1.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM,
			A.TUNING_REQUESTER_TEL_NUM
			, CD1.CD_NM AS PROGRAM_TYPE_CD_NM, CD2.CD_NM AS BATCH_WORK_DIV_CD_NM
			, TO_CHAR(TO_DATE(A.TUNING_COMPLETE_DUE_DT,'YYYYMMDD'),'YYYY-MM-DD') TUNING_COMPLETE_DUE_DT
			, B.DB_NAME, 
			A.TR_CD, A.DBIO, NVL(FN_NUM_TO_CHAR_FORMAT(A.CURRENT_ELAP_TIME), '') AS CURRENT_ELAP_TIME, A.FORECAST_RESULT_CNT, NVL(FN_NUM_TO_CHAR_FORMAT(A.GOAL_ELAP_TIME), '') AS GOAL_ELAP_TIME, 
			A.WRKJOB_PECULIAR_POINT, A.REQUEST_WHY, A.SQL_DESC, A.SQL_TEXT, A.EXEC_CNT
		FROM TUNING_TARGET_SQL A, DATABASE B, CD CD1, CD CD2, CD CD3, USERS U1, WRKJOB_CD W1
		WHERE A.DBID = B.DBID
		AND A.PROGRAM_TYPE_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1005'
		AND A.BATCH_WORK_DIV_CD = CD2.CD(+)
		AND CD2.GRP_CD_ID(+) = '1006'
		AND A.CHOICE_DIV_CD = CD3.CD(+)
		AND CD3.GRP_CD_ID(+) = '1003'
		AND A.TUNING_REQUESTER_ID = U1.USER_ID(+)
		AND A.TUNING_REQUESTER_WRKJOB_CD = W1.WRKJOB_CD(+)
		AND A.TUNING_NO = #{tuning_no}
	</select>	
	
	<select id="getFullScan" parameterType="tuningTargetSql" resultType="fullscanSql">
		/* ImprovementManagementDao.getFullScan */
		SELECT A.TUNING_NO
			 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY,
			CD1.CD_NM AS CHOICE_DIV_CD_NM, A.TUNING_REQUESTER_ID, A.TUNING_REQUESTER_ID, U2.USER_NM AS TUNING_REQUESTER_NM, A.TUNING_REQUESTER_WRKJOB_CD, 
			W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM, A.TUNING_REQUESTER_TEL_NUM,
			U1.USER_NM AS WRKJOB_MGR_NM, W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM, A.WRKJOB_MGR_TEL_NUM, 
			C.DB_NAME, A.SQL_ID, B.PLAN_HASH_VALUE,  
			B.MODULE, B.ACTION, B.OPERATIONS,
			B.PARSING_SCHEMA_NAME, B.EXECUTIONS, NVL(FN_NUM_TO_CHAR_FORMAT(B.ELAPSED_TIME), '') AS ELAPSED_TIME, 
			NVL(FN_NUM_TO_CHAR_FORMAT(B.CPU_TIME), '') AS CPU_TIME, B.ROWS_PROCESSED, B.DISK_READS, B.BUFFER_GETS, 
			A.TR_CD, A.DBIO
		  <!--, REPLACE(A.SQL_TEXT ,CHR(10)||CHR(13),'<![CDATA[<BR/>]]>') AS SQL_TEXT -->
		  , A.SQL_TEXT
		FROM TUNING_TARGET_SQL A, FULLSCAN_SQL  B, DATABASE C, CD CD1, USERS U1, USERS U2, WRKJOB_CD W1, WRKJOB_CD W2
		WHERE A.DBID = B.DBID
		AND A.GATHER_DAY = B.GATHER_DAY
		AND A.SQL_ID = B.SQL_ID
		AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
		AND A.TUNING_NO = B.TUNING_NO 
		AND A.DBID = C.DBID
		AND A.CHOICE_DIV_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1003'
		AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
		AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
		AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
		AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
		AND A.TUNING_NO = #{tuning_no}	
	</select>	
	
	<select id="getPlanChange" parameterType="tuningTargetSql" resultType="planChangeSql">
		/* ImprovementManagementDao.getPlanChange */
		SELECT A.TUNING_NO
			 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY,
			CD1.CD_NM AS CHOICE_DIV_CD_NM, A.TUNING_REQUESTER_ID, A.TUNING_REQUESTER_ID, U2.USER_NM AS TUNING_REQUESTER_NM, A.TUNING_REQUESTER_WRKJOB_CD, 
			W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM, A.TUNING_REQUESTER_TEL_NUM,
			U1.USER_NM AS WRKJOB_MGR_NM, W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM, A.WRKJOB_MGR_TEL_NUM, 
			C.DB_NAME, A.SQL_ID, A.TR_CD, A.DBIO, 
			B.BEFORE_PLAN_HASH_VALUE, AFTER_PLAN_HASH_VALUE, 
			NVL(FN_NUM_TO_CHAR_FORMAT(B.BEFORE_ELAPSED_TIME), '') AS BEFORE_ELAPSED_TIME, NVL(FN_NUM_TO_CHAR_FORMAT(B.AFTER_ELAPSED_TIME), '') AS AFTER_ELAPSED_TIME, 
			B.BEFORE_EXECUTIONS, B.AFTER_EXECUTIONS, 
			B.BEFORE_BUFFER_GETS, B.AFTER_BUFFER_GETS, 
			NVL(FN_NUM_TO_CHAR_FORMAT(B.BEFORE_CPU_TIME), '') AS BEFORE_CPU_TIME, NVL(FN_NUM_TO_CHAR_FORMAT(B.AFTER_CPU_TIME), '') AS AFTER_CPU_TIME, 
			NVL(FN_NUM_TO_CHAR_FORMAT(B.BEFORE_MAX_ELAPSED_TIME), '') AS BEFORE_MAX_ELAPSED_TIME, NVL(FN_NUM_TO_CHAR_FORMAT(B.AFTER_MAX_ELAPSED_TIME), '') AS AFTER_MAX_ELAPSED_TIME
		  <!--, REPLACE(A.SQL_TEXT ,CHR(10)||CHR(13),'<![CDATA[<BR/>]]>') AS SQL_TEXT -->
		  , A.SQL_TEXT
		FROM TUNING_TARGET_SQL A, PLAN_CHANGE_SQL B, DATABASE C, CD CD1, USERS U1, USERS U2, WRKJOB_CD W1, WRKJOB_CD W2
		WHERE A.DBID = B.DBID
		AND A.GATHER_DAY = B.GATHER_DAY
		AND A.SQL_ID = B.SQL_ID
		AND A.PLAN_HASH_VALUE = B.AFTER_PLAN_HASH_VALUE
		AND A.TUNING_NO = B.TUNING_NO
		AND A.DBID = C.DBID
		AND A.CHOICE_DIV_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1003'
		AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
		AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
		AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
		AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
		AND A.TUNING_NO = #{tuning_no}
	</select>
	
	<select id="getNewSQL" parameterType="tuningTargetSql" resultType="newSql">
		/* ImprovementManagementDao.getNewSQL */
		SELECT A.TUNING_NO
			 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY,
			CD1.CD_NM AS CHOICE_DIV_CD_NM, A.TUNING_REQUESTER_ID, A.TUNING_REQUESTER_ID, U2.USER_NM AS TUNING_REQUESTER_NM, A.TUNING_REQUESTER_WRKJOB_CD, 
			W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM, A.TUNING_REQUESTER_TEL_NUM,
			U1.USER_NM AS WRKJOB_MGR_NM, W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM, A.WRKJOB_MGR_TEL_NUM, 
			C.DB_NAME, A.SQL_ID, B.PLAN_HASH_VALUE,  
			B.FIRST_LOAD_TIME, B.LAST_LOAD_TIME, 
			NVL(FN_NUM_TO_CHAR_FORMAT(B.AVG_ELAPSED_TIME), '') AS AVG_ELAPSED_TIME, B.AVG_BUFFER_GETS, B.AVG_ROWS_PROCESSED, B.EXECUTIONS, 
			B.MODULE, B.PARSING_SCHEMA_NAME, 
			A.TR_CD, A.DBIO
		  <!--, REPLACE(A.SQL_TEXT ,CHR(10)||CHR(13),'<![CDATA[<BR/>]]>') AS SQL_TEXT -->
		  , A.SQL_TEXT
		FROM TUNING_TARGET_SQL A, NEW_SQL B, DATABASE C, CD CD1, USERS U1, USERS U2, WRKJOB_CD W1, WRKJOB_CD W2
		WHERE A.DBID = B.DBID
		AND A.GATHER_DAY = B.GATHER_DAY
		AND A.SQL_ID = B.SQL_ID
		AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
		AND A.TUNING_NO = B.TUNING_NO
		AND A.DBID = C.DBID
		AND A.CHOICE_DIV_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1003'
		AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
		AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
		AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
		AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
		AND A.TUNING_NO = #{tuning_no}	
	</select>
	
	<select id="getTempOver" parameterType="tuningTargetSql" resultType="tempUsageSql">
		/* ImprovementManagementDao.getTempOver */
		SELECT A.TUNING_NO
			 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY,
			CD1.CD_NM AS CHOICE_DIV_CD_NM, A.TUNING_REQUESTER_ID, A.TUNING_REQUESTER_ID, U2.USER_NM AS TUNING_REQUESTER_NM, A.TUNING_REQUESTER_WRKJOB_CD, 
			W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM, A.TUNING_REQUESTER_TEL_NUM,
			U1.USER_NM AS WRKJOB_MGR_NM, W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM, A.WRKJOB_MGR_TEL_NUM, 
			C.DB_NAME, A.SQL_ID, B.PLAN_HASH_VALUE,  
			B.MODULE, B.PROGRAM, B.TEMP_USAGE,
			A.TR_CD, A.DBIO
		  <!--, REPLACE(A.SQL_TEXT ,CHR(10)||CHR(13),'<![CDATA[<BR/>]]>') AS SQL_TEXT -->
		  , A.SQL_TEXT
		FROM TUNING_TARGET_SQL A, TEMP_USAGE_SQL  B, DATABASE C, CD CD1, USERS U1, USERS U2, WRKJOB_CD W1, WRKJOB_CD W2
		WHERE A.DBID = B.DBID
		AND A.GATHER_DAY = B.GATHER_DAY
		AND A.SQL_ID = B.SQL_ID
		AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
		AND A.TUNING_NO = B.TUNING_NO
		AND A.DBID = C.DBID
		AND A.CHOICE_DIV_CD = CD1.CD(+)
		AND CD1.GRP_CD_ID(+) = '1003'
		AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
		AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
		AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
		AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
		AND A.TUNING_NO = #{tuning_no}	
	</select>
	
	<select id="getTopSqlUnionOffloadSql" parameterType="topSqlUnionOffloadSql" resultType="topSqlUnionOffloadSql">
			/* ImprovementManagementDao.getTopSqlUnionOffloadSql */
			SELECT A.TUNING_NO															/* 튜닝번호 */
				 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY	  /* 진단일자 */
				 , CD1.CD_NM AS CHOICE_DIV_CD_NM										  /* 튜닝요청구분 */
				 , A.TUNING_REQUESTER_ID												 
				 , U2.USER_NM AS TUNING_REQUESTER_NM									 
				 , A.TUNING_REQUESTER_WRKJOB_CD										  
				 , W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM						
				 , A.TUNING_REQUESTER_TEL_NUM										   
				 , U1.USER_NM AS WRKJOB_MGR_NM											/* 업무담당자 */
				 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM								/* 담당업무 */
				 , A.WRKJOB_MGR_TEL_NUM												   /* 업무담당자 연락처 */
				 , C.DB_NAME															  /* DB */
				 , A.SQL_ID															   /* SQL_ID */ 
				 , B.PLAN_HASH_VALUE													  /* PLAN_HASH_VALUE */
				 , B.FIRST_LOAD_TIME													  /* First Load Time */
				 , B.LAST_LOAD_TIME													   /* Last Load Time */
				 , B.PARSING_SCHEMA_NAME												  /* Parsing Schema Name */
				 , NVL(FN_NUM_TO_CHAR_FORMAT(B.AVG_ELAPSED_TIME), '') AS AVG_ELAPSED_TIME /* Elapsed Time */
				 , NULL AS AVG_CPU_TIME												   /* CPU Time */
				 , B.AVG_BUFFER_GETS													  /* Buffer Gets */
				 , NULL AS AVG_DISK_READS												 /* Disk Reads  */
				 , B.AVG_ROWS_PROCESSED												   /* Row Processed */
				 , B.EXECUTIONS														   /* Executions */
				 , NULL AS RATIO_ELAPSED_TIME											 /* Elapsed Time Activity(%) */
				 , NULL AS RATIO_CPU_TIME												 /* CPU Time Activity(%) */
				 , NULL AS RATIO_BUFFER_GETS											  /* Buffer Gets Activity(%) */
				 , NULL AS PARALLEL_SERVERS											   /* Parallel Servers(cnt) */
				 , NULL AS OFFLOAD_YN													 /* Offload 여부 */
				 , NULL AS IO_SAVED													   /* Offload I/O Saved(%) */
				 , NULL AS BEFORE_1_WEEK_IO_SAVED										 /* 일주일전 I/O Saved(%) */
				 , NULL AS OFFLOAD_IO_SAVED_DECREASE									  /* 전주대비 I/O 감소량(%) */
				 , B.MODULE															   /* Module */
				 , A.TR_CD																/* 소스파일명(Full Path) */
				 , A.DBIO																 /* SQL식별자(DBIO) */
				 , A.SQL_TEXT															 /* SQL TEXT */
			FROM TUNING_TARGET_SQL A, NEW_SQL B, DATABASE C, CD CD1, USERS U1, USERS U2, WRKJOB_CD W1, WRKJOB_CD W2
			WHERE A.DBID = B.DBID
			AND A.GATHER_DAY = B.GATHER_DAY
			AND A.SQL_ID = B.SQL_ID
			AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
			AND A.TUNING_NO = B.TUNING_NO
			AND A.DBID = C.DBID
			AND A.CHOICE_DIV_CD = CD1.CD(+)
			AND CD1.GRP_CD_ID(+) = '1003'
			AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
			AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
			AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
			AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
			AND A.TUNING_NO = #{tuning_no}
			UNION ALL
			/* ImprovementManagementDao.getTOPSQL */
			SELECT A.TUNING_NO
				 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY
				 , CD1.CD_NM AS CHOICE_DIV_CD_NM
				 , A.TUNING_REQUESTER_ID
				 , U2.USER_NM AS TUNING_REQUESTER_NM
				 , A.TUNING_REQUESTER_WRKJOB_CD
				 , W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM
				 , A.TUNING_REQUESTER_TEL_NUM
				 , U1.USER_NM AS WRKJOB_MGR_NM
				 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM
				 , A.WRKJOB_MGR_TEL_NUM
				 , C.DB_NAME
				 , A.SQL_ID
				 , B.PLAN_HASH_VALUE
				 , NULL AS FIRST_LOAD_TIME
				 , NULL AS LAST_LOAD_TIME
				 , B.PARSING_SCHEMA_NAME
				 , NVL(FN_NUM_TO_CHAR_FORMAT(ROUND(B.ELAPSED_TIME/DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS), 4)), '') AS AVG_ELAPSED_TIME
				 , NVL(FN_NUM_TO_CHAR_FORMAT(ROUND(B.CPU_TIME/DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS), 4)), '') AS AVG_CPU_TIME
				 , ROUND(B.BUFFER_GETS/DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS)) AS AVG_BUFFER_GETS
				 , ROUND(B.DISK_READS/DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS)) AS AVG_DISK_READS
				 , ROUND(B.ROWS_PROCESSED/DECODE(B.EXECUTIONS, 0, 1, B.EXECUTIONS)) AS AVG_ROWS_PROCESSED
				 , B.EXECUTIONS
				 , RATIO_ELAPSED_TIME AS RATIO_ELAPSED_TIME
				 , RATIO_CPU_TIME AS RATIO_CPU_TIME
				 , RATIO_BUFFER_GETS AS RATIO_BUFFER_GETS
				 , NULL AS PARALLEL_SERVERS
				 , NULL AS OFFLOAD_YN
				 , NULL AS IO_SAVED
				 , NULL AS BEFORE_1_WEEK_IO_SAVED
				 , NULL AS OFFLOAD_IO_SAVED_DECREASE									  /* 전주대비 I/O 감소량(%) */
				 , B.MODULE
				 , A.TR_CD
				 , A.DBIO
				 , A.SQL_TEXT
			FROM TUNING_TARGET_SQL A, TOPSQL B, DATABASE C, CD CD1, USERS U1, USERS U2, WRKJOB_CD W1, WRKJOB_CD W2
			WHERE A.DBID = B.DBID
			AND A.GATHER_DAY = B.GATHER_DAY
			AND A.SQL_ID = B.SQL_ID
			AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
			AND A.TUNING_NO = B.TUNING_NO
			AND A.DBID = C.DBID
			AND A.CHOICE_DIV_CD = CD1.CD(+)
			AND CD1.GRP_CD_ID(+) = '1003'
			AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
			AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
			AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
			AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
			AND A.TUNING_NO = #{tuning_no}
			UNION ALL
			/* ImprovementManagementDao.getOffloadSQL */
			SELECT A.TUNING_NO
				 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY
				 , CD1.CD_NM AS CHOICE_DIV_CD_NM
				 , A.TUNING_REQUESTER_ID
				 , U2.USER_NM AS TUNING_REQUESTER_NM
				 , A.TUNING_REQUESTER_WRKJOB_CD
				 , W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM
				 , A.TUNING_REQUESTER_TEL_NUM
				 , U1.USER_NM AS WRKJOB_MGR_NM
				 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM
				 , A.WRKJOB_MGR_TEL_NUM
				 , C.DB_NAME
				 , A.SQL_ID
				 , B.PLAN_HASH_VALUE
				 , NULL AS FIRST_LOAD_TIME
				 , NULL AS LAST_LOAD_TIME
				 , B.PARSING_SCHEMA_NAME
				 , NVL(FN_NUM_TO_CHAR_FORMAT(B.AVG_ELAPSED_TIME), '') AS AVG_ELAPSED_TIME
				 , NVL(FN_NUM_TO_CHAR_FORMAT(B.AVG_CPU_TIME), '') AS AVG_CPU_TIME
				 , B.AVG_BUFFER_GETS AS AVG_BUFFER_GETS
				 , B.AVG_DISK_READS AS AVG_DISK_READS
				 , B.AVG_ROWS_PROCESSED AS AVG_ROWS_PROCESSED
				 , B.EXECUTIONS
				 , B.RATIO_ELAPSED_TIME AS RATIO_ELAPSED_TIME
				 , NULL AS RATIO_CPU_TIME
				 , NULL AS RATIO_BUFFER_GETS
				 , B.PARALLEL_SERVER_CNT AS PARALLEL_SERVERS
				 , B.OFFLOAD_YN  AS OFFLOAD_YN
				 , B.IO_SAVED AS IO_SAVED
				 , NULL AS BEFORE_1_WEEK_IO_SAVED
				 , NULL AS OFFLOAD_IO_SAVED_DECREASE									  /* 전주대비 I/O 감소량(%) */
				 , B.MODULE
				 , A.TR_CD
				 , A.DBIO
				 , A.SQL_TEXT
			FROM TUNING_TARGET_SQL A, OFFLOAD_SQL B, DATABASE C, CD CD1, USERS U1, USERS U2, WRKJOB_CD W1, WRKJOB_CD W2
			WHERE A.DBID = B.DBID
			AND A.GATHER_DAY = B.GATHER_DAY
			AND A.SQL_ID = B.SQL_ID
			AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
			AND A.TUNING_NO = B.TUNING_NO
			AND A.DBID = C.DBID
			AND A.CHOICE_DIV_CD = CD1.CD(+)
			AND CD1.GRP_CD_ID(+) = '1003'
			AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
			AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
			AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
			AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
			AND A.TUNING_NO = #{tuning_no}
			UNION ALL
			/* ImprovementManagementDao.getOffloadEfficiencyReduceSQL */
			SELECT A.TUNING_NO
				 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY
				 , CD1.CD_NM AS CHOICE_DIV_CD_NM
				 , A.TUNING_REQUESTER_ID
				 , U2.USER_NM AS TUNING_REQUESTER_NM
				 , A.TUNING_REQUESTER_WRKJOB_CD
				 , W2.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM
				 , A.TUNING_REQUESTER_TEL_NUM
				 , U1.USER_NM AS WRKJOB_MGR_NM
				 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM
				 , A.WRKJOB_MGR_TEL_NUM
				 , C.DB_NAME
				 , A.SQL_ID
				 , B.PLAN_HASH_VALUE
				 , NULL AS FIRST_LOAD_TIME
				 , NULL AS LAST_LOAD_TIME
				 , B.PARSING_SCHEMA_NAME
				 , NVL(FN_NUM_TO_CHAR_FORMAT(B.AVG_ELAPSED_TIME), '') AS AVG_ELAPSED_TIME
				 , NVL(FN_NUM_TO_CHAR_FORMAT(B.AVG_CPU_TIME), '') AS AVG_CPU_TIME
				 , B.AVG_BUFFER_GETS AS AVG_BUFFER_GETS
				 , B.AVG_DISK_READS AS AVG_DISK_READS
				 , B.AVG_ROWS_PROCESSED AS AVG_ROWS_PROCESSED
				 , B.EXECUTIONS
				 , NULL AS RATIO_ELAPSED_TIME
				 , NULL AS RATIO_CPU_TIME
				 , NULL AS RATIO_BUFFER_GETS
				 , NULL AS PARALLEL_SERVERS
				 , B.OFFLOAD_YN  AS OFFLOAD_YN
				 , B.IO_SAVED  AS IO_SAVED
				 , B.BEFORE_1_WEEK_IO_SAVED AS BEFORE_1_WEEK_IO_SAVED
				 , (B.IO_SAVED - B.BEFORE_1_WEEK_IO_SAVED) AS OFFLOAD_IO_SAVED_DECREASE  /* 전주대비 I/O 감소량(%) */
				 , B.MODULE
				 , A.TR_CD
				 , A.DBIO
				 , A.SQL_TEXT
			FROM TUNING_TARGET_SQL A, OFFLOAD_EFFICIENCY_REDUCE_SQL B, DATABASE C, CD CD1, USERS U1, USERS U2, WRKJOB_CD W1, WRKJOB_CD W2
			WHERE A.DBID = B.DBID
			AND A.GATHER_DAY = B.GATHER_DAY
			AND A.SQL_ID = B.SQL_ID
			AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
			AND A.TUNING_NO = B.TUNING_NO
			AND A.DBID = C.DBID
			AND A.CHOICE_DIV_CD = CD1.CD(+)
			AND CD1.GRP_CD_ID(+) = '1003'
			AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
			AND A.TUNING_REQUESTER_ID = U2.USER_ID(+)
			AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
			AND A.TUNING_REQUESTER_WRKJOB_CD = W2.WRKJOB_CD(+)
			AND A.TUNING_NO = #{tuning_no}
	</select>
	
	<select id="getImprovements_OLD" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.getImprovements_OLD */
		SELECT NVL(FN_NUM_TO_CHAR_FORMAT(B.IMPRB_ELAP_TIME), '') AS IMPRB_ELAP_TIME
			 , B.IMPRB_BUFFER_CNT
			 , B.IMPRB_PGA_USAGE
			 , NVL(FN_NUM_TO_CHAR_FORMAT(B.IMPRA_ELAP_TIME), '') AS IMPRA_ELAP_TIME
			 , B.IMPRA_BUFFER_CNT
			 , B.IMPRA_PGA_USAGE
			 , NVL(FN_NUM_TO_CHAR_FORMAT(B.ELAP_TIME_IMPR_RATIO), '') AS ELAP_TIME_IMPR_RATIO
			 , B.BUFFER_IMPR_RATIO
			 , B.PGA_IMPR_RATIO
			 , B.CONTROVERSIALIST
			 , B.IMPR_SBST
			 , B.IMPR_SQL_TEXT
			 , B.IMPRB_EXEC_PLAN
			 , B.IMPRA_EXEC_PLAN
			 , B.TUNING_END_DT
			 , CD1.CD_NM AS TUNING_END_WHY_NM
			 , B.TUNING_END_WHY
			 , B.TUNING_ENDER_ID
			 , A.TUNING_RCESS_DT
			 , A.TUNING_RCESS_WHY
			 , B.TUNING_COMPLETE_DT
			 , CD2.CD_NM AS TUNING_COMPLETE_WHY_NM
			 , B.TUNING_COMPLETE_WHY
			 , (CASE WHEN C.TUNING_NO IS NOT NULL THEN 'Y' ELSE 'N' END) PERF_GUIDE_YN
			 , C.GUIDE_TITLE_NM AS PERF_GUIDE_TITLE_NM
			 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM
			 , U1.USER_NM AS WRKJOB_MGR_NM
			 , A.WRKJOB_MGR_TEL_NUM
			 , B.EXCEPT_TARGET_YN
			 , A.TUNING_RECEIPT_CANCEL_WHY
			 , A.TUNING_RECEIPT_CANCELER_ID
			 , A.TUNING_RECEIPT_CANCEL_DT
		  FROM TUNING_TARGET_SQL A
			 , SQL_TUNING B
			 , PERF_GUIDE C
			 , CD CD1
			 , CD CD2
			 , WRKJOB_CD W1
			 , USERS U1
		 WHERE A.TUNING_NO = B.TUNING_NO(+)
		   AND A.TUNING_NO = C.TUNING_NO(+)
		   AND A.TUNING_NO = #{tuning_no}
		   AND B.TUNING_END_WHY_CD = CD1.CD(+)
		   AND CD1.GRP_CD_ID(+) = '1009'
		   AND B.TUNING_COMPLETE_WHY_CD = CD2.CD(+)
		   AND CD2.GRP_CD_ID(+) = '1008'
		   AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
		   AND A.WRKJOB_MGR_ID = U1.USER_ID(+) 		
	</select>

	<select id="getImprovements" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.getImprovements */
		SELECT 
			   A.TUNING_NO
			 , TO_CHAR(A.TUNING_REQUEST_DT,'YYYY-MM-DD') TUNING_REQUEST_DT
			 , A.CHOICE_DIV_CD
			 , EXEC_CNT
			 , CD1003.CD_NM AS CHOICE_DIV_CD_NM
			 , U1.USER_NM AS WRKJOB_MGR_NM
			 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM
			 , A.WRKJOB_MGR_TEL_NUM
			 , B.TUNING_END_DT
			 , B.TUNING_APPLY_DT
			 , CD1005.CD_NM AS PROGRAM_TYPE_CD_NM
			 , CD1006.CD_NM AS BATCH_WORK_DIV_CD_NM
			 , CD1008.CD_NM AS TUNING_COMPLETE_WHY_NM
			 , B.TUNING_COMPLETE_WHY
			 , CD1009.CD_NM AS TUNING_END_WHY_NM
			 , B.TUNING_END_WHY
			 , DB.DB_NAME
			 , A.TR_CD
			 , A.DBIO
			 , A.PARSING_SCHEMA_NAME
			 , U2.USER_NM AS PERFR_NM
			 , A.WRKJOB_PECULIAR_POINT
			 , A.REQUEST_WHY
			 , A.SQL_DESC
			 , A.SQL_TEXT
			 , B.TUNING_ENDER_ID
			 , A.TUNING_RCESS_DT
			 , A.TUNING_RCESS_WHY
			 , (CASE WHEN C.TUNING_NO IS NOT NULL THEN 'Y' ELSE 'N' END) PERF_GUIDE_YN
			 , C.GUIDE_TITLE_NM AS PERF_GUIDE_TITLE_NM
			 , B.EXCEPT_TARGET_YN
			 , A.TUNING_RECEIPT_CANCEL_WHY
			 , A.TUNING_RECEIPT_CANCELER_ID
			 , A.TUNING_RECEIPT_CANCEL_DT
			 , NVL(FN_NUM_TO_CHAR_FORMAT(B.IMPRB_ELAP_TIME), '0') AS IMPRB_ELAP_TIME
			 , NVL(B.IMPRB_BUFFER_CNT,'0') IMPRB_BUFFER_CNT
			 , NVL(B.IMPRB_PGA_USAGE,'0') IMPRB_PGA_USAGE
			 , NVL(FN_NUM_TO_CHAR_FORMAT(B.IMPRA_ELAP_TIME), '0') AS IMPRA_ELAP_TIME
			 , NVL(B.IMPRA_BUFFER_CNT,'0') IMPRA_BUFFER_CNT
			 , NVL(B.IMPRA_PGA_USAGE,'0') IMPRA_PGA_USAGE
			 , NVL(FN_NUM_TO_CHAR_FORMAT(B.ELAP_TIME_IMPR_RATIO), '0') AS ELAP_TIME_IMPR_RATIO
			 , NVL(B.BUFFER_IMPR_RATIO,'0') BUFFER_IMPR_RATIO
			 , NVL(B.PGA_IMPR_RATIO,'0') PGA_IMPR_RATIO
			 , B.CONTROVERSIALIST
			 , B.TUNING_COMPLETE_DT
			 , B.IMPR_SBST
			 , B.IMPR_SQL_TEXT
			 , B.IMPRB_EXEC_PLAN
			 , B.IMPRA_EXEC_PLAN
			 , C.TUNING_CASE_TYPE_CD
			 , ROUND(D.BEFORE_ELAPSED_TIME/DECODE(D.BEFORE_EXECUTIONS, 0, 1, D.BEFORE_EXECUTIONS)/1000000, 4) AS ASIS_ELAPSED_TIME
			 , ROUND(D.BEFORE_BUFFER_GETS/DECODE(D.BEFORE_EXECUTIONS, 0, 1, D.BEFORE_EXECUTIONS)) AS ASIS_BUFFER_GETS
			 , D.BEFORE_PLAN_HASH_VALUE AS ASIS_PLAN_HASH_VALUE
<!-- 		  IMPR_SQL_TEXT(with br tag) -->
<!-- 		  , REPLACE(REPLACE(B.IMPR_SQL_TEXT ,CHR(32),'<![CDATA[&nbsp;]]>'),CHR(13)||CHR(10),'<![CDATA[<BR/>]]>') AS IMPR_SQL_TEXT -->
<!-- 		  IMPRB_EXEC_PLAN(with br tag) -->
<!-- 		  , REPLACE(B.IMPRB_EXEC_PLAN ,CHR(13)||CHR(10),'<![CDATA[<BR/>]]>') AS IMPRB_EXEC_PLAN -->
<!-- 		  IMPRA_EXEC_PLAN(with br tag) -->
<!-- 		  , REPLACE(B.IMPRA_EXEC_PLAN ,CHR(13)||CHR(10),'<![CDATA[<BR/>]]>') AS IMPRA_EXEC_PLAN -->
		  FROM TUNING_TARGET_SQL A
			 , SQL_TUNING B
			 , DATABASE DB
			 , PERF_GUIDE C
			 , CD CD1003
			 , CD CD1005
			 , CD CD1006
			 , CD CD1009
			 , CD CD1008
			 , USERS U1
			 , USERS U2
			 , WRKJOB_CD W1
			 , SQL_AUTO_PERF_CHK_TARGET D
		 WHERE A.TUNING_NO = B.TUNING_NO(+)
		   AND A.TUNING_NO = C.TUNING_NO(+)
		   AND A.SQL_ID = D.SQL_ID(+)
		   AND A.DBID = DB.DBID
		   AND A.CHOICE_DIV_CD = CD1003.CD(+)
		   AND CD1003.GRP_CD_ID(+) = '1003'
		   AND A.PROGRAM_TYPE_CD = CD1005.CD(+)
		   AND CD1005.GRP_CD_ID(+) = '1005'
		   AND A.PROGRAM_TYPE_CD = CD1006.CD(+)
		   AND CD1006.GRP_CD_ID(+) = '1006'
		   AND B.TUNING_COMPLETE_WHY_CD = CD1008.CD(+)
		   AND CD1008.GRP_CD_ID(+) = '1008'
		   AND B.TUNING_END_WHY_CD = CD1009.CD(+)
		   AND CD1009.GRP_CD_ID(+) = '1009'
		   AND A.WRKJOB_MGR_WRKJOB_CD = W1.WRKJOB_CD(+)
		   AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
		   AND A.PERFR_ID = U2.USER_ID(+)
		   AND A.PROJECT_ID = D.PROJECT_ID(+)
		   AND A.SQL_AUTO_PERF_CHECK_ID  = D.SQL_AUTO_PERF_CHECK_ID(+)
		   AND A.TUNING_NO = #{tuning_no}
	</select>
		
	<select id="completeReasonList" parameterType="string" resultType="cd">
		/* ImprovementManagementDao.completeReasonList */
		SELECT CD, CD_NM, REF_VL_1
		FROM CD
		WHERE GRP_CD_ID = '1036'
		ORDER BY ORDERED	
	</select>
	
	<select id="completeReasonDetailList" parameterType="string" resultType="cd">
		/* ImprovementManagementDao.completeReasonDetailList */
		SELECT CD, CD_NM, REF_VL_1
		FROM CD
		WHERE GRP_CD_ID = '1037'
		ORDER BY ORDERED	
	</select>
	
	<select id="sqlImprovementTypeList" parameterType="tuningTargetSql" resultType="sqlImprovementType">
		/* ImprovementManagementDao.sqlImprovementTypeList */
		SELECT TUNING_NO, IMPR_TYPE_CD, IMPR_DETAIL_TYPE_CD
		FROM SQL_IMPROVEMENT_TYPE
		WHERE TUNING_NO = #{tuning_no}	
	</select>	
	
	<select id="sqlImproveHistoryList" parameterType="sqlTuningHistory" resultType="sqlTuningHistory">
		/* ImprovementManagementDao.sqlImproveHistoryList */
		SELECT TUNING_NO
			 , TO_CHAR(UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DT
			 , IMPRB_ELAP_TIME
			 , IMPRB_BUFFER_CNT
			 , IMPRB_PGA_USAGE
			 , IMPRA_ELAP_TIME
			 , IMPRA_BUFFER_CNT
			 , IMPRA_PGA_USAGE
			 , ELAP_TIME_IMPR_RATIO
			 , BUFFER_IMPR_RATIO
			 , PGA_IMPR_RATIO
		  FROM SQL_TUNING_HISTORY
		 WHERE TUNING_NO = #{tuning_no}
	</select>
	
	<select id="getSQLImproveHistory" parameterType="sqlTuningHistory" resultType="sqlTuningHistory">
		/* ImprovementManagementDao.getSQLImproveHistory */
		SELECT TUNING_NO, TO_CHAR(UPDATE_DT, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DT, 
			NVL(FN_NUM_TO_CHAR_FORMAT(IMPRB_ELAP_TIME), '') AS IMPRB_ELAP_TIME, IMPRB_BUFFER_CNT, IMPRB_PGA_USAGE, 
			NVL(FN_NUM_TO_CHAR_FORMAT(IMPRA_ELAP_TIME), '') AS IMPRA_ELAP_TIME, IMPRA_BUFFER_CNT, IMPRA_PGA_USAGE, 
			NVL(FN_NUM_TO_CHAR_FORMAT(ELAP_TIME_IMPR_RATIO), '') AS ELAP_TIME_IMPR_RATIO, BUFFER_IMPR_RATIO, PGA_IMPR_RATIO,
			CONTROVERSIALIST, IMPR_SBST, IMPR_SQL_TEXT, IMPRB_EXEC_PLAN, IMPRA_EXEC_PLAN 
		FROM SQL_TUNING_HISTORY
		WHERE TUNING_NO = #{tuning_no}
		AND UPDATE_DT = TO_DATE(#{update_dt}, 'YYYY-MM-DD HH24:MI:SS')	
	</select>
	
	<select id="getImprovementInfo" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.getImprovementInfo */
		SELECT A.TUNING_NO, A.DBID, A.CHOICE_DIV_CD, A.PERFR_ID, A.TUNING_STATUS_CD, A.TUNING_REQUESTER_ID, U1.USER_NM AS TUNING_REQUESTER_NM,
			A.TUNING_REQUESTER_WRKJOB_CD, W1.WRKJOB_CD_NM AS TUNING_REQUESTER_WRKJOB_NM, A.TUNING_REQUESTER_TEL_NUM, 
			A.PROGRAM_TYPE_CD, A.BATCH_WORK_DIV_CD, A.TUNING_COMPLETE_DUE_DT, 
			A.CURRENT_ELAP_TIME, A.FORECAST_RESULT_CNT, A.GOAL_ELAP_TIME, A.WRKJOB_PECULIAR_POINT, A.REQUEST_WHY, A.SQL_DESC, A.DBIO, A.TR_CD, A.SQL_TEXT, A.PARSING_SCHEMA_NAME, A.EXEC_CNT
		FROM TUNING_TARGET_SQL A, USERS U1, WRKJOB_CD W1
		WHERE TUNING_NO = #{tuning_no}
		AND A.TUNING_REQUESTER_ID = U1.USER_ID(+)
		AND A.TUNING_REQUESTER_WRKJOB_CD = W1.WRKJOB_CD(+)
	</select>
	
	<select id="bindSetList" parameterType="tuningTargetSql" resultType="tuningTargetSqlBind">
		/* ImprovementManagementDao.bindSetList */
		SELECT DISTINCT BIND_SET_SEQ
		FROM TUNING_TARGET_SQL_BIND
		WHERE TUNING_NO = #{tuning_no}
		ORDER BY BIND_SET_SEQ
	</select>

	<select id="sqlBindList" parameterType="tuningTargetSql" resultType="tuningTargetSqlBind">
		/* ImprovementManagementDao.sqlBindList */
		SELECT BIND_SET_SEQ, BIND_SEQ, BIND_VAR_NM, BIND_VAR_VALUE, BIND_VAR_TYPE, MANDATORY_YN
		FROM TUNING_TARGET_SQL_BIND
		WHERE TUNING_NO = #{tuning_no}
		ORDER BY BIND_SET_SEQ, BIND_SEQ	
	</select>
	
	<select id="getNextTuningNo" resultType="string">
		/* ImprovementManagementDao.getNextTuningNo */
		SELECT SQ_SPOP_TUNING_NO.NEXTVAL FROM DUAL
	</select>
	
	<!-- 튜닝반려된건(件) 튜닝재용청할때 TUNING_TARGET_SQL.BEFORE_TUNING_NO insert 추가 -->
	<insert id="insertTuningTargetSql" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.insertTuningTargetSql */
		INSERT INTO 
			   TUNING_TARGET_SQL
			   (
					TUNING_NO
				  , DBID
				  , TUNING_STATUS_CD
				  , CHOICE_DIV_CD
				  , TUNING_REQUESTER_ID
				  , TUNING_REQUESTER_WRKJOB_CD
				  , TUNING_REQUEST_DT
				  , PROGRAM_TYPE_CD
				  , BATCH_WORK_DIV_CD
				  , TUNING_COMPLETE_DUE_DT
				  , CURRENT_ELAP_TIME
				  , FORECAST_RESULT_CNT
				  , GOAL_ELAP_TIME
				  , WRKJOB_PECULIAR_POINT
				  , REQUEST_WHY
				  , SQL_DESC
				  , DBIO
				  , TR_CD
				  , SQL_TEXT
				  , PARSING_SCHEMA_NAME
				  , EXEC_CNT
			<if test="tuning_requester_tel_num != null and tuning_requester_tel_num != ''">
				  , TUNING_REQUESTER_TEL_NUM
			</if>
			<if test="before_tuning_no != null and before_tuning_no != ''">
				  , BEFORE_TUNING_NO
			</if>
			<if test="wrkjob_mgr_id != null and wrkjob_mgr_id != ''">
				  , WRKJOB_MGR_ID
			</if>
			<if test="wrkjob_mgr_wrkjob_cd != null and wrkjob_mgr_wrkjob_cd != ''">
				  , WRKJOB_MGR_WRKJOB_CD
			</if>
			<if test="wrkjob_mgr_tel_num != null and wrkjob_mgr_tel_num != ''">
				  , WRKJOB_MGR_TEL_NUM
			</if>
			<if test="project_id != null and project_id != ''">
				  , PROJECT_ID
			</if>
			   )
			   VALUES
			   (
					#{tuning_no}
				  , #{dbid}
				  , '2'
				  , '3'
				  , #{tuning_requester_id}
				  , #{tuning_requester_wrkjob_cd}
				  , SYSDATE
				  , #{program_type_cd}
				  , #{batch_work_div_cd}
				  , REPLACE(#{tuning_complete_due_dt},'-', '')
			<choose>
				<when test="current_elap_time != null and current_elap_time != ''">
				  , #{current_elap_time}
				</when>
				<otherwise>
				  , NULL
				</otherwise>
			</choose>
				  , #{forecast_result_cnt}
				  , #{goal_elap_time}
				  , #{wrkjob_peculiar_point}
				  , #{request_why}
				  , #{sql_desc}
				  , #{dbio}
				  , #{tr_cd}
				  , #{sql_text}
				  , #{parsing_schema_name}
				  , #{exec_cnt}
			<if test="tuning_requester_tel_num != null and tuning_requester_tel_num != ''">
				  , #{tuning_requester_tel_num}
			</if>
			<if test="before_tuning_no != null and before_tuning_no != ''">
				  , #{before_tuning_no}
			</if>
			<if test="wrkjob_mgr_id != null and wrkjob_mgr_id != ''">
				  , #{wrkjob_mgr_id}
			</if>
			<if test="wrkjob_mgr_wrkjob_cd != null and wrkjob_mgr_wrkjob_cd != ''">
				  , #{wrkjob_mgr_wrkjob_cd}
			</if>
			<if test="wrkjob_mgr_tel_num != null and wrkjob_mgr_tel_num != ''">
				  , #{wrkjob_mgr_tel_num}
			</if>
			<if test="project_id != null and project_id != ''">
				  , #{project_id}
			</if>
		)
	</insert>
	<!-- 성능점검결과에서 튜닝요청을 할때 자동 튜닝 요청처리 -->
	<!-- PERF_CHECK_ID,PROGRAM_ID insert 추가, 2019.07.31 -->
	<insert id="insertTuningTargetSqlFromPerfChkResult" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.insertTuningTargetSqlFromPerfChkResult */
		INSERT
		INTO   TUNING_TARGET_SQL
			   (
					  TUNING_NO
					, DBID
					, TUNING_STATUS_CD
					<if test="sql_id != null and sql_id != ''">
					, SQL_ID
					</if>
					, CHOICE_DIV_CD
					, TUNING_REQUESTER_ID
					, TUNING_REQUESTER_WRKJOB_CD
					, TUNING_REQUEST_DT
					, PROGRAM_TYPE_CD
					, DBIO
					, TR_CD
					, SQL_TEXT
					, CURRENT_ELAP_TIME
					, FORECAST_RESULT_CNT
					, PARSING_SCHEMA_NAME
					, SQL_DESC
					, PERF_CHECK_ID
					, PROGRAM_ID
					<if test="avg_buffer_gets != null">, AVG_BUFFER_GETS</if>
					<if test="avg_elapsed_time != null">, AVG_ELAPSED_TIME</if>
					<if test="avg_row_processed != null">, AVG_ROW_PROCESSED</if>
					<if test="executions != null">, EXECUTIONS</if>
			   )
			   VALUES
			   (
					  #{tuning_no}
					, #{dbid}
					, '2'
					<if test="sql_id != null and sql_id != ''">
					, #{sql_id}
					</if>
					, #{choice_div_cd}
					, #{tuning_requester_id}
					, #{tuning_requester_wrkjob_cd}
					, SYSDATE
					, #{program_type_cd}
					, #{dbio}
					, #{tr_cd}
					, #{sql_text}
		   			<choose>
						<when test="current_elap_time != null and current_elap_time != ''">
						, #{current_elap_time}
						</when>
						<otherwise>
						, NULL
						</otherwise>
					</choose>
					, #{forecast_result_cnt}
					, #{parsing_schema_name}
					, #{sql_desc}
					, #{perf_check_id}
					, #{program_id}
					<if test="avg_buffer_gets != null">, #{avg_buffer_gets, jdbcType=VARCHAR}</if>
					<if test="avg_elapsed_time != null">, #{avg_elapsed_time, jdbcType=VARCHAR}</if>
					<if test="avg_row_processed != null">, #{avg_row_processed, jdbcType=VARCHAR}</if>
					<if test="executions != null">, #{executions, jdbcType=VARCHAR}</if>
			   )
	</insert>
	
	<update id="updateTuningTargetSql" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.updateTuningTargetSql */
		UPDATE TUNING_TARGET_SQL
		<set>
			<if test="dbid != null">DBID = #{dbid},</if>
			<if test="tuning_status_cd != null">TUNING_STATUS_CD = #{tuning_status_cd},</if>
			<if test="perfr_id != null">PERFR_ID = #{perfr_id},</if>
			<if test="tuning_rcess_why != null">TUNING_RCESS_WHY = #{tuning_rcess_why},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '4'.toString() or tuning_status_cd eq '7'.toString())">TUNING_RCESS_DT = SYSDATE,</if>
			<if test="tuning_requester_id != null">TUNING_REQUESTER_ID = #{tuning_requester_id},</if>
			<if test="tuning_requester_wrkjob_cd != null">TUNING_REQUESTER_WRKJOB_CD = #{tuning_requester_wrkjob_cd},</if>
			<if test="tuning_requester_tel_num != null">TUNING_REQUESTER_TEL_NUM = #{tuning_requester_tel_num},</if>
			<if test="program_type_cd != null">PROGRAM_TYPE_CD = #{program_type_cd},</if>
			<if test="batch_work_div_cd != null">BATCH_WORK_DIV_CD = #{batch_work_div_cd},</if>
			<if test="tuning_complete_due_dt != null">TUNING_COMPLETE_DUE_DT = REPLACE(#{tuning_complete_due_dt},'-', ''),</if>
			<if test="current_elap_time != null">CURRENT_ELAP_TIME = #{current_elap_time},</if>
			<if test="forecast_result_cnt != null">FORECAST_RESULT_CNT = #{forecast_result_cnt},</if>
			<if test="goal_elap_time != null">GOAL_ELAP_TIME = #{goal_elap_time},</if>
			<if test="wrkjob_peculiar_point != null">WRKJOB_PECULIAR_POINT = #{wrkjob_peculiar_point},</if>
			<if test="request_why != null">REQUEST_WHY = #{request_why},</if>
			<if test="sql_desc != null">SQL_DESC = #{sql_desc},</if>
			<if test="dbio != null">DBIO = #{dbio},</if>
			<if test="tr_cd != null">TR_CD = #{tr_cd},</if>
			<if test="sql_text != null">SQL_TEXT = #{sql_text},</if>
			<if test="parsing_schema_name != null">PARSING_SCHEMA_NAME = #{parsing_schema_name},</if>
			<if test="wrkjob_mgr_id != null">WRKJOB_MGR_ID = #{wrkjob_mgr_id},</if>
			<if test="wrkjob_mgr_wrkjob_cd != null">WRKJOB_MGR_WRKJOB_CD = #{wrkjob_mgr_wrkjob_cd},</if>
			<if test="wrkjob_mgr_tel_num != null">WRKJOB_MGR_TEL_NUM = #{wrkjob_mgr_tel_num},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '2'.toString())">TUNING_RECEIPT_CANCEL_DT = SYSDATE,</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '2'.toString())">TUNING_RECEIPT_CANCELER_ID = #{tuning_status_changer_id},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '2'.toString())">TUNING_RECEIPT_CANCEL_WHY = #{tuning_status_change_why},</if>
		</set>
		<trim prefix="SET" suffixOverrides=","></trim>
		WHERE TUNING_NO = #{tuning_no}	
	</update>
	
	<update id="updateSqlTuning_20180817" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.updateSqlTuning */
		UPDATE SQL_TUNING
		<set>
			<if test="tuning_apply_rcess_why != null">TUNING_APPLY_RCESS_WHY = #{tuning_apply_rcess_why},</if>
			<if test="tuning_apply_rcess_why != null">TUNING_APPLY_RCESSER_ID = #{tuning_status_changer_id},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '7'.toString())">TUNING_APPLY_RCESS_DT = SYSDATE,</if>
			<if test="tuning_end_why_cd != null">TUNING_END_WHY_CD = #{tuning_end_why_cd},</if>
			<if test="tuning_end_why != null">TUNING_END_WHY = #{tuning_end_why},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '8'.toString())">TUNING_END_DT = SYSDATE,</if>
			<if test="tuning_end_why_cd != null">TUNING_ENDER_ID = #{tuning_status_changer_id},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '8'.toString())">TUNING_APPLY_DT = SYSDATE,</if>
			<if test="tuning_end_why_cd != null">TUNING_APPLYER_ID = #{tuning_status_changer_id},</if>
			<if test="except_target_yn != null">EXCEPT_TARGET_YN = #{except_target_yn},</if>
		</set>
		<trim prefix="SET" suffixOverrides=","></trim>		
		WHERE TUNING_NO = #{tuning_no}	
	</update>
	
	<update id="updateSqlTuning" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.updateSqlTuning */
		MERGE INTO SQL_TUNING 
			USING DUAL ON (TUNING_NO = #{tuning_no})
		WHEN MATCHED THEN
		UPDATE
		<set>
			<if test="tuning_apply_rcess_why != null">TUNING_APPLY_RCESS_WHY = #{tuning_apply_rcess_why},</if>
			<if test="tuning_apply_rcess_why != null">TUNING_APPLY_RCESSER_ID = #{tuning_status_changer_id},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '7'.toString())">TUNING_APPLY_RCESS_DT = SYSDATE,</if>
			<if test="tuning_end_why_cd != null and tuning_end_why_cd != ''">TUNING_END_WHY_CD = #{tuning_end_why_cd},</if>
			<if test="tuning_end_why != null">TUNING_END_WHY = #{tuning_end_why},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '8'.toString())">TUNING_END_DT = SYSDATE,</if>
			<if test="tuning_end_why_cd != null">TUNING_ENDER_ID = #{tuning_status_changer_id},</if>
			<if test="tuning_status_cd != null and (tuning_status_cd eq '8'.toString())">TUNING_APPLY_DT = SYSDATE,</if>
			<if test="tuning_end_why_cd != null and tuning_end_why_cd != ''">TUNING_APPLYER_ID = #{tuning_status_changer_id},</if>
			<if test="except_target_yn != null">EXCEPT_TARGET_YN = #{except_target_yn},</if>
		</set>
		<trim prefix="SET" suffixOverrides=","></trim>		
		WHEN NOT MATCHED THEN
			INSERT (
				  TUNING_NO
					<if test="tuning_end_why_cd != null and tuning_end_why_cd != ''">
						,TUNING_END_WHY_CD
					</if>
					<if test="tuning_end_why != null and tuning_end_why != ''">
						,TUNING_END_WHY
					</if>
					<if test="tuning_status_changer_id != null and tuning_status_changer_id != ''">
						,TUNING_ENDER_ID
					</if>
					<if test="except_target_yn != null and except_target_yn != ''">
						,EXCEPT_TARGET_YN
					</if>
				, TUNING_END_DT
			)
			VALUES (
				  #{tuning_no}
				<if test="tuning_end_why_cd != null and tuning_end_why_cd != ''">
					, #{tuning_end_why_cd}
				</if>
				<if test="tuning_end_why != null and tuning_end_why != ''">
					, #{tuning_end_why}
				</if>
				<if test="tuning_status_changer_id != null and tuning_status_changer_id != ''">
					, #{tuning_status_changer_id}
				</if>
				<if test="except_target_yn != null and except_target_yn != ''">
					, #{except_target_yn}
				</if>				  
				, SYSDATE
			)	
	</update>	
	
	<update id="mergeSqlTuningEnd" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.mergeSqlTuningEnd */
		MERGE INTO SQL_TUNING 
			USING DUAL ON (TUNING_NO = #{tuning_no})
		WHEN MATCHED THEN
			UPDATE SET 
				TUNING_END_WHY_CD = #{tuning_end_why_cd},
				TUNING_END_WHY = #{tuning_end_why},
				TUNING_ENDER_ID = #{tuning_status_changer_id},
				TUNING_END_DT = SYSDATE,
				EXCEPT_TARGET_YN = #{except_target_yn}
		WHEN NOT MATCHED THEN
			INSERT (TUNING_NO, TUNING_END_WHY_CD, TUNING_END_WHY, TUNING_ENDER_ID, TUNING_END_DT, EXCEPT_TARGET_YN)
			VALUES (#{tuning_no}, #{tuning_end_why_cd}, #{tuning_end_why}, #{tuning_status_changer_id}, SYSDATE, #{except_target_yn})	
	</update>
	
	<select id="tuningRequesterCountList" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.tuningRequesterCountList */
		SELECT TUNING_REQUESTER_ID, U.USER_NM AS TUNING_REQUESTER_NM, COUNT(*) AS TUNING_CNT
		FROM TUNING_TARGET_SQL A, USERS U
		WHERE TUNING_NO IN (${tuning_no_array})
		AND A.TUNING_REQUESTER_ID = U.USER_ID(+)
		GROUP BY TUNING_REQUESTER_ID, U.USER_NM
	</select>
	
	<select id="checkRequesterId" parameterType="tuningTargetSql" resultType="int">
		/* ImprovementManagementDao.checkRequesterId */
		SELECT COUNT(TUNING_REQUESTER_ID)
		FROM TUNING_TARGET_SQL
		WHERE TUNING_REQUESTER_ID = #{user_id} AND TUNING_NO = #{tuning_no}
	</select>
	
	<!-- SQL_TUNING 삭제 -->	
	<delete id="deleteSqlTuning" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.deleteSqlTuning */
		DELETE FROM SQL_TUNING
		WHERE
			TUNING_NO = #{tuning_no}
	</delete>
	<!-- 성능 개선 관리 임시 저장 -->	
	<update id="tempSaveSqltuning" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.tempSaveSqltuning */
		UPDATE SQL_TUNING SET 
			IMPRB_ELAP_TIME = #{imprb_elap_time}
			,IMPRB_BUFFER_CNT = #{imprb_buffer_cnt}
			,IMPRB_PGA_USAGE = #{imprb_pga_usage}
			,IMPRA_ELAP_TIME = #{impra_elap_time}
			,IMPRA_BUFFER_CNT = #{impra_buffer_cnt}
			,IMPRA_PGA_USAGE = #{impra_pga_usage}
			,ELAP_TIME_IMPR_RATIO = #{elap_time_impr_ratio}
			,BUFFER_IMPR_RATIO = #{buffer_impr_ratio}
			,PGA_IMPR_RATIO = #{pga_impr_ratio}
			,CONTROVERSIALIST = #{controversialist}
			,IMPR_SBST		= #{impr_sbst}
			,IMPR_SQL_TEXT	= #{impr_sql_text}
			,IMPRB_EXEC_PLAN  = #{imprb_exec_plan}
			,IMPRA_EXEC_PLAN  = #{impra_exec_plan}
			,TUNING_CASE_POSTING_YN = #{tuning_case_posting_yn}
			,TUNING_CASE_POSTING_TITLE  = #{tuning_case_posting_title}
			,TUNING_COMPLETE_WHY_CD = #{tuning_complete_why_cd}
			,TUNING_COMPLETE_WHY = #{tuning_complete_why}
			,TUNING_COMPLETE_DT = SYSDATE
			,TUNING_COMPLETER_ID = #{tuning_status_changer_id}
		WHERE
			TUNING_NO = #{tuning_no}
	</update>	

	<update id="mergeSqlTuningComplete" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.mergeSqlTuningComplete */
		MERGE INTO SQL_TUNING 
			USING DUAL ON (TUNING_NO = #{tuning_no})
		WHEN MATCHED THEN
			UPDATE SET 
				IMPRB_ELAP_TIME = #{imprb_elap_time}
				,IMPRB_BUFFER_CNT = #{imprb_buffer_cnt}
				,IMPRB_PGA_USAGE = #{imprb_pga_usage}
				,IMPRA_ELAP_TIME = #{impra_elap_time}
				,IMPRA_BUFFER_CNT = #{impra_buffer_cnt}
				,IMPRA_PGA_USAGE = #{impra_pga_usage}
				,ELAP_TIME_IMPR_RATIO = #{elap_time_impr_ratio}
				,BUFFER_IMPR_RATIO = #{buffer_impr_ratio}
				,PGA_IMPR_RATIO = #{pga_impr_ratio}
				,CONTROVERSIALIST = #{controversialist}
				,IMPR_SBST		= #{impr_sbst}
				,IMPR_SQL_TEXT	= #{impr_sql_text}
				,IMPRB_EXEC_PLAN  = #{imprb_exec_plan}
				,IMPRA_EXEC_PLAN  = #{impra_exec_plan}
				,TUNING_CASE_POSTING_YN = #{tuning_case_posting_yn}
				,TUNING_CASE_POSTING_TITLE  = #{tuning_case_posting_title}
				,TUNING_COMPLETE_WHY_CD = #{tuning_complete_why_cd}
				,TUNING_COMPLETE_WHY = #{tuning_complete_why}
				,TUNING_COMPLETE_DT = SYSDATE
				,TUNING_COMPLETER_ID = #{tuning_status_changer_id}
		WHEN NOT MATCHED THEN
			INSERT (TUNING_NO, IMPRB_ELAP_TIME, IMPRB_BUFFER_CNT, IMPRB_PGA_USAGE, 
					IMPRA_ELAP_TIME, IMPRA_BUFFER_CNT, IMPRA_PGA_USAGE, 
					ELAP_TIME_IMPR_RATIO, BUFFER_IMPR_RATIO, PGA_IMPR_RATIO, 
					CONTROVERSIALIST, IMPR_SBST, IMPR_SQL_TEXT, IMPRB_EXEC_PLAN, IMPRA_EXEC_PLAN, 
					TUNING_CASE_POSTING_YN, TUNING_CASE_POSTING_TITLE,
					TUNING_COMPLETE_WHY_CD, TUNING_COMPLETE_WHY, TUNING_COMPLETE_DT, TUNING_COMPLETER_ID)
			VALUES (#{tuning_no}, #{imprb_elap_time}, #{imprb_buffer_cnt}, #{imprb_pga_usage}, 
					#{impra_elap_time}, #{impra_buffer_cnt}, #{impra_pga_usage}, 
					#{elap_time_impr_ratio}, #{buffer_impr_ratio}, #{pga_impr_ratio}, 
					#{controversialist}, #{impr_sbst}, #{impr_sql_text}, #{imprb_exec_plan}, #{impra_exec_plan},
					#{tuning_case_posting_yn}, #{tuning_case_posting_title}, 
					#{tuning_complete_why_cd}, #{tuning_complete_why}, SYSDATE, #{tuning_status_changer_id})
	</update>	

	<insert id="insertTuningStatusHistory" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.insertTuningStatusHistory */
		INSERT INTO SQL_TUNING_STATUS_HISTORY (TUNING_NO, TUNING_STATUS_CHANGE_DT, TUNING_STATUS_CD, TUNING_STATUS_CHANGE_WHY, TUNING_STATUS_CHANGER_ID )
		VALUES (
			#{tuning_no},
			SYSDATE, 
			#{tuning_status_cd},
			#{tuning_status_change_why},
			#{tuning_status_changer_id}
		)	
	</insert>
	
	<delete id="deleteSqlImprovementType" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.deleteSqlImprovementType */
		DELETE FROM SQL_IMPROVEMENT_TYPE WHERE TUNING_NO = #{tuning_no}
	</delete>	
	
	<insert id="insertSqlImprovementType" parameterType="sqlImprovementType">
		/* ImprovementManagementDao.insertSqlImprovementType */
		INSERT INTO SQL_IMPROVEMENT_TYPE (TUNING_NO, IMPR_TYPE_CD, IMPR_DETAIL_TYPE_CD )
		VALUES (
			#{tuning_no},
			#{impr_type_cd},
			#{impr_detail_type_cd}
		)	
	</insert>	
	
	<delete id="deleteTuningTargetSqlBind" parameterType="string">
		/* ImprovementManagementDao.deleteTuningTargetSqlBind */
		DELETE FROM TUNING_TARGET_SQL_BIND WHERE TUNING_NO = #{tuningNo}
	</delete>
	
	<insert id="insertTuningTargetSqlBind" parameterType="tuningTargetSqlBind">
	/* ImprovementManagementDao.insertTuningTargetSqlBind */
		INSERT
		  INTO TUNING_TARGET_SQL_BIND(TUNING_NO, BIND_SET_SEQ, BIND_SEQ, BIND_VAR_NM, BIND_VAR_VALUE, BIND_VAR_TYPE, MANDATORY_YN )
		VALUES(#{tuning_no}
					 , #{bind_set_seq}
					 , #{bind_seq}
					 , #{bind_var_nm}
					 , #{bind_var_value}
					 , #{bind_var_type}
					 , #{mandatory_yn})
	</insert>
	
	<select id="getBindSetSeq" parameterType="string" resultType="string">
	/* ImprovementManagementDao.getBindSetSeq */
		SELECT NVL(MAX(BIND_SET_SEQ),0)+1
				 FROM	TUNING_TARGET_SQL_BIND
				 WHERE   TUNING_NO = #{tuning_no}
	</select>
	
	<select id="getProgramExecuteTms" parameterType="tuningTargetSql" resultType="string">
	/* ImprovementManagementDao.tuningTargetSql */
		SELECT MAX(PROGRAM_EXECUTE_TMS)
				 FROM	DEPLOY_PERF_CHK_EXEC_BIND
				 WHERE   PERF_CHECK_ID = #{perf_check_id}							 -- 성능점검ID
		   				AND  PERF_CHECK_STEP_ID = #{perf_check_step_id}				   -- 성능점검단계ID
		   				AND  PROGRAM_ID = #{program_id}
	</select>
	
	<insert id="insertTuningTargetSqlBindFromPerfChkResult" parameterType="tuningTargetSql" useGeneratedKeys="false">
	/* ImprovementManagementDao.insertTuningTargetSqlBindFromPerfChkResult */
		INSERT
		INTO   TUNING_TARGET_SQL_BIND
			   (
					  TUNING_NO
					, BIND_SET_SEQ
					, BIND_SEQ
					, BIND_VAR_NM
					, BIND_VAR_VALUE
					, BIND_VAR_TYPE
					, MANDATORY_YN
			   )
		SELECT   ${tuning_no}
			   ,${bind_set_seq}
			   ,A.BIND_SEQ
			   ,A.BIND_VAR_NM
			   ,A.BIND_VAR_VALUE
			   ,A.BIND_VAR_TYPE
			   ,''
		FROM	DEPLOY_PERF_CHK_EXEC_BIND A
		WHERE   A.PERF_CHECK_ID = #{perf_check_id}
		   AND  A.PERF_CHECK_STEP_ID = #{perf_check_step_id}
		   AND  A.PROGRAM_ID = #{program_id}
		   AND  A.PROGRAM_EXECUTE_TMS = #{program_execute_tms}
	</insert>
	
	<select id="getDBManagerInfo" parameterType="tuningTargetSql" resultType="users">
		/* ImprovementManagementDao.getDBManagerInfo */
		SELECT A.USER_ID, A.USER_NM
		FROM USERS A, USER_AUTH B, AUTH C, USER_DB_PRIVILEGE D
		WHERE D.DBID = #{dbid}
		AND C.AUTH_CD = 'ROLE_DBMANAGER'
		AND A.USER_ID = B.USER_ID
		AND A.USER_ID = D.USER_ID
		AND B.AUTH_GRP_ID = C.AUTH_ID
		AND SYSDATE BETWEEN TO_DATE(B.AUTH_START_DAY, 'YYYY-MM-DD') AND TO_DATE(B.AUTH_END_DAY, 'YYYY-MM-DD')
		AND SYSDATE BETWEEN TO_DATE(D.PRIVILEGE_START_DAY, 'YYYY-MM-DD') AND TO_DATE(D.PRIVILEGE_END_DAY, 'YYYY-MM-DD')	
	</select>	
	
	<select id="getTuningStatusCd" parameterType="tuningTargetSql" resultType="string">
		/* ImprovementManagementDao.getTuningStatusCd */
		SELECT NVL((CASE WHEN MAX(TUNING_STATUS_CD) NOT IN ('3', '7') THEN '3' ELSE MAX(TUNING_STATUS_CD) END), '3')
		FROM (
			SELECT A.*, ROW_NUMBER() OVER(ORDER BY TUNING_STATUS_CHANGE_DT DESC) RN 
			FROM SQL_TUNING_STATUS_HISTORY A
			WHERE TUNING_NO = #{tuning_no}
		) 
		WHERE RN = 2
	</select>
	
	<select id="getBfacChkNo" parameterType="string" resultType="string">
		/* ImprovementManagementDao.getBfacChkNo */
		SELECT NVL(MAX(BFAC_CHK_NO) + 1, 1) BFAC_CHK_NO
		FROM BEFORE_ACCIDENT_CHECK
	</select>
	
	<insert id="insertBeforeAccidentCheck" parameterType="beforeAccidentCheck">
		/* ImprovementManagementDao.insertBeforeAccidentCheck */
		INSERT INTO BEFORE_ACCIDENT_CHECK(BFAC_CHK_NO, TUNING_NO, BFAC_CHK_REQUEST_DT, BFAC_CHK_RQTR_ID, BFAC_CHK_SOURCE)
		VALUES (#{bfac_chk_no}, #{tuning_no}, SYSDATE, #{bfac_chk_rqtr_id}, #{bfac_chk_source})
	</insert>	
	
	<select id="getSqlTuningYn" parameterType="tuningTargetSql" resultType="sqlTuning">
		/* ImprovementManagementDao.getSqlTuningYn */
		SELECT TUNING_NO, EXCEPT_TARGET_YN, TUNING_COMPLETE_WHY_CD 
		FROM SQL_TUNING
		WHERE TUNING_NO = #{tuning_no}		
	</select>	
	
	<update id="updateSqlTuningComplete" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.updateSqlTuningComplete */
		UPDATE SQL_TUNING SET 
			IMPRB_ELAP_TIME = #{imprb_elap_time}
			,IMPRB_BUFFER_CNT = #{imprb_buffer_cnt}
			,IMPRB_PGA_USAGE = #{imprb_pga_usage}
			,IMPRA_ELAP_TIME = #{impra_elap_time}
			,IMPRA_BUFFER_CNT = #{impra_buffer_cnt}
			,IMPRA_PGA_USAGE = #{impra_pga_usage}
			,ELAP_TIME_IMPR_RATIO = #{elap_time_impr_ratio}
			,BUFFER_IMPR_RATIO = #{buffer_impr_ratio}
			,PGA_IMPR_RATIO = #{pga_impr_ratio}
			,CONTROVERSIALIST = #{controversialist}
			,IMPR_SBST		= #{impr_sbst}
			,IMPR_SQL_TEXT	= #{impr_sql_text}
			,IMPRB_EXEC_PLAN  = #{imprb_exec_plan}
			,IMPRA_EXEC_PLAN  = #{impra_exec_plan}
			,TUNING_CASE_POSTING_YN = #{tuning_case_posting_yn}
			,TUNING_CASE_POSTING_TITLE  = #{tuning_case_posting_title}
			,TUNING_COMPLETE_WHY_CD = #{tuning_complete_why_cd}
			,TUNING_COMPLETE_WHY = #{tuning_complete_why}
			,TUNING_COMPLETE_DT = SYSDATE
			,TUNING_COMPLETER_ID = #{tuning_status_changer_id}
		WHERE TUNING_NO = #{tuning_no}
	</update>
	
	<update id="updateSqlTuningResult" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.updateSqlTuningResult */
		UPDATE SQL_TUNING SET 
			IMPRB_ELAP_TIME = #{imprb_elap_time}
			,IMPRB_BUFFER_CNT = #{imprb_buffer_cnt}
			,IMPRB_PGA_USAGE = #{imprb_pga_usage}
			,IMPRA_ELAP_TIME = #{impra_elap_time}
			,IMPRA_BUFFER_CNT = #{impra_buffer_cnt}
			,IMPRA_PGA_USAGE = #{impra_pga_usage}
			,ELAP_TIME_IMPR_RATIO = #{elap_time_impr_ratio}
			,BUFFER_IMPR_RATIO = #{buffer_impr_ratio}
			,PGA_IMPR_RATIO = #{pga_impr_ratio}
			,TUNING_COMPLETE_DT = SYSDATE
			,TUNING_COMPLETER_ID = #{tuning_status_changer_id}
		WHERE TUNING_NO = #{tuning_no}
	</update>	
	
	<insert id="insertSqlTuningComplete" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.insertSqlTuningComplete */
		INSERT INTO SQL_TUNING (
			  TUNING_NO, IMPRB_ELAP_TIME, IMPRB_BUFFER_CNT, IMPRB_PGA_USAGE 
			, IMPRA_ELAP_TIME, IMPRA_BUFFER_CNT, IMPRA_PGA_USAGE
			, ELAP_TIME_IMPR_RATIO, BUFFER_IMPR_RATIO, PGA_IMPR_RATIO
			, CONTROVERSIALIST, IMPR_SBST, IMPR_SQL_TEXT, IMPRB_EXEC_PLAN, IMPRA_EXEC_PLAN
			, TUNING_CASE_POSTING_YN, TUNING_CASE_POSTING_TITLE,
			TUNING_COMPLETE_WHY_CD, TUNING_COMPLETE_WHY
			, TUNING_COMPLETE_DT
			, TUNING_COMPLETER_ID
			, TEMPORARY_SAVE_YN
			<if test="temporary_save_yn eq 'Y'.toString()">
				,TEMPORARY_SAVE_DT
			</if>
			)
		VALUES (
			#{tuning_no}, #{imprb_elap_time}, #{imprb_buffer_cnt}, #{imprb_pga_usage}, 
			#{impra_elap_time}, #{impra_buffer_cnt}, #{impra_pga_usage}, 
			#{elap_time_impr_ratio}, #{buffer_impr_ratio}, #{pga_impr_ratio}, 
			#{controversialist}, #{impr_sbst}, #{impr_sql_text}, #{imprb_exec_plan}, #{impra_exec_plan},
			#{tuning_case_posting_yn}, #{tuning_case_posting_title}, 
			#{tuning_complete_why_cd}, #{tuning_complete_why}
			, TO_DATE(#{tuning_complete_dt},'YYYY-MM-DD HH24:MI:SS')
			, #{tuning_completer_id}
			, #{temporary_save_yn}
			<if test="temporary_save_yn eq 'Y'.toString()">
				, TO_DATE(#{temporary_save_dt},'YYYY-MM-DD HH24:MI:SS')
			</if>
		)
	</insert>
	
	<insert id="insertSqlTuningHistory" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.insertSqlTuningHistory */
		INSERT INTO SQL_TUNING_HISTORY (TUNING_NO
		, UPDATE_DT
		, IMPRB_ELAP_TIME, IMPRB_BUFFER_CNT, IMPRB_PGA_USAGE, 
			IMPRA_ELAP_TIME, IMPRA_BUFFER_CNT, IMPRA_PGA_USAGE, ELAP_TIME_IMPR_RATIO, BUFFER_IMPR_RATIO, PGA_IMPR_RATIO, 
			CONTROVERSIALIST, IMPR_SBST, IMPR_SQL_TEXT, IMPRB_EXEC_PLAN, IMPRA_EXEC_PLAN)
		VALUES (
			#{tuning_no}
			, TO_DATE(#{update_dt},'YYYY-MM-DD HH24:MI:SS')
			, #{imprb_elap_time}, #{imprb_buffer_cnt}, #{imprb_pga_usage}, 
			#{impra_elap_time}, #{impra_buffer_cnt}, #{impra_pga_usage},
			#{elap_time_impr_ratio}, #{buffer_impr_ratio}, #{pga_impr_ratio}, 
			#{controversialist}, #{impr_sbst}, #{impr_sql_text}, #{imprb_exec_plan}, #{impra_exec_plan}
		)
	</insert>	
	
	<select id="getPerfGuide" parameterType="tuningTargetSql" resultType="perfGuide">
		/* ImprovementManagementDao.getPerfGuide */
		SELECT GUIDE_NO, TUNING_NO
		FROM PERF_GUIDE
		WHERE TUNING_NO = #{tuning_no}
	</select>
	
	<select id="getMaxPerfGuideNo" parameterType="string" resultType="string">
		/* ImprovementManagementDao.getMaxPerfGuideNo */
		SELECT NVL(MAX(GUIDE_NO) + 1, 1) GUIDE_NO
		FROM PERF_GUIDE
	</select>
	
	<insert id="insertPerfGuide" parameterType="perfGuide">
		/* ImprovementManagementDao.insertPerfGuide */
		INSERT INTO PERF_GUIDE(GUIDE_NO, GUIDE_DIV_CD, SYS_NM, GUIDE_TITLE_NM, REG_USER_ID, REG_DT, TUNING_NO, DEL_YN, TUNING_CASE_TYPE_CD) 
		VALUES(#{guide_no}, #{guide_div_cd}, #{sys_nm}, #{guide_title_nm}, #{reg_user_id}, SYSDATE, #{tuning_no}, 'N' , #{tuning_case_type_cd})	
	</insert>
	
	<select id="processHistoryList" parameterType="sqlTuningStatusHistory" resultType="sqlTuningStatusHistory">
		/* ImprovementManagementDao.processHistoryList */
		SELECT U1.USER_NM AS TUNING_STATUS_CHANGER_NM, 
			A.TUNING_STATUS_CD,
			CD1.CD_NM AS TUNING_STATUS_NM,
			A.TUNING_STATUS_CHANGE_DT,
			A.TUNING_STATUS_CHANGE_WHY
		FROM SQL_TUNING_STATUS_HISTORY A, CD CD1, USERS U1
		WHERE A.TUNING_STATUS_CD = CD1.CD
		AND A.TUNING_NO = #{tuning_no}
		AND CD1.GRP_CD_ID = '1004'
		AND A.TUNING_STATUS_CHANGER_ID = U1.USER_ID
		ORDER BY A.TUNING_STATUS_CHANGE_DT ASC
	</select>
	
	<select id="getTemporarySaveDt" resultType="string">
		/* ImprovementManagementDao.getTemporarySaveDt */
		SELECT TO_CHAR(TEMPORARY_SAVE_DT,'YYYY-MM-DD HH24:MI:SS') TEMPORARY_SAVE_DT FROM SQL_TUNING
  		WHERE TUNING_NO = #{tuning_no}
  		AND TEMPORARY_SAVE_YN = 'Y'
	</select>
	
	<delete id="deleteSqlTuningIndexHistory" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.deleteSqlTuningIndexHistory */
		DELETE FROM SQL_TUNING_INDEX_HISTORY
  		WHERE TUNING_NO = #{tuning_no}
  		AND UPDATE_DT = TO_DATE(#{update_dt},'YYYY-MM-DD HH24:MI:SS')
	</delete>
	
	<select id="getSysdate" resultType="string">
		SELECT SYSDATE FROM DUAL
	</select>
	
	<insert id="insertSqlTuningIndexHistory" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.insertSqlTuningIndexHistory */
		INSERT INTO SQL_TUNING_INDEX_HISTORY (
			TUNING_NO,
			UPDATE_DT,
			INDEX_TUNING_SEQ,
			INDEX_IMPR_TYPE_CD,
			TABLE_NAME,
			INDEX_NAME,
			INDEX_COLUMN_NAME,
			BEFORE_INDEX_COLUMN_NAME
		) VALUES (
			#{tuning_no},
			TO_DATE(#{update_dt},'YYYY-MM-DD HH24:MI:SS'),
			(SELECT NVL(MAX(INDEX_TUNING_SEQ),0)+1 FROM SQL_TUNING_INDEX_HISTORY WHERE TUNING_NO = #{tuning_no}),
			#{index_impr_type_cd},
			#{table_name},
			#{index_name},
			#{index_column_name},
			#{before_index_column_name}
		)
	</insert>
	
	<select id="getUsersWrkjobCdDbid" parameterType="string" resultType="string">
		/* ImprovementManagementDao.getUsersWrkjobCdDbid */
		SELECT DBID 
		FROM WRKJOB_DB 
		WHERE WRKJOB_CD = #{wrkjob_cd}
		AND ROWNUM = 1
	</select>
		
	<update id="updateAfterTuningNo" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.updateAfterTuningNo */
		UPDATE TUNING_TARGET_SQL
		SET AFTER_TUNING_NO = #{after_tuning_no}
		WHERE TUNING_NO = #{tuning_no}
	</update>
		
	<select id="getInitValues" parameterType="tuningTargetSql" resultType="tuningTargetSql">
		/* ImprovementManagementDao.getInitValues */
		WITH DB_PRIV AS (
				SELECT UDP.DBID
					 , D.DB_NAME
				  FROM USER_DB_PRIVILEGE UDP
					 , USERS U
					 , DATABASE D
				 WHERE UDP.USER_ID = U.USER_ID
				   AND UDP.DBID = D.DBID
				   AND D.USE_YN = 'Y'
				   AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
				   AND U.USER_ID = #{USER_ID}
		)   
		SELECT A.USER_ID
			 , A.TUNING_REQUESTER_TEL_NUM
			 , NVL(B.DBID, '' ) AS DBID
			 , CASE WHEN B.DBID IS NOT NULL THEN 
						 A.PARSING_SCHEMA_NAME
					ELSE 
						 '' 
				END AS PARSING_SCHEMA_NAME
			 , A.PROGRAM_TYPE_CD
			 , A.WRKJOB_PECULIAR_POINT
			 , A.REQUEST_WHY
		  FROM TUNING_REQUEST_DEFAULT_CONFIG A
			 , DB_PRIV B
		 WHERE A.DBID = B.DBID(+)
		   AND A.USER_ID = #{USER_ID}

<!-- 		SELECT * FROM TUNING_REQUEST_DEFAULT_CONFIG -->
<!-- 		WHERE USER_ID = #{user_id} -->
	</select>
	
	<insert id="saveInitSetting" parameterType="tuningTargetSql" useGeneratedKeys="false">
		/* ImprovementManagementDao.saveInitSetting */

		MERGE INTO TUNING_REQUEST_DEFAULT_CONFIG
				USING DUAL ON (USER_ID = #{user_id})
		WHEN MATCHED THEN
		UPDATE SET
			  TUNING_REQUESTER_TEL_NUM = NVL(#{tuning_requester_tel_num},'')
			, DBID = NVL(#{dbid},'')
			, PARSING_SCHEMA_NAME = NVL(#{parsing_schema_name},'')
			, PROGRAM_TYPE_CD = NVL(#{program_type_cd},'')
			, WRKJOB_PECULIAR_POINT = NVL(#{wrkjob_peculiar_point},'')
			, REQUEST_WHY = NVL(#{request_why},'')
		WHEN NOT MATCHED THEN
		INSERT
			(USER_ID,TUNING_REQUESTER_TEL_NUM,DBID,PARSING_SCHEMA_NAME,PROGRAM_TYPE_CD,WRKJOB_PECULIAR_POINT,REQUEST_WHY)
		VALUES
			(#{user_id},NVL(#{tuning_requester_tel_num},''),NVL(#{dbid},''),NVL(#{parsing_schema_name},''),NVL(#{program_type_cd},''),NVL(#{wrkjob_peculiar_point},''),NVL(#{request_why},''))
	</insert>
	
	<select id="getTuningCompleteDueDay" resultType="string">
		/* ImprovementManagementDao.getTuningCompleteDueDay */
		SELECT NVL(TO_NUMBER(DEFAULT_PREF_VALUE), 7) TUNING_COMPLETE_DUE_DAY
		FROM SPOP_PREFERENCES
		WHERE PREF_ID = 20003	
	</select>
	
	<update id="updateRejectApplication" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.updateRejectApplication */
		UPDATE TUNING_TARGET_SQL
		SET TUNING_STATUS_CD = #{tuning_status_cd}
		WHERE TUNING_NO = #{tuning_no}
	</update>
	
	<update id="updateRejectApplication2" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.updateRejectApplication2 */
		UPDATE TUNING_TARGET_SQL
		SET TUNING_STATUS_CD = #{before_tuning_status_cd},
			AFTER_TUNING_NO = #{after_tuning_no}
		WHERE TUNING_NO = #{before_tuning_no}
	</update>
	<!-- 적용반려, 재요청 -->
	<update id="insertTuningTargetSql2" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.insertTuningTargetSql2 */
		INSERT INTO TUNING_TARGET_SQL(TUNING_NO, DBID, CHOICE_TMS, GATHER_DAY, SQL_ID, CHOICE_DIV_CD, TUNING_STATUS_CD, PERFR_ID, 
										TUNING_REQUESTER_ID, TUNING_REQUESTER_WRKJOB_CD, TUNING_REQUESTER_TEL_NUM, TUNING_REQUEST_DT, 
										PROGRAM_TYPE_CD, BATCH_WORK_DIV_CD, TUNING_COMPLETE_DUE_DT, CURRENT_ELAP_TIME, FORECAST_RESULT_CNT, 
										GOAL_ELAP_TIME, WRKJOB_PECULIAR_POINT, REQUEST_WHY, SQL_DESC, DBIO, TR_CD, PLAN_HASH_VALUE, 
										MODULE, PARSING_SCHEMA_NAME, EXECUTIONS, AVG_BUFFER_GETS, MAX_BUFFER_GETS, TOTAL_BUFFER_GETS, 
										AVG_ELAPSED_TIME, MAX_ELAPSED_TIME, AVG_CPU_TIME, AVG_DISK_READS, AVG_ROW_PROCESSED, 
										RATIO_BUFFER_GET_TOTAL, RATIO_CPU_TOTAL, RATIO_CPU_PER_EXECUTIONS, SQL_TEXT, EXEC_CNT, BEFORE_TUNING_NO)
		SELECT #{after_tuning_no} AS TUNING_NO								 -- 튜닝번호
				, A.DBID AS DBID												-- DBID
				, A.CHOICE_TMS AS CHOICE_TMS									-- 선정회차
				, A.GATHER_DAY AS GATHER_DAY									-- 수집일자
				, A.SQL_ID AS SQL_ID											-- SQL_ID
				, #{choice_div_cd} AS CHOICE_DIV_CD							   -- 선정구분코드 : 요청('3')
				, #{tuning_status_cd} AS TUNING_STATUS_CD						 -- 튜닝상태코드 : 요청('2')
<!-- 			, A.PERFR_ID AS PERFR_ID -->
				, '' AS PERFR_ID										-- 튜닝담당자ID
				<choose>
					<when test='tuning_requester_id == null'>
						, '' AS TUNING_REQUESTER_ID									   -- 튜닝요청자ID
					</when>
					<otherwise>
						, #{tuning_requester_id} AS TUNING_REQUESTER_ID				   -- 튜닝요청자ID
					</otherwise>
				</choose>
				<choose>
					<when test='tuning_requester_wrkjob_cd == null'>
						, '' AS TUNING_REQUESTER_WRKJOB_CD								-- 튜닝요청자업무코드
					</when>
					<otherwise>
						, #{tuning_requester_wrkjob_cd} AS TUNING_REQUESTER_WRKJOB_CD	 -- 튜닝요청자업무코드
					</otherwise>
				</choose>
				<choose>
					<when test='tuning_requester_tel_num == null'>
						, '' AS TUNING_REQUESTER_TEL_NUM								  -- 튜닝요청자전화번호
					</when>
					<otherwise>
						, #{tuning_requester_tel_num} AS TUNING_REQUESTER_TEL_NUM		 -- 튜닝요청자전화번호
					</otherwise>
				</choose>
				
				
				, SYSDATE AS TUNING_REQUEST_DT								  -- 튜닝요청일시
				, A.PROGRAM_TYPE_CD AS PROGRAM_TYPE_CD						  -- 프로그램유형코드
				, A.BATCH_WORK_DIV_CD AS BATCH_WORK_DIV_CD					  -- 배치작업구분코드
				<choose>
					<when test='tuning_complete_due_dt == null'>
						, '' AS TUNING_COMPLETE_DUE_DT								   -- 튜닝완료기한일자
					</when>
					<otherwise>
						, #{tuning_complete_due_dt} AS TUNING_COMPLETE_DUE_DT			-- 튜닝완료기한일자
					</otherwise>
				</choose>
				, A.CURRENT_ELAP_TIME AS CURRENT_ELAP_TIME					  -- 현재수행시간
				, A.FORECAST_RESULT_CNT AS FORECAST_RESULT_CNT				  -- 예상결과건수
				, A.GOAL_ELAP_TIME AS GOAL_ELAP_TIME							-- 목표수행시간
				, A.WRKJOB_PECULIAR_POINT AS WRKJOB_PECULIAR_POINT			  -- 업무특이사항
				, A.REQUEST_WHY AS REQUEST_WHY								  -- 요청사유
				, A.SQL_DESC AS SQL_DESC										-- SQL설명
				, A.DBIO AS DBIO												-- DBIO
				, A.TR_CD AS TR_CD											  -- 거래코드
				, A.PLAN_HASH_VALUE AS PLAN_HASH_VALUE						  -- PLAN_HASH_VALUE
				, A.MODULE AS MODULE											-- MODULE
				, A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME				  -- PARSING_SCHEMA_NAME
				, A.EXECUTIONS AS EXECUTIONS									-- EXECUTIONS
				, A.AVG_BUFFER_GETS AS AVG_BUFFER_GETS						  -- AVG_BUFFER_GETS
				, A.MAX_BUFFER_GETS AS MAX_BUFFER_GETS						  -- MAX_BUFFER_GETS
				, A.TOTAL_BUFFER_GETS AS TOTAL_BUFFER_GETS					  -- TOTAL_BUFFER_GETS
				, A.AVG_ELAPSED_TIME AS AVG_ELAPSED_TIME						-- AVG_ELAPSED_TIME
				, A.MAX_ELAPSED_TIME AS MAX_ELAPSED_TIME						-- MAX_ELAPSED_TIME
				, A.AVG_CPU_TIME AS AVG_CPU_TIME								-- AVG_CPU_TIME
				, A.AVG_DISK_READS AS AVG_DISK_READS							-- AVG_DISK_READS
				, A.AVG_ROW_PROCESSED AS AVG_ROW_PROCESSED					  -- AVG_ROW_PROCESSED
				, A.RATIO_BUFFER_GET_TOTAL AS RATIO_BUFFER_GET_TOTAL			-- RATIO_BUFFER_GET_TOTAL
				, A.RATIO_CPU_TOTAL AS RATIO_CPU_TOTAL						  -- RATIO_CPU_TOTAL
				, A.RATIO_CPU_PER_EXECUTIONS AS RATIO_CPU_PER_EXECUTIONS		-- RATIO_CPU_PER_EXECUTIONS
				, A.SQL_TEXT AS SQL_TEXT										-- SQL_TEXT
				, A.EXEC_CNT AS EXEC_CNT										-- 수행횟수
				, #{before_tuning_no} AS BEFORE_TUNING_NO						 -- 이전튜닝번호
		FROM TUNING_TARGET_SQL A	-- SQL튜닝대상내역(TABLE)
		WHERE A.TUNING_NO = #{before_tuning_no}								-- 튜닝번호
	</update>
	
	<select id="getMaxTuningAttachFileSeq" parameterType="tuningTargetSql" resultType="string">
	/*ImprovementManagementDao.getMaxFileAttachFileSeq*/
		SELECT NVL(MAX(FILE_SEQ) + 1, 1) FILE_SEQ
		  FROM SQL_TUNING_ATTACH_FILE
		 WHERE TUNING_NO = #{tuning_no}
	</select>	
	
	<update id="insertTuningAttachFile" parameterType="sqlTuningAttachFile">
	/*ImprovementManagementDao.insertTuningAttachFile*/
		INSERT INTO SQL_TUNING_ATTACH_FILE
			 (
			   TUNING_NO
			 , FILE_SEQ
			 , FILE_NM
			 , ORG_FILE_NM
			 , FILE_SIZE
			 , FILE_EXT_NM
			 )
		VALUES
			 (
			   #{tuning_no}
			 , #{file_seq}
			 , #{file_nm}
			 , #{org_file_nm}
			 , #{file_size}
			 , #{file_ext_nm}
			 )	
	</update>
	
	<select id="readTuningAttachFiles" parameterType="tuningTargetSql" resultType="sqlTuningAttachFile">
	/* ImprovementManagementDao.readTuningAttachFiles */
		SELECT TUNING_NO
			 , FILE_SEQ
			 , FILE_NM
			 , ORG_FILE_NM
			 , FILE_SIZE
			 , FILE_EXT_NM 
		  FROM SQL_TUNING_ATTACH_FILE
		 WHERE TUNING_NO = #{tuning_no}
		 ORDER BY FILE_SEQ
	</select>
	
	<delete id="deleteTuningAttachFile" parameterType="sqlTuningAttachFile">
		DELETE 
		  FROM SQL_TUNING_ATTACH_FILE
		 WHERE TUNING_NO = #{tuning_no}
		   AND FILE_SEQ = #{file_seq}
		
	</delete>
	
	<select id="getDeployAfterPerf" parameterType="tuningTargetSql" resultType="tuningTargetSql">
	/* ImprovementManagementDao.getDeployAfterPerf */
		SELECT A.TUNING_NO
			 , TO_CHAR(TO_DATE(A.GATHER_DAY,'YYYYMMDD'),'YYYY-MM-DD') GATHER_DAY
			 , CD1.CD_NM AS CHOICE_DIV_CD_NM
			 , U1.USER_NM AS WRKJOB_MGR_NM
			 , W1.WRKJOB_CD_NM AS WRKJOB_MGR_WRKJOB_NM
			 , A.WRKJOB_MGR_TEL_NUM
			 , C.DB_NAME
			 , A.SQL_ID
			 , A.PLAN_HASH_VALUE
			 , B.PERF_CHECK_ID
			 , A.PROGRAM_ID
			 , W1.WRKJOB_CD_NM
			 , B.DEPLOY_ID
			 , U2.USER_NM
			 , B.DEPLOY_REQUEST_DT
			 , NVL(FN_NUM_TO_CHAR_FORMAT(A.AVG_ELAPSED_TIME), '') AS AVG_ELAPSED_TIME
			 , A.AVG_BUFFER_GETS
			 , A.AVG_ROW_PROCESSED
			 , A.EXECUTIONS
			 , A.MODULE
			 , A.PARSING_SCHEMA_NAME
			 , A.TR_CD
			 , A.DBIO
			 , A.SQL_TEXT
		  FROM TUNING_TARGET_SQL A
			 , DEPLOY_PERF_CHK B
			 , DATABASE C
			 , CD CD1
			 , USERS U1
			 , USERS U2
			 , WRKJOB_CD W1
		 WHERE A.PERF_CHECK_ID = B.PERF_CHECK_ID
		   AND A.DBID = C.DBID
		   AND A.CHOICE_DIV_CD = CD1.CD(+)
		   AND CD1.GRP_CD_ID(+) = '1003'
		   AND A.WRKJOB_MGR_ID = U1.USER_ID(+)
		   AND B.DEPLOY_REQUESTER_ID = U2.USER_ID(+)
		   AND B.WRKJOB_CD = W1.WRKJOB_CD
		   AND A.TUNING_NO = #{tuning_no}
	</select>
	
	<select id="getPerfSourceType" parameterType="tuningTargetSql" resultType="int">
		/* ImprovementManagementDao.getPerfSourceType */
		SELECT B.PERF_CHECK_SQL_SOURCE_TYPE_CD
		  FROM TUNING_TARGET_SQL A
		     , SQL_AUTO_PERF_CHK B
		 WHERE A.PROJECT_ID = B.PROJECT_ID
		   AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
		   AND A.TUNING_NO = #{tuning_no}
	</select>
	
	<insert id="insertImprbExecPlan" parameterType="tuningTargetSql">
		/* ImprovementManagementDao.insertImprbExecPlan */
		INSERT INTO SQL_TUNING
			 ( TUNING_NO
			 , IMPRB_EXEC_PLAN
			 ) 
			  VALUES 
			 (
			   #{tuning_no}
			 , #{imprb_exec_plan, jdbcType=VARCHAR}
			 )
	</insert>
	
	<select id="getUsersInfo" parameterType="String" resultType="users">
		/* ImprovementManagementDao.getUsersInfo */
		SELECT A.USER_ID AS USER_ID
			 , A.USER_NM AS USER_NM
			 , A.HP_NO AS HP_NO
			 , A.EMAIL AS EMAIL
			 , B.WRKJOB_CD_NM AS WRKJOB_CD_NM
		  FROM USERS A
			 , WRKJOB_CD B
		 WHERE 1 = 1
		   AND A.USER_ID = #{user_id}
		   AND B.WRKJOB_CD(+) = A.DEFAULT_WRKJOB_CD
	</select>
</mapper>