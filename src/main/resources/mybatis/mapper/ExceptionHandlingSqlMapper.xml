<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
	2020.05.25	명성태	OPENPOP V2 최초작업
-->
<mapper namespace="omc.spop.dao.ExceptionHandlingSqlDao">
	<select id="exceptionHandlingMethod" parameterType="exceptionHandlingSql" resultType="exceptionHandlingSql">
		/* ExceptionHandlingSqlDao.exceptionHandlingMethod */
		/*
		   예외처리방법
		 */
		SELECT * 
		FROM CD
		WHERE GRP_CD_ID = '1061'
		AND REF_VL_1 = 'SQL_PERF_TRACE'
	</select>

	<sql id="loadExceptionHandlingSqlRefId">
		/* ExceptionHandlingSqlDao.loadPerformanceCheckSqlRefId */
		WITH 
		-- 대용량 기준건수 JMG : 20210129
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
						, DATABASE DB
					WHERE PREF_ID IN (12004)) A
				, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
							WHERE PREF_ID IN (12004)
						)
					WHERE PREF_SEQ = MAX_PREF_SEQ
					) B
			WHERE A.DBID = B.DBID(+)
			AND A.PREF_ID = B.PREF_ID(+)
		)
		, TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.WRKJOB_CD
				, A.TOP_WRKJOB_CD
				, A.WRKJOB_LVL
				, A.PROGRAM_ID
				, A.ELAPSED_TIME_THRESHOLD
				, A.BUFFER_GETS_THRESHOLD
				, A.ROWS_PROCESSED_THRESHOLD  -- JMG : 20210129
				, A.FULL_SCAN_DECIDE_DIV_CD
				, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
				, FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')) PRD_BIG_TABLE_FULLSCAN_YN -- JMG : 20210129
				, FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')) PRD_PART_ACCESS_ALL_YN  -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')) PRD_ELAPSED_TIME -- JMG : 20210129
				, DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER'), 0, 1,
							FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'))) PRD_BUFFER_GETS -- JMG : 20210129
				, FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', FN_VSQL_SQL_ID(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER'), FN_VSQL_PLAN_HASH_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER')) PRD_ROWS_PROCESSED  -- JMG : 20210129
				, PERF_CHECK_ID
				, A.DBID  -- JMG : 20210129
			FROM (
					SELECT A.PERF_CHECK_ID
						, A.PERF_CHECK_STEP_ID
						, A.PROGRAM_ID
						, A.EXCEPTION_PRC_METH_CD
						, A.DBIO
						, A.DBID
						, A.TOP_WRKJOB_CD
						, A.WRKJOB_CD
						, A.WRKJOB_LVL
						, A.DEPLOY_COMPLETE_DT
						, A.ELAPSED_TIME_THRESHOLD
						, A.BUFFER_GETS_THRESHOLD
						, A.ROWS_PROCESSED_THRESHOLD  -- JMG : 20210129
						, A.FULL_SCAN_DECIDE_DIV_CD
						, A.PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
						, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
					FROM (
							SELECT A.PERF_CHECK_ID
								, A.DBID 
								, A.TOP_WRKJOB_CD
								, A.WRKJOB_CD 
								, A.WRKJOB_LVL
								, A.PROGRAM_ID
								, A.DBIO
								, A.PERF_CHECK_STEP_ID
								, A.EXCEPTION_PRC_METH_CD
								, A.DEPLOY_COMPLETE_DT
								, NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
								, NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
								, NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) ROWS_PROCESSED_THRESHOLD  -- JMG : 20210129
								, NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
								, NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
							FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
										A.PERF_CHECK_ID
										, I.DBID --> 20200608 B.DBID
										, B.TOP_WRKJOB_CD
										, A.WRKJOB_CD 
										, B.WRKJOB_LVL
										, C.PROGRAM_ID
										, D.DBIO
										, B.PERF_CHECK_STEP_ID
										, C.EXCEPTION_PRC_METH_CD
										, A.DEPLOY_COMPLETE_DT
										, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
										, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
										, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD   -- JMG : 20210129
										, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
										, MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD  -- JMG : 20210129
									FROM DEPLOY_PERF_CHK A
										-- 업무별 최종 단계
										, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, MAX(PERF_CHECK_STEP_ID) PERF_CHECK_STEP_ID
											FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
												, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
													FROM WRKJOB_CD
													WHERE USE_YN = 'Y'
													START WITH UPPER_WRKJOB_CD IS NULL
													CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
													WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
													AND A.DEL_YN(+) = 'N'
													GROUP BY A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL) B
										, DEPLOY_PERF_CHK_TARGET_PGM C
										, DEPLOY_PERF_CHK_ALL_PGM D
										, WJ_PERF_CHK_INDC E
										, WRKJOB_DB H  --> 20200608
										, DATABASE I   --> 20200608
									WHERE A.WRKJOB_CD = B.WRKJOB_CD
									AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
									AND C.PROGRAM_ID = D.PROGRAM_ID
									AND A.WRKJOB_CD = E.WRKJOB_CD
									AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
									AND A.WRKJOB_CD = H.WRKJOB_CD   --> 20200608
									AND H.DBID = I.DBID             --> 20200608
									AND I.DB_OPERATE_TYPE_CD = '3'  --> 20200608 -- DB운영유형코드 1:개발, 2:테스트, 3:운영
									-- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
									AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
									AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'  -- S: SQL
									
									/* 날짜 검색 */
									AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
															AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
									
									/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
									<if test="wrkjob_cd != null and wrkjob_cd != ''">
										AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																FROM WRKJOB_CD
																START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
																CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
									</if>
									
									/* 예외처리 방법 검색 */
									<if test="exception_prc_meth_cd != null and exception_prc_meth_cd != ''">
										AND C.EXCEPTION_PRC_METH_CD = #{exception_prc_meth_cd}  -- 2 : 영구 점검제외, 3 : 한시 점검제외
									</if>
									
									GROUP BY A.PERF_CHECK_ID
										, I.DBID --> 20200608 B.DBID
										, B.TOP_WRKJOB_CD
										, A.WRKJOB_CD
										, B.WRKJOB_LVL
										, C.PROGRAM_ID
										, D.DBIO
										, B.PERF_CHECK_STEP_ID
										, C.EXCEPTION_PRC_METH_CD
										, A.DEPLOY_COMPLETE_DT
								) A
								-- 성능점검 예외 지표
								,( 
									SELECT B.PROGRAM_ID
										, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
										, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
										, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD  -- JMG : 20210129
										, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
										, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD    -- JMG : 20210129
									FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
										, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
										, (SELECT F.PERF_CHECK_INDC_ID
											FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
												, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
												, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
											WHERE A.WRKJOB_CD = E.WRKJOB_CD
											AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
											AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
											AND E.INDC_APPLY_YN = 'Y'
											AND F.INDC_USE_YN = 'Y'
											
											/* 날짜 검색 */
											AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																	AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
											
											/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
											<if test="wrkjob_cd != null and wrkjob_cd != ''">
											AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																	FROM WRKJOB_CD
																	START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
																	CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
											</if>
										) C
									WHERE A.EXCEPTION_PRC_METH_CD = '1'
									AND A.EXCEPTION_PRC_STATUS_CD = '2'
									AND B.DEL_YN = 'N'
									AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
									AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
									GROUP BY B.PROGRAM_ID
								) B
								WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
							) A
					) A
					WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
					AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
		)
		, TMP_WRKJOB AS
		(
			SELECT WRKJOB_CD
				, UPPER_WRKJOB_CD
				, CONNECT_BY_ROOT WRKJOB_CD AS TOP_WRKJOB_CD
				, (CASE WHEN LEVEL = 1 THEN '-1' ELSE CONNECT_BY_ROOT WRKJOB_CD END) AS PARENT_ID
				, (CASE WHEN LEVEL = 1 THEN '-1' ELSE CONNECT_BY_ROOT WRKJOB_CD END) AS "_parentId"
				, (CASE 
						WHEN LEVEL = 1 THEN WRKJOB_CD_NM 
						ELSE SUBSTR(SYS_CONNECT_BY_PATH(WRKJOB_CD_NM, '/'), LENGTH('/'||CONNECT_BY_ROOT WRKJOB_CD_NM||'/')+1)
					END) AS WRKJOB_CD_NM
				, LEVEL LVL
			FROM (SELECT WRKJOB_CD
					   , UPPER_WRKJOB_CD
					   , REPLACE(WRKJOB_CD_NM, '/', ',') WRKJOB_CD_NM
					   , USE_YN
					   , DEPLOY_CHECK_TARGET_YN
					FROM WRKJOB_CD)
			WHERE USE_YN = 'Y'
			AND DEPLOY_CHECK_TARGET_YN = 'Y'
			START WITH UPPER_WRKJOB_CD IS NULL
			CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
		)
		SELECT WRKJOB_CD_NM, WRKJOB_CD_NM_EXCEL, WRKJOB_CD
			, (CASE WHEN TOP_WRKJOB_CD IS NULL THEN '-1' ELSE TOP_WRKJOB_CD END) PARENT_ID
			, (CASE WHEN TOP_WRKJOB_CD IS NULL THEN '-1' ELSE TOP_WRKJOB_CD END) "_parentId"
			, NVL(SQL_CNT, 0) SQL_CNT
			, NVL(PASS, 0) PASS
			, NVL(FAIL, 0) FAIL
			, NVL("0.1LESS_THAN", 0) "LESS_THAN_0_DOT_1"
			, NVL("0.3LESS_THAN", 0) "LESS_THAN_0_DOT_3"
			, NVL("1LESS_THAN", 0) "LESS_THAN_1"
			, NVL("3LESS_THAN", 0) "LESS_THAN_3"
			, NVL("10LESS_THAN", 0) "LESS_THAN_10"
			, NVL("60LESS_THAN", 0) "LESS_THAN_60"
			, NVL("60MORE_THAN", 0) "MORE_THAN_60"
		FROM (
				-- 최상위 업무만 
				SELECT A.WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM AS WRKJOB_CD_NM_EXCEL
					, B.TOP_WRKJOB_CD AS WRKJOB_CD
					, NULL AS TOP_WRKJOB_CD
					, COUNT(*) SQL_CNT  -- SQL수
					, SUM(CASE WHEN PRD_ELAPSED_TIME IS NULL THEN 0 
								WHEN ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME
									OR BUFFER_GETS_THRESHOLD   <![CDATA[<]]>   PRD_BUFFER_GETS
									OR (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED))
									OR (PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
									OR ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
										OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N')) THEN 0 
								ELSE 1 
							END) PASS  -- 적합 -- JMG : 20210129

					, SUM(CASE WHEN PRD_ELAPSED_TIME IS NULL THEN 0 
								WHEN ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME
									OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>   PRD_BUFFER_GETS
									OR (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED))
									OR (PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
									OR ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
										OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N')) THEN 1 
								ELSE 0 
							END) FAIL    -- 부적합 여부 -- JMG : 20210129
					, SUM(CASE WHEN PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN 1 END) "0.1LESS_THAN"    -- 0.1s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >  0.1 AND PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN 1 END) "0.3LESS_THAN"    -- 0.3s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 0.3 AND PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN 1 END) "1LESS_THAN"      -- 1s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 1   AND PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN 1 END) "3LESS_THAN"      -- 3s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 3   AND PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"     -- 10s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 10  AND PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN 1 END) "60LESS_THAN"     -- 60s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 60                             THEN 1 END) "60MORE_THAN"     -- 60s
				FROM TMP_WRKJOB A
					, TMP_DEPLOY_PERF_SQL B
					, TMP_BIG_TABLE_BASE C  -- JMG : 20210129
				WHERE A.WRKJOB_CD = B.TOP_WRKJOB_CD
				AND B.DBID = C.DBID      -- JMG : 20210129
				GROUP BY A.WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM
					, B.TOP_WRKJOB_CD
				UNION ALL
				-- 하위 업무 조회
				SELECT A.WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM AS WRKJOB_CD_NM_EXCEL
					, B.WRKJOB_CD
					, B.TOP_WRKJOB_CD
					, COUNT(*) "SQL수"
					, SUM(CASE WHEN PRD_ELAPSED_TIME IS NULL THEN 0 
								WHEN ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME
									OR BUFFER_GETS_THRESHOLD   <![CDATA[<]]>   PRD_BUFFER_GETS
									OR (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED))
									OR (PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
									OR ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
										OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N')) THEN 0 
								ELSE 1 
							END) PASS  -- 적합 -- JMG : 20210129

					, SUM(CASE WHEN PRD_ELAPSED_TIME IS NULL THEN 0 
								WHEN ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME
									OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>   PRD_BUFFER_GETS
									OR (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED))
									OR (PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
									OR ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
										OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N')) THEN 1 
								ELSE 0 
							END) FAIL    -- 부적합 여부 -- JMG : 20210129
					, SUM(CASE WHEN PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN 1 END) "0.1LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >  0.1 AND PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN 1 END) "0.3LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 0.3 AND PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN 1 END) "1LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 1   AND PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN 1 END) "3LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 3   AND PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 10  AND PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN 1 END) "60LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 60                             THEN 1 END) "60MORE_THAN"
				FROM TMP_WRKJOB A
					, TMP_DEPLOY_PERF_SQL B
					, TMP_BIG_TABLE_BASE C  -- JMG : 20210129
				WHERE A.WRKJOB_CD = B.WRKJOB_CD
				AND B.DBID = C.DBID      -- JMG : 20210129
				GROUP BY A.WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM
					, B.TOP_WRKJOB_CD
					, B.WRKJOB_CD
			)
		START WITH TOP_WRKJOB_CD IS NULL
		CONNECT BY NOCYCLE PRIOR WRKJOB_CD = TOP_WRKJOB_CD
		ORDER SIBLINGS BY WRKJOB_CD
	</sql>
	
	<select id="loadExceptionHandlingSql" parameterType="exceptionHandlingSql" resultType="exceptionHandlingSql">
		/* ExceptionHandlingSqlDao.loadExceptionHandlingSql */
		<include refid="loadExceptionHandlingSqlRefId"/>
	</select>

	<select id="loadExceptionHandlingSqlExcelDown" parameterType="exceptionHandlingSql" resultType="java.util.LinkedHashMap">
		/* PerformanceCheckSqlDao.loadExceptionHandlingSqlExcelDown */
		<include refid="loadExceptionHandlingSqlRefId"/>
	</select>
</mapper>