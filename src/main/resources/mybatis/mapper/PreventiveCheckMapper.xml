<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
	2018.04.18	이원식	OPENPOP V2 최초작업
-->
<mapper namespace="omc.spop.dao.PreventiveCheckDao">	
	<select id="checkSeqList" parameterType="dbCheckExec" resultType="dbCheckExec">
		/* PreventiveCheckDao.checkSeqList */
		SELECT CHECK_SEQ, CHECK_SEQ || ' (' || CHECK_DT || ')' AS CHECK_TEXT
		FROM (
			SELECT CHECK_DAY, CHECK_SEQ, TO_CHAR(CHECK_DT, 'YYYY-MM-DD HH24:MI:SS') AS CHECK_DT,
				MAX(CHECK_SEQ) OVER() MAX_CHECK_SEQ
			FROM DB_CHECK_EXEC
			WHERE DBID = #{dbid}
			AND CHECK_DAY = #{check_day}
            ORDER BY CHECK_DT DESC)
	</select>
	
	<select id="checkSeqListAll" parameterType="dbCheckExec" resultType="dbCheckExec">
		/* PreventiveCheckDao.checkSeqListAll */
		SELECT CHECK_SEQ, CHECK_SEQ || ' (' || TO_CHAR(CHECK_DT, 'YYYY-MM-DD HH24:MI:SS') || ')' AS CHECK_TEXT
		FROM DB_CHECK_EXEC
        WHERE CHECK_DAY = #{check_day}
        AND DBID = (
			SELECT DBID
            FROM DB_CHECK_EXEC
            WHERE CHECK_DAY = #{check_day}
            AND CHECK_SEQ = (
                SELECT MAX(CHECK_SEQ) CHECK_SEQ
                FROM DB_CHECK_EXEC
                WHERE CHECK_DAY = #{check_day})
            AND ROWNUM = 1
		)
        ORDER BY CHECK_SEQ
	</select>
	
	<select id="summaryList_old" parameterType="dailyCheck" resultType="dailyCheck">
		/* PreventiveCheckDao.summaryList */
		WITH DB_PRIV AS
		(
		    SELECT UDP.DBID, D.DB_NAME, D.ORDERING
		    FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
		    WHERE UDP.USER_ID = U.USER_ID
		    AND UDP.DBID = D.DBID
		    AND D.USE_YN = 'Y'
		    AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
		    AND U.USER_ID = #{user_id}
            AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
                                          FROM SPOP_PREFERENCES 
                                         WHERE PREF_ID = '22001') 		    
		)
		SELECT A.HEALTH, B.*
		FROM (
			SELECT DBID, 
				(
					CASE 
					WHEN CRITICAL_CNT > 0 THEN 'STATUS_RED'
					WHEN CRITICAL_CNT = 0 AND WARNING_CNT > 0 THEN 'STATUS_YELLOW'
					WHEN CRITICAL_CNT = 0 AND WARNING_CNT = 0 THEN 'STATUS_GREEN'
					ELSE 'STATUS_NONE'
					END
				) HEALTH
			FROM (
				SELECT DBID,
					SUM(CASE WHEN CHECK_GRADE_CD = '1' THEN CHECK_VALUE1 END) AS WARNING_CNT,
					SUM(CASE WHEN CHECK_GRADE_CD IN ('2', '3') THEN CHECK_VALUE1 END) AS CRITICAL_CNT
				FROM (
					SELECT A.DBID, A.DB_NAME, A.ORDERING, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1
					FROM DB_PRIV A LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD
						FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B, DB_CHECK_SUMMARY C
						WHERE A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
						AND A.CHECK_PREF_ID = C.CHECK_PREF_ID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND B.CHECK_ENABLE_YN(+) = 'Y'
						AND C.CHECK_DAY = #{check_day}
						AND C.CHECK_SEQ = #{check_seq}
						AND A.CHECK_GRADE_CD IN ('1', '2', '3')
					) B
					PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
				)
				GROUP BY DBID
			)
		) A, (
			SELECT DBID, DB_NAME, ADVISOR_RECOMMENDATION, 
				(CASE WHEN DATABASE_STATUS = 0 THEN 'Y' WHEN DATABASE_STATUS > 0 THEN 'N' END) DATABASE_STATUS, 
				(CASE WHEN EXPIRED_GRACE_ACCOUNT = 0 THEN 'Y' WHEN EXPIRED_GRACE_ACCOUNT > 0 THEN 'N' END) EXPIRED_GRACE_ACCOUNT, 
				(CASE WHEN MODIFIED_PARAMETER = 0 THEN 'Y' WHEN MODIFIED_PARAMETER > 0 THEN 'N' END) MODIFIED_PARAMETER, 
				(CASE WHEN NEW_CREATED_OBJECT = 0 THEN 'Y' WHEN NEW_CREATED_OBJECT > 0 THEN 'N' END) NEW_CREATED_OBJECT, 
				(CASE WHEN INSTANCE_STATUS = 0 THEN 'Y' WHEN INSTANCE_STATUS > 0 THEN 'N' END) INSTANCE_STATUS, 
				(CASE WHEN LISTENER_STATUS = 0 THEN 'Y' WHEN LISTENER_STATUS > 0 THEN 'N' END) LISTENER_STATUS, 
				(CASE WHEN DBFILES = 0 THEN 'Y' WHEN DBFILES > 0 THEN 'N' END) DBFILES, 
				(CASE WHEN LIBRARY_CACHE_HIT = 0 THEN 'Y' WHEN LIBRARY_CACHE_HIT > 0 THEN 'N' END) LIBRARY_CACHE_HIT, 
				(CASE WHEN DICTIONARY_CACHE_HIT = 0 THEN 'Y' WHEN DICTIONARY_CACHE_HIT > 0 THEN 'N' END) DICTIONARY_CACHE_HIT, 
				(CASE WHEN BUFFER_CACHE_HIT = 0 THEN 'Y' WHEN BUFFER_CACHE_HIT > 0 THEN 'N' END) BUFFER_CACHE_HIT, 
				(CASE WHEN LATCH_HIT = 0 THEN 'Y' WHEN LATCH_HIT > 0 THEN 'N' END) LATCH_HIT, 
				(CASE WHEN PARSE_CPU_TO_PARSE_ELAPSD = 0 THEN 'Y' WHEN PARSE_CPU_TO_PARSE_ELAPSD > 0 THEN 'N' END) PARSE_CPU_TO_PARSE_ELAPSD, 
				(CASE WHEN DISK_SORT = 0 THEN 'Y' WHEN DISK_SORT > 0 THEN 'N' END) DISK_SORT, 
				(CASE WHEN MEMORY_USAGE = 0 THEN 'Y' WHEN MEMORY_USAGE > 0 THEN 'N' END) MEMORY_USAGE, 
				(CASE WHEN RESOURCE_LIMIT = 0 THEN 'Y' WHEN RESOURCE_LIMIT > 0 THEN 'N' END) RESOURCE_LIMIT, 
				(CASE WHEN ALERT_LOG_ERROR = 0 THEN 'Y' WHEN ALERT_LOG_ERROR > 0 THEN 'N' END) ALERT_LOG_ERROR, 
				(CASE WHEN ACTIVE_INCIDENT = 0 THEN 'Y' WHEN ACTIVE_INCIDENT > 0 THEN 'N' END) ACTIVE_INCIDENT, 
				(CASE WHEN OUTSTANDING_ALERT = 0 THEN 'Y' WHEN OUTSTANDING_ALERT > 0 THEN 'N' END) OUTSTANDING_ALERT, 
				(CASE WHEN DBMS_SCHEDULER_JOB_FAILED = 0 THEN 'Y' WHEN DBMS_SCHEDULER_JOB_FAILED > 0 THEN 'N' END) DBMS_SCHEDULER_JOB_FAILED, 
				(CASE WHEN BACKGROUND_DUMP_SPACE = 0 THEN 'Y' WHEN BACKGROUND_DUMP_SPACE > 0 THEN 'N' END) BACKGROUND_DUMP_SPACE, 
				(CASE WHEN ARCHIVE_LOG_SPACE = 0 THEN 'Y' WHEN ARCHIVE_LOG_SPACE > 0 THEN 'N' END) ARCHIVE_LOG_SPACE, 
				(CASE WHEN ALERT_LOG_SPACE = 0 THEN 'Y' WHEN ALERT_LOG_SPACE > 0 THEN 'N' END) ALERT_LOG_SPACE, 
				(CASE WHEN FRA_SPACE = 0 THEN 'Y' WHEN FRA_SPACE > 0 THEN 'Y' END) FRA_SPACE, 
				(CASE WHEN ASM_DISKGROUP_SPACE = 0 THEN 'Y' WHEN ASM_DISKGROUP_SPACE > 0 THEN 'N' END) ASM_DISKGROUP_SPACE, 
				(CASE WHEN TABLESPACE = 0 THEN 'Y' WHEN TABLESPACE > 0 THEN 'N' END) TABLESPACE, 
				(CASE WHEN RECYCLEBIN_OBJECT = 0 THEN 'Y' WHEN RECYCLEBIN_OBJECT > 0 THEN 'N' END) RECYCLEBIN_OBJECT, 
				(CASE WHEN INVALID_OBJECT = 0 THEN 'Y' WHEN INVALID_OBJECT > 0 THEN 'N' END) INVALID_OBJECT, 
				(CASE WHEN NOLOGGING_OBJECT = 0 THEN 'Y' WHEN NOLOGGING_OBJECT > 0 THEN 'N' END) NOLOGGING_OBJECT, 
				(CASE WHEN PARALLEL_OBJECT = 0 THEN 'Y' WHEN PARALLEL_OBJECT > 0 THEN 'N' END) PARALLEL_OBJECT, 
				(CASE WHEN UNUSABLE_INDEX = 0 THEN 'Y' WHEN UNUSABLE_INDEX > 0 THEN 'N' END) UNUSABLE_INDEX, 
				(CASE WHEN CHAINED_ROWS = 0 THEN 'Y' WHEN CHAINED_ROWS > 0 THEN 'N' END) CHAINED_ROWS, 
				(CASE WHEN CORRUPT_BLOCK = 0 THEN 'Y' WHEN CORRUPT_BLOCK > 0 THEN 'N' END) CORRUPT_BLOCK, 
				(CASE WHEN SEQUENCE = 0 THEN 'Y' WHEN SEQUENCE > 0 THEN 'N' END) SEQUENCE, 
				(CASE WHEN FOREIGNKEYS_WITHOUT_INDEX = 0 THEN 'Y' WHEN FOREIGNKEYS_WITHOUT_INDEX > 0 THEN 'N' END) FOREIGNKEYS_WITHOUT_INDEX, 
				(CASE WHEN DISABLED_CONSTRAINT = 0 THEN 'Y' WHEN DISABLED_CONSTRAINT > 0 THEN 'N' END) DISABLED_CONSTRAINT, 
				(CASE WHEN MISSING_OR_STALE_STATISTICS = 0 THEN 'Y' WHEN MISSING_OR_STALE_STATISTICS > 0 THEN 'N' END) MISSING_OR_STALE_STATISTICS, 
				(CASE WHEN STATISTICS_LOCKED_TABLE = 0 THEN 'Y' WHEN STATISTICS_LOCKED_TABLE > 0 THEN 'N' END) STATISTICS_LOCKED_TABLE, 
				(CASE WHEN LONG_RUNNING_OPERATION = 0 THEN 'Y' WHEN LONG_RUNNING_OPERATION > 0 THEN 'N' END) LONG_RUNNING_OPERATION, 
				(CASE WHEN LONG_RUNNING_JOB = 0 THEN 'Y' WHEN LONG_RUNNING_JOB > 0 THEN 'N' END) LONG_RUNNING_JOB
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING, B.CHECK_PREF_ID, B.CHECK_VALUE1
				FROM (
					SELECT DBID, DB_NAME, ORDERING
					FROM DATABASE 
					WHERE USE_YN = 'Y'
		            AND DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
		                                          FROM SPOP_PREFERENCES 
		                                         WHERE PREF_ID = '22001') 						
					<if test="dbid != null and dbid != ''">
						AND DBID = #{dbid}
					</if>
				) A LEFT OUTER JOIN (
					SELECT C.DBID, 
						(CASE WHEN C.CHECK_PREF_ID IN (1038, 1039, 1040, 1041, 1042, 1043, 1044) THEN 9999 ELSE C.CHECK_PREF_ID END) AS CHECK_PREF_ID,
						SUM(C.CHECK_VALUE1) CHECK_VALUE1
					FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B, DB_CHECK_SUMMARY C
					WHERE A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
					AND A.CHECK_PREF_ID = C.CHECK_PREF_ID
					AND A.CHECK_ENABLE_YN = 'Y'
					AND B.CHECK_ENABLE_YN(+) = 'Y'
					AND C.CHECK_DAY = #{check_day}
					AND C.CHECK_SEQ = #{check_seq}
					<if test="dbid != null and dbid != ''">
						AND C.DBID = #{dbid}
					</if>
					GROUP BY C.DBID, 
					(CASE WHEN C.CHECK_PREF_ID IN (1038, 1039, 1040, 1041, 1042, 1043, 1044) THEN 9999 ELSE C.CHECK_PREF_ID END)
				) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			) 
			PIVOT (
				SUM(CHECK_VALUE1) FOR (CHECK_PREF_ID) IN (
				9999 AS ADVISOR_RECOMMENDATION,
				1001 AS DATABASE_STATUS,
				1046 AS EXPIRED_GRACE_ACCOUNT,
				1002 AS MODIFIED_PARAMETER,
				1003 AS NEW_CREATED_OBJECT,
				1004 AS INSTANCE_STATUS,
				1005 AS LISTENER_STATUS,
				1006 AS DBFILES,
				1007 AS LIBRARY_CACHE_HIT,
				1008 AS DICTIONARY_CACHE_HIT,
				1009 AS BUFFER_CACHE_HIT,
				1010 AS LATCH_HIT,
				1011 AS PARSE_CPU_TO_PARSE_ELAPSD,
				1012 AS DISK_SORT,
				1013 AS MEMORY_USAGE,
				1014 AS RESOURCE_LIMIT,
				1015 AS ALERT_LOG_ERROR,
				1016 AS ACTIVE_INCIDENT,
				1017 AS OUTSTANDING_ALERT,
				1018 AS DBMS_SCHEDULER_JOB_FAILED,
				1019 AS BACKGROUND_DUMP_SPACE,
				1020 AS ARCHIVE_LOG_SPACE,
				1021 AS ALERT_LOG_SPACE,
				1022 AS FRA_SPACE,
				1023 AS ASM_DISKGROUP_SPACE,
				1024 AS TABLESPACE,
				1025 AS RECYCLEBIN_OBJECT,
				1026 AS INVALID_OBJECT,
				1027 AS NOLOGGING_OBJECT,
				1028 AS PARALLEL_OBJECT,
				1029 AS UNUSABLE_INDEX,
				1030 AS CHAINED_ROWS,
				1031 AS CORRUPT_BLOCK,
				1032 AS SEQUENCE,
				1033 AS FOREIGNKEYS_WITHOUT_INDEX,
				1045 AS DISABLED_CONSTRAINT,
				1034 AS MISSING_OR_STALE_STATISTICS,
				1035 AS STATISTICS_LOCKED_TABLE,
				1036 AS LONG_RUNNING_OPERATION,
				1037 AS LONG_RUNNING_JOB)
			)
			ORDER BY ORDERING
		) B
		WHERE A.DBID = B.DBID
	</select>


	<select id="summaryList" parameterType="dailyCheck" resultType="dailyCheck">
		/* PreventiveCheckDao.summaryList */
		WITH DB_PRIV AS
		(
		    SELECT UDP.DBID, D.DB_NAME, D.ORDERING
		    FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
		    WHERE UDP.USER_ID = U.USER_ID
		    AND UDP.DBID = D.DBID
		    AND D.USE_YN = 'Y'
		    AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
		    AND U.USER_ID = #{user_id}
            AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
                                          FROM SPOP_PREFERENCES 
                                         WHERE PREF_ID = '22001') 		    
		)
		SELECT A.HEALTH, B.*
		FROM (
			SELECT DBID, 
				(
					CASE 
					WHEN CRITICAL_CNT > 0 THEN 'STATUS_RED'
					WHEN CRITICAL_CNT = 0 AND WARNING_CNT > 0 THEN 'STATUS_YELLOW'
					WHEN CRITICAL_CNT = 0 AND WARNING_CNT = 0 THEN 'STATUS_GREEN'
					ELSE 'STATUS_NONE'
					END
				) HEALTH
			FROM (
				SELECT DBID,
					SUM(CASE WHEN CHECK_GRADE_CD = '1' THEN CHECK_VALUE1 END) AS WARNING_CNT,
					SUM(CASE WHEN CHECK_GRADE_CD IN ('2', '3') THEN CHECK_VALUE1 END) AS CRITICAL_CNT
				FROM (
					SELECT A.DBID, A.DB_NAME, A.ORDERING, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1
					FROM DB_PRIV A LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD
						FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B, DB_CHECK_SUMMARY C
			               , (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
			                    FROM DB_CHECK_EXEC 
			                   WHERE CHECK_DAY = #{check_day}
			                   GROUP BY DBID
			                 )  D
						WHERE A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
						AND A.CHECK_PREF_ID = C.CHECK_PREF_ID
		                AND C.CHECK_DAY = D.CHECK_DAY
		                AND C.CHECK_SEQ = D.CHECK_SEQ
		                AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND B.CHECK_ENABLE_YN(+) = 'Y'
						AND A.CHECK_GRADE_CD IN ('1', '2', '3')
					) B
					PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
				)
				GROUP BY DBID
			)
		) A, (
			SELECT DBID, DB_NAME, TO_CHAR(CHECK_DT, 'YYYY-MM-DD HH24:MI') CHECK_DT, CHECK_SEQ, ADVISOR_RECOMMENDATION, 
				(CASE WHEN DATABASE_STATUS = 0 THEN 'Y' WHEN DATABASE_STATUS > 0 THEN 'N' END) DATABASE_STATUS, 
				(CASE WHEN EXPIRED_GRACE_ACCOUNT = 0 THEN 'Y' WHEN EXPIRED_GRACE_ACCOUNT > 0 THEN 'N' END) EXPIRED_GRACE_ACCOUNT, 
				(CASE WHEN MODIFIED_PARAMETER = 0 THEN 'Y' WHEN MODIFIED_PARAMETER > 0 THEN 'N' END) MODIFIED_PARAMETER, 
				(CASE WHEN NEW_CREATED_OBJECT = 0 THEN 'Y' WHEN NEW_CREATED_OBJECT > 0 THEN 'N' END) NEW_CREATED_OBJECT, 
				(CASE WHEN INSTANCE_STATUS = 0 THEN 'Y' WHEN INSTANCE_STATUS > 0 THEN 'N' END) INSTANCE_STATUS, 
				(CASE WHEN LISTENER_STATUS = 0 THEN 'Y' WHEN LISTENER_STATUS > 0 THEN 'N' END) LISTENER_STATUS, 
				(CASE WHEN DBFILES = 0 THEN 'Y' WHEN DBFILES > 0 THEN 'N' END) DBFILES, 
				(CASE WHEN LIBRARY_CACHE_HIT = 0 THEN 'Y' WHEN LIBRARY_CACHE_HIT > 0 THEN 'N' END) LIBRARY_CACHE_HIT, 
				(CASE WHEN DICTIONARY_CACHE_HIT = 0 THEN 'Y' WHEN DICTIONARY_CACHE_HIT > 0 THEN 'N' END) DICTIONARY_CACHE_HIT, 
				(CASE WHEN BUFFER_CACHE_HIT = 0 THEN 'Y' WHEN BUFFER_CACHE_HIT > 0 THEN 'N' END) BUFFER_CACHE_HIT, 
				(CASE WHEN LATCH_HIT = 0 THEN 'Y' WHEN LATCH_HIT > 0 THEN 'N' END) LATCH_HIT, 
				(CASE WHEN PARSE_CPU_TO_PARSE_ELAPSD = 0 THEN 'Y' WHEN PARSE_CPU_TO_PARSE_ELAPSD > 0 THEN 'N' END) PARSE_CPU_TO_PARSE_ELAPSD, 
				(CASE WHEN DISK_SORT = 0 THEN 'Y' WHEN DISK_SORT > 0 THEN 'N' END) DISK_SORT, 
				(CASE WHEN MEMORY_USAGE = 0 THEN 'Y' WHEN MEMORY_USAGE > 0 THEN 'N' END) MEMORY_USAGE, 
				(CASE WHEN RESOURCE_LIMIT = 0 THEN 'Y' WHEN RESOURCE_LIMIT > 0 THEN 'N' END) RESOURCE_LIMIT, 
				(CASE WHEN ALERT_LOG_ERROR = 0 THEN 'Y' WHEN ALERT_LOG_ERROR > 0 THEN 'N' END) ALERT_LOG_ERROR, 
				(CASE WHEN ACTIVE_INCIDENT = 0 THEN 'Y' WHEN ACTIVE_INCIDENT > 0 THEN 'N' END) ACTIVE_INCIDENT, 
				(CASE WHEN OUTSTANDING_ALERT = 0 THEN 'Y' WHEN OUTSTANDING_ALERT > 0 THEN 'N' END) OUTSTANDING_ALERT, 
				(CASE WHEN DBMS_SCHEDULER_JOB_FAILED = 0 THEN 'Y' WHEN DBMS_SCHEDULER_JOB_FAILED > 0 THEN 'N' END) DBMS_SCHEDULER_JOB_FAILED, 
				(CASE WHEN BACKGROUND_DUMP_SPACE = 0 THEN 'Y' WHEN BACKGROUND_DUMP_SPACE > 0 THEN 'N' END) BACKGROUND_DUMP_SPACE, 
				(CASE WHEN ARCHIVE_LOG_SPACE = 0 THEN 'Y' WHEN ARCHIVE_LOG_SPACE > 0 THEN 'N' END) ARCHIVE_LOG_SPACE, 
				(CASE WHEN ALERT_LOG_SPACE = 0 THEN 'Y' WHEN ALERT_LOG_SPACE > 0 THEN 'N' END) ALERT_LOG_SPACE, 
				(CASE WHEN FRA_SPACE = 0 THEN 'Y' WHEN FRA_SPACE > 0 THEN 'N' END) FRA_SPACE, 
				(CASE WHEN ASM_DISKGROUP_SPACE = 0 THEN 'Y' WHEN ASM_DISKGROUP_SPACE > 0 THEN 'N' END) ASM_DISKGROUP_SPACE, 
				(CASE WHEN TABLESPACE = 0 THEN 'Y' WHEN TABLESPACE > 0 THEN 'N' END) TABLESPACE, 
				(CASE WHEN RECYCLEBIN_OBJECT = 0 THEN 'Y' WHEN RECYCLEBIN_OBJECT > 0 THEN 'N' END) RECYCLEBIN_OBJECT, 
				(CASE WHEN INVALID_OBJECT = 0 THEN 'Y' WHEN INVALID_OBJECT > 0 THEN 'N' END) INVALID_OBJECT, 
				(CASE WHEN NOLOGGING_OBJECT = 0 THEN 'Y' WHEN NOLOGGING_OBJECT > 0 THEN 'N' END) NOLOGGING_OBJECT, 
				(CASE WHEN PARALLEL_OBJECT = 0 THEN 'Y' WHEN PARALLEL_OBJECT > 0 THEN 'N' END) PARALLEL_OBJECT, 
				(CASE WHEN UNUSABLE_INDEX = 0 THEN 'Y' WHEN UNUSABLE_INDEX > 0 THEN 'N' END) UNUSABLE_INDEX, 
				(CASE WHEN CHAINED_ROWS = 0 THEN 'Y' WHEN CHAINED_ROWS > 0 THEN 'N' END) CHAINED_ROWS, 
				(CASE WHEN CORRUPT_BLOCK = 0 THEN 'Y' WHEN CORRUPT_BLOCK > 0 THEN 'N' END) CORRUPT_BLOCK, 
				(CASE WHEN SEQUENCE = 0 THEN 'Y' WHEN SEQUENCE > 0 THEN 'N' END) SEQUENCE, 
				(CASE WHEN FOREIGNKEYS_WITHOUT_INDEX = 0 THEN 'Y' WHEN FOREIGNKEYS_WITHOUT_INDEX > 0 THEN 'N' END) FOREIGNKEYS_WITHOUT_INDEX, 
				(CASE WHEN DISABLED_CONSTRAINT = 0 THEN 'Y' WHEN DISABLED_CONSTRAINT > 0 THEN 'N' END) DISABLED_CONSTRAINT, 
				(CASE WHEN MISSING_OR_STALE_STATISTICS = 0 THEN 'Y' WHEN MISSING_OR_STALE_STATISTICS > 0 THEN 'N' END) MISSING_OR_STALE_STATISTICS, 
				(CASE WHEN STATISTICS_LOCKED_TABLE = 0 THEN 'Y' WHEN STATISTICS_LOCKED_TABLE > 0 THEN 'N' END) STATISTICS_LOCKED_TABLE, 
				(CASE WHEN LONG_RUNNING_OPERATION = 0 THEN 'Y' WHEN LONG_RUNNING_OPERATION > 0 THEN 'N' END) LONG_RUNNING_OPERATION, 
				(CASE WHEN LONG_RUNNING_JOB = 0 THEN 'Y' WHEN LONG_RUNNING_JOB > 0 THEN 'N' END) LONG_RUNNING_JOB
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING, B.CHECK_PREF_ID, B.CHECK_VALUE1, B.CHECK_DT, B.CHECK_SEQ
				FROM (
					SELECT DBID, DB_NAME, ORDERING
					FROM DATABASE 
					WHERE USE_YN = 'Y'
		            AND DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
		                                          FROM SPOP_PREFERENCES 
		                                         WHERE PREF_ID = '22001') 						
					<if test="dbid != null and dbid != ''">
						AND DBID = #{dbid}
					</if>
				) A LEFT OUTER JOIN (
					SELECT C.DBID, 
						(CASE WHEN C.CHECK_PREF_ID IN (1038, 1039, 1040, 1041, 1042, 1043, 1044) THEN 9999 ELSE C.CHECK_PREF_ID END) AS CHECK_PREF_ID,
						SUM(C.CHECK_VALUE1) CHECK_VALUE1, MAX(CHECK_DT) CHECK_DT, MAX(C.CHECK_SEQ) CHECK_SEQ
					FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B, DB_CHECK_SUMMARY C
		               , (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
		                    FROM DB_CHECK_EXEC 
		                   WHERE CHECK_DAY = #{check_day}
		                   GROUP BY DBID
		                 )  D
					WHERE A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
					AND A.CHECK_PREF_ID = C.CHECK_PREF_ID
		            AND C.CHECK_DAY = D.CHECK_DAY
		            AND C.CHECK_SEQ = D.CHECK_SEQ
		            AND C.DBID = D.DBID
					AND A.CHECK_ENABLE_YN = 'Y'
					AND B.CHECK_ENABLE_YN(+) = 'Y'
					<if test="dbid != null and dbid != ''">
						AND C.DBID = #{dbid}
					</if>
					GROUP BY C.DBID, 
					(CASE WHEN C.CHECK_PREF_ID IN (1038, 1039, 1040, 1041, 1042, 1043, 1044) THEN 9999 ELSE C.CHECK_PREF_ID END)
				) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			) 
			PIVOT (
				SUM(CHECK_VALUE1) FOR (CHECK_PREF_ID) IN (
				9999 AS ADVISOR_RECOMMENDATION,
				1001 AS DATABASE_STATUS,
				1046 AS EXPIRED_GRACE_ACCOUNT,
				1002 AS MODIFIED_PARAMETER,
				1003 AS NEW_CREATED_OBJECT,
				1004 AS INSTANCE_STATUS,
				1005 AS LISTENER_STATUS,
				1006 AS DBFILES,
				1007 AS LIBRARY_CACHE_HIT,
				1008 AS DICTIONARY_CACHE_HIT,
				1009 AS BUFFER_CACHE_HIT,
				1010 AS LATCH_HIT,
				1011 AS PARSE_CPU_TO_PARSE_ELAPSD,
				1012 AS DISK_SORT,
				1013 AS MEMORY_USAGE,
				1014 AS RESOURCE_LIMIT,
				1015 AS ALERT_LOG_ERROR,
				1016 AS ACTIVE_INCIDENT,
				1017 AS OUTSTANDING_ALERT,
				1018 AS DBMS_SCHEDULER_JOB_FAILED,
				1019 AS BACKGROUND_DUMP_SPACE,
				1020 AS ARCHIVE_LOG_SPACE,
				1021 AS ALERT_LOG_SPACE,
				1022 AS FRA_SPACE,
				1023 AS ASM_DISKGROUP_SPACE,
				1024 AS TABLESPACE,
				1025 AS RECYCLEBIN_OBJECT,
				1026 AS INVALID_OBJECT,
				1027 AS NOLOGGING_OBJECT,
				1028 AS PARALLEL_OBJECT,
				1029 AS UNUSABLE_INDEX,
				1030 AS CHAINED_ROWS,
				1031 AS CORRUPT_BLOCK,
				1032 AS SEQUENCE,
				1033 AS FOREIGNKEYS_WITHOUT_INDEX,
				1045 AS DISABLED_CONSTRAINT,
				1034 AS MISSING_OR_STALE_STATISTICS,
				1035 AS STATISTICS_LOCKED_TABLE,
				1036 AS LONG_RUNNING_OPERATION,
				1037 AS LONG_RUNNING_JOB)
			)
			ORDER BY ORDERING
		) B
		WHERE A.DBID = B.DBID
	</select>
	
	<select id="summaryListByExcelDown" parameterType="dailyCheck" resultType="java.util.LinkedHashMap">
		/* PreventiveCheckDao.summaryListByExcelDown */
		WITH DB_PRIV AS
		(
		    SELECT UDP.DBID, D.DB_NAME, D.ORDERING
		    FROM USER_DB_PRIVILEGE UDP, USERS U, DATABASE D
		    WHERE UDP.USER_ID = U.USER_ID
		    AND UDP.DBID = D.DBID
		    AND D.USE_YN = 'Y'
		    AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN UDP.PRIVILEGE_START_DAY AND UDP.PRIVILEGE_END_DAY
		    AND U.USER_ID = #{user_id}
            AND D.DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
                                          FROM SPOP_PREFERENCES 
                                         WHERE PREF_ID = '22001') 		    
		)
		SELECT A.HEALTH, B.*
		FROM (
			SELECT DBID, 
				(
					CASE 
					WHEN CRITICAL_CNT > 0 THEN 'STATUS_RED'
					WHEN CRITICAL_CNT = 0 AND WARNING_CNT > 0 THEN 'STATUS_YELLOW'
					WHEN CRITICAL_CNT = 0 AND WARNING_CNT = 0 THEN 'STATUS_GREEN'
					ELSE 'STATUS_NONE'
					END
				) HEALTH
			FROM (
				SELECT DBID,
					SUM(CASE WHEN CHECK_GRADE_CD = '1' THEN CHECK_VALUE1 END) AS WARNING_CNT,
					SUM(CASE WHEN CHECK_GRADE_CD IN ('2', '3') THEN CHECK_VALUE1 END) AS CRITICAL_CNT
				FROM (
					SELECT A.DBID, A.DB_NAME, A.ORDERING, B.CHECK_PREF_ID, CHECK_GRADE_CD, B.CHECK_VALUE1
					FROM DB_PRIV A LEFT OUTER JOIN (
						SELECT C.*, A.CHECK_GRADE_CD
						FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B, DB_CHECK_SUMMARY C
			               , (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
			                    FROM DB_CHECK_EXEC 
			                   WHERE CHECK_DAY = #{check_day}
			                   GROUP BY DBID
			                 )  D
						WHERE A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
						AND A.CHECK_PREF_ID = C.CHECK_PREF_ID
		                AND C.CHECK_DAY = D.CHECK_DAY
		                AND C.CHECK_SEQ = D.CHECK_SEQ
		                AND C.DBID = D.DBID
						AND A.CHECK_ENABLE_YN = 'Y'
						AND B.CHECK_ENABLE_YN(+) = 'Y'
						AND A.CHECK_GRADE_CD IN ('1', '2', '3')
					) B
					PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
				)
				GROUP BY DBID
			)
		) A, (
			SELECT DBID, DB_NAME, TO_CHAR(CHECK_DT, 'YYYY-MM-DD HH24:MI') CHECK_DT, CHECK_SEQ, ADVISOR_RECOMMENDATION, 
				(CASE WHEN DATABASE_STATUS = 0 THEN 'Y' WHEN DATABASE_STATUS > 0 THEN 'N' END) DATABASE_STATUS, 
				(CASE WHEN EXPIRED_GRACE_ACCOUNT = 0 THEN 'Y' WHEN EXPIRED_GRACE_ACCOUNT > 0 THEN 'N' END) EXPIRED_GRACE_ACCOUNT, 
				(CASE WHEN MODIFIED_PARAMETER = 0 THEN 'Y' WHEN MODIFIED_PARAMETER > 0 THEN 'N' END) MODIFIED_PARAMETER, 
				(CASE WHEN NEW_CREATED_OBJECT = 0 THEN 'Y' WHEN NEW_CREATED_OBJECT > 0 THEN 'N' END) NEW_CREATED_OBJECT, 
				(CASE WHEN INSTANCE_STATUS = 0 THEN 'Y' WHEN INSTANCE_STATUS > 0 THEN 'N' END) INSTANCE_STATUS, 
				(CASE WHEN LISTENER_STATUS = 0 THEN 'Y' WHEN LISTENER_STATUS > 0 THEN 'N' END) LISTENER_STATUS, 
				(CASE WHEN DBFILES = 0 THEN 'Y' WHEN DBFILES > 0 THEN 'N' END) DBFILES, 
				(CASE WHEN LIBRARY_CACHE_HIT = 0 THEN 'Y' WHEN LIBRARY_CACHE_HIT > 0 THEN 'N' END) LIBRARY_CACHE_HIT, 
				(CASE WHEN DICTIONARY_CACHE_HIT = 0 THEN 'Y' WHEN DICTIONARY_CACHE_HIT > 0 THEN 'N' END) DICTIONARY_CACHE_HIT, 
				(CASE WHEN BUFFER_CACHE_HIT = 0 THEN 'Y' WHEN BUFFER_CACHE_HIT > 0 THEN 'N' END) BUFFER_CACHE_HIT, 
				(CASE WHEN LATCH_HIT = 0 THEN 'Y' WHEN LATCH_HIT > 0 THEN 'N' END) LATCH_HIT, 
				(CASE WHEN PARSE_CPU_TO_PARSE_ELAPSD = 0 THEN 'Y' WHEN PARSE_CPU_TO_PARSE_ELAPSD > 0 THEN 'N' END) PARSE_CPU_TO_PARSE_ELAPSD, 
				(CASE WHEN DISK_SORT = 0 THEN 'Y' WHEN DISK_SORT > 0 THEN 'N' END) DISK_SORT, 
				(CASE WHEN MEMORY_USAGE = 0 THEN 'Y' WHEN MEMORY_USAGE > 0 THEN 'N' END) MEMORY_USAGE, 
				(CASE WHEN RESOURCE_LIMIT = 0 THEN 'Y' WHEN RESOURCE_LIMIT > 0 THEN 'N' END) RESOURCE_LIMIT, 
				(CASE WHEN ALERT_LOG_ERROR = 0 THEN 'Y' WHEN ALERT_LOG_ERROR > 0 THEN 'N' END) ALERT_LOG_ERROR, 
				(CASE WHEN ACTIVE_INCIDENT = 0 THEN 'Y' WHEN ACTIVE_INCIDENT > 0 THEN 'N' END) ACTIVE_INCIDENT, 
				(CASE WHEN OUTSTANDING_ALERT = 0 THEN 'Y' WHEN OUTSTANDING_ALERT > 0 THEN 'N' END) OUTSTANDING_ALERT, 
				(CASE WHEN DBMS_SCHEDULER_JOB_FAILED = 0 THEN 'Y' WHEN DBMS_SCHEDULER_JOB_FAILED > 0 THEN 'N' END) DBMS_SCHEDULER_JOB_FAILED, 
				(CASE WHEN BACKGROUND_DUMP_SPACE = 0 THEN 'Y' WHEN BACKGROUND_DUMP_SPACE > 0 THEN 'N' END) BACKGROUND_DUMP_SPACE, 
				(CASE WHEN ARCHIVE_LOG_SPACE = 0 THEN 'Y' WHEN ARCHIVE_LOG_SPACE > 0 THEN 'N' END) ARCHIVE_LOG_SPACE, 
				(CASE WHEN ALERT_LOG_SPACE = 0 THEN 'Y' WHEN ALERT_LOG_SPACE > 0 THEN 'N' END) ALERT_LOG_SPACE, 
				(CASE WHEN FRA_SPACE = 0 THEN 'Y' WHEN FRA_SPACE > 0 THEN 'N' END) FRA_SPACE, 
				(CASE WHEN ASM_DISKGROUP_SPACE = 0 THEN 'Y' WHEN ASM_DISKGROUP_SPACE > 0 THEN 'N' END) ASM_DISKGROUP_SPACE, 
				(CASE WHEN TABLESPACE = 0 THEN 'Y' WHEN TABLESPACE > 0 THEN 'N' END) TABLESPACE, 
				(CASE WHEN RECYCLEBIN_OBJECT = 0 THEN 'Y' WHEN RECYCLEBIN_OBJECT > 0 THEN 'N' END) RECYCLEBIN_OBJECT, 
				(CASE WHEN INVALID_OBJECT = 0 THEN 'Y' WHEN INVALID_OBJECT > 0 THEN 'N' END) INVALID_OBJECT, 
				(CASE WHEN NOLOGGING_OBJECT = 0 THEN 'Y' WHEN NOLOGGING_OBJECT > 0 THEN 'N' END) NOLOGGING_OBJECT, 
				(CASE WHEN PARALLEL_OBJECT = 0 THEN 'Y' WHEN PARALLEL_OBJECT > 0 THEN 'N' END) PARALLEL_OBJECT, 
				(CASE WHEN UNUSABLE_INDEX = 0 THEN 'Y' WHEN UNUSABLE_INDEX > 0 THEN 'N' END) UNUSABLE_INDEX, 
				(CASE WHEN CHAINED_ROWS = 0 THEN 'Y' WHEN CHAINED_ROWS > 0 THEN 'N' END) CHAINED_ROWS, 
				(CASE WHEN CORRUPT_BLOCK = 0 THEN 'Y' WHEN CORRUPT_BLOCK > 0 THEN 'N' END) CORRUPT_BLOCK, 
				(CASE WHEN SEQUENCE = 0 THEN 'Y' WHEN SEQUENCE > 0 THEN 'N' END) SEQUENCE, 
				(CASE WHEN FOREIGNKEYS_WITHOUT_INDEX = 0 THEN 'Y' WHEN FOREIGNKEYS_WITHOUT_INDEX > 0 THEN 'N' END) FOREIGNKEYS_WITHOUT_INDEX, 
				(CASE WHEN DISABLED_CONSTRAINT = 0 THEN 'Y' WHEN DISABLED_CONSTRAINT > 0 THEN 'N' END) DISABLED_CONSTRAINT, 
				(CASE WHEN MISSING_OR_STALE_STATISTICS = 0 THEN 'Y' WHEN MISSING_OR_STALE_STATISTICS > 0 THEN 'N' END) MISSING_OR_STALE_STATISTICS, 
				(CASE WHEN STATISTICS_LOCKED_TABLE = 0 THEN 'Y' WHEN STATISTICS_LOCKED_TABLE > 0 THEN 'N' END) STATISTICS_LOCKED_TABLE, 
				(CASE WHEN LONG_RUNNING_OPERATION = 0 THEN 'Y' WHEN LONG_RUNNING_OPERATION > 0 THEN 'N' END) LONG_RUNNING_OPERATION, 
				(CASE WHEN LONG_RUNNING_JOB = 0 THEN 'Y' WHEN LONG_RUNNING_JOB > 0 THEN 'N' END) LONG_RUNNING_JOB
			FROM (
				SELECT A.DBID, A.DB_NAME, A.ORDERING, B.CHECK_PREF_ID, B.CHECK_VALUE1, B.CHECK_DT, B.CHECK_SEQ
				FROM (
					SELECT DBID, DB_NAME, ORDERING
					FROM DATABASE 
					WHERE USE_YN = 'Y'
		            AND DB_OPERATE_TYPE_CD = (SELECT DEFAULT_PREF_VALUE 
		                                          FROM SPOP_PREFERENCES 
		                                         WHERE PREF_ID = '22001') 						
					<if test="dbid != null and dbid != ''">
						AND DBID = #{dbid}
					</if>
				) A LEFT OUTER JOIN (
					SELECT C.DBID, 
						(CASE WHEN C.CHECK_PREF_ID IN (1038, 1039, 1040, 1041, 1042, 1043, 1044) THEN 9999 ELSE C.CHECK_PREF_ID END) AS CHECK_PREF_ID,
						SUM(C.CHECK_VALUE1) CHECK_VALUE1, MAX(CHECK_DT) CHECK_DT, MAX(C.CHECK_SEQ) CHECK_SEQ
					FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B, DB_CHECK_SUMMARY C
		               , (SELECT DBID, MAX(CHECK_DAY) AS CHECK_DAY, MAX(CHECK_SEQ) CHECK_SEQ, MAX(CHECK_DT) CHECK_DT
		                    FROM DB_CHECK_EXEC 
		                   WHERE CHECK_DAY = #{check_day}
		                   GROUP BY DBID
		                 )  D
					WHERE A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
					AND A.CHECK_PREF_ID = C.CHECK_PREF_ID
		            AND C.CHECK_DAY = D.CHECK_DAY
		            AND C.CHECK_SEQ = D.CHECK_SEQ
		            AND C.DBID = D.DBID
					AND A.CHECK_ENABLE_YN = 'Y'
					AND B.CHECK_ENABLE_YN(+) = 'Y'
					<if test="dbid != null and dbid != ''">
						AND C.DBID = #{dbid}
					</if>
					GROUP BY C.DBID, 
					(CASE WHEN C.CHECK_PREF_ID IN (1038, 1039, 1040, 1041, 1042, 1043, 1044) THEN 9999 ELSE C.CHECK_PREF_ID END)
				) B
				PARTITION BY(B.CHECK_PREF_ID) ON A.DBID = B.DBID
			) 
			PIVOT (
				SUM(CHECK_VALUE1) FOR (CHECK_PREF_ID) IN (
				9999 AS ADVISOR_RECOMMENDATION,
				1001 AS DATABASE_STATUS,
				1046 AS EXPIRED_GRACE_ACCOUNT,
				1002 AS MODIFIED_PARAMETER,
				1003 AS NEW_CREATED_OBJECT,
				1004 AS INSTANCE_STATUS,
				1005 AS LISTENER_STATUS,
				1006 AS DBFILES,
				1007 AS LIBRARY_CACHE_HIT,
				1008 AS DICTIONARY_CACHE_HIT,
				1009 AS BUFFER_CACHE_HIT,
				1010 AS LATCH_HIT,
				1011 AS PARSE_CPU_TO_PARSE_ELAPSD,
				1012 AS DISK_SORT,
				1013 AS MEMORY_USAGE,
				1014 AS RESOURCE_LIMIT,
				1015 AS ALERT_LOG_ERROR,
				1016 AS ACTIVE_INCIDENT,
				1017 AS OUTSTANDING_ALERT,
				1018 AS DBMS_SCHEDULER_JOB_FAILED,
				1019 AS BACKGROUND_DUMP_SPACE,
				1020 AS ARCHIVE_LOG_SPACE,
				1021 AS ALERT_LOG_SPACE,
				1022 AS FRA_SPACE,
				1023 AS ASM_DISKGROUP_SPACE,
				1024 AS TABLESPACE,
				1025 AS RECYCLEBIN_OBJECT,
				1026 AS INVALID_OBJECT,
				1027 AS NOLOGGING_OBJECT,
				1028 AS PARALLEL_OBJECT,
				1029 AS UNUSABLE_INDEX,
				1030 AS CHAINED_ROWS,
				1031 AS CORRUPT_BLOCK,
				1032 AS SEQUENCE,
				1033 AS FOREIGNKEYS_WITHOUT_INDEX,
				1045 AS DISABLED_CONSTRAINT,
				1034 AS MISSING_OR_STALE_STATISTICS,
				1035 AS STATISTICS_LOCKED_TABLE,
				1036 AS LONG_RUNNING_OPERATION,
				1037 AS LONG_RUNNING_JOB)
			)
			ORDER BY ORDERING
		) B
		WHERE A.DBID = B.DBID
	</select>
	
	<select id="sqlTuningAdvisorList" parameterType="sqlAutoTuningRecommendation" resultType="sqlAutoTuningRecommendation">
		/* PreventiveCheckDao.sqlTuningAdvisorList */
		SELECT ROWNUM AS RNUM, RECOMMENDATION_REPORT
		FROM SQL_AUTO_TUNING_RECOMMENDATION
 		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
	</select>
	
	<select id="sgaAdvisorList" parameterType="sgaTargetAdvisor" resultType="sgaTargetAdvisor">
		/* PreventiveCheckDao.sgaAdvisorList */
		SELECT INST_ID, SGA_SIZE, SGA_SIZE_FACTOR, ESTD_DB_TIME, ESTD_DB_TIME_FACTOR, ESTD_PHYSICAL_READS 
		FROM SGA_TARGET_ADVISOR
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, SGA_SIZE	
	</select>
	
	<select id="bufferCacheAdvisorList" parameterType="dbCacheAdvisor" resultType="dbCacheAdvisor">
		/* PreventiveCheckDao.bufferCacheAdvisorList */
		SELECT INST_ID, ID, NAME, BLOCK_SIZE, SIZE_FOR_ESTIMATE, SIZE_FACTOR, BUFFERS_FOR_ESTIMATE, ESTD_PHYSICAL_READ_FACTOR, 
			ESTD_PHYSICAL_READS, ESTD_CLUSTER_READ_TIME, ESTD_PHYSICAL_READ_TIME, ESTD_PCT_OF_DB_TIME_FOR_READS, ESTD_CLUSTER_READS 
		FROM DB_CACHE_ADVISOR
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, ID, NAME, SIZE_FOR_ESTIMATE
	</select>
	
	<select id="sharedPoolAdvisorList" parameterType="sharedPoolAdvisor" resultType="sharedPoolAdvisor">
		/* PreventiveCheckDao.sharedPoolAdvisorList */
		SELECT INST_ID, SHARED_POOL_SIZE_FOR_ESTIMATE, SHARED_POOL_SIZE_FACTOR, ESTD_LC_SIZE, ESTD_LC_MEMORY_OBJECTS, 
			ESTD_LC_TIME_SAVED, ESTD_LC_TIME_SAVED_FACTOR, ESTD_LC_LOAD_TIME, ESTD_LC_LOAD_TIME_FACTOR, ESTD_LC_MEMORY_OBJECT_HITS 
		FROM SHARED_POOL_ADVISOR
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, SHARED_POOL_SIZE_FOR_ESTIMATE	
	</select>
	
	<select id="pgaAdvisorList" parameterType="pgaTargetAdvisor" resultType="pgaTargetAdvisor">
		/* PreventiveCheckDao.pgaAdvisorList */
		SELECT INST_ID, PGA_TARGET_FOR_ESTIMATE, PGA_TARGET_FACTOR, BYTES_PROCESSED, ESTD_TIME, ESTD_EXTRA_BYTES_RW, 
			ESTD_PGA_CACHE_HIT_PERCENTAGE, ESTD_OVERALLOC_COUNT 
		FROM PGA_TARGET_ADVISOR
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, PGA_TARGET_FOR_ESTIMATE	
	</select>
	
	<select id="segmentAdvisorList" parameterType="segmentAdvisor" resultType="segmentAdvisor">
		/* PreventiveCheckDao.segmentAdvisorList */
		SELECT TASK_NAME, TASK_START_DT, SEGMENT_TYPE, OWNER, SEGMENT_NAME, PARTITION_NAME, MESSAGE, MORE_INFO 
		FROM SEGMENT_ADVISOR
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY TASK_NAME	
	</select>
	
	<select id="healthMonitorList" parameterType="hmRecommendation" resultType="hmRecommendation">
		/* PreventiveCheckDao.healthMonitorList */
		SELECT INST_ID, RECOMMENDATION_ID, NAME, TYPE, STATUS, DESCRIPTION, REPAIR_SCRIPT, TIME_DETECTED 
		FROM HM_RECOMMENDATION A,
		(
			SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
			FROM DB_CHECK_EXEC
			WHERE CHECK_DAY = #{check_day} 
			AND CHECK_SEQ = #{check_seq}
		) B
		WHERE DBID = #{dbid}
		AND TIME_DETECTED <![CDATA[ > ]]> BEGIN_CHECK_DT AND TIME_DETECTED <![CDATA[ <= ]]> END_CHECK_DT
		ORDER BY INST_ID, RECOMMENDATION_ID	
	</select>	
	
	<select id="databaseStatusList" parameterType="databaseDsbCheck" resultType="databaseDsbCheck">
		/* PreventiveCheckDao.databaseStatusList */
		SELECT INST_ID, DB_NAME, LOG_MODE, OPEN_MODE, PLATFORM_NAME
		FROM DATABASE_DSB_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND OPEN_MODE <![CDATA[<]]>> 'READ WRITE'
		ORDER BY INST_ID
	</select>
	
	<select id="expiredGraceAccountList" parameterType="dbUserCheck" resultType="dbUserCheck">
		/* PreventiveCheckDao.expiredGraceAccountList */
		SELECT USERNAME, ACCOUNT_STATUS, EXPIRY_DATE, CREATED, PASSWORD_EXPIRY_REMAIN_TIME, PASSWORD_GRACE_TIME
		FROM DB_USER_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY USERNAME
	</select>
	
	<select id="modifiedParameterList" parameterType="parameterChangeCheck" resultType="parameterChangeCheck">
		/* PreventiveCheckDao.modifiedParameterList */
		SELECT INST_ID
			, NUM
			, NAME
			, BEFORE_VALUE                                              /* 변경전 VALUE */
			, VALUE                                                     /* 변경후 VALUE */
			, TO_CHAR(CHG_DT, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE   /* 변경일시     */
		FROM PARAMETER_CHANGE_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, NUM
	</select>
	
	<select id="newCreatedObjectList" parameterType="newCreateObjectCheck" resultType="newCreateObjectCheck">
		/* PreventiveCheckDao.newCreatedObjectList */
		SELECT OWNER, OBJECT_NAME, SUBOBJECT_NAME, OBJECT_TYPE, CREATED, LAST_DDL_TIME
		FROM NEW_CREATE_OBJECT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, OBJECT_NAME, SUBOBJECT_NAME
	</select>
	
	<select id="instanceStatusList" parameterType="instanceDsbCheck" resultType="instanceDsbCheck">
		/* PreventiveCheckDao.instanceStatusList */
		SELECT INST_ID, INST_NM, HOST_NM, VERSION, STARTUP_TIME, UP_TIME, STATUS, ARCHIVER
		FROM INSTANCE_DSB_CHECK
		WHERE CHECK_DAY = #{check_day}
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND STATUS <![CDATA[<]]>> 'OPEN'
		ORDER BY INST_ID
	</select>
	
	<select id="listenerStatusList" parameterType="listenerCheck" resultType="listenerCheck">
		/* PreventiveCheckDao.listenerStatusList */
		SELECT INST_ID, LISTENER_NM, STATUS
		FROM LISTENER_CHECK
		WHERE CHECK_DAY = #{check_day}
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND STATUS <![CDATA[<]]>> 'NORMAL'
		ORDER BY INST_ID, LISTENER_NM
	</select>
	
	<select id="dbfilesList" parameterType="dbFileCheck" resultType="dbFileCheck">
		/* PreventiveCheckDao.dbfilesList */
		SELECT INST_ID, PARAM_DB_FILE_CNT, CREATE_DB_FILE_CNT,
			ROUND((CREATE_DB_FILE_CNT/PARAM_DB_FILE_CNT*100), 2) CREATED_PERCENT
		FROM DB_FILE_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1006'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND (CREATE_DB_FILE_CNT/PARAM_DB_FILE_CNT*100) > B.THRESHOLD_VALUE
		ORDER BY INST_ID
	</select>
	
	<select id="resourceLimitList" parameterType="resourceLimitCheck" resultType="resourceLimitCheck">
		/* PreventiveCheckDao.resourceLimitList */
		SELECT A.INST_ID, RESOURCE_NM, MAX_UTILIZATION, LIMIT_VALUE, UTILIZATION_PERCENT
		FROM RESOURCE_LIMIT_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1014'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.UTILIZATION_PERCENT > B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="libraryCacheHitList" parameterType="instanceEfficiencyCheck" resultType="instanceEfficiencyCheck">
		/* PreventiveCheckDao.libraryCacheHitList */
		SELECT A.INST_ID, 
			ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE, 
			B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1007'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}	
		) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}	
		AND A.INST_EFFICIENCY_TYPE_CD = '01'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY INST_ID
	</select>
	
	<select id="dictionaryCacheHitList" parameterType="instanceEfficiencyCheck" resultType="instanceEfficiencyCheck">
		/* PreventiveCheckDao.dictionaryCacheHitList */
		SELECT A.INST_ID, 
			ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE, 
			B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1008'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}	
		) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '02'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="bufferCacheHitList" parameterType="instanceEfficiencyCheck" resultType="instanceEfficiencyCheck">
		/* PreventiveCheckDao.bufferCacheHitList */
		SELECT A.INST_ID, 
			ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE, 
			B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
    	(
    		SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1009'
     		AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}	
		) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '03'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="latchHitList" parameterType="instanceEfficiencyCheck" resultType="instanceEfficiencyCheck">
		/* PreventiveCheckDao.latchHitList */
		SELECT A.INST_ID, 
			ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE,
			B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1010'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}	
		) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '04'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="parseCpuToParseElapsdList" parameterType="instanceEfficiencyCheck" resultType="instanceEfficiencyCheck">
		/* PreventiveCheckDao.parseCpuToParseElapsdList */
		SELECT A.INST_ID, 
			ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE,
			B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1011'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}	
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '05'
		AND A.INST_EFFICIENCY_VALUE <![CDATA[<]]> B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="diskSortList" parameterType="instanceEfficiencyCheck" resultType="instanceEfficiencyCheck">
		/* PreventiveCheckDao.diskSortList */
		SELECT A.INST_ID, 
			ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE,
			B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1012'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}	
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '06'
		AND A.INST_EFFICIENCY_VALUE > B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="memoryUsageList" parameterType="instanceEfficiencyCheck" resultType="instanceEfficiencyCheck">
		/* PreventiveCheckDao.memoryUsageList */
		SELECT A.INST_ID, 
			ROUND(A.INST_EFFICIENCY_VALUE, 2) AS INST_EFFICIENCY_VALUE,
			B.THRESHOLD_VALUE
		FROM INSTANCE_EFFICIENCY_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1013'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}	
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.INST_EFFICIENCY_TYPE_CD = '07'
		AND A.INST_EFFICIENCY_VALUE > B.THRESHOLD_VALUE
		ORDER BY A.INST_ID
	</select>
	
	<select id="archiveLogSpaceList" parameterType="filesystemSpaceCheck" resultType="filesystemSpaceCheck">
		/* PreventiveCheckDao.archiveLogSpaceList */
		SELECT ROUND((A.TOTAL_SPACE_SIZE/1024/1024/1024), 2) TOTAL_SPACE_SIZE    /* TOTAL_SPACE(GB) */
			, ROUND((A.SPACE_USED/1024/1024/1024), 2) SPACE_USED                /* SPACE_USED(GB)  */
			, A.SPACE_USED_PERCENT                                              /* SPACE_USED(%)   */
			, B.THRESHOLD_PERCENT                                               /* THRESHOLD(%)    */
		FROM FILESYSTEM_SPACE_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1020'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.FILESYSTEM_TYPE_CD = '2' 
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
	</select>
	
	<select id="backgroundDumpSpaceList" parameterType="filesystemSpaceCheck" resultType="filesystemSpaceCheck">
		/* PreventiveCheckDao.backgroundDumpSpaceList */
		SELECT A.INST_ID                                                         /* INST_ID         */
			, ROUND((A.TOTAL_SPACE_SIZE/1024/1024/1024), 2) TOTAL_SPACE_SIZE    /* TOTAL_SPACE(GB) */
			, ROUND((A.SPACE_USED/1024/1024/1024), 2) SPACE_USED                /* SPACE_USED(GB)  */
			, A.SPACE_USED_PERCENT                                              /* SPACE_USED(%)   */
			, B.THRESHOLD_PERCENT                                               /* THRESHOLD(%)    */
		FROM FILESYSTEM_SPACE_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1019'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.FILESYSTEM_TYPE_CD = '1' 	
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
		ORDER BY A.INST_ID
	</select>
	
	<select id="alertLogSpaceList" parameterType="filesystemSpaceCheck" resultType="filesystemSpaceCheck">
		/* PreventiveCheckDao.alertLogSpaceList */
		SELECT A.INST_ID                                                         /* INST_ID         */
			, ROUND((A.TOTAL_SPACE_SIZE/1024/1024/1024), 2) TOTAL_SPACE_SIZE    /* TOTAL_SPACE(GB) */
			, ROUND((A.SPACE_USED/1024/1024/1024), 2) SPACE_USED                /* SPACE_USED(GB)  */
			, A.SPACE_USED_PERCENT                                              /* SPACE_USED(%)   */
			, B.THRESHOLD_PERCENT                                               /* THRESHOLD(%)    */
		FROM FILESYSTEM_SPACE_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1021'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.FILESYSTEM_TYPE_CD = '3' 
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
		ORDER BY A.INST_ID
	</select>
	
	<select id="fraSpaceList" parameterType="fraSpaceCheck" resultType="fraSpaceCheck">
		/* PreventiveCheckDao.fraSpaceList */
		SELECT A.NAME                                /* NAME            */
			, A.NUMBER_OF_FILES                     /* NUMBER_OF_FILES */
			, ROUND((A.SPACE_LIMIT/1024/1024/1024), 2) TOTAL_SPACE /* TOTAL_SPACE(GB) */
			, ROUND((A.SPACE_USED/1024/1024/1024), 2) SPACE_USED   /* SPACE_USED(GB) */
			, A.SPACE_RECLAIMABLE                   /* SPACE_RECLAIMABLE     */
			, A.CLAIM_BEFORE_USAGE_PERCENT          /* CLAIM_BEFORE_USAGE(%) */
			, A.CLAIM_AFTER_USAGE_PERCENT           /* CLAIM_AFTER_USAGE(%)  */
			, B.THRESHOLD_PERCENT                   /* THRESHOLD(%)          */
		FROM FRA_SPACE_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1022'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.CLAIM_BEFORE_USAGE_PERCENT > B.THRESHOLD_PERCENT
	</select>
	
	<select id="fraUsageList" parameterType="fraSpaceUsage" resultType="fraSpaceUsage">
		/* PreventiveCheckDao.fraUsageList */
		SELECT FILE_TYPE                        /* FILE_TYPE            */
			, PERCENT_SPACE_USED               /* SPACE_USED(%)        */
			, PERCENT_SPACE_RECLAIMABLE        /* SPACE_RECLAIMABLE(%) */
			, NUMBER_OF_FILES                  /* NUMBER_OF_FILES      */
		FROM FRA_SPACE_USAGE A
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND 0 <![CDATA[<]]>> (SELECT COUNT(*)
					FROM FRA_SPACE_CHECK A, 
						(SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
							FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
							WHERE A.CHECK_PREF_ID = '1022'
							AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
							AND B.DBID (+)= #{dbid}
						) B
					WHERE A.CHECK_DAY = #{check_day}
					AND A.CHECK_SEQ = #{check_seq}
					AND A.DBID = #{dbid}
					AND A.CLAIM_BEFORE_USAGE_PERCENT > B.THRESHOLD_PERCENT
				)
	</select>
	
	<select id="asmDiskgroupSpaceList" parameterType="asmDiskgroupCheck" resultType="asmDiskgroupCheck">
		/* PreventiveCheckDao.asmDiskgroupSpaceList */
		SELECT A.NAME
			, A.GROUP_NUMBER
			, A.STATE
			, ROUND(A.TOTAL_MB/1024, 2) TOTAL_SPACE  /* TOTAL_SPACE(GB) */
			, ROUND(A.FREE_MB/1024, 2) FREE_SPACE     /* FREE_SPACE(GB)   */
			, A.SPACE_USED_PERCENT                    /* SPACE_USED(%)    */
			, B.THRESHOLD_PERCENT                     /* THRESHOLD(%)     */
		FROM ASM_DISKGROUP_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1023'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
	</select>
	
	<select id="tablespaceList" parameterType="tablespaceCheck" resultType="tablespaceCheck">
		/* PreventiveCheckDao.tablespaceList */
		SELECT TABLESPACE_NAME
			, ROUND((SPACE_USED/1024), 2)  SPACE_USED /* SPACE_USED(GB) */
			, ROUND((TABLESPACE_SIZE/1024), 2) TABLESPACE_SIZE /* TABLESPACE_SIZE(GB) */
			, SPACE_USED_PERCENT            /* SPACE_USED(%)    */
			, B.THRESHOLD_PERCENT           /* THRESHOLD(%)     */
		FROM TABLESPACE_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_PERCENT
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1024'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day}
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.SPACE_USED_PERCENT > B.THRESHOLD_PERCENT
		ORDER BY TABLESPACE_NAME
	</select>
	
	<select id="getRecyclebinObjectCount" parameterType="recyclebinCheck" resultType="recyclebinCheck">
		/* PreventiveCheckDao.getRecyclebinObjectCount */
		SELECT COUNT(*) AS RECYCLEBIN_CNT, NVL(SUM(SPACE_USED),0) AS RECYCLEBIN_SIZE
		FROM RECYCLEBIN_CHECK
		WHERE CHECK_DAY = #{check_day}
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
	</select>
	
	<select id="recyclebinObjectList" parameterType="recyclebinCheck" resultType="recyclebinCheck">
		/* PreventiveCheckDao.recyclebinObjectList */
		SELECT OWNER
			, OBJECT_NAME
			, ORIGINAL_NAME
			, OPERATION
			, TYPE
			, TS_NAME
			, CREATETIME
			, DROPTIME
			, SPACE AS BLOCKS
			, ROUND(SPACE_USED/1024, 2) AS SPACE_USED      /* SPACE_USED(GB) */
		FROM RECYCLEBIN_CHECK
		WHERE CHECK_DAY = #{check_day}
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, ORIGINAL_NAME
	</select>
	
	<select id="invalidObjectList" parameterType="objectCheck" resultType="objectCheck">
		/* PreventiveCheckDao.invalidObjectList */
		SELECT OWNER, OBJECT_NAME, OBJECT_TYPE, 
			(CASE 
				WHEN OBJECT_TYPE LIKE '%PACKAGE%' THEN 'ALTER PACKAGE '||OWNER||'.'||OBJECT_NAME||' COMPILE;'
				WHEN OBJECT_TYPE LIKE '%TYPE%' THEN 'ALTER TYPE '||OWNER||'.'||OBJECT_NAME||' COMPILE SPECIFICATION;'
				WHEN OBJECT_TYPE ='SYNONYM' THEN 'ALTER PUBLIC SYNONYM '||OBJECT_NAME||' COMPILE;'
				WHEN OBJECT_TYPE NOT IN ('PACKAGE','PACKAGE BODY','SYNONYM','TYPE','TYPE BODY') THEN 'ALTER '||OBJECT_TYPE||' '||OWNER||'.'||OBJECT_NAME||' COMPILE;'
			END) SCRIPT
		FROM OBJECT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND OBJECT_CHECK_TYPE_CD = '1'
		ORDER BY OWNER, OBJECT_NAME
	</select>
	
	<select id="nologgingObjectList" parameterType="objectCheck" resultType="objectCheck">
		/* PreventiveCheckDao.nologgingObjectList */
    SELECT OWNER, OBJECT_NAME, OBJECT_TYPE, PARTITION_NAME, SUBPARTITION_NAME,
         (CASE 
            WHEN OBJECT_TYPE LIKE 'TABLE%' THEN 
                CASE 
                     WHEN SUBPARTITION_NAME IS NOT NULL THEN 'ALTER TABLE ' || OWNER || '.' || OBJECT_NAME || ' MODIFY SUBPARTITION '|| SUBPARTITION_NAME ||' LOGGING;'
                     WHEN PARTITION_NAME IS NOT NULL THEN 'ALTER TABLE ' || OWNER || '.' || OBJECT_NAME || ' MODIFY PARTITION '|| PARTITION_NAME ||' LOGGING;'
                     ELSE 'ALTER TABLE '||OWNER||'.'||OBJECT_NAME||' LOGGING;'
                 END
            WHEN OBJECT_TYPE LIKE 'INDEX%' THEN 
                 CASE 
                     WHEN SUBPARTITION_NAME IS NOT NULL THEN 'ALTER INDEX ' || OWNER || '.' || OBJECT_NAME || ' MODIFY SUBPARTITION '|| SUBPARTITION_NAME ||' LOGGING;'
                     WHEN PARTITION_NAME IS NOT NULL THEN 'ALTER INDEX ' || OWNER || '.' || OBJECT_NAME || ' MODIFY PARTITION '|| PARTITION_NAME ||' LOGGING;'
                     ELSE 'ALTER INDEX '||OWNER||'.'||OBJECT_NAME||' LOGGING;'
                 END
         END) SCRIPT
      FROM OBJECT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND OBJECT_CHECK_TYPE_CD = '2'
		ORDER BY OWNER, OBJECT_NAME, PARTITION_NAME, SUBPARTITION_NAME
	</select>
	
	<select id="parallelObjectList" parameterType="objectCheck" resultType="objectCheck">
		/* PreventiveCheckDao.parallelObjectList */
      SELECT OWNER, OBJECT_NAME, OBJECT_TYPE, PARTITION_NAME, SUBPARTITION_NAME,
         (CASE 
            WHEN OBJECT_TYPE LIKE 'TABLE%' THEN 
                CASE 
                     WHEN SUBPARTITION_NAME IS NOT NULL THEN 'ALTER TABLE ' || OWNER || '.' || OBJECT_NAME || ' MOVE SUBPARTITION '|| SUBPARTITION_NAME ||' NOPARALLEL;'
                     WHEN PARTITION_NAME IS NOT NULL THEN 'ALTER TABLE ' || OWNER || '.' || OBJECT_NAME || ' MOVE PARTITION '|| PARTITION_NAME ||' NOPARALLEL;'
                     ELSE 'ALTER TABLE '||OWNER||'.'||OBJECT_NAME||' NOPARALLEL;'
                 END
            WHEN OBJECT_TYPE LIKE 'INDEX%' THEN 
                 CASE 
                     WHEN SUBPARTITION_NAME IS NOT NULL THEN 'ALTER INDEX ' || OWNER || '.' || OBJECT_NAME || ' MOVE SUBPARTITION '|| SUBPARTITION_NAME ||' NOPARALLEL;'
                     WHEN PARTITION_NAME IS NOT NULL THEN 'ALTER INDEX ' || OWNER || '.' || OBJECT_NAME || ' MOVE PARTITION '|| PARTITION_NAME ||' NOPARALLEL;'
                     ELSE 'ALTER INDEX '||OWNER||'.'||OBJECT_NAME||' NOPARALLEL;'
                 END
         END) SCRIPT
      FROM OBJECT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		AND OBJECT_CHECK_TYPE_CD = '3'
		ORDER BY OWNER, OBJECT_NAME, PARTITION_NAME, SUBPARTITION_NAME
	</select>
	
	<select id="unusableIndexList" parameterType="unusableIndexCheck" resultType="unusableIndexCheck">
		/* PreventiveCheckDao.unusableIndexList */
		SELECT OWNER, TABLE_NAME, INDEX_NAME, 'ALTER INDEX '||OWNER||'.'||INDEX_NAME||' REBUILD;' SCRIPT
		FROM UNUSABLE_INDEX_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, INDEX_NAME
	</select>
	
	<select id="corruptBlockList" parameterType="blockCorruptionCheck" resultType="blockCorruptionCheck">
		/* PreventiveCheckDao.corruptBlockList */
		SELECT FILE# AS FILES, FILE_NAME, BLOCK# AS BLOCK, BLOCKS, CORRUPTION_CHANGE# AS CORRUPTION_CHANGE, CORRUPTION_TYPE 
		FROM BLOCK_CORRUPTION_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, FILES
	</select>
	
	<select id="sequenceList" parameterType="sequenceCheck" resultType="sequenceCheck">
		/* PreventiveCheckDao.sequenceList */
		SELECT SEQUENCE_OWNER, SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, INCREMENT_BY, CYCLE_FLAG, ORDER_FLAG, CACHE_SIZE, LAST_NUMBER 
		FROM SEQUENCE_CHECK A, 
		(
			SELECT NVL(B.THRESHOLD_VALUE, A.DEFAULT_THRESHOLD_VALUE) AS THRESHOLD_VALUE
			FROM BASIC_CHECK_CONFIG A, DB_CHECK_CONFIG B
			WHERE A.CHECK_PREF_ID = '1032'
			AND A.CHECK_PREF_ID = B.CHECK_PREF_ID(+)
			AND B.DBID (+)= #{dbid}
		) B
		WHERE A.CHECK_DAY = #{check_day} 
		AND A.CHECK_SEQ = #{check_seq}
		AND A.DBID = #{dbid}
		AND A.USED_PERCENT > B.THRESHOLD_VALUE
		ORDER BY SEQUENCE_OWNER, SEQUENCE_NAME
	</select>
	
	<select id="foreignkeysWithoutIndexList" parameterType="fkIndexCheck" resultType="fkIndexCheck">
		/* PreventiveCheckDao.foreignkeysWithoutIndexList */
		SELECT OWNER, TABLE_NAME, CONSTRAINT_NAME, INDEX_COLUMN_NAME 
		FROM FK_INDEX_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, CONSTRAINT_NAME, INDEX_COLUMN_NAME
	</select>
	
	<select id="disabledConstraintList" parameterType="constraintCheck" resultType="constraintCheck">
		/* PreventiveCheckDao.disabledConstraintList */
		SELECT OWNER, TABLE_NAME, CONSTRAINT_NAME, CONSTRAINT_TYPE 
		FROM CONSTRAINT_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, CONSTRAINT_NAME
	</select>
	
	<select id="chainedRowsList" parameterType="chainedRowCheck" resultType="chainedRowCheck">
		/* PreventiveCheckDao.chainedRowsList */
		SELECT OWNER, TABLE_NAME, TABLESPACE_NAME, NUM_ROWS, CHAIN_CNT
		, ROUND(CHAIN_PERCENT,2) CHAIN_PERCENT
		FROM CHAINED_ROW_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, TABLESPACE_NAME
	</select>
	
	<sql id="missingOrStaleStatisticsRefId">
		/* PreventiveCheckDao.missingOrStaleStatisticsRefId */
		SELECT OWNER
		     , TABLE_NAME
		     , PARTITION_NAME
		     , PARTITIONED
		     , TRIM(TO_CHAR(NVL(INSERTS,0), '999,999,999,999,999')) INSERTS
		     , TRIM(TO_CHAR(NVL(UPDATES,0), '999,999,999,999,999')) UPDATES
		     , TRIM(TO_CHAR(NVL(DELETES,0), '999,999,999,999,999')) DELETES
		     , TRUNCATED
		     , TO_CHAR(TIMESTAMP,'YYYY-MM-DD HH24:MI:SS') TIMESTAMP
		     , NVL(CHANGE_PERCENT,0) CHANGE_PERCENT
		     , TRIM(TO_CHAR(NVL(NUM_ROWS,0), '999,999,999,999,999')) NUM_ROWS
		     , TO_CHAR(LAST_ANALYZED,'YYYY-MM-DD HH24:MI:SS') LAST_ANALYZED
		  FROM TABLE_STATISTICS_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, PARTITION_NAME
	</sql>
	
	<select id="missingOrStaleStatisticsList" parameterType="tableStatisticsCheck" resultType="tableStatisticsCheck">
		/* PreventiveCheckDao.missingOrStaleStatisticsList */
		<include refid="missingOrStaleStatisticsRefId"/>
	</select>

	<select id="missingOrStaleStatisticsList4Excel" parameterType="tableStatisticsCheck" resultType="java.util.LinkedHashMap">
		/* PreventiveCheckDao.missingOrStaleStatisticsList4Excel */
		<include refid="missingOrStaleStatisticsRefId"/>
	</select>
	<!-- PARTITION_NAME,SUBPARTITION_NAME 추가, 20190716 -->
	<select id="statisticsLockedTableList" parameterType="tableStatisticsLockCheck" resultType="tableStatisticsLockCheck">
		/* PreventiveCheckDao.statisticsLockedTableList */
		SELECT OWNER, TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME, OBJECT_TYPE, LAST_ANALYZED, STATTYPE_LOCKED 
		FROM TABLE_STATISTICS_LOCK_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY OWNER, TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME
	</select>
	
	<select id="longRunningOperationList" parameterType="longRunningOperationCheck" resultType="longRunningOperationCheck">
		/* PreventiveCheckDao.longRunningOperationList */
		SELECT INST_ID, SID, SERIAL#, START_TIME, LAST_UPDATE_TIME, ELAPSED_MINUTE, REMAINING_MINUTE, DONE_PERCENT, MESSAGE, 
			SQL_ID, SQL_PLAN_HASH_VALUE, DBMS_LOB.SUBSTR(SQL_TEXT, 100, 1) AS SQL_TEXT
		FROM LONG_RUNNING_OPERATION_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, SID, SERIAL#
	</select>
	
	<select id="longRunningJobList" parameterType="longRunningSchedulerCheck" resultType="longRunningSchedulerCheck">
		/* PreventiveCheckDao.longRunningJobList */
		SELECT SESSION_ID, OWNER, JOB_NAME, ELAPSED_TIME, CPU_USED, SLAVE_PROCESS_ID, RUNNING_INSTANCE 
		FROM LONG_RUNNING_SCHEDULER_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY SESSION_ID, OWNER, JOB_NAME
	</select>
	
	<select id="alertLogErrorList" parameterType="alertErrorCheck" resultType="alertErrorCheck">
		/* PreventiveCheckDao.alertLogErrorList */
		SELECT INST_ID, ERROR_CD, ERROR_CNT 
		FROM ALERT_ERROR_CHECK
		WHERE CHECK_DAY = #{check_day} 
		AND CHECK_SEQ = #{check_seq}
		AND DBID = #{dbid}
		ORDER BY INST_ID, ERROR_CD
	</select>
	
	<select id="activeIncidentProblemList" parameterType="diagProblem" resultType="diagProblem">
		/* PreventiveCheckDao.activeIncidentProblemList */
		SELECT INST_ID, PROBLEM_ID, PROBLEM_KEY, FIRST_INCIDENT, FIRSTINC_TIME, LAST_INCIDENT, LASTINC_TIME, 
			IMPACT1, IMPACT2, IMPACT3, IMPACT4, SERVICE_REQUEST, BUG_NUMBER 
		FROM DIAG_PROBLEM A,
		(
			SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
			FROM DB_CHECK_EXEC
			WHERE CHECK_DAY = #{check_day} 
			AND CHECK_SEQ = #{check_seq}
		) B
		WHERE DBID = #{dbid}
		AND LASTINC_TIME <![CDATA[ > ]]> BEGIN_CHECK_DT AND LASTINC_TIME <![CDATA[ <= ]]> END_CHECK_DT
		ORDER BY INST_ID, PROBLEM_ID	
	</select>
	
	<select id="activeIncidentIncidentList" parameterType="diagIncident" resultType="diagIncident">
		/* PreventiveCheckDao.activeIncidentIncidentList */
		SELECT INST_ID, INCIDENT_ID, PROBLEM_ID, CREATE_TIME, CLOSE_TIME, STATUS, FLOOD_CONTROLLED, ERROR_FACILITY, 
			ERROR_NUMBER, ERROR_ARG1, ERROR_ARG2, ERROR_ARG3, ERROR_ARG4, ERROR_ARG5, ERROR_ARG6, ERROR_ARG7, ERROR_ARG8,
			ERROR_ARG9, ERROR_ARG10, ERROR_ARG11, ERROR_ARG12, SIGNALLING_COMPONENT, SIGNALLING_SUBCOMPONENT, 
			SUSPECT_COMPONENT, SUSPECT_SUBCOMPONENT, ECID, IMPACT
		FROM DIAG_INCIDENT A,
		(
			SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
			FROM DB_CHECK_EXEC
			WHERE CHECK_DAY = #{check_day} 
			AND CHECK_SEQ = #{check_seq}
		) B
		WHERE DBID = #{dbid}
		AND CREATE_TIME <![CDATA[ > ]]> BEGIN_CHECK_DT AND CREATE_TIME <![CDATA[ <= ]]> END_CHECK_DT
		ORDER BY INST_ID, INCIDENT_ID	
	</select>
	
	<select id="outstandingAlertList" parameterType="outstandingAlerts" resultType="outstandingAlerts">
		/* PreventiveCheckDao.outstandingAlertList */
		SELECT SEQUENCE_ID, REASON_ID, OWNER, OBJECT_NAME, SUBOBJECT_NAME, OBJECT_TYPE, REASON, TIME_SUGGESTED, CREATION_TIME, SUGGESTED_ACTION,
			ADVISOR_NAME, METRIC_VALUE, MESSAGE_TYPE, MESSAGE_GROUP, MESSAGE_LEVEL, HOSTING_CLIENT_ID, MODULE_ID, PROCESS_ID, HOST_ID, HOST_NW_ADDR,
			INSTANCE_NAME, INSTANCE_NUMBER, USER_ID, EXECUTION_CONTEXT_ID, ERROR_INSTANCE_ID 
		FROM OUTSTANDING_ALERTS A,
		(
			SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
			FROM DB_CHECK_EXEC
			WHERE CHECK_DAY = #{check_day} 
			AND CHECK_SEQ = #{check_seq}
		) B
		WHERE DBID = #{dbid}
		AND TIME_SUGGESTED <![CDATA[ > ]]> BEGIN_CHECK_DT AND TIME_SUGGESTED <![CDATA[ <= ]]> END_CHECK_DT
		ORDER BY SEQUENCE_ID	
	</select>
	
	<select id="dbmsSchedulerJobFailedList" parameterType="schedulerJobFailedCheck" resultType="schedulerJobFailedCheck">
		/* PreventiveCheckDao.dbmsSchedulerJobFailedList */
		SELECT INST_ID, LOG_ID, LOG_DATE, OWNER, JOB_NAME, JOB_SUBNAME, STATUS, ERROR#, REQ_START_DATE, ACTUAL_START_DATE, RUN_DURATION,
			SESSION_ID, SLAVE_PID, CPU_USED, CREDENTIAL_OWNER, CREDENTIAL_NAME, DESTINATION_OWNER, DESTINATION, ADDITIONAL_INFO, ERRORS, OUTPUT 
		FROM SCHEDULER_JOB_FAILED_CHECK A,
		(
			SELECT CHECK_DT-1 AS BEGIN_CHECK_DT, CHECK_DT AS END_CHECK_DT
			FROM DB_CHECK_EXEC
			WHERE CHECK_DAY = #{check_day} 
			AND CHECK_SEQ = #{check_seq}
		) B
		WHERE DBID = #{dbid}
		AND LOG_DATE <![CDATA[ > ]]> BEGIN_CHECK_DT AND LOG_DATE <![CDATA[ <= ]]> END_CHECK_DT
		ORDER BY INST_ID, LOG_ID	
	</select>

	<select id="saveDbCheckException" parameterType="dbCheckException" resultType="int">
		/* PreventiveCheckDao.saveDbCheckException */
		INSERT INTO DB_CHECK_EXCEPTION (
		    DBID,
		    CHECK_PREF_ID,
		    CHECK_OBJECT_SEQ,
		    INST_ID,
		    OWNER,
		    CHECK_EXCEPT_OBJECT_NAME_1,
		    CHECK_EXCEPT_OBJECT_NAME_2,
		    CHECK_EXCEPT_OBJECT_NAME_3,
		    EXCEPT_PROCESSOR_ID,
		    EXCEPT_PROCESS_DT
		) VALUES (
		    #{dbid},
		    #{check_pref_id},
		    #{check_object_seq},
		    #{inst_id},
		    #{owner},
		    #{check_except_object_name_1},
		    #{check_except_object_name_2},
		    #{check_except_object_name_3},
		    #{except_processor_id},
		    #{except_process_dt}
		)		
	</select>

</mapper>