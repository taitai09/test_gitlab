<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  
	2021.08.25	이재우	최초작성
-->
<mapper namespace="omc.spop.dao.RunSQLPerformanceChangeTrackingDao">
	<select id="getInitialFinalDistributionDate" parameterType="performanceCheckSql" resultType="performanceCheckSql">
		/* RunSQLPerformanceChangeTrackingDao.getInitialFinalDistributionDate */
		/* 
		   최초 최종 배포일 조회
		  - 전체 업무에서 최종 배포일
		*/
		SELECT TO_CHAR(MAX(DEPLOY_COMPLETE_DT), 'MM/DD') AS DEPLOY_COMPLETE_DT
		FROM DEPLOY_PERF_CHK
		WHERE DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
	</select>
	
	<select id="getConditionFinalDistributionDate" parameterType="performanceCheckSql" resultType="performanceCheckSql">
		/* RunSQLPerformanceChangeTrackingDao.getConditionFinalDistributionDate */
		/* 
		  최종 배포일 
		  - 조회조건 범위내에서 가장 최근에 배포한 일자
		*/
		SELECT TO_CHAR(MAX(DEPLOY_COMPLETE_DT), 'MM/DD') AS DEPLOY_COMPLETE_DT
		FROM DEPLOY_PERF_CHK
		WHERE DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
		AND DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
		AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
		
		<if test="wrkjob_cd != null and wrkjob_cd != ''">
			/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
			AND WRKJOB_CD IN ( SELECT WRKJOB_CD
								FROM WRKJOB_CD
								START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
								CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
		</if>
	</select>
	
	<sql id="loadPerformanceVerifySqlRefId">
		/* RunSQLPerformanceChangeTrackingDao.loadPerformanceVerifySqlRefId */
		/* 그리드 */
		WITH 
		-- 대용량 기준건수 
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
						, DATABASE DB
					WHERE PREF_ID IN (12004)) A
				, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
							WHERE PREF_ID IN (12004)
						)
					WHERE PREF_SEQ = MAX_PREF_SEQ
					) B
			WHERE A.DBID = B.DBID(+)
			AND A.PREF_ID = B.PREF_ID(+)
		)
		, TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.*
			     , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_BIG_TABLE_FULLSCAN_YN
			     , FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_PART_ACCESS_ALL_YN
			     , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_ELAPSED_TIME
			     , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
			            FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) PRD_BUFFER_GETS
			     , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_ROWS_PROCESSED
			     , ROW_NUMBER() OVER(PARTITION BY A.WRKJOB_CD ORDER BY A.PROGRAM_ID) WRKJOB_CD_RANK
			  FROM (
					SELECT A.WRKJOB_CD
					     , A.TOP_WRKJOB_CD
					     , A.WRKJOB_LVL
					     , A.PROGRAM_ID
					     , A.EXCEPTION_PRC_METH_CD
					     , A.ELAPSED_TIME_THRESHOLD
					     , A.BUFFER_GETS_THRESHOLD
					     , A.ROWS_PROCESSED_THRESHOLD 
					     , A.FULL_SCAN_DECIDE_DIV_CD
					     , A.PARTITION_DECIDE_DIV_CD
					     , A.ELAPSED_TIME_APPLY_YN
					     , A.BUFFER_GETS_APPLY_YN
					     , A.ROWS_PROCESSED_APPLY_YN
					     , A.FULL_SCAN_APPLY_YN
					     , A.PARTITION_APPLY_YN
					     , A.ELAPSED_TIME_USE_YN
					     , A.BUFFER_GETS_USE_YN
					     , A.ROWS_PROCESSED_USE_YN
					     , A.FULL_SCAN_USE_YN
					     , A.PARTITION_USE_YN
					     , A.TEST_ELAPSED_TIME
					     , A.TEST_BUFFER_GETS
					     , A.TEST_FULL_SCAN_YN
					     , A.PERF_CHECK_ID
					     , A.DBID  
					     , A.DBIO
					     , A.DEPLOY_COMPLETE_DT
					     , COUNT(*) OVER(PARTITION BY WRKJOB_CD) DEPLOY_SQL_CNT
					  FROM (
							SELECT A.PERF_CHECK_ID
							     , A.PERF_CHECK_STEP_ID
							     , A.PROGRAM_ID
							     , A.DBIO
							     , A.DBID
							     , A.TOP_WRKJOB_CD
							     , A.WRKJOB_CD
							     , A.WRKJOB_LVL
							     , EXCEPTION_PRC_METH_CD
							     , DEPLOY_COMPLETE_DT
							     , ELAPSED_TIME_THRESHOLD
							     , BUFFER_GETS_THRESHOLD
							     , ROWS_PROCESSED_THRESHOLD
							     , FULL_SCAN_DECIDE_DIV_CD
							     , PARTITION_DECIDE_DIV_CD 
							     , TEST_ELAPSED_TIME
							     , DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) TEST_BUFFER_GETS
							     , TEST_FULL_SCAN_YN
							     , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
							     , A.ELAPSED_TIME_APPLY_YN
							     , A.BUFFER_GETS_APPLY_YN
							     , A.ROWS_PROCESSED_APPLY_YN
							     , A.FULL_SCAN_APPLY_YN
							     , A.PARTITION_APPLY_YN
							     , A.ELAPSED_TIME_USE_YN
							     , A.BUFFER_GETS_USE_YN
							     , A.ROWS_PROCESSED_USE_YN
							     , A.FULL_SCAN_USE_YN
							     , A.PARTITION_USE_YN
							  FROM (
									SELECT A.PERF_CHECK_ID
									     , I.DBID 
									     , B.TOP_WRKJOB_CD
									     , A.WRKJOB_CD 
									     , B.WRKJOB_LVL
									     , C.PROGRAM_ID
									     , D.DBIO
									     , B.PERF_CHECK_STEP_ID
									     , E.PROGRAM_EXECUTE_TMS
									     , C.EXCEPTION_PRC_METH_CD
									     , A.DEPLOY_COMPLETE_DT
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN INDC_PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD   
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN INDC_YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD 
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
									     , COUNT(*) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN J.INDC_APPLY_YN  END) AS ELAPSED_TIME_APPLY_YN   
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN J.INDC_APPLY_YN END) AS BUFFER_GETS_APPLY_YN    
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN J.INDC_APPLY_YN END) AS ROWS_PROCESSED_APPLY_YN 
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN J.INDC_APPLY_YN END) AS FULL_SCAN_APPLY_YN       
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN J.INDC_APPLY_YN END) AS PARTITION_APPLY_YN      
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN K.INDC_USE_YN   END) AS ELAPSED_TIME_USE_YN   
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN K.INDC_USE_YN   END) AS BUFFER_GETS_USE_YN    
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN K.INDC_USE_YN   END) AS ROWS_PROCESSED_USE_YN 
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN K.INDC_USE_YN   END) AS FULL_SCAN_USE_YN       
									     , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN K.INDC_USE_YN   END) AS PARTITION_USE_YN      
									  FROM DEPLOY_PERF_CHK A
									    -- 업무별 최종 단계
									     , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
									        FROM (SELECT DBID
									                   , WRKJOB_CD
									                   , PERF_CHECK_STEP_ID
									                   , PERF_CHECK_EVALUATION_METH_CD
									                   , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
									                FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
									               WHERE A.DEL_YN = 'N'
									             ) A
									            , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
									                FROM WRKJOB_CD
									                WHERE USE_YN = 'Y'
									                START WITH UPPER_WRKJOB_CD IS NULL
									                CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
									        WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
									        AND A.RNUM(+) = 1) B
									    , DEPLOY_PERF_CHK_TARGET_PGM C
									    , DEPLOY_PERF_CHK_ALL_PGM D
									    , DEPLOY_PERF_CHK_DETAIL_RESULT E
									    , WRKJOB_DB H  
									    , DATABASE I   
									    , WJ_PERF_CHK_INDC J  -- 업무별성능점검지표내역 
									    , DEPLOY_PERF_CHK_INDC K  -- 배포성능점검지표기본 
									    , DEPLOY_PERF_CHK_RESULT L -- 배포성능점검결과내역
									WHERE A.WRKJOB_CD = B.WRKJOB_CD
									  AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
									  AND C.PROGRAM_ID = D.PROGRAM_ID
									  AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
									  AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
									  AND C.PROGRAM_ID = E.PROGRAM_ID
									  AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
									  AND A.WRKJOB_CD = H.WRKJOB_CD   
									  AND H.DBID = I.DBID             
									  AND I.DB_OPERATE_TYPE_CD = '3'  -- DB운영유형코드 1:개발, 2:테스트, 3:운영
									  AND A.WRKJOB_CD = J.WRKJOB_CD                   
									  AND E.PERF_CHECK_INDC_ID = J.PERF_CHECK_INDC_ID 
									  AND J.PERF_CHECK_PROGRAM_DIV_CD = 'S'           
									  AND J.PERF_CHECK_INDC_ID = K.PERF_CHECK_INDC_ID 
									  
									  AND L.PERF_CHECK_ID = E.PERF_CHECK_ID
									  AND L.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
									  AND L.PROGRAM_ID = E.PROGRAM_ID
									  AND L.PROGRAM_EXECUTE_TMS = E.PROGRAM_EXECUTE_TMS
									  AND L.PERF_CHECK_EVALUATION_METH_CD = B.PERF_CHECK_EVALUATION_METH_CD  -- 성능검증대상 회차(평균 또는 최대 성능을 관리하는 회차)
											
									  -- 1:SQL수행시간(초), 2:블럭수, 3: 처리건수, 5:대용량 테이블 Full Scan 여부, 6: 대용량 테이블 Full Scan 여부
									  AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  -- JMG : 20210129
									  AND E.PERF_CHECK_RESULT_DIV_CD <![CDATA[<>]]> 'C'  --> 오류건 제외
									  /* 날짜 검색 */
									  AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
									  AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
									
									<if test="wrkjob_cd != null and wrkjob_cd != ''">
									/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
									  AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
															 FROM WRKJOB_CD
															START WITH WRKJOB_CD = #{wrkjob_cd} --'20000'
														  CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
									</if>
									
									GROUP BY A.PERF_CHECK_ID
										, I.DBID 
										, B.TOP_WRKJOB_CD
										, A.WRKJOB_CD
										, B.WRKJOB_LVL
										, C.PROGRAM_ID
										, D.DBIO
										, B.PERF_CHECK_STEP_ID
										, E.PROGRAM_EXECUTE_TMS
										, C.EXCEPTION_PRC_METH_CD
										, A.DEPLOY_COMPLETE_DT
								 ) A
							) A 
					 WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
					   AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL 제외 시킴
					) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
				
			   -- 테스트 데이터가 나오지 않아서 주석처리함 ==> 주석을 풀어야함
			   AND C.LAST_ACTIVE_TIME <![CDATA[>=]]> A.DEPLOY_COMPLETE_DT
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME) 
									FROM VSQL_TEXT VS 
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID)
		)
		, TMP_WRKJOB AS
		(
			SELECT WRKJOB_CD
				, UPPER_WRKJOB_CD
				, CONNECT_BY_ROOT WRKJOB_CD AS TOP_WRKJOB_CD
				, (CASE WHEN LEVEL = 1 THEN '-1' ELSE CONNECT_BY_ROOT WRKJOB_CD END) AS PARENT_ID
				, (CASE WHEN LEVEL = 1 THEN '-1' ELSE CONNECT_BY_ROOT WRKJOB_CD END) AS "_parentId"
				, (CASE 
						WHEN LEVEL = 1 THEN WRKJOB_CD_NM 
						ELSE SUBSTR(SYS_CONNECT_BY_PATH(WRKJOB_CD_NM, '/'), LENGTH('/'||CONNECT_BY_ROOT WRKJOB_CD_NM||'/')+1)
					END) AS WRKJOB_CD_NM
				, LEVEL LVL
			FROM (SELECT WRKJOB_CD
					   , UPPER_WRKJOB_CD
					   , REPLACE(WRKJOB_CD_NM, '/', ',') WRKJOB_CD_NM
					   , USE_YN
					   , DEPLOY_CHECK_TARGET_YN
					FROM WRKJOB_CD)
			WHERE USE_YN = 'Y'
			AND DEPLOY_CHECK_TARGET_YN = 'Y'
			START WITH UPPER_WRKJOB_CD IS NULL
			CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
		)
		SELECT WRKJOB_CD_NM, WRKJOB_CD_NM_EXCEL, WRKJOB_CD
			, (CASE WHEN TOP_WRKJOB_CD IS NULL THEN '-1' ELSE TOP_WRKJOB_CD END) PARENT_ID
			, (CASE WHEN TOP_WRKJOB_CD IS NULL THEN '-1' ELSE TOP_WRKJOB_CD END) "_parentId"
			, DEPLOY_SQL_CNT
			, SQL_CNT
			, NVL(IMPROVE, 0) IMPROVE
			, NVL(REGRESS, 0) REGRESS
			, NVL(FAIL, 0) FAIL
			, NVL("2LESS_THAN", 0) "LESS_THAN_2"
			, NVL("5LESS_THAN", 0) "LESS_THAN_5"
			, NVL("10LESS_THAN", 0) "LESS_THAN_10"
			, NVL("30LESS_THAN", 0) "LESS_THAN_30"
			, NVL("50LESS_THAN", 0) "LESS_THAN_50"
			, NVL("100LESS_THAN", 0) "LESS_THAN_100"
			, NVL("100MORE_THAN", 0) "MORE_THAN_100"
		FROM (
				-- 최상위 업무 SUM
				SELECT WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM AS WRKJOB_CD_NM_EXCEL
					, B.TOP_WRKJOB_CD AS WRKJOB_CD
					, NULL AS TOP_WRKJOB_CD
					, SUM(CASE WHEN WRKJOB_CD_RANK = 1 THEN B.DEPLOY_SQL_CNT ELSE 0 END) AS DEPLOY_SQL_CNT
					, COUNT(*) SQL_CNT
					, SUM(CASE WHEN TEST_BUFFER_GETS >= PRD_BUFFER_GETS THEN 1 END) AS IMPROVE     -- 성능향상
					, SUM(CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) AS REGRESS      -- 성능저하
					, SUM(CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD   <![CDATA[<]]>   PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 1 END) FAIL    -- 부적합 여부,  JMG : 20210129
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >  1   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 2   THEN 1 END) "2LESS_THAN"    --  2X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 2   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 5   THEN 1 END) "5LESS_THAN"    --  5X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 5   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"   --  10X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 10  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 30  THEN 1 END) "30LESS_THAN"   --  30X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 30  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 50  THEN 1 END) "50LESS_THAN"   --  50X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 50  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 100 THEN 1 END) "100LESS_THAN"  --  100X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 100                                              THEN 1 END) "100MORE_THAN"  -->= 100
				FROM TMP_WRKJOB A
					, TMP_DEPLOY_PERF_SQL B
					, TMP_BIG_TABLE_BASE C
				WHERE A.WRKJOB_CD = B.TOP_WRKJOB_CD
				AND B.DBID = C.DBID
				GROUP BY WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM
					, B.TOP_WRKJOB_CD
				UNION ALL
				-- 하위 업무 조회
				SELECT WRKJOB_CD_NM 
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM AS WRKJOB_CD_NM_EXCEL
					, B.WRKJOB_CD
					, B.TOP_WRKJOB_CD
					, SUM(CASE WHEN WRKJOB_CD_RANK = 1 THEN B.DEPLOY_SQL_CNT ELSE 0 END) AS DEPLOY_SQL_CNT
					, COUNT(*) SQL_CNT
					, SUM(CASE WHEN TEST_BUFFER_GETS >= PRD_BUFFER_GETS THEN 1 END) AS IMPROVE     -- 성능향상
					, SUM(CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) AS REGRESS      -- 성능저하
					, SUM(CASE WHEN (ELAPSED_TIME_USE_YN = 'Y' AND ELAPSED_TIME_APPLY_YN = 'Y' AND ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME)
						OR (BUFFER_GETS_USE_YN = 'Y' AND BUFFER_GETS_APPLY_YN = 'Y' AND BUFFER_GETS_THRESHOLD   <![CDATA[<]]>   PRD_BUFFER_GETS)
						OR (ROWS_PROCESSED_USE_YN = 'Y' AND ROWS_PROCESSED_APPLY_YN = 'Y' AND (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED)))
						OR (FULL_SCAN_USE_YN = 'Y' AND FULL_SCAN_APPLY_YN = 'Y' AND PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
							OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
						OR (PARTITION_USE_YN = 'Y' AND PARTITION_APPLY_YN = 'Y' AND ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
							OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N'))) THEN 1 END) FAIL    -- 부적합 여부,  JMG : 20210129
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >  1   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 2   THEN 1 END) "2LESS_THAN"    --  2X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 2   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 5   THEN 1 END) "5LESS_THAN"    --  5X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 5   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"   --  10X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 10  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 30  THEN 1 END) "30LESS_THAN"   --  30X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 30  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 50  THEN 1 END) "50LESS_THAN"   --  50X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 50  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS) <![CDATA[<]]> 100 THEN 1 END) "100LESS_THAN"  --  100X
					, SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 100                                              THEN 1 END) "100MORE_THAN"  -->= 100
				FROM TMP_WRKJOB A
					, TMP_DEPLOY_PERF_SQL B
					, TMP_BIG_TABLE_BASE C
				WHERE A.WRKJOB_CD = B.WRKJOB_CD
				AND B.DBID = C.DBID
				GROUP BY WRKJOB_CD_NM 
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM
					, B.TOP_WRKJOB_CD
					, B.WRKJOB_CD
			)
		START WITH TOP_WRKJOB_CD IS NULL
		CONNECT BY NOCYCLE PRIOR WRKJOB_CD = TOP_WRKJOB_CD --> 20200609 CONNECT BY PRIOR WRKJOB_CD = TOP_WRKJOB_CD
		ORDER SIBLINGS BY WRKJOB_CD
	</sql>
	
	<select id="loadPerformanceVerifySql" parameterType="performanceCheckSql" resultType="performanceCheckSql">
		/* RunSQLPerformanceChangeTrackingDao.loadPerformanceVerifySql */
		<include refid="loadPerformanceVerifySqlRefId"/>
	</select>
	
	<select id="loadPerformanceVerifySqlExcelDown" parameterType="performanceCheckSql" resultType="java.util.LinkedHashMap">
		/* RunSQLPerformanceChangeTrackingDao.loadPerformanceVerifySqlExcelDown */
		<include refid="loadPerformanceVerifySqlRefId"/>
	</select>
	
	<sql id="loadExceptionHandlingSqlRefId">
		/* RunSQLPerformanceChangeTrackingDao.loadPerformanceCheckSqlRefId */
		WITH 
		-- 대용량 기준건수 JMG 
		TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
						, DATABASE DB
					WHERE PREF_ID IN (12004)) A
				, (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								, MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
							WHERE PREF_ID IN (12004)
						)
					WHERE PREF_SEQ = MAX_PREF_SEQ
					) B
			WHERE A.DBID = B.DBID(+)
			AND A.PREF_ID = B.PREF_ID(+)
		)
		, TMP_DEPLOY_PERF_SQL AS
		(
			SELECT A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.PROGRAM_ID
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.PARTITION_DECIDE_DIV_CD
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_BIG_TABLE_FULLSCAN_YN 
				 , FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_PART_ACCESS_ALL_YN  
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_ELAPSED_TIME 
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
							FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) PRD_BUFFER_GETS 
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_ROWS_PROCESSED  
				 , PERF_CHECK_ID
				 , A.DBID  
				 , DEPLOY_SQL_CNT
				 , B.SQL_ID
				 , B.PLAN_HASH_VALUE
				 , A.DBIO DBIO1
				 , B.DBIO DBIO2
				 , ROW_NUMBER() OVER(PARTITION BY A.WRKJOB_CD ORDER BY A.PROGRAM_ID) WRKJOB_CD_RANK
			  FROM (
					SELECT A.*
						 , COUNT(*) OVER(PARTITION BY WRKJOB_CD) DEPLOY_SQL_CNT
					  FROM (
							SELECT A.PERF_CHECK_ID
								 , A.PERF_CHECK_STEP_ID
								 , A.PROGRAM_ID
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DBID
								 , A.TOP_WRKJOB_CD
								 , A.WRKJOB_CD
								 , A.WRKJOB_LVL
								 , A.DEPLOY_COMPLETE_DT
								 , A.ELAPSED_TIME_THRESHOLD
								 , A.BUFFER_GETS_THRESHOLD
								 , A.ROWS_PROCESSED_THRESHOLD
								 , A.FULL_SCAN_DECIDE_DIV_CD
								 , A.PARTITION_DECIDE_DIV_CD
								 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
							  FROM (
									SELECT A.PERF_CHECK_ID
										 , A.DBID 
										 , A.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , A.WRKJOB_LVL
										 , A.PROGRAM_ID
										 , A.DBIO
										 , A.PERF_CHECK_STEP_ID
										 , A.EXCEPTION_PRC_METH_CD
										 , A.DEPLOY_COMPLETE_DT
										 , NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
										 , NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
										 , NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) ROWS_PROCESSED_THRESHOLD
										 , NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
										 , NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) PARTITION_DECIDE_DIV_CD
									  FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
												   A.PERF_CHECK_ID
												 , I.DBID
												 , B.TOP_WRKJOB_CD
												 , A.WRKJOB_CD 
												 , B.WRKJOB_LVL
												 , C.PROGRAM_ID
												 , D.DBIO
												 , B.PERF_CHECK_STEP_ID
												 , C.EXCEPTION_PRC_METH_CD
												 , A.DEPLOY_COMPLETE_DT
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
											  FROM DEPLOY_PERF_CHK A
												-- 업무별 최종 단계
												, (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
													 FROM (SELECT DBID
																, WRKJOB_CD
																, PERF_CHECK_STEP_ID
																, PERF_CHECK_EVALUATION_METH_CD
																, ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
															 FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
															WHERE A.DEL_YN = 'N'
														 ) A
														, (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
															 FROM WRKJOB_CD
															WHERE USE_YN = 'Y'
															START WITH UPPER_WRKJOB_CD IS NULL
														  CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
													WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
													  AND A.RNUM(+) = 1) B
												 , DEPLOY_PERF_CHK_TARGET_PGM C
												 , DEPLOY_PERF_CHK_ALL_PGM D
												 , WJ_PERF_CHK_INDC E
												 , WRKJOB_DB H
												 , DATABASE I
											 WHERE A.WRKJOB_CD = B.WRKJOB_CD
											   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
											   AND C.PROGRAM_ID = D.PROGRAM_ID
											   AND A.WRKJOB_CD = E.WRKJOB_CD
											   AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
											   AND A.WRKJOB_CD = H.WRKJOB_CD
											   AND H.DBID = I.DBID
											   AND I.DB_OPERATE_TYPE_CD = '3' -- DB운영유형코드 1:개발, 2:테스트, 3:운영
											 -- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
											   AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)
											   AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'  -- S: SQL
											
											   /* 날짜 검색 */
											   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																			AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
											
											<if test="wrkjob_cd != null and wrkjob_cd != ''">
											/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
												AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																	   FROM WRKJOB_CD
																	  START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
																	CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
											</if>
											
											<if test="exception_prc_meth_cd != null and exception_prc_meth_cd != ''">
												/* 예외처리 방법 검색 2 : 영구 점검제외, 3 : 한시 점검제외*/
												AND C.EXCEPTION_PRC_METH_CD = #{exception_prc_meth_cd}
											</if>
											
											GROUP BY A.PERF_CHECK_ID
												, I.DBID
												, B.TOP_WRKJOB_CD
												, A.WRKJOB_CD
												, B.WRKJOB_LVL
												, C.PROGRAM_ID
												, D.DBIO
												, B.PERF_CHECK_STEP_ID
												, C.EXCEPTION_PRC_METH_CD
												, A.DEPLOY_COMPLETE_DT
										) A
										-- 성능점검 예외 지표
										,( 
											SELECT B.PROGRAM_ID
												, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
												, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
												, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
												, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
												, MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
											FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
												, DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
												, (SELECT F.PERF_CHECK_INDC_ID
													FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
														, WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
														, DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
													WHERE A.WRKJOB_CD = E.WRKJOB_CD
													AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
													AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
													AND E.INDC_APPLY_YN = 'Y'
													AND F.INDC_USE_YN = 'Y'
													
													/* 날짜 검색 */
													AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																			AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
													
													<if test="wrkjob_cd != null and wrkjob_cd != ''">
													/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
													AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																			FROM WRKJOB_CD
																			START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
																			CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
													</if>
													
												) C
											WHERE A.EXCEPTION_PRC_METH_CD = '1'
											AND A.EXCEPTION_PRC_STATUS_CD = '2'
											AND B.DEL_YN = 'N'
											AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
											AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
											GROUP BY B.PROGRAM_ID
										) B
										WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
									) A
							) A
							WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
							AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
				 ) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME) 
									FROM VSQL_TEXT VS 
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID)
		)
		, TMP_WRKJOB AS
		(
			SELECT WRKJOB_CD
				, UPPER_WRKJOB_CD
				, CONNECT_BY_ROOT WRKJOB_CD AS TOP_WRKJOB_CD
				, (CASE WHEN LEVEL = 1 THEN '-1' ELSE CONNECT_BY_ROOT WRKJOB_CD END) AS PARENT_ID
				, (CASE WHEN LEVEL = 1 THEN '-1' ELSE CONNECT_BY_ROOT WRKJOB_CD END) AS "_parentId"
				, (CASE 
						WHEN LEVEL = 1 THEN WRKJOB_CD_NM 
						ELSE SUBSTR(SYS_CONNECT_BY_PATH(WRKJOB_CD_NM, '/'), LENGTH('/'||CONNECT_BY_ROOT WRKJOB_CD_NM||'/')+1)
					END) AS WRKJOB_CD_NM
				, LEVEL LVL
			FROM (SELECT WRKJOB_CD
					   , UPPER_WRKJOB_CD
					   , REPLACE(WRKJOB_CD_NM, '/', ',') WRKJOB_CD_NM
					   , USE_YN
					   , DEPLOY_CHECK_TARGET_YN
					FROM WRKJOB_CD)
			WHERE USE_YN = 'Y'
			AND DEPLOY_CHECK_TARGET_YN = 'Y'
			START WITH UPPER_WRKJOB_CD IS NULL
			CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
		)
		SELECT WRKJOB_CD_NM, WRKJOB_CD_NM_EXCEL, WRKJOB_CD
			, (CASE WHEN TOP_WRKJOB_CD IS NULL THEN '-1' ELSE TOP_WRKJOB_CD END) PARENT_ID
			, (CASE WHEN TOP_WRKJOB_CD IS NULL THEN '-1' ELSE TOP_WRKJOB_CD END) "_parentId"
			, NVL(DEPLOY_SQL_CNT, 0) DEPLOY_SQL_CNT
			, NVL(SQL_CNT, 0) SQL_CNT
			, NVL(PASS, 0) PASS
			, NVL(FAIL, 0) FAIL
			, NVL("0.1LESS_THAN", 0) "LESS_THAN_0_DOT_1"
			, NVL("0.3LESS_THAN", 0) "LESS_THAN_0_DOT_3"
			, NVL("1LESS_THAN", 0) "LESS_THAN_1"
			, NVL("3LESS_THAN", 0) "LESS_THAN_3"
			, NVL("10LESS_THAN", 0) "LESS_THAN_10"
			, NVL("60LESS_THAN", 0) "LESS_THAN_60"
			, NVL("60MORE_THAN", 0) "MORE_THAN_60"
		FROM (
				-- 최상위 업무만 
				SELECT A.WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM AS WRKJOB_CD_NM_EXCEL
					, B.TOP_WRKJOB_CD AS WRKJOB_CD
					, NULL AS TOP_WRKJOB_CD
					, SUM(CASE WHEN WRKJOB_CD_RANK = 1 THEN DEPLOY_SQL_CNT ELSE 0 END) DEPLOY_SQL_CNT -- 배포SQL수
					, COUNT(*) SQL_CNT  -- 실행SQL수
					, SUM(CASE WHEN PRD_ELAPSED_TIME IS NULL THEN 0 
								WHEN ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME
									OR BUFFER_GETS_THRESHOLD   <![CDATA[<]]>   PRD_BUFFER_GETS
									OR (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED))
									OR (PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
									OR ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
										OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N')) THEN 0 
								ELSE 1 
							END) PASS  -- 적합

					, SUM(CASE WHEN PRD_ELAPSED_TIME IS NULL THEN 0 
								WHEN ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME
									OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>   PRD_BUFFER_GETS
									OR (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED))
									OR (PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
									OR ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
										OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N')) THEN 1 
								ELSE 0 
							END) FAIL    -- 부적합 여부
					, SUM(CASE WHEN PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN 1 END) "0.1LESS_THAN"    -- 0.1s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >  0.1 AND PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN 1 END) "0.3LESS_THAN"    -- 0.3s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 0.3 AND PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN 1 END) "1LESS_THAN"      -- 1s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 1   AND PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN 1 END) "3LESS_THAN"      -- 3s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 3   AND PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"     -- 10s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 10  AND PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN 1 END) "60LESS_THAN"     -- 60s
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 60                             THEN 1 END) "60MORE_THAN"     -- 60s
				FROM TMP_WRKJOB A
					, TMP_DEPLOY_PERF_SQL B
					, TMP_BIG_TABLE_BASE C
				WHERE A.WRKJOB_CD = B.TOP_WRKJOB_CD
				AND B.DBID = C.DBID
				GROUP BY A.WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM
					, B.TOP_WRKJOB_CD
				UNION ALL
				-- 하위 업무 조회
				SELECT A.WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM AS WRKJOB_CD_NM_EXCEL
					, B.WRKJOB_CD
					, B.TOP_WRKJOB_CD
					, SUM(CASE WHEN WRKJOB_CD_RANK = 1 THEN DEPLOY_SQL_CNT ELSE 0 END) "배포SQL수"
					, COUNT(*) "실행SQL수"
					, SUM(CASE WHEN PRD_ELAPSED_TIME IS NULL THEN 0 
								WHEN ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME
									OR BUFFER_GETS_THRESHOLD   <![CDATA[<]]>   PRD_BUFFER_GETS
									OR (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED))
									OR (PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
									OR ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
										OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N')) THEN 0 
								ELSE 1 
							END) PASS  -- 적합

					, SUM(CASE WHEN ELAPSED_TIME_THRESHOLD   <![CDATA[<]]>   PRD_ELAPSED_TIME
								 OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>   PRD_BUFFER_GETS
								 OR (ROWS_PROCESSED_THRESHOLD > 0 AND (PRD_ROWS_PROCESSED = 0 OR ROWS_PROCESSED_THRESHOLD  <![CDATA[<]]>  PRD_ROWS_PROCESSED))
								 OR (PRD_BUFFER_GETS > C.BIG_TABLE_THRESHOLD_CNT AND ((FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N')))
								 OR ((PARTITION_DECIDE_DIV_CD = '2' AND PRD_PART_ACCESS_ALL_YN = 'Y')
										OR (PARTITION_DECIDE_DIV_CD = '1' AND PRD_PART_ACCESS_ALL_YN = 'N')) THEN 1 ELSE 0 END) FAIL    -- 부적합 여부
					, SUM(CASE WHEN PRD_ELAPSED_TIME <![CDATA[<]]>= 0.1                            THEN 1 END) "0.1LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >  0.1 AND PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN 1 END) "0.3LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 0.3 AND PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN 1 END) "1LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 1   AND PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN 1 END) "3LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 3   AND PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 10  AND PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN 1 END) "60LESS_THAN"
					, SUM(CASE WHEN PRD_ELAPSED_TIME >= 60                             THEN 1 END) "60MORE_THAN"
				FROM TMP_WRKJOB A
					, TMP_DEPLOY_PERF_SQL B
					, TMP_BIG_TABLE_BASE C
				WHERE A.WRKJOB_CD = B.WRKJOB_CD
				AND B.DBID = C.DBID
				GROUP BY A.WRKJOB_CD_NM
					, LPAD(' ', (LVL-1)*4) || A.WRKJOB_CD_NM
					, B.TOP_WRKJOB_CD
					, B.WRKJOB_CD
			)
		START WITH TOP_WRKJOB_CD IS NULL
		CONNECT BY NOCYCLE PRIOR WRKJOB_CD = TOP_WRKJOB_CD
		ORDER SIBLINGS BY WRKJOB_CD
	</sql>
	
	<select id="loadExceptionHandlingSql" parameterType="exceptionHandlingSql" resultType="exceptionHandlingSql">
		/* RunSQLPerformanceChangeTrackingDao.loadExceptionHandlingSql */
		<include refid="loadExceptionHandlingSqlRefId"/>
	</select>

	<select id="loadExceptionHandlingSqlExcelDown" parameterType="exceptionHandlingSql" resultType="java.util.LinkedHashMap">
		/* RunSQLPerformanceChangeTrackingDao.loadExceptionHandlingSqlExcelDown */
		<include refid="loadExceptionHandlingSqlRefId"/>
	</select>
	
	<!-- 차트1 -->
	<select id="chart" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* RunSQLPerformanceChangeTrackingDao.chart */
		WITH TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.*
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_BIG_TABLE_FULLSCAN_YN
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE ) PRD_ELAPSED_TIME
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
				         FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) PRD_BUFFER_GETS 
				 , ROW_NUMBER() OVER(PARTITION BY A.WRKJOB_CD ORDER BY A.PROGRAM_ID) WRKJOB_CD_RANK
			  FROM (
					SELECT A.DEPLOY_COMPLETE_DT
						 , A.WRKJOB_CD
						 , A.TOP_WRKJOB_CD
						 , A.WRKJOB_LVL
						 , A.PROGRAM_ID
						 , A.ELAPSED_TIME_THRESHOLD
						 , A.BUFFER_GETS_THRESHOLD
						 , A.FULL_SCAN_DECIDE_DIV_CD
						 , A.TEST_ELAPSED_TIME
						 , A.TEST_BUFFER_GETS
						 , A.TEST_FULL_SCAN_YN
						 , A.PERF_CHECK_ID
						 , A.DBIO
						 , A.DBID
						 , COUNT(*) OVER(PARTITION BY A.WRKJOB_CD) DEPLOY_SQL_CNT
					  FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
								   A.PERF_CHECK_ID
								 , A.DEPLOY_COMPLETE_DT
								 , A.PERF_CHECK_STEP_ID
								 , A.PROGRAM_ID
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DBID
								 , A.TOP_WRKJOB_CD
								 , A.WRKJOB_CD
								 , A.WRKJOB_LVL
								 , ELAPSED_TIME_THRESHOLD
								 , BUFFER_GETS_THRESHOLD
								 , FULL_SCAN_DECIDE_DIV_CD
								 , TEST_ELAPSED_TIME
								 , DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) TEST_BUFFER_GETS
								 , TEST_FULL_SCAN_YN
								 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
							  FROM (SELECT A.PERF_CHECK_ID
										 , A.DEPLOY_COMPLETE_DT
										 , I.DBID
										 , B.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , B.WRKJOB_LVL
										 , C.PROGRAM_ID
										 , C.EXCEPTION_PRC_METH_CD
										 , D.DBIO
										 , B.PERF_CHECK_STEP_ID
										 , E.PROGRAM_EXECUTE_TMS
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
										 , COUNT(*) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
										 , MAX(B.PERF_CHECK_EVALUATION_METH_CD)  PERF_CHECK_EVALUATION_METH_B
										 , MAX(L.PERF_CHECK_EVALUATION_METH_CD)  PERF_CHECK_EVALUATION_METH_L
									  FROM DEPLOY_PERF_CHK A
											-- 업무별 최종 단계
										 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
											  FROM (SELECT DBID
														, WRKJOB_CD
														, PERF_CHECK_STEP_ID
														, PERF_CHECK_EVALUATION_METH_CD
														, ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
													 FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
													WHERE A.DEL_YN = 'N'
												   ) A
												 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
													 FROM WRKJOB_CD
													WHERE USE_YN = 'Y'
													START WITH UPPER_WRKJOB_CD IS NULL
													CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD
												   ) B
											WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
											  AND A.RNUM(+) = 1
										   ) B
										 , DEPLOY_PERF_CHK_TARGET_PGM C
										 , DEPLOY_PERF_CHK_ALL_PGM D
										 , DEPLOY_PERF_CHK_DETAIL_RESULT E
										 , WRKJOB_DB H
										 , DATABASE I
										 , DEPLOY_PERF_CHK_RESULT L -- 배포성능점검결과내역
									 WHERE A.WRKJOB_CD = B.WRKJOB_CD
									   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
									   AND C.PROGRAM_ID = D.PROGRAM_ID
									   AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
									   AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
									   AND C.PROGRAM_ID = E.PROGRAM_ID
									   AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
									   AND A.WRKJOB_CD = H.WRKJOB_CD
									   AND H.DBID = I.DBID
									   AND L.PERF_CHECK_ID = E.PERF_CHECK_ID
									   AND L.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
									   AND L.PROGRAM_ID = E.PROGRAM_ID
									   AND L.PROGRAM_EXECUTE_TMS = E.PROGRAM_EXECUTE_TMS
									   AND L.PERF_CHECK_EVALUATION_METH_CD = B.PERF_CHECK_EVALUATION_METH_CD  -- 성능검증대상 회차(평균 또는 최대 성능을 관리하는 회차)
									   AND I.DB_OPERATE_TYPE_CD = '3'   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
									   AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5)  -- 1:SQL수행시간(초), 2:블럭수, 5:대용량 테이블 Full Scan 여부
									   AND E.PERF_CHECK_RESULT_DIV_CD <![CDATA[<>]]> 'C'
											
									/* 날짜 검색 */
									   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																	AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
									
									<if test="wrkjob_cd != null and wrkjob_cd != ''">
									/* 업무 검색, 전체가 아닌 경우에만 조건이 추가됨 */
									   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
															  FROM WRKJOB_CD
															 START WITH WRKJOB_CD = #{wrkjob_cd} --'10000'
														   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
									</if>
									
									 GROUP BY A.PERF_CHECK_ID
										 , A.DEPLOY_COMPLETE_DT
										 , I.DBID
										 , B.TOP_WRKJOB_CD
										 , A.WRKJOB_CD
										 , B.WRKJOB_LVL
										 , C.PROGRAM_ID
										 , C.EXCEPTION_PRC_METH_CD
										 , D.DBIO
										 , B.PERF_CHECK_STEP_ID
										 , E.PROGRAM_EXECUTE_TMS
								 ) A
							 WHERE 1 = 1
							-- 성능지표가 정상적으로 저장된 경우만 체크
							   AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4
						 ) A
					 WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
					   AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL 제외 시킴
				  ) A
				  , VSQL_TEXT B
				  , VSQL_STATS C
			  WHERE A.DBID = B.DBID
				AND A.DBIO = B.DBIO
				AND B.DBID = C.DBID
				AND B.SQL_ID = C.SQL_ID
				AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
				
				AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
				AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME) 
									 FROM VSQL_TEXT VS 
									WHERE VS.DBID = B.DBID
									  AND VS.SQL_ID = B.SQL_ID)
		)
		SELECT A.DAY                                                                                                     -- 배포일자
			 , NVL(B.BUFFER_GETS_FAIL, 0) BUFFER_GETS_FAIL                                                               -- Buffer Gets 부적합 건수
			 , NVL(B.BUFFER_GETS_PASS, 0) BUFFER_GETS_PASS                                                               -- Buffer Gets 적합 건수
			 , ROUND(NVL(B.BUFFER_GETS_FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) BUFFER_GETS_FAIL_RATIO    -- Buffer Gets 부적합 율(%)
			 , NVL(B.ELAPSED_TIME_FAIL, 0) ELAPSED_TIME_FAIL                                                             -- Elapsed Time 부적합 건수
			 , NVL(B.ELAPSED_TIME_PASS, 0) ELAPSED_TIME_PASS                                                             -- Elapsed Time 적합 건수
			 , ROUND(NVL(B.ELAPSED_TIME_FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) ELAPSED_TIME_FAIL_RATIO  -- Elapsed Time 부적합 율(%)
			
			 , NVL(B.BUFFER_GETS_IMPROVE, 0) BUFFER_GETS_IMPROVE                                                         -- Buffer Gets Imporved 건수
			 , NVL(B.BUFFER_GETS_REGRESS, 0) BUFFER_GETS_REGRESS                                                         -- Buffer Gets Regressed 건수
			 , NVL(B.ELAPSED_TIME_IMPROVE, 0) ELAPSED_TIME_IMPROVE                                                       -- Elapsed Imporved 건수
			 , NVL(B.ELAPSED_TIME_REGRESS, 0) ELAPSED_TIME_REGRESS                                                       -- Elapsed Regressed 건수
		  FROM (SELECT TO_CHAR(DAY, 'YYYY/MM/DD') AS DAY
				  FROM CALENDAR
				 WHERE DAY BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							   AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')) A
		  LEFT OUTER JOIN
			   (SELECT TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY/MM/DD') AS DEPLOY_COMPLETE_DT -- 배포완료일
					 , COUNT(*) SQL_CNT
					 , SUM(CASE WHEN BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS THEN 1 END) BUFFER_GETS_PASS
					 , SUM(CASE WHEN BUFFER_GETS_THRESHOLD <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) BUFFER_GETS_FAIL
					 , SUM(CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME THEN 1 END) ELAPSED_TIME_PASS
					 , SUM(CASE WHEN ELAPSED_TIME_THRESHOLD <![CDATA[<]]> PRD_ELAPSED_TIME THEN 1 END) ELAPSED_TIME_FAIL
					 , SUM(CASE WHEN TEST_BUFFER_GETS >= PRD_BUFFER_GETS THEN 1 END) BUFFER_GETS_IMPROVE
					 , SUM(CASE WHEN TEST_BUFFER_GETS <![CDATA[<]]> PRD_BUFFER_GETS THEN 1 END) BUFFER_GETS_REGRESS
					 , SUM(CASE WHEN TEST_ELAPSED_TIME >= PRD_ELAPSED_TIME THEN 1 END) ELAPSED_TIME_IMPROVE
					 , SUM(CASE WHEN TEST_ELAPSED_TIME <![CDATA[<]]> PRD_ELAPSED_TIME THEN 1 END) ELAPSED_TIME_REGRESS
				  FROM TMP_DEPLOY_PERF_SQL A
				 GROUP BY TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY/MM/DD')
			   ) B PARTITION BY(NULL)
			ON (A.DAY = B.DEPLOY_COMPLETE_DT)
	</select>
	
	<!-- 차트2 -->
	<select id="chartPerformance01" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* RunSQLPerformanceChangeTrackingDao.chartPerformance01 */
		WITH TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				   A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						 DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
					   , DATABASE DB
				   WHERE PREF_ID IN (12004)
			   ) A
			   , (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
							   , MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
						   WHERE PREF_ID IN (12004)
						 )
				   WHERE PREF_SEQ = MAX_PREF_SEQ
			   ) B  
		   WHERE A.DBID = B.DBID(+)
			 AND A.PREF_ID = B.PREF_ID(+)
		)
		, TMP_DEPLOY_PERF_SQL AS 
		(
		SELECT A.*
			 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_BIG_TABLE_FULLSCAN_YN
			 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE ) PRD_ELAPSED_TIME
			 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
					  FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) PRD_BUFFER_GETS 
			 , ROW_NUMBER() OVER(PARTITION BY A.WRKJOB_CD ORDER BY A.PROGRAM_ID) WRKJOB_CD_RANK
		  FROM (
				SELECT A.DEPLOY_COMPLETE_DT
					 , A.WRKJOB_CD
					 , A.TOP_WRKJOB_CD
					 , A.WRKJOB_LVL
					 , A.PROGRAM_ID
					 , A.ELAPSED_TIME_THRESHOLD
					 , A.BUFFER_GETS_THRESHOLD
					 , A.FULL_SCAN_DECIDE_DIV_CD
					 , A.TEST_ELAPSED_TIME
					 , A.TEST_BUFFER_GETS
					 , A.TEST_FULL_SCAN_YN
					 , A.PERF_CHECK_ID
					 , A.DBIO
					 , A.DBID
					 , COUNT(*) OVER(PARTITION BY A.WRKJOB_CD) DEPLOY_SQL_CNT
				  FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
							   A.PERF_CHECK_ID
							 , A.DEPLOY_COMPLETE_DT
							 , A.PERF_CHECK_STEP_ID
							 , A.PROGRAM_ID
							 , A.EXCEPTION_PRC_METH_CD
							 , A.DBIO
							 , A.DBID
							 , A.TOP_WRKJOB_CD
							 , A.WRKJOB_CD
							 , A.WRKJOB_LVL
							 , ELAPSED_TIME_THRESHOLD
							 , BUFFER_GETS_THRESHOLD
							 , FULL_SCAN_DECIDE_DIV_CD
							 , TEST_ELAPSED_TIME
							 , DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) TEST_BUFFER_GETS
							 , TEST_FULL_SCAN_YN
							 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
						  FROM (SELECT A.PERF_CHECK_ID
									 , A.DEPLOY_COMPLETE_DT
									 , I.DBID 
									 , B.TOP_WRKJOB_CD
									 , A.WRKJOB_CD 
									 , B.WRKJOB_LVL
									 , C.PROGRAM_ID
									 , C.EXCEPTION_PRC_METH_CD
									 , D.DBIO
									 , B.PERF_CHECK_STEP_ID
									 , E.PROGRAM_EXECUTE_TMS
									 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
									 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
									 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
									 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
									 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
									 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
									 , COUNT(*) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
									 , MAX(B.PERF_CHECK_EVALUATION_METH_CD)  PERF_CHECK_EVALUATION_METH_B
									 , MAX(L.PERF_CHECK_EVALUATION_METH_CD)  PERF_CHECK_EVALUATION_METH_L
								  FROM DEPLOY_PERF_CHK A
									-- 업무별 최종 단계
									 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
										  FROM (SELECT DBID
													 , WRKJOB_CD
													 , PERF_CHECK_STEP_ID
													 , PERF_CHECK_EVALUATION_METH_CD
													 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
												  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
												 WHERE A.DEL_YN = 'N'
											   ) A
											 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
												  FROM WRKJOB_CD
												 WHERE USE_YN = 'Y'
												 START WITH UPPER_WRKJOB_CD IS NULL
											   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
										 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
										   AND A.RNUM(+) = 1) B
									 , DEPLOY_PERF_CHK_TARGET_PGM C
									 , DEPLOY_PERF_CHK_ALL_PGM D
									 , DEPLOY_PERF_CHK_DETAIL_RESULT E
									 , WRKJOB_DB H  
									 , DATABASE I   
									 , DEPLOY_PERF_CHK_RESULT L -- 배포성능점검결과내역
								 WHERE A.WRKJOB_CD = B.WRKJOB_CD
								   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
								   AND C.PROGRAM_ID = D.PROGRAM_ID
								   AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
								   AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
								   AND C.PROGRAM_ID = E.PROGRAM_ID
								   AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
								   AND A.WRKJOB_CD = H.WRKJOB_CD
								   AND H.DBID = I.DBID
									
								   AND L.PERF_CHECK_ID = E.PERF_CHECK_ID
								   AND L.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
								   AND L.PROGRAM_ID = E.PROGRAM_ID
								   AND L.PROGRAM_EXECUTE_TMS = E.PROGRAM_EXECUTE_TMS
								   AND L.PERF_CHECK_EVALUATION_METH_CD = B.PERF_CHECK_EVALUATION_METH_CD  -- 성능검증대상 회차(평균 또는 최대 성능을 관리하는 회차)
									
								   AND I.DB_OPERATE_TYPE_CD = '3'   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
								   AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5)  -- 1:SQL수행시간(초), 2:블럭수, 5:대용량 테이블 Full Scan 여부
								   AND E.PERF_CHECK_RESULT_DIV_CD <![CDATA[<>]]> 'C'
								
								   /* 날짜 검색 */
								   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
								
								<if test="wrkjob_cd != null and wrkjob_cd != ''">
								   /* 업무 검색 - 필수조건 */
								   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
														  FROM WRKJOB_CD
														 START WITH WRKJOB_CD = #{wrkjob_cd} -- '20000'
													   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
								</if>
								 GROUP BY A.PERF_CHECK_ID
									 , A.DEPLOY_COMPLETE_DT
									 , I.DBID 
									 , B.TOP_WRKJOB_CD
									 , A.WRKJOB_CD
									 , B.WRKJOB_LVL
									 , C.PROGRAM_ID
									 , C.EXCEPTION_PRC_METH_CD
									 , D.DBIO
									 , B.PERF_CHECK_STEP_ID
									 , E.PROGRAM_EXECUTE_TMS
							 ) A
						 WHERE 1 = 1
						-- 성능지표가 정상적으로 저장된 경우만 체크
						AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4 
					  ) A
				 WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
				   AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL 제외 시킴
			   ) A
			 , VSQL_TEXT B
			 , VSQL_STATS C
		 WHERE A.DBID = B.DBID
		   AND A.DBIO = B.DBIO
		   AND B.DBID = C.DBID
		   AND B.SQL_ID = C.SQL_ID
		   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
		
		   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
		   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME) 
								FROM VSQL_TEXT VS 
							   WHERE VS.DBID = B.DBID
								 AND VS.SQL_ID = B.SQL_ID)
		)
		SELECT A.DAY                                                                                          -- 배포일자
			 , NVL(B.FAIL, 0) FAIL                                                                            -- 부적합 건수
			 , NVL(B.PASS, 0) PASS                                                                            -- 적합 건수
			 , ROUND(NVL(B.FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) FAIL_RATIO                 -- 부적합 율(%)
		  FROM (SELECT TO_CHAR(DAY, 'YYYY/MM/DD') AS DAY
				  FROM CALENDAR
				 WHERE DAY BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							   AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')) A
		  LEFT OUTER JOIN
			   (SELECT TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY/MM/DD') AS DEPLOY_COMPLETE_DT -- 배포완료일
					 , COUNT(*) SQL_CNT
					 , COUNT(CASE WHEN PRD_ELAPSED_TIME IS NOT NULL
								   AND ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								   AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								   AND NOT ( (PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
																OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN 1 END) PASS
					 , COUNT(CASE WHEN PRD_ELAPSED_TIME IS NOT NULL 
					 			   AND (ELAPSED_TIME_THRESHOLD <![CDATA[<]]>  PRD_ELAPSED_TIME
								    OR BUFFER_GETS_THRESHOLD <![CDATA[<]]> PRD_BUFFER_GETS
								    OR (  (PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
								    OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) )  THEN 1 END) FAIL
				  FROM TMP_DEPLOY_PERF_SQL A
					 , TMP_BIG_TABLE_BASE B
				 WHERE A.DBID = B.DBID
				 GROUP BY TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY/MM/DD')
			   ) B PARTITION BY(NULL)
			ON (A.DAY = B.DEPLOY_COMPLETE_DT)
	</select>
	
	<!-- 차트3 -->
	<select id="chartPerformance02" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* RunSQLPerformanceChangeTrackingDao.chartPerformance02 */
		WITH TMP_BIG_TABLE_BASE AS
		(
			SELECT /*+ MATERIALIZE */
				   A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			  FROM (SELECT /*+ LEADING(DB) */
						   DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					  FROM SPOP_PREFERENCES SP
						 , DATABASE DB
					 WHERE PREF_ID IN (12004)
				   ) A
				 , (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					  FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								 , MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							  FROM DB_PREFERENCES B
							 WHERE PREF_ID IN (12004)
						   )
					 WHERE PREF_SEQ = MAX_PREF_SEQ
				   ) B  
			 WHERE A.DBID = B.DBID(+)
			   AND A.PREF_ID = B.PREF_ID(+)
		)
		, TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.*
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_BIG_TABLE_FULLSCAN_YN
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE ) PRD_ELAPSED_TIME
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
						  FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) PRD_BUFFER_GETS
			  FROM (
					SELECT A.DEPLOY_COMPLETE_DT
						 , A.WRKJOB_CD
						 , A.TOP_WRKJOB_CD
						 , A.WRKJOB_LVL
						 , A.PROGRAM_ID
						 , A.ELAPSED_TIME_THRESHOLD
						 , A.BUFFER_GETS_THRESHOLD
						 , A.FULL_SCAN_DECIDE_DIV_CD
						 , A.TEST_ELAPSED_TIME
						 , A.TEST_BUFFER_GETS
						 , A.TEST_FULL_SCAN_YN
						 , A.PERF_CHECK_ID
						 , A.DBIO
						 , A.DBID
						 , COUNT(*) OVER(PARTITION BY A.WRKJOB_CD) DEPLOY_SQL_CNT
					 FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
								  A.PERF_CHECK_ID
								, A.DEPLOY_COMPLETE_DT
								, A.PERF_CHECK_STEP_ID
								, A.PROGRAM_ID
								, A.EXCEPTION_PRC_METH_CD
								, A.DBIO
								, A.DBID
								, A.TOP_WRKJOB_CD
								, A.WRKJOB_CD
								, A.WRKJOB_LVL
								, ELAPSED_TIME_THRESHOLD
								, BUFFER_GETS_THRESHOLD
								, FULL_SCAN_DECIDE_DIV_CD
								, TEST_ELAPSED_TIME
								, DECODE(TEST_BUFFER_GETS, 0, 1, TEST_BUFFER_GETS) TEST_BUFFER_GETS
								, TEST_FULL_SCAN_YN
								, ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
							 FROM ( SELECT A.PERF_CHECK_ID
										 , A.DEPLOY_COMPLETE_DT
										 , I.DBID 
										 , B.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , B.WRKJOB_LVL
										 , C.PROGRAM_ID
										 , C.EXCEPTION_PRC_METH_CD
										 , D.DBIO
										 , B.PERF_CHECK_STEP_ID
										 , E.PROGRAM_EXECUTE_TMS
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN INDC_PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN INDC_PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN INDC_YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 1 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_ELAPSED_TIME
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 2 THEN TO_NUMBER(EXEC_RESULT_VALUE) END) AS TEST_BUFFER_GETS
										 , MAX(CASE WHEN PERF_CHECK_INDC_ID = 5 THEN EXEC_RESULT_VALUE END) AS TEST_FULL_SCAN_YN
										 , COUNT(*) DEPLOY_PERF_CHK_INDC_EXEC_CNT  -- 성능지표건수(오류 또는 다른 이유로 지표가 없는경우를 제외시키기 위함)
										 , MAX(B.PERF_CHECK_EVALUATION_METH_CD)  PERF_CHECK_EVALUATION_METH_B
										 , MAX(L.PERF_CHECK_EVALUATION_METH_CD)  PERF_CHECK_EVALUATION_METH_L
									  FROM DEPLOY_PERF_CHK A
										 -- 업무별 최종 단계
										 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
											  FROM (SELECT DBID
														 , WRKJOB_CD
														 , PERF_CHECK_STEP_ID
														 , PERF_CHECK_EVALUATION_METH_CD
														 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
													  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
													 WHERE A.DEL_YN = 'N'
												   ) A
												 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
													  FROM WRKJOB_CD
													 WHERE USE_YN = 'Y'
													 START WITH UPPER_WRKJOB_CD IS NULL
												   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
											 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
											   AND A.RNUM(+) = 1) B
										 , DEPLOY_PERF_CHK_TARGET_PGM C
										 , DEPLOY_PERF_CHK_ALL_PGM D
										 , DEPLOY_PERF_CHK_DETAIL_RESULT E
										 , WRKJOB_DB H
										 , DATABASE I
										 , DEPLOY_PERF_CHK_RESULT L -- 배포성능점검결과내역
									 WHERE A.WRKJOB_CD = B.WRKJOB_CD
									   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
									   AND C.PROGRAM_ID = D.PROGRAM_ID
									   AND A.PERF_CHECK_ID = E.PERF_CHECK_ID
									   AND B.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
									   AND C.PROGRAM_ID = E.PROGRAM_ID
									   AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
									   AND A.WRKJOB_CD = H.WRKJOB_CD
									   AND H.DBID = I.DBID
									   
									   AND L.PERF_CHECK_ID = E.PERF_CHECK_ID
									   AND L.PERF_CHECK_STEP_ID = E.PERF_CHECK_STEP_ID
									   AND L.PROGRAM_ID = E.PROGRAM_ID
									   AND L.PROGRAM_EXECUTE_TMS = E.PROGRAM_EXECUTE_TMS
									   AND L.PERF_CHECK_EVALUATION_METH_CD = B.PERF_CHECK_EVALUATION_METH_CD  -- 성능검증대상 회차(평균 또는 최대 성능을 관리하는 회차)
									   
									   
									   AND I.DB_OPERATE_TYPE_CD = '3'   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
									   AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5)  -- 1:SQL수행시간(초), 2:블럭수, 5:대용량 테이블 Full Scan 여부
									   AND E.PERF_CHECK_RESULT_DIV_CD  <![CDATA[<>]]> 'C'
									 
									   /* 날짜 검색 */
									   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
									                                AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
									
									<if test="wrkjob_cd != null and wrkjob_cd != ''">
									   /* 업무 검색 - 필수조건 */
									   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
															  FROM WRKJOB_CD
															 START WITH WRKJOB_CD = #{wrkjob_cd} -- '20000' 
														   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
									</if>
									 GROUP BY A.PERF_CHECK_ID
										 , A.DEPLOY_COMPLETE_DT
										 , I.DBID 
										 , B.TOP_WRKJOB_CD
										 , A.WRKJOB_CD
										 , B.WRKJOB_LVL
										 , C.PROGRAM_ID
										 , C.EXCEPTION_PRC_METH_CD
										 , D.DBIO
										 , B.PERF_CHECK_STEP_ID
										 , E.PROGRAM_EXECUTE_TMS
								   ) A
							 WHERE 1 = 1
							 -- 성능지표가 정상적으로 저장된 경우만 체크
							   AND DEPLOY_PERF_CHK_INDC_EXEC_CNT = 4 
						   ) A
					 WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
					   AND A.EXCEPTION_PRC_METH_CD IS NULL -- 한시점검/영구점검 예외처리된 SQL 제외 시킴
				   ) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			
			   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME) 
									FROM VSQL_TEXT VS 
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID) 
		)
		SELECT A.PASS_FAIL_TYPE
			 , NVL(B."1LESS_THAN", 0) "LESS_THAN_1"       -- 1X
			 , NVL(B."2LESS_THAN", 0)   "LESS_THAN_2"    --  2x
			 , NVL(B."5LESS_THAN", 0)   "LESS_THAN_5"    --   5x
			 , NVL(B."10LESS_THAN", 0)  "LESS_THAN_10"   --  10x
			 , NVL(B."30LESS_THAN", 0)  "LESS_THAN_30"   --  30x
			 , NVL(B."50LESS_THAN", 0)  "LESS_THAN_50"   --  50x
			 , NVL(B."100LESS_THAN", 0) "LESS_THAN_100"  --  100x
			 , NVL(B."100MORE_THAN", 0) "MORE_THAN_100"  -- >= 100x
		  FROM (SELECT '적합' PASS_FAIL_TYPE FROM DUAL
				 UNION ALL
				SELECT '부적합' PASS_FAIL_TYPE FROM DUAL
			   ) A
		  LEFT OUTER JOIN
			   (SELECT (CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
							  AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
							  AND NOT (  (PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										  OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN '적합' ELSE '부적합' END) PASS_FAIL_TYPE
					 , SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS)  <![CDATA[<=]]>  1 THEN 1 ELSE 0 END) "1LESS_THAN"  -- 1X
					 , SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >  1   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS)  <![CDATA[<]]>  2   THEN 1 ELSE 0 END) "2LESS_THAN"    --  2X
					 , SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 2   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS)  <![CDATA[<]]>  5   THEN 1 ELSE 0 END) "5LESS_THAN"    --  5X
					 , SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 5   AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS)  <![CDATA[<]]>  10  THEN 1 ELSE 0 END) "10LESS_THAN"   --  10X
					 , SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 10  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS)  <![CDATA[<]]>  30  THEN 1 ELSE 0 END) "30LESS_THAN"   --  30X
					 , SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 30  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS)  <![CDATA[<]]>  50  THEN 1 ELSE 0 END) "50LESS_THAN"   --  50X
					 , SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 50  AND (PRD_BUFFER_GETS/TEST_BUFFER_GETS)  <![CDATA[<]]>  100 THEN 1 ELSE 0 END) "100LESS_THAN"  --  100X
					 , SUM(CASE WHEN (PRD_BUFFER_GETS/TEST_BUFFER_GETS) >= 100                                              THEN 1 ELSE 0 END) "100MORE_THAN"  -- >= 100
				  FROM TMP_DEPLOY_PERF_SQL A
					 , TMP_BIG_TABLE_BASE B
				 WHERE A.DBID = B.DBID
				 GROUP BY (CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								 AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								 AND NOT (  (PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
								  OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN '적합' ELSE '부적합' END)
			   ) B PARTITION BY (NULL)
			ON (A.PASS_FAIL_TYPE = B.PASS_FAIL_TYPE)
	</select>
	
	<select id="chartException01" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* RunSQLPerformanceChangeTrackingDao.chartException01 */
		WITH TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				   A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			FROM (SELECT /*+ LEADING(DB) */
						 DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					FROM SPOP_PREFERENCES SP
					   , DATABASE DB
				   WHERE PREF_ID IN (12004)
				 ) A
			   , (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
							   , MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							FROM DB_PREFERENCES B
						   WHERE PREF_ID IN (12004)
						 )
				   WHERE PREF_SEQ = MAX_PREF_SEQ
				 ) B  
		   WHERE A.DBID = B.DBID(+)
			 AND A.PREF_ID = B.PREF_ID(+)
		)
		, TMP_DEPLOY_PERF_SQL AS
		(
			SELECT A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.PROGRAM_ID
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.PARTITION_DECIDE_DIV_CD
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_BIG_TABLE_FULLSCAN_YN
				 , FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_PART_ACCESS_ALL_YN
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_ELAPSED_TIME
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
						  FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) PRD_BUFFER_GETS
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_ROWS_PROCESSED
				 , A.DEPLOY_COMPLETE_DT
				 , A.DBID
			  FROM (
					SELECT A.*
						 , COUNT(*) OVER(PARTITION BY WRKJOB_CD) DEPLOY_SQL_CNT
					  FROM (
							SELECT A.PERF_CHECK_ID
								 , A.PERF_CHECK_STEP_ID
								 , A.PROGRAM_ID
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DBID
								 , A.TOP_WRKJOB_CD
								 , A.WRKJOB_CD
								 , A.WRKJOB_LVL
								 , A.DEPLOY_COMPLETE_DT
								 , A.ELAPSED_TIME_THRESHOLD
								 , A.BUFFER_GETS_THRESHOLD
								 , A.ROWS_PROCESSED_THRESHOLD
								 , A.FULL_SCAN_DECIDE_DIV_CD
								 , A.PARTITION_DECIDE_DIV_CD
								 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
							  FROM (
									SELECT A.PERF_CHECK_ID
										 , A.DBID 
										 , A.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , A.WRKJOB_LVL
										 , A.PROGRAM_ID
										 , A.DBIO
										 , A.PERF_CHECK_STEP_ID
										 , A.EXCEPTION_PRC_METH_CD
										 , A.DEPLOY_COMPLETE_DT
										 , NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
										 , NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
										 , NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) ROWS_PROCESSED_THRESHOLD
										 , NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
										 , NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) PARTITION_DECIDE_DIV_CD
									  FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
												   A.PERF_CHECK_ID
												 , I.DBID  
												 , B.TOP_WRKJOB_CD
												 , A.WRKJOB_CD 
												 , B.WRKJOB_LVL
												 , C.PROGRAM_ID
												 , D.DBIO
												 , B.PERF_CHECK_STEP_ID
												 , C.EXCEPTION_PRC_METH_CD
												 , A.DEPLOY_COMPLETE_DT
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
											  FROM DEPLOY_PERF_CHK A
												 -- 업무별 최종 단계
												 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
													  FROM (SELECT DBID
																  , WRKJOB_CD
																  , PERF_CHECK_STEP_ID
																  , PERF_CHECK_EVALUATION_METH_CD
																  , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
															   FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
															  WHERE A.DEL_YN = 'N'
															) A
														 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
															  FROM WRKJOB_CD
															 WHERE USE_YN = 'Y'
															 START WITH UPPER_WRKJOB_CD IS NULL
														   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
													 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
													   AND A.RNUM(+) = 1) B
												 , DEPLOY_PERF_CHK_TARGET_PGM C
												 , DEPLOY_PERF_CHK_ALL_PGM D
												 , WJ_PERF_CHK_INDC E
												 , WRKJOB_DB H
												 , DATABASE I
											 WHERE A.WRKJOB_CD = B.WRKJOB_CD
											   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
											   AND C.PROGRAM_ID = D.PROGRAM_ID
											   AND A.WRKJOB_CD = E.WRKJOB_CD
											   AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
											   AND A.WRKJOB_CD = H.WRKJOB_CD
											   AND H.DBID = I.DBID
											   AND I.DB_OPERATE_TYPE_CD = '3'   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
											   -- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
											   AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  
											   AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'  -- S: SQL
											   
											   /* 날짜 검색 */
											   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
											                                AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
											   <if test="wrkjob_cd != null and wrkjob_cd != ''">
											   /* 업무 검색 - 필수조건 */
											   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																	  FROM WRKJOB_CD
																	 START WITH WRKJOB_CD = #{wrkjob_cd} -- '20000'
																   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
											   </if>
<!-- 											   <if test="exception_prc_meth_cd != null and exception_prc_meth_cd != ''"> -->
<!-- 											   /* 예외처리 방법 검색 2 : 영구 점검제외, 3 : 한시 점검제외 */ -->
<!-- 											   AND C.EXCEPTION_PRC_METH_CD = #{exception_prc_meth_cd}  -->
<!-- 											   </if> -->
											 GROUP BY A.PERF_CHECK_ID
												 , I.DBID 
												 , B.TOP_WRKJOB_CD
												 , A.WRKJOB_CD
												 , B.WRKJOB_LVL
												 , C.PROGRAM_ID
												 , D.DBIO
												 , B.PERF_CHECK_STEP_ID
												 , C.EXCEPTION_PRC_METH_CD
												 , A.DEPLOY_COMPLETE_DT
										   ) A
										  -- 성능점검 예외 지표
										 , ( 
											SELECT B.PROGRAM_ID
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD  
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD    
											  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
												 , DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
												 , (SELECT F.PERF_CHECK_INDC_ID
													  FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
														 , WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
														 , DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
													 WHERE A.WRKJOB_CD = E.WRKJOB_CD
													   AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
													   AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
													   AND E.INDC_APPLY_YN = 'Y'
													   AND F.INDC_USE_YN = 'Y'
													
													   /* 날짜 검색 */
													   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																					AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
													 <if test="wrkjob_cd != null and wrkjob_cd != ''">
													 /* 업무 검색 - 필수조건 */
													   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																			  FROM WRKJOB_CD
																			 START WITH WRKJOB_CD = #{wrkjob_cd} -- '20000'
																		   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
													 </if>
												 ) C
											 WHERE A.EXCEPTION_PRC_METH_CD = '1'
											 AND A.EXCEPTION_PRC_STATUS_CD = '2'
											 AND B.DEL_YN = 'N'
											 AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
											 AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
											 GROUP BY B.PROGRAM_ID
										   ) B
									 WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
								   ) A
						   ) A
					 WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
					   AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
				   ) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			   
			   -- 테스트 데이터가 나오지 않아서 주석처리함 ==> 주석을 풀어야함
			   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME)
									FROM VSQL_TEXT VS
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID)
		)
		SELECT A.DAY                                                                                          -- 배포일자
			 , NVL(B.FAIL, 0) FAIL                                                                            -- 부적합 건수
			 , NVL(B.PASS, 0) PASS                                                                            -- 적합 건수
			 , ROUND(NVL(B.FAIL, 0)/DECODE(NVL(SQL_CNT, 0), 0, 1, SQL_CNT)*100, 2) FAIL_RATIO                 -- 부적합 율(%)
		FROM ( SELECT TO_CHAR(DAY, 'YYYY/MM/DD') AS DAY
				 FROM CALENDAR
				WHERE DAY BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
							  AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')) A
		LEFT OUTER JOIN
			 (
				SELECT TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY/MM/DD') AS DEPLOY_COMPLETE_DT -- 배포완료일
					 , COUNT(*) SQL_CNT
					 , COUNT(CASE WHEN PRD_ELAPSED_TIME IS NOT NULL
								   AND ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								   AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								   AND NOT (  (PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
											   OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN 1 END) PASS
					 , COUNT(CASE WHEN PRD_ELAPSED_TIME IS NOT NULL AND (
								  ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  PRD_ELAPSED_TIME
								    OR BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  PRD_BUFFER_GETS
								    OR (  (PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
											OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) ) THEN 1 END) FAIL
				  FROM TMP_DEPLOY_PERF_SQL A
					 , TMP_BIG_TABLE_BASE B
				 WHERE A.DBID = B.DBID
				 GROUP BY TO_CHAR(A.DEPLOY_COMPLETE_DT, 'YYYY/MM/DD')
			) B PARTITION BY(NULL)
		ON (A.DAY = B.DEPLOY_COMPLETE_DT)
	</select>
	
	<select id="chartException02" parameterType="sqlPerformanceTraceStatusChart" resultType="sqlPerformanceTraceStatusChart">
		/* RunSQLPerformanceChangeTrackingDao.chartException02 */
		WITH TMP_BIG_TABLE_BASE AS 
		(
			SELECT /*+ MATERIALIZE */
				   A.DBID, TO_NUMBER(NVL(B.PREF_VALUE, A.DEFAULT_PREF_VALUE)) AS BIG_TABLE_THRESHOLD_CNT
			  FROM (SELECT /*+ LEADING(DB) */
						   DB.DBID, DB.DB_NAME, SP.PREF_ID, SP.DEFAULT_PREF_VALUE
					  FROM SPOP_PREFERENCES SP
						 , DATABASE DB
					 WHERE PREF_ID IN (12004)
				   ) A
				 , (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
					  FROM (SELECT DBID, PREF_ID, PREF_SEQ, PREF_VALUE
								 , MAX(PREF_SEQ) OVER(PARTITION BY DBID, PREF_ID) MAX_PREF_SEQ
							  FROM DB_PREFERENCES B
							 WHERE PREF_ID IN (12004)
						   )
					 WHERE PREF_SEQ = MAX_PREF_SEQ
				    ) B
			 WHERE A.DBID = B.DBID(+)
			   AND A.PREF_ID = B.PREF_ID(+)
		)
		, TMP_DEPLOY_PERF_SQL AS 
		(
			SELECT A.WRKJOB_CD
				 , A.TOP_WRKJOB_CD
				 , A.WRKJOB_LVL
				 , A.PROGRAM_ID
				 , A.ELAPSED_TIME_THRESHOLD
				 , A.BUFFER_GETS_THRESHOLD
				 , A.ROWS_PROCESSED_THRESHOLD
				 , A.FULL_SCAN_DECIDE_DIV_CD
				 , A.PARTITION_DECIDE_DIV_CD  
				 , FN_VSQL_BIG_TABLE_FULLSCAN_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_BIG_TABLE_FULLSCAN_YN 
				 , FN_VSQL_PART_ALL_ACCESS_YN(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_PART_ACCESS_ALL_YN  
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 1, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_ELAPSED_TIME 
				 , DECODE(FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE), 0, 1,
				             FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 2, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE)) PRD_BUFFER_GETS 
				 , FN_VSQL_STATS_VALUE(A.DBID, A.DBIO, A.DEPLOY_COMPLETE_DT, 3, 'AFTER', B.SQL_ID, B.PLAN_HASH_VALUE) PRD_ROWS_PROCESSED  
				 , A.DEPLOY_COMPLETE_DT
				 , A.DBID  
			  FROM (
					SELECT A.*
						 , COUNT(*) OVER(PARTITION BY WRKJOB_CD) DEPLOY_SQL_CNT
					  FROM (
							SELECT A.PERF_CHECK_ID
								 , A.PERF_CHECK_STEP_ID
								 , A.PROGRAM_ID
								 , A.EXCEPTION_PRC_METH_CD
								 , A.DBIO
								 , A.DBID
								 , A.TOP_WRKJOB_CD
								 , A.WRKJOB_CD
								 , A.WRKJOB_LVL
								 , A.DEPLOY_COMPLETE_DT
								 , A.ELAPSED_TIME_THRESHOLD
								 , A.BUFFER_GETS_THRESHOLD
								 , A.ROWS_PROCESSED_THRESHOLD  
								 , A.FULL_SCAN_DECIDE_DIV_CD
								 , A.PARTITION_DECIDE_DIV_CD  
								 , ROW_NUMBER() OVER(PARTITION BY A.PROGRAM_ID ORDER BY A.PERF_CHECK_ID DESC) LAST_PROGRAM_NUM
							FROM (
									SELECT A.PERF_CHECK_ID
										 , A.DBID 
										 , A.TOP_WRKJOB_CD
										 , A.WRKJOB_CD 
										 , A.WRKJOB_LVL
										 , A.PROGRAM_ID
										 , A.DBIO
										 , A.PERF_CHECK_STEP_ID
										 , A.EXCEPTION_PRC_METH_CD
										 , A.DEPLOY_COMPLETE_DT
										 , NVL(B.ELAPSED_TIME_THRESHOLD, A.ELAPSED_TIME_THRESHOLD) ELAPSED_TIME_THRESHOLD
										 , NVL(B.BUFFER_GETS_THRESHOLD, A.BUFFER_GETS_THRESHOLD) BUFFER_GETS_THRESHOLD
										 , NVL(B.ROWS_PROCESSED_THRESHOLD, A.ROWS_PROCESSED_THRESHOLD) ROWS_PROCESSED_THRESHOLD  
										 , NVL(B.FULL_SCAN_DECIDE_DIV_CD, A.FULL_SCAN_DECIDE_DIV_CD) FULL_SCAN_DECIDE_DIV_CD
										 , NVL(B.PARTITION_DECIDE_DIV_CD, A.PARTITION_DECIDE_DIV_CD) PARTITION_DECIDE_DIV_CD  
									  FROM (SELECT /*+ LEADING(A B C D E) USE_HASH(B) USE_NL(C D E) */
												   A.PERF_CHECK_ID
												 , I.DBID  
												 , B.TOP_WRKJOB_CD
												 , A.WRKJOB_CD 
												 , B.WRKJOB_LVL
												 , C.PROGRAM_ID
												 , D.DBIO
												 , B.PERF_CHECK_STEP_ID
												 , C.EXCEPTION_PRC_METH_CD
												 , A.DEPLOY_COMPLETE_DT
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 1 THEN E.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 2 THEN E.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 3 THEN E.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 5 THEN E.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
												 , MAX(CASE WHEN E.PERF_CHECK_INDC_ID = 6 THEN E.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD
											  FROM DEPLOY_PERF_CHK A
												 -- 업무별 최종 단계
												 , (SELECT A.DBID, B.TOP_WRKJOB_CD, B.WRKJOB_CD, B.WRKJOB_LVL, A.PERF_CHECK_EVALUATION_METH_CD, A.PERF_CHECK_STEP_ID
													  FROM (SELECT DBID
																 , WRKJOB_CD
																 , PERF_CHECK_STEP_ID
																 , PERF_CHECK_EVALUATION_METH_CD
																 , ROW_NUMBER() OVER(PARTITION BY WRKJOB_CD ORDER BY PERF_CHECK_STEP_ID DESC) RNUM
															  FROM DEPLOY_PERF_CHK_STEP_TEST_DB A
															 WHERE A.DEL_YN = 'N'
														   ) A
														 , (SELECT WRKJOB_CD, CONNECT_BY_ROOT(WRKJOB_CD) TOP_WRKJOB_CD, LEVEL WRKJOB_LVL
															  FROM WRKJOB_CD
															 WHERE USE_YN = 'Y'
															 START WITH UPPER_WRKJOB_CD IS NULL
														   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD) B
													 WHERE A.WRKJOB_CD(+) = B.TOP_WRKJOB_CD
													   AND A.RNUM(+) = 1) B
												 , DEPLOY_PERF_CHK_TARGET_PGM C
												 , DEPLOY_PERF_CHK_ALL_PGM D
												 , WJ_PERF_CHK_INDC E
												 , WRKJOB_DB H  
												 , DATABASE I   
											 WHERE A.WRKJOB_CD = B.WRKJOB_CD
											   AND A.PERF_CHECK_ID = C.PERF_CHECK_ID
											   AND C.PROGRAM_ID = D.PROGRAM_ID
											   AND A.WRKJOB_CD = E.WRKJOB_CD
											   AND A.DEPLOY_CHECK_STATUS_CD = '03'  -- 배포완료
											   AND A.WRKJOB_CD = H.WRKJOB_CD   
											   AND H.DBID = I.DBID             
											   AND I.DB_OPERATE_TYPE_CD = '3'   -- DB운영유형코드 1:개발, 2:테스트, 3:운영
											   -- 1:SQL수행시간(초), 2:블럭수, 3:처리건수, 5:대용량 테이블 Full Scan 여부
											   AND E.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6)  
											   AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'  -- S: SQL
											   
											   /* 날짜 검색 */
											   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
											                                AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
											
											<if test="wrkjob_cd != null and wrkjob_cd != ''">
											   /* 업무 검색 - 필수조건 */
											   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																	  FROM WRKJOB_CD
																	 START WITH WRKJOB_CD = #{wrkjob_cd} -- '20000'
																   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
											</if>
<!-- 											<if test="exception_prc_meth_cd != null and exception_prc_meth_cd != ''"> -->
<!-- 											   /* 예외처리 방법 검색  2 : 영구 점검제외, 3 : 한시 점검제외*/ -->
<!-- 											   AND C.EXCEPTION_PRC_METH_CD = #{exception_prc_meth_cd}   -->
<!-- 											</if> -->
											
											 GROUP BY A.PERF_CHECK_ID
												 , I.DBID 
												 , B.TOP_WRKJOB_CD
												 , A.WRKJOB_CD
												 , B.WRKJOB_LVL
												 , C.PROGRAM_ID
												 , D.DBIO
												 , B.PERF_CHECK_STEP_ID
												 , C.EXCEPTION_PRC_METH_CD
												 , A.DEPLOY_COMPLETE_DT
										   ) A
										 -- 성능점검 예외 지표
										 , ( 
											SELECT B.PROGRAM_ID
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 1 THEN B.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 2 THEN B.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 3 THEN B.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD  
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 5 THEN B.YN_DECIDE_DIV_CD END) AS FULL_SCAN_DECIDE_DIV_CD
												 , MAX(CASE WHEN B.PERF_CHECK_INDC_ID = 6 THEN B.YN_DECIDE_DIV_CD END) AS PARTITION_DECIDE_DIV_CD    
											  FROM DEPLOY_PERF_CHK_EXCPT_REQUEST A    -- 배포성능점검예외요청내역
												 , DEPLOY_PERF_CHK_INDC_EXCPT B       -- 배포성능점검지표예외내역
												 , (SELECT F.PERF_CHECK_INDC_ID
													  FROM DEPLOY_PERF_CHK A               -- 배포성능점검기본
														 , WJ_PERF_CHK_INDC     E          -- 업무별성능점검지표내역
														 , DEPLOY_PERF_CHK_INDC F          -- 배포성능점검지표기본
													 WHERE A.WRKJOB_CD = E.WRKJOB_CD
													   AND E.PERF_CHECK_INDC_ID = F.PERF_CHECK_INDC_ID
													   AND E.PERF_CHECK_PROGRAM_DIV_CD = 'S'
													   AND E.INDC_APPLY_YN = 'Y'
													   AND F.INDC_USE_YN = 'Y'
													
													   /* 날짜 검색 */
													   AND A.DEPLOY_COMPLETE_DT BETWEEN TO_DATE(#{begin_dt} || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS')
																					AND TO_DATE(#{end_dt} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
												
													<if test="wrkjob_cd != null and wrkjob_cd != ''">
													   /* 업무 검색 - 필수조건 */
													   AND A.WRKJOB_CD IN ( SELECT WRKJOB_CD
																			  FROM WRKJOB_CD
																			 START WITH WRKJOB_CD = #{wrkjob_cd} -- '20000'
																		   CONNECT BY PRIOR WRKJOB_CD = UPPER_WRKJOB_CD)
													</if>
												   ) C
											 WHERE A.EXCEPTION_PRC_METH_CD = '1'
											   AND A.EXCEPTION_PRC_STATUS_CD = '2'
											   AND B.DEL_YN = 'N'
											   AND A.EXCEPTION_REQUEST_ID = B.EXCEPTION_REQUEST_ID 
											   AND B.PERF_CHECK_INDC_ID = C.PERF_CHECK_INDC_ID
											   GROUP BY B.PROGRAM_ID
										   ) B
									 WHERE A.PROGRAM_ID = B.PROGRAM_ID(+)
								 ) A
						   ) A
					 WHERE A.LAST_PROGRAM_NUM = 1 -- 최종프로그램
					   AND A.EXCEPTION_PRC_METH_CD IS NOT NULL -- 한시점검/영구점검 예외처리된 SQL
				   ) A
				 , VSQL_TEXT B
				 , VSQL_STATS C
			 WHERE A.DBID = B.DBID
			   AND A.DBIO = B.DBIO
			   AND B.DBID = C.DBID
			   AND B.SQL_ID = C.SQL_ID
			   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
			
			   AND C.LAST_ACTIVE_TIME >= A.DEPLOY_COMPLETE_DT
			   AND B.SNAP_TIME = (SELECT MAX(SNAP_TIME) 
									FROM VSQL_TEXT VS 
								   WHERE VS.DBID = B.DBID
									 AND VS.SQL_ID = B.SQL_ID)
		)
		SELECT A.PASS_FAIL_TYPE
			 , NVL(B."0.1LESS_THAN", 0) "LESS_THAN_0_DOT_1"   --  0.1s
			 , NVL(B."0.3LESS_THAN", 0) "LESS_THAN_0_DOT_3"   --  0.3s
			 , NVL(B."1LESS_THAN", 0)   "LESS_THAN_1"     --  1s
			 , NVL(B."3LESS_THAN", 0)   "LESS_THAN_3"     --  3s
			 , NVL(B."10LESS_THAN", 0)  "LESS_THAN_10"    --  10s
			 , NVL(B."60LESS_THAN", 0)  "LESS_THAN_60"    --  60s
			 , NVL(B."60MORE_THAN", 0)  "MORE_THAN_60"    -- >= 60s
		  FROM (SELECT '적합' PASS_FAIL_TYPE FROM DUAL
				 UNION ALL
				SELECT '부적합' PASS_FAIL_TYPE FROM DUAL
			   ) A
		  LEFT OUTER JOIN
			   (SELECT (CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
							  AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
							  AND NOT (  (PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
										  OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN '적합' ELSE '부적합' END) PASS_FAIL_TYPE
					 , SUM(CASE WHEN PRD_ELAPSED_TIME <![CDATA[<]]> = 0.1                            THEN 1 END) "0.1LESS_THAN"    --  0.1s
					 , SUM(CASE WHEN PRD_ELAPSED_TIME >  0.1 AND PRD_ELAPSED_TIME <![CDATA[<]]> 0.3 THEN 1 END) "0.3LESS_THAN"    --  0.3s
					 , SUM(CASE WHEN PRD_ELAPSED_TIME >= 0.3 AND PRD_ELAPSED_TIME <![CDATA[<]]> 1   THEN 1 END) "1LESS_THAN"      --  1s
					 , SUM(CASE WHEN PRD_ELAPSED_TIME >= 1   AND PRD_ELAPSED_TIME <![CDATA[<]]> 3   THEN 1 END) "3LESS_THAN"      --  3s
					 , SUM(CASE WHEN PRD_ELAPSED_TIME >= 3   AND PRD_ELAPSED_TIME <![CDATA[<]]> 10  THEN 1 END) "10LESS_THAN"     --  10s
					 , SUM(CASE WHEN PRD_ELAPSED_TIME >= 10  AND PRD_ELAPSED_TIME <![CDATA[<]]> 60  THEN 1 END) "60LESS_THAN"     --  60s
					 , SUM(CASE WHEN PRD_ELAPSED_TIME >= 60                             THEN 1 END) "60MORE_THAN"     -- >= 60s
				  FROM TMP_DEPLOY_PERF_SQL A
					 , TMP_BIG_TABLE_BASE B
				 WHERE A.DBID = B.DBID
				 GROUP BY (CASE WHEN ELAPSED_TIME_THRESHOLD >= PRD_ELAPSED_TIME
								 AND BUFFER_GETS_THRESHOLD >= PRD_BUFFER_GETS
								 AND NOT (  (PRD_BUFFER_GETS > B.BIG_TABLE_THRESHOLD_CNT AND FULL_SCAN_DECIDE_DIV_CD = '2' AND PRD_BIG_TABLE_FULLSCAN_YN = 'Y')
								  OR (FULL_SCAN_DECIDE_DIV_CD = '1' AND PRD_BIG_TABLE_FULLSCAN_YN = 'N') ) THEN '적합' ELSE '부적합' END)
			   ) B PARTITION BY (NULL)
			ON (A.PASS_FAIL_TYPE = B.PASS_FAIL_TYPE)
	</select>
	
</mapper>