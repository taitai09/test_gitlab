<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    2020.10.26    이재우    최초작성
-->

<mapper namespace="omc.spop.dao.AutoPerformanceCompareBetweenDbServiceDao">
    <!-- SQL-1 : SQL점검팩 콤보 조회 -->
    <select id="getSqlPerfPacName" resultType="sqlAutoPerformanceCompare" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.getSqlPerfPacName */
        SELECT
               A.PERF_CHECK_NAME AS PERF_CHECK_NAME
               /* HIDDEN */
             , A.PROJECT_ID AS PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID AS SQL_AUTO_PERF_CHECK_ID
             , CASE WHEN A.ORIGINAL_DBID IS NOT NULL THEN 'Y' ELSE 'N' END AS DATA_YN
          FROM SQL_AUTO_PERF_CHK A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.PERF_CHECK_TYPE_CD = #{perf_check_type_cd}
           <if test="isAll == null or isAll == ''">
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
           </if>
           <if test="perf_check_exec_end_dt != null and perf_check_exec_end_dt !='' ">
           AND A.REG_DT BETWEEN TO_DATE( #{perf_check_exec_begin_dt} || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
                            AND TO_DATE( #{perf_check_exec_end_dt} || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
           </if>
           
           <if test="condition != null and condition !='' and original_dbid != null and original_dbid != ''" >
               AND A.ORIGINAL_DBID = #{original_dbid}
           </if>
         ORDER BY A.PERF_CHECK_NAME
    </select>

    <select id="getSqlPerfDetailInfo" resultType="sqlAutoPerformanceCompare" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.getSqlPerfDetailInfo */
        SELECT A.ORIGINAL_DBID AS ORIGINAL_DBID
             , A.PERF_CHECK_TARGET_DBID AS PERF_CHECK_TARGET_DBID
             , A.TOPN_CNT AS TOPN_CNT
             , TO_CHAR(A.PERF_CHECK_RANGE_BEGIN_DT, 'YYYY-MM-DD') AS PERF_CHECK_RANGE_BEGIN_DT
             , TO_CHAR(A.PERF_CHECK_RANGE_END_DT, 'YYYY-MM-DD') AS PERF_CHECK_RANGE_END_DT
             , TO_CHAR(A.PERF_CHECK_RANGE_BEGIN_DT, 'HH24:MI') AS PERF_PERIOD_START_TIME
             , TO_CHAR(A.PERF_CHECK_RANGE_END_DT, 'HH24:MI') AS PERF_PERIOD_END_TIME
             , A.LITERAL_EXCEPT_YN AS LITERAL_EXCEPT_YN
             , A.OWNER_LIST AS OWNER_LIST
             , A.MODULE_LIST AS MODULE_LIST
             , A.TABLE_NAME_LIST AS TABLE_NAME_LIST
             , A.EXTRA_FILTER_PREDICATION AS EXTRA_FILTER_PREDICATION
             , A.PERF_COMPARE_METH_CD AS PERF_COMPARE_METH_CD                               /* PERF_COMPARE_METH_CD */
             , A.PARALLEL_DEGREE AS PARALLEL_DEGREE                                         /* PARALLEL_DEGREE */
             , A.DML_EXEC_YN AS DML_EXEC_YN                                                 /* DML_EXEC_YN */
             , A.MULTIPLE_EXEC_CNT AS MULTIPLE_EXEC_CNT                                     /* MULTIPLE_EXEC_CNT */
             , A.MULTIPLE_BIND_EXEC_CNT AS MULTIPLE_BIND_EXEC_CNT                           /* MULTIPLE_BIND_EXEC_CNT */
             , A.SQL_TIME_LIMT_CD AS SQL_TIME_LIMT_CD                                       /* SQL_TIME_LIMT_CD */
             , A.MAX_FETCH_CNT AS MAX_FETCH_CNT                                             /* MAX_FETCH_CNT */
             , A.ALL_SQL_YN AS ALL_SQL_YN
             , A.SQL_TIME_DIRECT_PREF_VALUE AS SQL_TIME_DIRECT_PREF_VALUE
             , A.PERF_CHECK_SQL_SOURCE_TYPE_CD AS PERF_CHECK_SQL_SOURCE_TYPE_CD
             /* HIDDEN */
             , A.PROJECT_ID AS PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID AS SQL_AUTO_PERF_CHECK_ID
             , A.MAX_FETCH_CNT
             , CASE WHEN A.ORIGINAL_DBID IS NOT NULL THEN 'Y' ELSE 'N' END AS DATA_YN
          FROM SQL_AUTO_PERF_CHK A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
    </select>
    
    <!-- SQL-3 : 수행결과 조회     -->
    <!-- SQL-23 : 일괄 검증 수행결과 조회     -->
    <select id="loadPerformanceCheckCount" parameterType="sqlAutomaticPerformanceCheck" resultType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerformanceCheckCount */
        SELECT A.PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID
             , '전체: '||COUNT(*) AS TOTAL_CNT
             , '수행완료: '||NVL(SUM(CASE WHEN (B.PROJECT_ID IS NULL OR A.PERF_IMPACT_TYPE_CD IN ('4', '5')) AND A.SQL_COMMAND_TYPE_CD IS NOT NULL THEN 1 ELSE 0 END), 0) AS COMPLETED_CNT
             , '수행중: '||NVL(SUM(CASE WHEN B.PROJECT_ID IS NULL AND A.SQL_COMMAND_TYPE_CD IS NULL THEN 1 ELSE 0 END), 0) AS PERFORMING_CNT
             , '오류: '||NVL(SUM(CASE WHEN B.PROJECT_ID IS NOT NULL AND (A.PERF_IMPACT_TYPE_CD IS NULL OR A.PERF_IMPACT_TYPE_CD IN ('1', '2', '3')) THEN 1 ELSE 0 END), 0) AS ERR_CNT
             , NVL(MAX(PERF_CHECK_FORCE_CLOSE_YN), 'N') AS PERF_CHECK_FORCE_CLOSE_YN
             , NVL(TO_CHAR(C.PERF_CHECK_EXEC_END_DT), 'N') AS PERF_CHECK_ERROR
          FROM SQL_AUTO_PERF_CHK_TARGET A
             , SQL_AUTO_PERF_CHK_ERROR B
             , SQL_AUTO_PERF_CHK C
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.PROJECT_ID = B.PROJECT_ID(+)
           AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID(+)
           AND A.SQL_ID = B.SQL_ID(+)
           AND A.PROJECT_ID = C.PROJECT_ID
           AND A.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID
           AND C.DATABASE_KINDS_CD = #{database_kinds_cd}
         GROUP BY A.PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID
             , C.PERF_CHECK_EXEC_END_DT
    </select>

    <!-- SQL-4 : SQL점검팩 조회(Popup) -->
    <select id="getSqlPerformanceInfo" resultType="sqlAutoPerformanceCompare" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.getSqlPerformanceInfo */
        SELECT A.PERF_CHECK_NAME AS PERF_CHECK_NAME
             , A.PERF_CHECK_DESC AS PERF_CHECK_DESC
          FROM SQL_AUTO_PERF_CHK A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
    </select>

    <!-- SQL-5: SQL점검팩-신규(Popup) -->
    <insert id="insertSqlPerformanceInfo" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertSqlPerformanceInfo */
        INSERT INTO SQL_AUTO_PERF_CHK
             ( PROJECT_ID                                  /* 프로젝트ID  */
             , SQL_AUTO_PERF_CHECK_ID                      /* SQL자동성능점검회차 */
             , PERF_CHECK_NAME                             /* 성능점검명 */
             , PERF_CHECK_DESC                             /* 성능점검설명 */
             , PERF_CHECK_TYPE_CD                          /* 성능점검유형코드 */
             , REG_DT                                      /* 등록일자 */
             , DATABASE_KINDS_CD                           /* DBMS종류 */
             )
        VALUES
             ( #{project_id}                               /* 프로젝트ID */
             , (SELECT NVL(MAX(SQL_AUTO_PERF_CHECK_ID) + 1, 1)
          FROM SQL_AUTO_PERF_CHK
         WHERE PROJECT_ID = #{project_id})                 /* SQL자동성능점검회차 */
             , #{perf_check_name}                          /* 성능점검명 */
             , #{perf_check_desc}                          /* 성능점검설명 */
             , #{perf_check_type_cd}                       /* 성능점검유형코드(1:DB변경 성능영향도분석, 2:일괄성능점검, 3:테이블변경 성능영향도분석) */
             , SYSDATE                                     /* 등록일자 */
             , #{database_kinds_cd}                        /* DBMS종류 */
             )
    </insert>

    <!-- SQL-6: SQL점검팩-수정 -->
    <update id="updateSqlPerformanceInfo" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.updateSqlPerformanceInfo */
        UPDATE SQL_AUTO_PERF_CHK                                     /* (TABLE) */
           SET PERF_CHECK_NAME = #{perf_check_name}                  /* 성능점검명 */
             , PERF_CHECK_DESC = #{perf_check_desc}                  /* 성능점검설명 */
         WHERE PROJECT_ID = #{project_id}                            /* 프로젝트ID */
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}    /* SQL자동성능점검회차 */
           AND DATABASE_KINDS_CD = #{database_kinds_cd}
    </update>

    <!-- SQL-25 성능비교 수행 체크 -->
    <select id="countExecuteTms" parameterType="sqlAutoPerformanceCompare" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.countExecuteTms */
        /* 01: 프로젝트에 자동성능점검 수행중인 회차가 있는지 조회 */
        SELECT COUNT(*) AS ECOUNT
          FROM SQL_AUTO_PERF_CHK A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND A.PERF_CHECK_EXEC_END_DT IS NULL
           AND A.PERF_CHECK_EXEC_BEGIN_DT IS NOT NULL
           AND ROWNUM = 1
    </select>

    <!-- SQL-25-1 일괄검증 수행 체크 (재사용) -->
    <select id="countTuningExecuteTms" parameterType="sqlAutoPerformanceCompare" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.countTuningExecuteTms */
        /* 01: 프로젝트에 자동성능점검 수행중인 회차가 있는지 조회 */
        SELECT COUNT(*) AS ECOUNT
          FROM SQL_AUTO_PERF_CHK A
         WHERE A.PARENT_PROJECT_ID = #{project_id}
           AND A.PARENT_SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND A.PERF_CHECK_EXEC_END_DT IS NULL
           AND A.PERF_CHECK_EXEC_BEGIN_DT IS NOT NULL
           AND ROWNUM = 1
    </select>

    <!-- SQL-27 이전 일괄 검증 수행했던 회차가 있는지 체크 (재사용) -->
    <select id="countPerformanceRecord" parameterType="sqlAutoPerformanceCompare" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.countPerformanceRecord */
        /* 02: 프로젝트에 자동성능점검 수행했던 회차가 있는지 조회 */
        SELECT COUNT(*) AS RCOUNT
          FROM SQL_AUTO_PERF_CHK A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND A.PERF_CHECK_EXEC_END_DT IS NOT NULL
           AND ROWNUM = 1
    </select>

    <!-- SQL-7: SQL_AUTO_PERF_CHK Update -->
    <update id="updateSqlAutoPerformance" parameterType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.updateSqlAutoPerformance */
        UPDATE SQL_AUTO_PERF_CHK
           SET ORIGINAL_DBID = #{original_dbid}
             , PERF_CHECK_TARGET_DBID = #{perf_check_target_dbid}
             , TOPN_CNT = #{topn_cnt}
            <choose>
                <when test="perf_period_start_time != null and perf_period_start_time != ''">
             , PERF_CHECK_RANGE_BEGIN_DT = TO_TIMESTAMP( #{perf_check_range_begin_dt} || #{perf_period_start_time} ||':00.000000', 'YYYY-MM-DD HH24:MI:SS.FF6')
             , PERF_CHECK_RANGE_END_DT = TO_TIMESTAMP(#{perf_check_range_end_dt} || #{perf_period_end_time} || ':59.999999', 'YYYY-MM-DD HH24:MI:SS.FF6')
                </when>
                <otherwise>
             , PERF_CHECK_RANGE_BEGIN_DT = TO_DATE(#{perf_check_range_begin_dt},'YYYY-MM-DD')
             , PERF_CHECK_RANGE_END_DT = TO_DATE(#{perf_check_range_end_dt},'YYYY-MM-DD')
                </otherwise>
            </choose>
            <if test="extra_filter_predication != null and extra_filter_predication != ''">
             , EXTRA_FILTER_PREDICATION = #{extra_filter_predication}
            </if>
            <if test="perf_compare_meth_cd != null and perf_compare_meth_cd != ''">
             , PERF_COMPARE_METH_CD = #{perf_compare_meth_cd}
             , PARALLEL_DEGREE = #{parallel_degree}
            </if>
            <if test="multiple_exec_cnt != null and multiple_exec_cnt != ''">
             , MULTIPLE_EXEC_CNT = #{multiple_exec_cnt}
            </if>
            <if test="multiple_bind_exec_cnt != null and multiple_bind_exec_cnt != ''">
             , MULTIPLE_BIND_EXEC_CNT = #{multiple_bind_exec_cnt}
            </if>
            <choose>
                <when test="dml_exec_yn != null and dml_exec_yn != '' and dml_exec_yn != 'N'.toString()">
             , DML_EXEC_YN = #{dml_exec_yn}
                </when>
                <otherwise>
             , DML_EXEC_YN = 'N'
                </otherwise>
            </choose>
             , PERF_CHECK_EXECUTER_ID = #{perf_check_executer_id}
             , PERF_CHECK_EXEC_BEGIN_DT = SYSDATE
             , PERF_CHECK_EXEC_END_DT = null
             , PERF_CHECK_FORCE_CLOSE_YN = null
             , LITERAL_EXCEPT_YN = #{literal_except_yn}
             , OWNER_LIST = #{owner_list}
             , MODULE_LIST = #{module_list}
            <if test="table_name_list != null and table_name_list != ''">
             , TABLE_NAME_LIST = #{table_name_list}
            </if>
             , ALL_SQL_YN = #{all_sql_yn}
            <if test="sql_time_limt_cd != null and sql_time_limt_cd != ''">
             , SQL_TIME_LIMT_CD = #{sql_time_limt_cd}
             , SQL_TIME_DIRECT_PREF_VALUE = #{sql_time_direct_pref_value}
            </if>
            <if test="perf_check_sql_source_type_cd != null and perf_check_sql_source_type_cd != ''">
             , PERF_CHECK_SQL_SOURCE_TYPE_CD = #{perf_check_sql_source_type_cd}
            </if>
            <if test="max_fetch_cnt != null and max_fetch_cnt != ''">
             , MAX_FETCH_CNT = #{max_fetch_cnt}
            </if>
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND DATABASE_KINDS_CD = #{database_kinds_cd}
    </update>

    <!-- SQL-8: DELETE TABLE -->
    <!-- SQL-28: 일괄검증 데이터 삭제 (재사용) -->
    <delete id="deleteSqlAutoPerformanceTarget" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerformanceTarget */
        DELETE SQL_AUTO_PERF_CHK_TARGET
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>
    <delete id="deleteSqlAutoPerformanceResult" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerformanceResult */
        DELETE SQL_AUTO_PERF_CHK_RESULT
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>
    <delete id="deleteSqlAutoPerformanceError" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerformanceError */
        DELETE SQL_AUTO_PERF_CHK_ERROR
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>
    <delete id="deleteSqlAutoPerformancePlanTable" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerformancePlanTable */
        DELETE SQL_AUTO_PERF_CHK_PLAN_TABLE
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>
    <delete id="deleteSqlAutoPerformanceStat" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerformanceStat */
        DELETE SQL_AUTO_PERF_SQL_STAT
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>
    <delete id="deleteSqlAutoPerformancePlan" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerformancePlan */
        DELETE SQL_AUTO_PERF_SQL_PLAN
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>
    <delete id="deleteSqlAutoPerformanceBind" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerformanceBind */
        DELETE SQL_AUTO_PERF_CHK_BIND
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>
    <!-- 테이블 삭제 추가 -->
    <delete id="deleteTableCHGPerfTargetSql" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteTableCHGPerfTargetSql */
        DELETE TABLE_CHG_PERF_CHK_TARGET_SQL
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>
    <!-- BIND PLAN 삭제 추가 -->
    <delete id="deleteSqlAutoPerfChkBindPlan" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerfChkBindPlan */
        DELETE SQL_AUTO_PERF_CHK_BIND_PLAN
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </delete>

    <!-- SQL-9: SQL_AUTO_PERF_CHK_TARGET INSERT -->
    <!-- SQL-9-2: 전체 SQL > SQL_AUTO_PERF_CHK_TARGET INSERT (VSQL) -->
    <update id="insertSqlAutoPerformanceTarget" parameterType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertSqlAutoPerformanceTarget */
        /* SQL자동성능점검대상내역 INSERT */
        INSERT INTO SQL_AUTO_PERF_CHK_TARGET                    /* SQL자동성능점검대상내역(TABLE) */
             (
               PROJECT_ID                     /* 프로젝트ID */
             , SQL_AUTO_PERF_CHECK_ID         /* SQL점검팩ID */
             , SQL_ID                         /* SQL_ID */
             , BEFORE_PLAN_HASH_VALUE         /* 이전실행계획해시값 */
             , BEFORE_EXECUTIONS              /* 이전실행수 */
             , BEFORE_ROWS_PROCESSED          /* 이전처리레코드수 */
             , BEFORE_ELAPSED_TIME            /* 이전수행시간 */
             , BEFORE_BUFFER_GETS             /* 이전버퍼획득수 */
             , BEFORE_DISK_READS              /* 이전디스크읽기수 */
             , BEFORE_FULLSCAN_YN             /* 이전FULLSCAN여부 */
             , BEFORE_PARTITION_ALL_ACCESS_YN /* 이전전체파티션엑세스여부 */
             )
          WITH SQL_LIST AS
             (
               SELECT /*+ MATERIALIZE LEADING(A) USE_HASH(B) */
                      A.DBID
                    , A.SQL_ID
                    , A.PLAN_HASH_VALUE
                    , SUM(B.EXECUTIONS) EXECUTIONS
                    , SUM(B.ROWS_PROCESSED) ROWS_PROCESSED
                    , SUM(B.ELAPSED_TIME) ELAPSED_TIME
                    , SUM(B.BUFFER_GETS) BUFFER_GETS
                    , SUM(B.DISK_READS) DISK_READS
                    , ROW_NUMBER() OVER(ORDER BY SUM(B.BUFFER_GETS) DESC) RANK
                 FROM (
                        SELECT * 
                          FROM (
                                SELECT /*+ LEADING(C A B) USE_HASH(B) USE_NL(A) */
                                       A.DBID
                                     , A.SQL_ID
                                     , A.PLAN_HASH_VALUE
                                     , A.SQL_FULLTEXT AS SQL_TEXT
                                     , A.SNAP_TIME
                                     , B.MODULE
                                     , B.ACTION
                                     , A.PARSING_SCHEMA_NAME
                                     , ROW_NUMBER() OVER(PARTITION BY A.SQL_ID ORDER BY A.SNAP_TIME DESC, A.PLAN_HASH_VALUE) RNUM
                                  FROM VSQL_TEXT A
                                    , (SELECT /*+ FULL(B) */
                                            B.DBID
                                            , B.SQL_ID
                                             , B.MODULE_HASH
                                            , B.MODULE
                                            , B.ACTION
                                            , ROW_NUMBER() OVER(PARTITION BY B.DBID, B.SQL_ID ORDER BY B.SNAP_TIME) RNUM
                                        FROM VSQL_MODULE B
                                        WHERE DBID = #{original_dbid}) B
                                    , (SELECT DISTINCT 
                                                DBID
                                              , SQL_ID
                                              , PLAN_HASH_VALUE
                                         FROM VSQL_STATS_D
                                         WHERE DBID = #{original_dbid}
                                         AND LOG_DT BETWEEN TO_DATE( #{perf_check_range_begin_dt} || '00:00:00', 'YYYY-MM-DD HH24:MI:SS')
                                                        AND TO_DATE( #{perf_check_range_end_dt} || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
                                         ) C
                                 WHERE C.DBID = A.DBID
                                   AND C.SQL_ID = A.SQL_ID
                                   AND C.PLAN_HASH_VALUE = A.PLAN_HASH_VALUE
                                   AND A.DBID = B.DBID
                                   AND A.SQL_ID = B.SQL_ID
                                   AND A.DBID = #{original_dbid}                /* 원천DB(ASIS)  */
                                   /* 처음 수집된 모듈 */
                                   AND B.RNUM = 1
                                   /* BIND 가 CAPTURED 된 SQL 만 실행대상으로 선정 */
                                   AND A.COMMAND_TYPE IN (1, 2, 3, 6, 7, 170, 189) /* 1 : create table ,2 : INSERT, 3 : SELECT, 6 : UPDATE , 7 : DELETE, 170 : call, 189 : MERGE */
                                   /*
                                   AND ((
                                          A.COMMAND_TYPE = 3
                                          AND EXISTS (SELECT 1 FROM VSQL_BIND_CAPTURE C WHERE C.DBID = A.DBID AND C.SQL_ID = A.SQL_ID)
                                          AND 0 = (SELECT COUNT(*) FROM VSQL_BIND_CAPTURE C
                                                    WHERE C.DBID = A.DBID AND C.SQL_ID = A.SQL_ID
                                                      AND C.WAS_CAPTURED = 'YES'
                                                      AND C.VALUE_STRING IS NULL)
                                       )
                                       OR
                                       (
                                         A.COMMAND_TYPE != 3
                                       ))
                                    */
                                    /* FILTER SQL */
                                    /*
                                    AND B.MODULE = 'JDBC Thin Client'
                                    AND B.ACTION IS NULL
                                    AND A.PARSING_SCHEMA_NAME = 'OPENSIMUL'
                                    AND A.SQL_FULLTEXT LIKE '%OMC%'
                                    AND A.SQL_ID = '0b12maprjvr29'
                                    */
                                )
                         WHERE 1=1
                        <if test="extra_filter_predication != null and extra_filter_predication != ''">
                            ${extra_filter_predication}
                        </if>
                      ) A
             , (
               SELECT /*+ FULL(A) */
                    DBID
                    , SQL_ID
                    , PLAN_HASH_VALUE
                    , EXECUTIONS
                    , ROWS_PROCESSED
                    , ELAPSED_TIME
                    , BUFFER_GETS
                    , DISK_READS
                    , INST_ID
                    , FORCE_MATCHING_SIGNATURE
                    , COUNT(*) OVER (PARTITION BY FORCE_MATCHING_SIGNATURE ) FORCE_MATCHING_SIGNATURE_CNT
                    , ROW_NUMBER() OVER (PARTITION BY FORCE_MATCHING_SIGNATURE ORDER BY BUFFER_GETS DESC) LITERAL_SEQ
                 FROM VSQL_STATS A
                WHERE DBID = #{original_dbid} /*원천DB(ASIS) */
                   AND EXISTS (SELECT /*+ HASH_SJ FULL(P) */ 1 
                             FROM VSQL_PLAN P
                            WHERE P.DBID = A.DBID
                              AND P.PLAN_HASH_VALUE = A.PLAN_HASH_VALUE)
             ) B
         WHERE A.DBID = B.DBID
           AND A.SQL_ID = B.SQL_ID
           AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
           AND A.RNUM = 1
        
        <if test="literal_except_yn != null and literal_except_yn != '' and literal_except_yn != 'N'.toString()">
           /* 리터럴 SQL 제외 인 경우 조건 추가 */
           AND ( FORCE_MATCHING_SIGNATURE = 0 OR (
                                                   FORCE_MATCHING_SIGNATURE != 0 
                                                   AND FORCE_MATCHING_SIGNATURE_CNT <![CDATA[<]]> 5
                                                 ) OR (
                                                   FORCE_MATCHING_SIGNATURE != 0 
                                                   AND FORCE_MATCHING_SIGNATURE_CNT <![CDATA[>=]]> 5 
                                                   AND LITERAL_SEQ = 1)
               )
        </if>
         GROUP BY A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
        ) 
         /* 모듈조건 건수 */ 
        , PROJECT_SQL_IDFY_COND_CNT AS
        (
         SELECT SUM(CASE WHEN NVL(LENGTH(TRIM(OWNER_LIST)), 0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) OWNER_CNT
              , SUM(CASE WHEN NVL(LENGTH(TRIM(TABLE_NAME_LIST)), 0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) TABLE_CNT
              , SUM(CASE WHEN NVL(LENGTH(TRIM(MODULE_LIST)), 0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) MODULE_CNT
           FROM SQL_AUTO_PERF_CHK
          WHERE PROJECT_ID = #{project_id}
            AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
            AND DATABASE_KINDS_CD = #{database_kinds_cd}
        )
        /* 테이블 조건 필터링후 SQL LIST */ 
        , TABLE_FILTER_SQL_LIST AS
        (
            SELECT /*+ LEADING(A) FULL(B) USE_HASH(B) */
                    DISTINCT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
              FROM SQL_LIST A
                 , VSQL_PLAN B
                 , (
                    SELECT A.OWNER AS OBJECT_OWNER, A.TABLE_NAME AS OBJECT_NAME
                      FROM ODS_TABLES A
                     WHERE A.DBID = #{original_dbid}
                    <if test = "table_name_list != null and table_name_list != ''">
                       AND UPPER( A.TABLE_NAME ) IN 
                        <choose>
                            <when test="strTableNameList.size() != 0">
                                <foreach collection="strTableNameList" item="tableName" open="(" separator="," close=")" >
                                UPPER( REPLACE( TRIM( #{tableName} ), CHR(09),'' ) )
                                </foreach>
                            </when>
                            <otherwise>
                                ( UPPER( REPLACE( TRIM( #{table_name_list} ), CHR(09),'' ) ) )    /* table_name_list  */
                            </otherwise>
                        </choose>
                    </if>
                       AND A.BASE_DAY = (
                                         SELECT MAX(BASE_DAY) BASE_DAY
                                           FROM ODS_TABLES
                                          WHERE DBID = #{original_dbid}
                                        )
                     UNION ALL
                    SELECT A.OWNER AS OBJECT_OWNER, A.INDEX_NAME AS OBJECT_NAME
                      FROM ODS_INDEXES A
                     WHERE A.DBID = #{original_dbid}
                    <if test = "table_name_list != null and table_name_list != ''">
                       AND UPPER( A.TABLE_NAME ) IN 
                        <choose>
                            <when test="strTableNameList.size() != 0">
                                <foreach collection="strTableNameList" item="tableName" open="(" separator="," close=")" >
                            UPPER( REPLACE( TRIM( #{tableName} ), CHR(09),'' ) )
                                </foreach>
                            </when>
                            <otherwise>
                            ( UPPER( REPLACE( TRIM( #{table_name_list} ), CHR(09),'' ) ) )    /* table_name_list  */
                            </otherwise>
                        </choose>
                    </if>
                       AND A.BASE_DAY = (
                                         SELECT MAX(BASE_DAY) BASE_DAY
                                           FROM ODS_INDEXES
                                          WHERE DBID = #{original_dbid}
                                        )
                  ) C
             WHERE A.DBID = B.DBID
               AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
               AND B.OBJECT_OWNER = C.OBJECT_OWNER
               AND B.OBJECT_NAME = C.OBJECT_NAME
               AND (B.OBJECT_TYPE LIKE 'TABLE%' OR B.OBJECT_TYPE LIKE 'INDEX%')
               AND (SELECT TABLE_CNT FROM PROJECT_SQL_IDFY_COND_CNT) <![CDATA[>]]> 0
             UNION ALL
            SELECT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
              FROM SQL_LIST A
             WHERE (SELECT TABLE_CNT FROM PROJECT_SQL_IDFY_COND_CNT) = 0
        )
        /* OWNER 조건 필터링후 SQL LIST */
        , OWNER_FILTER_SQL_LIST AS
        (
            SELECT /*+ LEADING(A C) USE_HASH(C)  FULL(C) */
                   DISTINCT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE, C.OBJECT_OWNER
              FROM TABLE_FILTER_SQL_LIST A
                 , VSQL_PLAN C
             WHERE A.DBID = C.DBID
               AND A.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
<!--                AND C.OBJECT_OWNER IN UPPER(TRIM( #{owner_list} ))                 owner list -->
               AND UPPER(C.OBJECT_OWNER) IN 
            <choose>
                <when test="strOwnerList.size() != 0">
                    <foreach collection="strOwnerList" item="owner" open="(" separator="," close=")" >
                    UPPER( REPLACE( TRIM( #{owner} ), CHR(09),'' ) )
                    </foreach>
                </when>
                <otherwise>
                    ( UPPER( REPLACE( TRIM(  #{owner_list} ), CHR(09),'' ) ) )                                     /* owner list */
                </otherwise>
            </choose>
               AND (SELECT OWNER_CNT FROM PROJECT_SQL_IDFY_COND_CNT) <![CDATA[>]]> 0
             UNION ALL
            SELECT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE,  NULL OBJECT_OWNER
              FROM TABLE_FILTER_SQL_LIST A
             WHERE (SELECT OWNER_CNT FROM PROJECT_SQL_IDFY_COND_CNT) = 0
        )
        /* 모듈 조건 필터링후 SQL LIST */
        , MODULE_FILTER_SQL_LIST AS
        (
            SELECT /*+ LEADING(A) USE_HASH(B) FULL(B) */
                   DISTINCT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
              FROM OWNER_FILTER_SQL_LIST A
                 , VSQL_MODULE B
             WHERE A.DBID = B.DBID
               AND A.SQL_ID = B.SQL_ID
<!--                AND UPPER(TRIM(B.MODULE)) LIKE '%'||UPPER(TRIM( #{module_list} ))||'%'   keum: 입력된 모듈 갯수 만큼 LIKE문을 만들어야 함 -->
               AND  
            <choose>
                <when test="strModuleList.size() != 0">
                    <foreach collection="strModuleList" item="module" open="(" separator=" OR " close=")">
                        UPPER(TRIM( B.MODULE )) LIKE '%' || UPPER( REPLACE( TRIM( #{module} ), CHR(09),'' ) ) || '%'
                    </foreach>
                </when>
                <otherwise>
                    UPPER(TRIM( B.MODULE )) LIKE '%' || UPPER( REPLACE( TRIM( #{module_list} ), CHR(09),'' ) ) || '%'                                     /* module_list */
                </otherwise>
            </choose>
               AND (SELECT MODULE_CNT FROM PROJECT_SQL_IDFY_COND_CNT) <![CDATA[>]]> 0
             UNION ALL
            SELECT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
              FROM OWNER_FILTER_SQL_LIST A
             WHERE (SELECT MODULE_CNT FROM PROJECT_SQL_IDFY_COND_CNT) = 0
        )
        SELECT *
          FROM (
                SELECT /*+ LEADING(A B C) USE_HASH(B) USE_HASH(C) */
                       #{project_id} project_id
                     , #{sql_auto_perf_check_id} sql_auto_perf_check_id
                     , B.SQL_ID 
                     , B.PLAN_HASH_VALUE
                     , B.EXECUTIONS
                     , B.ROWS_PROCESSED
                     , B.ELAPSED_TIME
                     , B.BUFFER_GETS
                     , B.DISK_READS
                     , (CASE WHEN C.FULLSCAN_CNT <![CDATA[>]]> 0 THEN 'Y' ELSE 'N' END) FULLSCAN_YN
                     , (CASE WHEN C.PARTITION_ALL_ACCESS_CNT <![CDATA[>]]> 0 THEN 'Y' ELSE 'N' END) PARTITION_ALL_ACCESS_YN
                  FROM MODULE_FILTER_SQL_LIST A
                     , SQL_LIST B
                     , (
                        SELECT DBID 
                             , PLAN_HASH_VALUE
                             , SUM(CASE WHEN OPERATION || ' ' || OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'BITMAP INDEX FAST FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN') THEN 1 ELSE 0 END)  FULLSCAN_CNT
                             , SUM(CASE WHEN OPERATION || ' ' || OPTIONS IN ('PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL') THEN 1 ELSE 0 END) PARTITION_ALL_ACCESS_CNT
                          FROM VSQL_PLAN 
                         WHERE DBID = #{original_dbid}
                           AND OPERATION || ' ' || OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'BITMAP INDEX FAST FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN', 'PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL')
                         GROUP BY DBID, PLAN_HASH_VALUE
                    ) C
                WHERE A.SQL_ID = B.SQL_ID
                  AND B.DBID = C.DBID(+)
                  AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE(+)
                ORDER BY B.RANK
              )
        <if test="topn_cnt != null and topn_cnt != ''">
         WHERE ROWNUM <![CDATA[<=]]> #{topn_cnt}
        </if>
    </update>
    
    <!-- SQL_9-2B TABLE_CHG_PERF_CHK_TARGET_SQL INSERT (VSQL) -->
    <update id="insertTableCHGPerfChkTargetVSQL" parameterType="sqlAutomaticPerformanceCheck">
        INSERT INTO TABLE_CHG_PERF_CHK_TARGET_SQL
             (
               PROJECT_ID
             , SQL_AUTO_PERF_CHECK_ID
             , SQL_ID
             , TABLE_OWNER
             , TABLE_NAME
             )
          WITH SQL_LIST AS (
               /* 이미 생성된 SQL_AUTO_PERF_CHK_TARGET에서 SQL 목록 추출 */
               SELECT A.ORIGINAL_DBID AS DBID
                    , B.SQL_ID
                    , B.BEFORE_PLAN_HASH_VALUE AS PLAN_HASH_VALUE
                 FROM SQL_AUTO_PERF_CHK A
                    , SQL_AUTO_PERF_CHK_TARGET B
                WHERE A.PROJECT_ID = #{project_id}
                  AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                  AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
                  AND A.PROJECT_ID = A.PROJECT_ID
                  AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
          ) , TABLE_SQL_LIST AS (
                /* SQL LIST에 대한 테이블 목록  */  
                SELECT DISTINCT A.DBID, C.TABLE_OWNER, C.TABLE_NAME, A.SQL_ID
                  FROM SQL_LIST A
                     , VSQL_PLAN B
                     , (
                        SELECT A.DBID, A.OWNER AS TABLE_OWNER, A.TABLE_NAME AS OBJECT_NAME, A.TABLE_NAME
                          FROM ODS_TABLES A
                         WHERE A.DBID = #{original_dbid}
                        <if test = "table_name_list != null and table_name_list != ''">
                        /* TABLE 조건이 입력 */
                           AND UPPER( A.TABLE_NAME ) IN 
                            <choose>
                                <when test="strTableNameList.size() != 0">
                                    <foreach collection="strTableNameList" item="tableName" open="(" separator="," close=")" >
                                    UPPER( REPLACE( TRIM( #{tableName} ), CHR(09),'' ) )
                                    </foreach>
                                </when>
                                <otherwise>
                                ( UPPER( REPLACE( TRIM( #{table_name_list} ), CHR(09),'' ) ) )
                                </otherwise>
                            </choose>
                        </if>
                           AND A.BASE_DAY = (
                                             SELECT MAX(BASE_DAY) BASE_DAY
                                               FROM ODS_TABLES
                                              WHERE DBID = #{original_dbid}
                                            )
                                    
                         UNION ALL
                        SELECT A.DBID, A.OWNER AS TABLE_OWNER, A.INDEX_NAME AS OBJECT_NAME, A.TABLE_NAME
                          FROM ODS_INDEXES A
                         WHERE A.DBID = #{original_dbid}
                        <if test = "table_name_list != null and table_name_list != ''">
                        /* TABLE 조건이 입력되면 */
                           AND UPPER( A.TABLE_NAME ) IN 
                            <choose>
                                <when test="strTableNameList.size() != 0">
                                    <foreach collection="strTableNameList" item="tableName" open="(" separator="," close=")" >
                                    UPPER( REPLACE( TRIM( #{tableName} ), CHR(09),'' ) )
                                    </foreach>
                                </when>
                                <otherwise>
                                ( UPPER( REPLACE( TRIM( #{table_name_list} ), CHR(09),'' ) ) )
                                </otherwise>
                            </choose>
                        </if>
                           AND A.BASE_DAY = (
                                             SELECT MAX(BASE_DAY) BASE_DAY
                                               FROM ODS_INDEXES
                                              WHERE DBID = #{original_dbid}
                                            )
                      ) C
                 WHERE A.DBID = B.DBID
                   AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
                   AND B.OBJECT_OWNER = C.TABLE_OWNER
                   AND B.OBJECT_NAME = C.OBJECT_NAME
                   AND (B.OBJECT_TYPE LIKE 'TABLE%' OR B.OBJECT_TYPE LIKE 'INDEX%')
            ) 
            SELECT #{project_id} project_id
                 , #{sql_auto_perf_check_id} sql_auto_perf_check_id
                 , A.SQL_ID 
                 , A.TABLE_OWNER
                 , A.TABLE_NAME 
              FROM TABLE_SQL_LIST A
    </update>
    
    <!-- SQL_9-1A SQL_AUTO_PERF_CHK_TARGET INSERT (AWR)  -->
    <update id="insertSQLAutoPerfChkTarget" parameterType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertSQLAutoPerfChkTarget */
        INSERT INTO SQL_AUTO_PERF_CHK_TARGET  
             (
               PROJECT_ID                     
             , SQL_AUTO_PERF_CHECK_ID
             , SQL_ID                         
             , BEFORE_PLAN_HASH_VALUE         
             , BEFORE_EXECUTIONS              
             , BEFORE_ROWS_PROCESSED          
             , BEFORE_ELAPSED_TIME            
             , BEFORE_BUFFER_GETS             
             , BEFORE_DISK_READS              
             , BEFORE_FULLSCAN_YN             
             , BEFORE_PARTITION_ALL_ACCESS_YN 
             )
        WITH OWNER_TABLE AS (
             SELECT A.TABLE_OWNER
                  , A.TABLE_NAME
               FROM (/* 콤마로 입력된 TABLE을 행으로 펼치는 SQL */
                     SELECT OWNER_LIST AS TABLE_OWNER
                          , UPPER(REGEXP_SUBSTR(REPLACE(REPLACE(TRIM(A.TABLE_NAME_LIST), CHR(32), ''), CHR(9), ''), '[^,]+', 1, RCNT)) AS TABLE_NAME
                       FROM (
                             SELECT OWNER_LIST, TABLE_NAME_LIST
                               FROM SQL_AUTO_PERF_CHK
                              WHERE PROJECT_ID = #{project_id}
                                AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                                AND DATABASE_KINDS_CD = #{database_kinds_cd}
                            ) A
                          , (SELECT LEVEL RCNT FROM DUAL CONNECT BY LEVEL <![CDATA[<=]]> 100)
                      WHERE RCNT <![CDATA[<=]]> REGEXP_COUNT(A.TABLE_NAME_LIST, ',') + 1
                    ) A
        ), SQL_LIST AS (
             SELECT DISTINCT A.DBID, A.TABLE_OWNER, A.TABLE_NAME, B.SQL_ID
               FROM (
                     /* TABLE */
                     SELECT B.DBID, B.OWNER AS TABLE_OWNER, B.TABLE_NAME AS OBJECT_NAME, B.TABLE_NAME
                       FROM OWNER_TABLE A
                          , ODS_TABLES B
                      WHERE B.DBID = #{original_dbid}
                        AND B.OWNER = A.TABLE_OWNER
                        AND B.TABLE_NAME = A.TABLE_NAME
                        AND B.BASE_DAY = (SELECT MAX(BASE_DAY) BASE_DAY    FROM ODS_TABLES WHERE DBID = #{original_dbid})
                     UNION ALL
                     /* INDEX */
                     SELECT B.DBID, B.OWNER AS TABLE_OWNER, B.INDEX_NAME AS OBJECT_NAME, B.TABLE_NAME
                       FROM OWNER_TABLE A
                          , ODS_INDEXES B
                      WHERE B.DBID = #{original_dbid}
                        AND B.TABLE_OWNER = A.TABLE_OWNER
                        AND B.TABLE_NAME = A.TABLE_NAME
                        AND B.BASE_DAY = (SELECT MAX(BASE_DAY) FROM ODS_INDEXES WHERE DBID = #{original_dbid})
                    ) A
                    , ODS_HIST_SQL_PLAN B
                WHERE B.DBID = A.DBID
                  AND B.OBJECT_OWNER = A.TABLE_OWNER
                  AND B.OBJECT_NAME = A.OBJECT_NAME
                  AND (B.OBJECT_TYPE LIKE 'TABLE%' OR B.OBJECT_TYPE LIKE 'INDEX%')
                   
        ), FILTER_SQL_LIST AS (
            SELECT A.DBID
                 , A.SQL_ID
                 , A.PLAN_HASH_VALUE
                 , SUM(A.ELAPSED_TIME_DELTA)   AS ELAPSED_TIME
                 , SUM(A.BUFFER_GETS_DELTA)    AS BUFFER_GETS
                 , SUM(A.DISK_READS_DELTA)     AS DISK_READS
                 , SUM(A.ROWS_PROCESSED_DELTA) AS ROWS_PROCESSED
                 , SUM(DECODE(A.EXECUTIONS_DELTA, 0, 1, A.EXECUTIONS_DELTA)) AS EXECUTIONS
                 , ROW_NUMBER() OVER(ORDER BY SUM(A.BUFFER_GETS_DELTA) DESC) RANK
              FROM (
                   SELECT A.DBID
                        , A.SQL_ID
                        , B.PLAN_HASH_VALUE
                        , B.ELAPSED_TIME_DELTA
                        , B.BUFFER_GETS_DELTA
                        , B.DISK_READS_DELTA
                        , B.ROWS_PROCESSED_DELTA
                        , B.EXECUTIONS_DELTA
                        , B.FORCE_MATCHING_SIGNATURE
                        , ROW_NUMBER() OVER(PARTITION BY B.DBID, B.SQL_ID ORDER BY B.BEGIN_INTERVAL_TIME DESC, B.PLAN_HASH_VALUE) AS RNUM
                        , COUNT(*) OVER (PARTITION BY B.FORCE_MATCHING_SIGNATURE ) AS FORCE_MATCHING_SIGNATURE_CNT
                        , ROW_NUMBER() OVER (PARTITION BY B.FORCE_MATCHING_SIGNATURE ORDER BY B.BUFFER_GETS_DELTA DESC) AS LITERAL_SEQ
                     FROM SQL_LIST A
                        , ODS_HIST_SQLSTAT B
                    WHERE A.DBID = B.DBID
                      AND A.SQL_ID = B.SQL_ID
                      AND B.BEGIN_INTERVAL_TIME BETWEEN TO_TIMESTAMP(#{perf_check_range_begin_dt} || '00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF3')
                                                    AND TO_TIMESTAMP(#{perf_check_range_end_dt} || '23:59:59.999', 'YYYY-MM-DD HH24:MI:SS.FF3')
                      AND EXISTS (SELECT /*+ NL_SJ */ 1 
                                    FROM ODS_HIST_SQL_PLAN P
                                   WHERE P.DBID = B.DBID
                                     AND P.SQL_ID = B.SQL_ID
                                     AND P.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE)
               /* MODULE이 입력되면 조건 추가 */
               <if test="module_list != null and module_list != ''">
                     AND UPPER(TRIM( B.MODULE )) LIKE '%' || UPPER(REPLACE(TRIM(#{module_list}), CHR(09),'')) || '%'        /* module_list */
               </if>
                  ) A
             WHERE A.RNUM = 1
               /* 리터럴 SQL 제외 인 경우 조건 추가 */
               <if test="literal_except_yn != null and literal_except_yn != '' and literal_except_yn != 'N'.toString()">
                 AND ( A.FORCE_MATCHING_SIGNATURE = 0 OR (
                                                        A.FORCE_MATCHING_SIGNATURE != 0
                                                        AND A.FORCE_MATCHING_SIGNATURE_CNT <![CDATA[<]]> 5
                                                       ) OR (
                                                        A.FORCE_MATCHING_SIGNATURE != 0
                                                        AND A.FORCE_MATCHING_SIGNATURE_CNT <![CDATA[>=]]> 5
                                                        AND A.LITERAL_SEQ = 1)
                            )
               </if>
            GROUP BY A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
        )
        SELECT *
          FROM (
                SELECT /*+ LEADING(A B) USE_HASH(B) */
                       #{project_id}
                     , #{sql_auto_perf_check_id}
                     , A.SQL_ID
                     , A.PLAN_HASH_VALUE
                     , A.EXECUTIONS
                     , A.ROWS_PROCESSED
                     , A.ELAPSED_TIME
                     , A.BUFFER_GETS
                     , A.DISK_READS
                     , (CASE WHEN B.FULLSCAN_CNT <![CDATA[>]]> 0 THEN 'Y' ELSE 'N' END) AS FULLSCAN_YN
                     , (CASE WHEN B.PARTITION_ALL_ACCESS_CNT <![CDATA[>]]> 0 THEN 'Y' ELSE 'N' END) AS PARTITION_ALL_ACCESS_YN
                  FROM FILTER_SQL_LIST A
                     , (
                        SELECT DBID
                             , SQL_ID
                             , PLAN_HASH_VALUE
                             , SUM(CASE WHEN OPERATION || ' ' || OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'BITMAP INDEX FAST FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN') THEN 1 ELSE 0 END)  FULLSCAN_CNT
                             , SUM(CASE WHEN OPERATION || ' ' || OPTIONS IN ('PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL') THEN 1 ELSE 0 END) PARTITION_ALL_ACCESS_CNT
                          FROM ODS_HIST_SQL_PLAN
                         WHERE (DBID, SQL_ID) IN (SELECT DBID, SQL_ID FROM FILTER_SQL_LIST)
                           AND OPERATION || ' ' || OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'BITMAP INDEX FAST FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN', 'PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL')
                        GROUP BY DBID, SQL_ID, PLAN_HASH_VALUE
                      ) B
                WHERE A.DBID = B.DBID(+)
                  AND A.SQL_ID = B.SQL_ID(+)
                  AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE(+)
                ORDER BY RANK
              )
        <if test="topn_cnt != null and topn_cnt != ''">
        /* TOP N이 입력되면 */
         WHERE ROWNUM <![CDATA[<=]]> #{topn_cnt}
        </if>
    </update>
    
    <!-- SQL-9.1B TABLE_CHG_PERF_CHK_TARGET_SQL -->
    <update id="insertTableCHGPerfChkTarget" parameterType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTableCHGPerfChkTarget */
        INSERT INTO TABLE_CHG_PERF_CHK_TARGET_SQL
             (
               PROJECT_ID
             , SQL_AUTO_PERF_CHECK_ID
             , SQL_ID
             , TABLE_OWNER
             , TABLE_NAME
             )
        WITH OWNER_TABLE AS (
            SELECT A.TABLE_OWNER
                 , A.TABLE_NAME
              FROM (/* 콤마로 입력된 TABLE을 행으로 펼치는 SQL */
                    SELECT OWNER_LIST AS TABLE_OWNER
                         , UPPER(REGEXP_SUBSTR(REPLACE(REPLACE(TRIM(A.TABLE_NAME_LIST), CHR(32), ''), CHR(9), ''), '[^,]+', 1, RCNT)) AS TABLE_NAME
                      FROM (SELECT OWNER_LIST, TABLE_NAME_LIST
                              FROM SQL_AUTO_PERF_CHK
                             WHERE PROJECT_ID = #{project_id}
                               AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                               AND DATABASE_KINDS_CD = #{database_kinds_cd}
                               ) A
                         , (SELECT LEVEL RCNT FROM DUAL CONNECT BY LEVEL <![CDATA[<=]]> 100)
                     WHERE RCNT <![CDATA[<=]]> REGEXP_COUNT(A.TABLE_NAME_LIST, ',') + 1
                   ) A
        ), SQL_LIST AS (
            /* 이미 생성된 SQL_AUTO_PERF_CHK_TARGET에서 SQL 목록 추출 */
            SELECT A.ORIGINAL_DBID AS DBID
                 , B.SQL_ID
                 , B.BEFORE_PLAN_HASH_VALUE AS PLAN_HASH_VALUE
              FROM SQL_AUTO_PERF_CHK A
                 , SQL_AUTO_PERF_CHK_TARGET B
             WHERE A.PROJECT_ID = #{project_id}
               AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
               AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
               AND A.PROJECT_ID = A.PROJECT_ID
               AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
        ), TABLE_SQL_LIST AS (
            /* SQL LIST에 대한 테이블 목록  */  
            SELECT DISTINCT A.DBID, C.TABLE_OWNER, C.TABLE_NAME, A.SQL_ID
              FROM SQL_LIST A
                 , ODS_HIST_SQL_PLAN B
                 , (
                    /* TABLE */
                    SELECT B.DBID, B.OWNER AS TABLE_OWNER, B.TABLE_NAME AS OBJECT_NAME, B.TABLE_NAME
                      FROM OWNER_TABLE A
                         , ODS_TABLES B
                     WHERE B.DBID = #{original_dbid}
                       AND B.OWNER = A.TABLE_OWNER
                       AND B.TABLE_NAME = A.TABLE_NAME
                       AND B.BASE_DAY = (SELECT MAX(BASE_DAY) BASE_DAY    FROM ODS_TABLES WHERE DBID = #{original_dbid})
                    UNION ALL
                    /* INDEX */
                    SELECT B.DBID, B.OWNER AS TABLE_OWNER, B.INDEX_NAME AS OBJECT_NAME, B.TABLE_NAME
                      FROM OWNER_TABLE A
                         , ODS_INDEXES B
                     WHERE B.DBID = #{original_dbid}
                       AND B.TABLE_OWNER = A.TABLE_OWNER
                       AND B.TABLE_NAME = A.TABLE_NAME
                       AND B.BASE_DAY = (SELECT MAX(BASE_DAY) FROM ODS_INDEXES WHERE DBID = #{original_dbid})
                   ) C
             WHERE A.DBID = B.DBID
               AND A.SQL_ID = B.SQL_ID
               AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
               AND B.OBJECT_OWNER = C.TABLE_OWNER
               AND B.OBJECT_NAME = C.OBJECT_NAME
               AND (B.OBJECT_TYPE LIKE 'TABLE%' OR B.OBJECT_TYPE LIKE 'INDEX%')
        )
        SELECT #{project_id} project_id
             , #{sql_auto_perf_check_id} sql_auto_perf_check_id
             , A.SQL_ID
             , A.TABLE_OWNER
             , A.TABLE_NAME
          FROM TABLE_SQL_LIST A
    </update>
    
    <!-- DB변경 성능 영향도 분석 > 성능비교 AWR insert -->
    <update id="insertSqlAutoPerformanceTargetForAWR" parameterType="sqlAutomaticPerformanceCheck" >
        /* AutoPerformanceCompareBetweenDbServiceDao.insertSqlAutoPerformanceTargetForAWR */
        /* SQL자동성능점검대상내역 INSERT */
        INSERT INTO SQL_AUTO_PERF_CHK_TARGET                    /* SQL자동성능점검대상내역(TABLE) */
             (
               PROJECT_ID                     /* 프로젝트ID */
             , SQL_AUTO_PERF_CHECK_ID         /* SQL점검팩ID */
             , SQL_ID                         /* SQL_ID */
             , BEFORE_PLAN_HASH_VALUE         /* 이전실행계획해시값 */
             , BEFORE_EXECUTIONS              /* 이전실행수 */
             , BEFORE_ROWS_PROCESSED          /* 이전처리레코드수 */
             , BEFORE_ELAPSED_TIME            /* 이전수행시간 */
             , BEFORE_BUFFER_GETS             /* 이전버퍼획득수 */
             , BEFORE_DISK_READS              /* 이전디스크읽기수 */
             , BEFORE_FULLSCAN_YN             /* 이전FULLSCAN여부 */
             , BEFORE_PARTITION_ALL_ACCESS_YN /* 이전전체파티션엑세스여부 */
             )
          WITH SQL_LIST AS
             (
           /* BIND 가 CAPTURED 된 SQL 만 실행대상으로 선정(JMG : 20210305) */
           
           SELECT * FROM (
                    SELECT /*+ LEADING(A B) USE_NL(B) */ A.*, B.SQL_TEXT
                      FROM (
                            SELECT A.DBID
                                 , A.SQL_ID
                                 , A.PLAN_HASH_VALUE
                                 , MAX(MODULE) MODULE
                                 , MAX(ACTION) ACTION
                                 , MAX(PARSING_SCHEMA_NAME) PARSING_SCHEMA_NAME
                                 , SUM(A.ELAPSED_TIME_DELTA) AS ELAPSED_TIME
                                 , SUM(A.BUFFER_GETS_DELTA) AS BUFFER_GETS
                                 , SUM(A.DISK_READS_DELTA) AS DISK_READS
                                 , SUM(A.ROWS_PROCESSED_DELTA) AS ROWS_PROCESSED
                                 , DECODE(SUM(A.EXECUTIONS_DELTA), 0, 1, SUM(A.EXECUTIONS_DELTA)) AS EXECUTIONS
                                 , ROW_NUMBER() OVER(ORDER BY SUM(A.BUFFER_GETS_DELTA) DESC) RANK
                              FROM (
                                    SELECT B.DBID
                                        , B.SQL_ID
                                        , B.PLAN_HASH_VALUE
                                        , B.ELAPSED_TIME_DELTA
                                        , B.BUFFER_GETS_DELTA
                                        , B.DISK_READS_DELTA
                                        , B.ROWS_PROCESSED_DELTA
                                        , B.EXECUTIONS_DELTA
                                        , B.FORCE_MATCHING_SIGNATURE
                                        , B.MODULE
                                        , B.ACTION
                                        , B.PARSING_SCHEMA_NAME
                                        , ROW_NUMBER() OVER(PARTITION BY B.DBID, B.SQL_ID ORDER BY B.BEGIN_INTERVAL_TIME DESC, B.PLAN_HASH_VALUE) AS RNUM
                                        , COUNT(*) OVER (PARTITION BY B.FORCE_MATCHING_SIGNATURE ) AS FORCE_MATCHING_SIGNATURE_CNT
                                        , ROW_NUMBER() OVER (PARTITION BY B.FORCE_MATCHING_SIGNATURE ORDER BY B.BUFFER_GETS_DELTA DESC) AS LITERAL_SEQ
                                      FROM (SELECT B.DBID
                                                , B.SQL_ID
                                                , B.PLAN_HASH_VALUE
                                                , SUM(B.ELAPSED_TIME_DELTA) AS ELAPSED_TIME_DELTA
                                                , SUM(B.BUFFER_GETS_DELTA) AS BUFFER_GETS_DELTA
                                                , SUM(B.DISK_READS_DELTA) AS DISK_READS_DELTA
                                                , SUM(B.ROWS_PROCESSED_DELTA) AS ROWS_PROCESSED_DELTA
                                                , SUM(B.EXECUTIONS_DELTA) AS EXECUTIONS_DELTA
                                                , MAX(B.FORCE_MATCHING_SIGNATURE) AS FORCE_MATCHING_SIGNATURE
                                                , MAX(B.MODULE) AS MODULE
                                                , MAX(B.ACTION) AS ACTION
                                                , MAX(B.PARSING_SCHEMA_NAME) AS PARSING_SCHEMA_NAME
                                                , MAX(B.BEGIN_INTERVAL_TIME) AS BEGIN_INTERVAL_TIME
                                            FROM ODS_HIST_SQLSTAT B
                                             WHERE B.DBID = #{original_dbid}
                                            AND EXISTS (SELECT /*+ NL_SJ  */ 1 
                                                         FROM ODS_HIST_SQL_PLAN P
                                                        WHERE P.DBID = B.DBID
                                                          AND P.SQL_ID = B.SQL_ID
                                                          AND P.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE)
                                            <choose>
                                                <when test="perf_period_start_time != null and perf_period_start_time != ''">
                                               AND B.BEGIN_INTERVAL_TIME BETWEEN TO_TIMESTAMP( #{perf_check_range_begin_dt} || #{perf_period_start_time} ||':00.000000', 'YYYY-MM-DD HH24:MI:SS.FF6')
                                               AND TO_TIMESTAMP( #{perf_check_range_end_dt} || #{perf_period_end_time} || ':59.999999', 'YYYY-MM-DD HH24:MI:SS.FF6')
                                                </when>
                                                <otherwise>
                                               AND B.BEGIN_INTERVAL_TIME BETWEEN TO_TIMESTAMP( #{perf_check_range_begin_dt} ||'00:00:00.000000', 'YYYY-MM-DD HH24:MI:SS.FF6')
                                               AND TO_TIMESTAMP( #{perf_check_range_end_dt} || '23:59:59.999999', 'YYYY-MM-DD HH24:MI:SS.FF6')
                                                </otherwise>
                                            </choose>
        <!--                       AND B.BEGIN_INTERVAL_TIME BETWEEN TO_TIMESTAMP(#{perf_check_range_begin_dt} || '00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF3') -->
        <!--                                                     AND TO_TIMESTAMP(#{perf_check_range_end_dt} || '23:59:59.999', 'YYYY-MM-DD HH24:MI:SS.FF3') -->
                                               AND 
                                            <choose>
                                                <when test="strModuleList.size() != 0">
                                                    <foreach collection="strModuleList" item="module" open="(" separator=" OR " close=")">
                                                           UPPER(TRIM( B.MODULE )) LIKE '%' || UPPER( REPLACE( TRIM( #{module} ), CHR(09),'' ) ) || '%'
                                                    </foreach>
                                                </when>
                                                <otherwise>
                                                           UPPER(TRIM( B.MODULE )) LIKE '%' || UPPER( REPLACE( TRIM( #{module_list} ), CHR(09),'' ) ) || '%'        /* module_list */
                                                </otherwise>
                                            </choose>
                                            GROUP BY B.DBID, B.SQL_ID, B.PLAN_HASH_VALUE
                                        ) B
                                 ) A
                             WHERE 1 = 1
                             AND A.RNUM = 1
                            
                                 /* 리터럴 SQL 제외 인 경우 조건 추가 */
                            <if test="literal_except_yn != null and literal_except_yn != '' and literal_except_yn != 'N'.toString()">
                               AND ( A.FORCE_MATCHING_SIGNATURE = 0 OR (
                                                                         A.FORCE_MATCHING_SIGNATURE != 0
                                                                     AND A.FORCE_MATCHING_SIGNATURE_CNT <![CDATA[<]]> 5
                                                                       ) OR (
                                                                         A.FORCE_MATCHING_SIGNATURE != 0
                                                                     AND A.FORCE_MATCHING_SIGNATURE_CNT <![CDATA[>=]]> 5
                                                                     AND A.LITERAL_SEQ = 1)
                                   )
                            </if>
                             GROUP BY A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
                            ) A
                            
                            /* BIND 가 CAPTURED 된 SQL 만 실행대상으로 선정(JMG : 20210305) */
                            , ODS_HIST_SQLTEXT B
                              WHERE 1 = 1 
                    
                                AND A.DBID = B.DBID
                                AND A.SQL_ID = B.SQL_ID
                                AND B.COMMAND_TYPE IN (1, 2, 3, 6, 7, 170, 189) /* 1 : create table ,2 : INSERT, 3 : SELECT, 6 : UPDATE , 7 : DELETE, 170 : call, 189 : MERGE */
                            )
                        WHERE 1 = 1
                       /*
                          AND ((
                                B.COMMAND_TYPE = 3
                          AND EXISTS (SELECT 1 FROM ODS_HIST_SQLBIND C WHERE C.DBID = B.DBID AND C.SQL_ID = B.SQL_ID)
                          AND 0 = (SELECT COUNT(*) FROM ODS_HIST_SQLBIND C
                                        WHERE C.DBID = B.DBID AND C.SQL_ID = B.SQL_ID
                                        AND C.WAS_CAPTURED = 'YES'
                          AND C.VALUE_STRING IS NULL)
                        )
                        OR
                        (
                             B.COMMAND_TYPE != 3
                        ))
                    */
                    
                    /* FILTER SQL */
                    /* AND A.MODULE = 'JDBC Thin Client' */
                    /* AND A.ACTION = 'OPENPOP-ACTION' */
                    /* AND A.PARSING_SCHEMA_NAME = 'OPENSIMUL' */
                    /* AND B.SQL_TEXT LIKE '%OMC%' */
                    /* AND A.SQL_ID = 'a3yvpm9k7yfgm'  */
                    
                    <if test="extra_filter_predication != null and extra_filter_predication != ''">
                        ${extra_filter_predication}
                    </if>
                )
                 /* 모듈조건 건수 */ 
                , PROJECT_SQL_IDFY_COND_CNT AS
                (
                 SELECT SUM(CASE WHEN NVL(LENGTH(TRIM(OWNER_LIST)), 0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) OWNER_CNT
                      , SUM(CASE WHEN NVL(LENGTH(TRIM(TABLE_NAME_LIST)), 0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) TABLE_CNT
                   FROM SQL_AUTO_PERF_CHK
                  WHERE PROJECT_ID = #{project_id}
                    AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                    AND DATABASE_KINDS_CD = #{database_kinds_cd}
                )
                /* 테이블 조건 필터링후 SQL LIST */ 
                , TABLE_FILTER_SQL_LIST AS
                (
                    SELECT DISTINCT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
                      FROM SQL_LIST A
                         , ODS_HIST_SQL_PLAN B
                         , (
                            SELECT A.OWNER AS OBJECT_OWNER, A.TABLE_NAME AS OBJECT_NAME
                              FROM ODS_TABLES A
                             WHERE A.DBID = #{original_dbid}
                            <if test = "table_name_list != null and table_name_list != ''">
                               AND UPPER( A.TABLE_NAME ) IN 
                            <choose>
                                <when test="strTableNameList.size() != 0">
                                    <foreach collection="strTableNameList" item="tableName" open="(" separator="," close=")" >
                                        UPPER( REPLACE( TRIM( #{tableName} ), CHR(09),'' ) )
                                    </foreach>
                                </when>
                                <otherwise>
                                    ( UPPER( REPLACE( TRIM( #{table_name_list} ), CHR(09),'' ) ) )     /* table_name_list */
                                </otherwise>
                            </choose>
                            </if>
                               AND A.BASE_DAY = (
                                                 SELECT MAX(BASE_DAY) BASE_DAY
                                                   FROM ODS_TABLES
                                                  WHERE DBID = #{original_dbid}
                                                )
                             UNION ALL
                            SELECT A.OWNER AS OBJECT_OWNER, A.INDEX_NAME AS OBJECT_NAME
                              FROM ODS_INDEXES A
                             WHERE A.DBID = #{original_dbid}
                             <if test = "table_name_list != null and table_name_list != ''">
                               AND UPPER( A.TABLE_NAME ) IN 
                            <choose>
                                <when test="strTableNameList.size() != 0">
                                    <foreach collection="strTableNameList" item="tableName" open="(" separator="," close=")" >
                                        UPPER( REPLACE( TRIM( #{tableName} ), CHR(09),'' ) )
                                    </foreach>
                                </when>
                                <otherwise>
                                    ( UPPER( REPLACE( TRIM( #{table_name_list} ), CHR(09),'' ) ) )    /*  table_name_list */
                                </otherwise>
                            </choose>
                            </if>
                               AND A.BASE_DAY = (
                                                 SELECT MAX(BASE_DAY) BASE_DAY
                                                   FROM ODS_INDEXES
                                                  WHERE DBID = #{original_dbid}
                                                )
                          ) C
                     WHERE A.DBID = B.DBID
                       AND A.SQL_ID = B.SQL_ID
                       AND A.PLAN_HASH_VALUE = B.PLAN_HASH_VALUE
                       AND B.OBJECT_OWNER = C.OBJECT_OWNER
                       AND B.OBJECT_NAME = C.OBJECT_NAME
                       AND B.DBID = #{original_dbid}
                       AND (B.OBJECT_TYPE LIKE 'TABLE%' OR B.OBJECT_TYPE LIKE 'INDEX%')
                       AND (SELECT TABLE_CNT FROM PROJECT_SQL_IDFY_COND_CNT) <![CDATA[>]]> 0
                     UNION ALL
                    SELECT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE
                      FROM SQL_LIST A
                     WHERE (SELECT TABLE_CNT FROM PROJECT_SQL_IDFY_COND_CNT) = 0
                )
                /* OWNER 조건 필터링후 SQL LIST */ 
                , OWNER_FILTER_SQL_LIST AS
                (
                    SELECT /*+ LEADING(A, B, C) */
                           DISTINCT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE , C.OBJECT_OWNER
                      FROM TABLE_FILTER_SQL_LIST A
                         , ODS_HIST_SQL_PLAN C
                     WHERE A.DBID = C.DBID
                       AND A.SQL_ID = C.SQL_ID
                       AND A.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE
                       AND C.DBID = #{original_dbid}
                       AND UPPER(C.OBJECT_OWNER) IN 
                    <choose>
                        <when test="strOwnerList.size() != 0">
                            <foreach collection="strOwnerList" item="owner" open="(" separator="," close=")" >
                                UPPER( REPLACE( TRIM( #{owner} ), CHR(09),'' ) )
                            </foreach>
                        </when>
                        <otherwise>
                            ( UPPER( REPLACE( TRIM(  #{owner_list} ), CHR(09),'' ) ) )                                     /* owner list */
                        </otherwise>
                    </choose>
                       AND (SELECT OWNER_CNT FROM PROJECT_SQL_IDFY_COND_CNT) <![CDATA[>]]> 0
                     UNION ALL
                    SELECT A.DBID, A.SQL_ID, A.PLAN_HASH_VALUE ,  NULL OBJECT_OWNER
                      FROM TABLE_FILTER_SQL_LIST A
                     WHERE (SELECT OWNER_CNT FROM PROJECT_SQL_IDFY_COND_CNT) = 0
                )
                SELECT *
                  FROM (
                        SELECT /*+ LEADING(A B C) USE_NL(B) USE_HASH(C) */
                               #{project_id} project_id
                             , #{sql_auto_perf_check_id} sql_auto_perf_check_id
                             , B.SQL_ID 
                             , B.PLAN_HASH_VALUE
                             , B.EXECUTIONS
                             , B.ROWS_PROCESSED
                             , B.ELAPSED_TIME
                             , B.BUFFER_GETS
                             , B.DISK_READS
                             , (CASE WHEN C.FULLSCAN_CNT <![CDATA[>]]> 0 THEN 'Y' ELSE 'N' END) FULLSCAN_YN
                             , (CASE WHEN C.PARTITION_ALL_ACCESS_CNT <![CDATA[>]]> 0 THEN 'Y' ELSE 'N' END) PARTITION_ALL_ACCESS_YN
                          FROM OWNER_FILTER_SQL_LIST A
                             , SQL_LIST B
                             , (
                                SELECT DBID 
                                     , SQL_ID
                                     , PLAN_HASH_VALUE
                                     , SUM(CASE WHEN OPERATION || ' ' || OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'BITMAP INDEX FAST FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN') THEN 1 ELSE 0 END)  FULLSCAN_CNT
                                     , SUM(CASE WHEN OPERATION || ' ' || OPTIONS IN ('PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL') THEN 1 ELSE 0 END) PARTITION_ALL_ACCESS_CNT
                                  FROM ODS_HIST_SQL_PLAN 
                                 WHERE DBID = #{original_dbid}
                                   AND (DBID, SQL_ID) IN (SELECT DBID, SQL_ID FROM OWNER_FILTER_SQL_LIST)
                                   AND OPERATION || ' ' || OPTIONS IN ('TABLE ACCESS FULL', 'INDEX FAST FULL SCAN', 'INDEX FULL SCAN', 'BITMAP INDEX FAST FULL SCAN', 'TABLE ACCESS STORAGE FULL', 'INDEX STORAGE FAST FULL SCAN', 'BITMAP INDEX STORAGE FAST FULL SCAN', 'PARTITION RANGE ALL', 'PARTITION LIST ALL', 'PARTITION HASH ALL')
                                 GROUP BY DBID, SQL_ID, PLAN_HASH_VALUE
                            ) C
                        WHERE A.SQL_ID = B.SQL_ID
                          AND B.DBID = C.DBID(+)
                          AND B.SQL_ID = C.SQL_ID(+)
                          AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE(+)
                        ORDER BY B.RANK
                      )
        <if test="topn_cnt != null and topn_cnt != ''">
         WHERE ROWNUM <![CDATA[<=]]> #{topn_cnt}
        </if>
    </update>
    
    <!-- 강제완료 처리 -->
    <update id="forceUpdateSqlAutoPerformance" parameterType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.forceUpdateSqlAutoPerformance */
        /* 02: 강제완료처리 UPDATE */
        UPDATE SQL_AUTO_PERF_CHK A SET PERF_CHECK_EXEC_END_DT = SYSDATE
            , PERF_CHECK_FORCE_CLOSE_YN = 'Y'
        WHERE A.PROJECT_ID = #{project_id}
          AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
          AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
    </update>
    
    <select id="getMaxSqlCheckId" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
    /* AutoPerformanceCompareBetweenDbServiceDao.getMaxSqlCheckId */
        SELECT MAX(SQL_AUTO_PERF_CHECK_ID) SQL_AUTO_PERF_CHECK_ID
          FROM SQL_AUTO_PERF_CHK
         WHERE PROJECT_ID = #{project_id}
           AND DATABASE_KINDS_CD = #{database_kinds_cd}
    </select>
    
    <!-- SQL-10 CHART 조회 -->
    <select id="loadPerfChartData"  parameterType="sqlAutomaticPerformanceCheck" resultType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerfChartData */
        WITH SQL_AUTO_PERF_CHK_STATS AS 
             (
                SELECT PLAN_CHANGE_YN AS PLAN_CHANGE_YN                                /* 이전실행계획해시값 */
                     , ROUND(DECODE(A.AFTER_ELAPSED_TIME, NULL, 0, A.BEFORE_ELAPSED_TIME)/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS)/1000000, 4) AS BEFORE_ELAPSED_TIME    /* 이전수행시간(AFTER 성능이 있는것만 비교) */
                     , ROUND(DECODE(A.AFTER_BUFFER_GETS, NULL, 0, A.BEFORE_BUFFER_GETS)/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS)) AS BEFORE_BUFFER_GETS                  /* 이전버퍼획득수(AFTER 성능이 있는것만 비교) */
                     , A.AFTER_PLAN_HASH_VALUE AS AFTER_PLAN_HASH_VALUE                /* 이후실행계획해시값 */
                     , ROUND(A.AFTER_ELAPSED_TIME/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)/1000000, 4) AS AFTER_ELAPSED_TIME   /* 이후수행시간 */
                     , ROUND(A.AFTER_BUFFER_GETS/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AS AFTER_BUFFER_GETS                /* 이후버퍼획득수 */
                     , (SELECT COUNT(*) 
                         FROM SQL_AUTO_PERF_CHK_RESULT Z 
                        WHERE Z.PROJECT_ID = A.PROJECT_ID 
                          AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID 
                          AND Z.SQL_ID = A.SQL_ID) PERF_CHK_RESULT_CNT
                     , CASE WHEN (
                                    SELECT COUNT(*) 
                                      FROM SQL_AUTO_PERF_CHK_RESULT Z 
                                     WHERE Z.PROJECT_ID = A.PROJECT_ID 
                                       AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID 
                                       AND Z.SQL_ID = A.SQL_ID
                                       AND Z.PERF_CHECK_RESULT_DIV_CD = 'B'
                                       AND ROWNUM = 1) = 1 THEN 'Y' 
                            WHEN (
                                    SELECT COUNT(*) 
                                      FROM SQL_AUTO_PERF_CHK_ERROR Z 
                                     WHERE Z.PROJECT_ID = A.PROJECT_ID 
                                       AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID 
                                       AND Z.SQL_ID = A.SQL_ID) > 0 THEN ''
                            ELSE 'N' 
                        END AS PERF_CHECK_RESULT_YN
                     , A.SQL_COMMAND_TYPE_CD AS SQL_COMMAND_TYPE_CD                  /* SQL명령유형코드 */
                     , A.PERF_IMPACT_TYPE_CD 
                     , C.SQL_ID AS ERROR_SQL_ID
                  FROM SQL_AUTO_PERF_CHK_TARGET A
                     , SQL_AUTO_PERF_CHK B 
                     , SQL_AUTO_PERF_CHK_ERROR C
                 WHERE B.PROJECT_ID = #{project_id}
                   AND B.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                   AND B.DATABASE_KINDS_CD = #{database_kinds_cd}
                   AND A.PROJECT_ID = B.PROJECT_ID
                   AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
                   AND A.PROJECT_ID = C.PROJECT_ID(+)
                   AND A.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID(+)
                   AND A.SQL_ID = C.SQL_ID(+)
                   AND B.PERF_CHECK_EXEC_END_DT IS NOT NULL
                   AND NVL(B.PERF_CHECK_FORCE_CLOSE_YN, 'N') <![CDATA[<>]]> 'Y'        /* 강제완료처리 */
             )
        SELECT 
               /* Elapsed Time */
               'ASIS' AS BEFORE_ELAPSED_TIME_TITLE
               ,'TOBE' AS AFTER_ELAPSED_TIME_TITLE
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD IN ('1', '2', '3') AND A.ERROR_SQL_ID IS NULL AND A.AFTER_ELAPSED_TIME IS NOT NULL THEN A.BEFORE_ELAPSED_TIME ELSE 0 END) AS BEFORE_ELAPSED_TIME_CHART
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD IN ('1', '2', '3') AND A.ERROR_SQL_ID IS NULL AND A.AFTER_ELAPSED_TIME IS NOT NULL THEN A.AFTER_ELAPSED_TIME ELSE 0 END) AS AFTER_ELAPSED_TIME_CHART
               /* Buffer Gets */
               , 'ASIS' AS BEFORE_BUFFER_GETS_TITLE
               , 'TOBE'  AS AFTER_BUFFER_GETS_TITLE
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD IN ('1', '2', '3') AND A.ERROR_SQL_ID IS NULL AND A.AFTER_BUFFER_GETS IS NOT NULL THEN A.BEFORE_BUFFER_GETS ELSE 0 END) AS BEFORE_BUFFER_GETS_CHART
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD IN ('1', '2', '3') AND A.ERROR_SQL_ID IS NULL AND A.AFTER_BUFFER_GETS IS NOT NULL THEN A.AFTER_BUFFER_GETS ELSE 0 END) AS AFTER_BUFFER_GETS_CHART
               /* PLAN변경 */
               , 'New Plan' AS PLAN_CHANGE_Y_TITLE
               , 'Same Plan' AS PLAN_CHANGE_N_TITLE
               , SUM(CASE WHEN A.PLAN_CHANGE_YN = 'Y' THEN 1 ELSE 0 END) AS PLAN_CHANGE_Y_CHART
               , SUM(CASE WHEN A.PLAN_CHANGE_YN = 'N' THEN 1 ELSE 0 END) AS PLAN_CHANGE_N_CHART
               /* 성능 임팩트 */
               , 'Improved' AS PERF_IMPACT_IMPROVED_TITLE
               , 'Regressed' AS PERF_IMPACT_REGRESSED_TITLE
               , 'Unchanged' AS PERF_IMPACT_UNCHANGED_TITLE
               , 'TimeOut' AS PERF_IMPACT_TIMEOUT_TITLE
               , '최대Fetch초과' AS PERF_IMPACT_FETCH_EXCEED_TITLE
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD = '1' THEN 1 ELSE 0 END) AS PERF_IMPACT_IMPROVED_CHART
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD = '2' THEN 1 ELSE 0 END) AS PERF_IMPACT_REGRESSED_CHART
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD = '3' THEN 1 ELSE 0 END) AS PERF_IMPACT_UNCHANGED_CHART
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD = '4' THEN 1 ELSE 0 END) AS PERF_IMPACT_TIMEOUT_CHART
               , SUM(CASE WHEN A.PERF_IMPACT_TYPE_CD = '5' THEN 1 ELSE 0 END) AS PERF_IMPACT_FETCH_EXCEED_CHART
                   /* 성능 */
               ,'부적합' AS PERF_CHK_INDC_N_TITLE
               , '적합' AS PERF_CHK_INDC_Y_TITLE
               , SUM(CASE WHEN A.PERF_CHK_RESULT_CNT > 0 AND A.PERF_CHECK_RESULT_YN = 'Y' THEN 1 ELSE 0 END) AS PERF_CHK_INDC_N_CHART
               , SUM(CASE WHEN A.PERF_CHK_RESULT_CNT > 0 AND A.PERF_CHECK_RESULT_YN = 'N' THEN 1 ELSE 0 END) AS PERF_CHK_INDC_Y_CHART
          FROM SQL_AUTO_PERF_CHK_STATS A
    </select>
    
    <!-- SQL-11 그리드 조회(성능 영향도 분석 결과) -->
    <sql id="loadPerformanceResultListRefId">
    /* AutoPerformanceCompareBetweenDbServiceDao.loadPerformanceResultList */
        SELECT /*+ LEADING(A) USE_NL(B C) */
               A.TUNING_STATUS_NM                        /* 튜닝상태*/
             , A.PERF_IMPACT_TYPE_NM                     /* 성능임팩트유형*/
             , A.BUFFER_INCREASE_RATIO                   /* 버퍼 임팩트(%)*/
             , A.ELAPSED_TIME_INCREASE_RATIO             /* 수행시간 임팩트(%)*/ 
             , A.PERF_CHECK_RESULT_YN                    /* 성능점검결과*/
             , A.PLAN_CHANGE_YN                          /* Plan변경여부*/
             , A.SQL_ID                                  /* SQL ID*/
             , A.ASIS_PLAN_HASH_VALUE                    /* ASIS PLAN HASH_VALUE*/
             , A.TOBE_PLAN_HASH_VALUE                    /* TOBE PLAN HASH VALUE*/
             , A.ASIS_EXECUTIONS                         /* ASIS EXECUTIONS*/
             , A.TOBE_EXECUTIONS                         /* TOBE EXECUTIONS*/
             , A.ASIS_ROWS_PROCESSED                     /* ASIS ROWS PROCESSED*/
             , A.TOBE_ROWS_PROCESSED                     /* TOBE ROWS PROCESSED*/
             , DECODE(A.ASIS_ELAPSED_TIME, 0, 0.0001, A.ASIS_ELAPSED_TIME) AS ASIS_ELAPSED_TIME                 /* ASIS ELAPSED TIME*/
             , DECODE(A.TOBE_ELAPSED_TIME, 0, 0.0001, A.TOBE_ELAPSED_TIME) AS TOBE_ELAPSED_TIME                 /* TOBE ELAPSED TIME*/
             , A.ASIS_BUFFER_GETS                        /* ASIS BUFFER GETS*/
             , A.TOBE_BUFFER_GETS                        /* TOBE BUFFER GETS*/
             , A.ASIS_FULLSCAN_YN                        /* ASIS FULLSCAN Y/N*/
             , A.TOBE_FULLSCAN_YN                        /* TOBE FULLSCAN Y/N*/
             , A.ASIS_PARTITION_ALL_ACCESS_YN            /* ASIS PARTITION ALL ACCESS Y/N */
             , A.TOBE_PARTITION_ALL_ACCESS_YN            /* TOBE PARTITION ALL ACCESS Y/N */
             , A.SQL_COMMAND_TYPE_CD                     /* SQL 명령 유형*/
             , A.PARSING_SCHEMA_NAME                     /* PARSING_SCHEMA_NAME*/
             , A.ERR_CODE                                /* 에러코드*/
             , A.ERR_MSG                                 /* 에러메시지*/
             , B.REVIEW_SBST                             /* 검토결과*/
             , C.SQL_PROFILE_NM                          /* PROFILE NAME*/
             , DBMS_LOB.SUBSTR(A.SQL_TEXT, 200, 1) AS SQL_TEXT_WEB        /* SQL TEXT*/
             , A.SQL_TEXT AS SQL_TEXT_EXCEL              /* SQL TEXT FOR EXCEL*/
             , A.ORIGINAL_DBID                           /* ORIGINAL_DBID*/
             , A.PERF_CHECK_TARGET_DBID                  /* TOBE TARGET_DBID*/
             , A.TUNING_NO                               /* 튜닝번호*/
             , A.PROJECT_NM                              /* 프로젝트명*/
             , A.PERF_CHECK_NAME                         /* SQL점검팩명*/
             , A.SQL_AUTO_PERF_CHECK_ID
             , A.PROJECT_ID
             /* HIDDEN*/
             , A.PERF_CHECK_SQL_SOURCE_TYPE_CD
             , A.MODULE
             , A.PERF_IMPACT_TYPE_CD
             , A.TOTAL_ASIS_ELAPSED_TIME
             , A.TOTAL_ASIS_BUFFER_GETS
          FROM (
                SELECT /*+ LEADING(A) USE_NL(B C E F CD1) PUSH_PRED(F) INDEX(A PK_SQL_AUTO_PERF_CHK_TARGET) */
                       B.PROJECT_NM AS PROJECT_NM                                          /* 프로젝트명*/ 
                     , E.PERF_CHECK_NAME AS PERF_CHECK_NAME                                /* SQL점검팩명*/
                     , F.TUNING_STATUS_NM                                                  /* 튜닝상태*/
                     , CD1.CD_NM AS PERF_IMPACT_TYPE_NM
                     , A.BUFFER_INCREASE_RATIO AS BUFFER_INCREASE_RATIO                    /* 버퍼개선율 */
                     , A.ELAPSED_TIME_INCREASE_RATIO AS ELAPSED_TIME_INCREASE_RATIO        /* 수행시간개선율 */
                     , CASE WHEN C.ERR_CODE IS NOT NULL THEN NULL
                            WHEN (
                                    SELECT COUNT(*) 
                                      FROM SQL_AUTO_PERF_CHK_RESULT Z 
                                     WHERE Z.PROJECT_ID = A.PROJECT_ID 
                                       AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID 
                                       AND Z.SQL_ID = A.SQL_ID
                                ) = 0 THEN NULL
                            WHEN (
                                    SELECT COUNT(*) 
                                      FROM SQL_AUTO_PERF_CHK_RESULT Z 
                                     WHERE Z.PROJECT_ID = A.PROJECT_ID 
                                       AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID 
                                       AND Z.SQL_ID = A.SQL_ID
                                       AND Z.PERF_CHECK_RESULT_DIV_CD = 'B'
                                       AND ROWNUM = 1
                                 ) = 1 THEN '부적합' ELSE '적합' END AS PERF_CHECK_RESULT_YN                                                        /* 성능점검결과 */
                     , A.PLAN_CHANGE_YN AS PLAN_CHANGE_YN                                                                                        /* Plan 변경여부 */
                     , A.SQL_ID AS SQL_ID                                                                                                        /* SQL_ID */
                     , A.BEFORE_PLAN_HASH_VALUE AS ASIS_PLAN_HASH_VALUE                                                                          /* ASIS PLAN HASH VALUE */
                     , A.AFTER_PLAN_HASH_VALUE AS TOBE_PLAN_HASH_VALUE                                                                           /* TOBE PLAN HASH VALUE */
                     , A.BEFORE_EXECUTIONS AS ASIS_EXECUTIONS                                                                                    /* ASIS EXECUTIONS */
                     , A.AFTER_EXECUTIONS AS TOBE_EXECUTIONS                                                                                     /* TOBE EXECUTIONS */
                     , ROUND(A.BEFORE_ROWS_PROCESSED/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS)) AS ASIS_ROWS_PROCESSED              /* ASIS ROWS PROCESSED */
                     , ROUND(A.AFTER_ROWS_PROCESSED/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AS TOBE_ROWS_PROCESSED                 /* TOBE ROWS PROCESSED */
                     , ROUND(A.BEFORE_ELAPSED_TIME/1000000/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS), 4) AS ASIS_ELAPSED_TIME       /* ASIS ELAPSED TIME */
                     , ROUND(A.AFTER_ELAPSED_TIME/1000000/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS), 4) AS TOBE_ELAPSED_TIME          /* TOBE ELAPSED TIME */
                     , 
                       FN_ZERO_TO_DECIMAL_4_POINT(
                       ROUND(A.BEFORE_BUFFER_GETS/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS))
                       ) AS ASIS_BUFFER_GETS                       /* ASIS BUFFER GETS */
                     , FN_ZERO_TO_DECIMAL_4_POINT(
                       ROUND(A.AFTER_BUFFER_GETS/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS))
                       ) AS TOBE_BUFFER_GETS                       /* TOBE BUFFER GETS */
                     , A.BEFORE_FULLSCAN_YN AS ASIS_FULLSCAN_YN                                                                                  /* ASIS FULLSCAN Y/N */
                     , A.AFTER_FULLSCAN_YN AS TOBE_FULLSCAN_YN                                                                                   /* TOBE FULLSCAN Y/N */
                     , A.BEFORE_PARTITION_ALL_ACCESS_YN AS ASIS_PARTITION_ALL_ACCESS_YN                                                          /* ASIS PARTITION_ALL ACCESS Y/N */
                     , A.AFTER_PARTITION_ALL_ACCESS_YN AS TOBE_PARTITION_ALL_ACCESS_YN                                                           /* TOBE PARTITION_ALL ACCESS Y/N */
                     , A.SQL_COMMAND_TYPE_CD AS SQL_COMMAND_TYPE_CD                                                                              /* SQL 명령 유형 */
                     , (CASE WHEN A.PERF_IMPACT_TYPE_CD IS NOT NULL THEN NULL ELSE C.ERR_CODE END) AS ERR_CODE                                   /* JMG : 2021-08-13 */
                     , (CASE WHEN A.PERF_IMPACT_TYPE_CD IS NOT NULL THEN NULL ELSE C.ERR_MSG END) AS ERR_MSG                                     /* JMG : 2021-08-13 */
                     , (CASE 
                              WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' THEN (
                                  SELECT (CASE WHEN NVL( DBMS_LOB.GETLENGTH(S.SQL_TEXT) , 0) <![CDATA[>=]]> 0 AND NVL( DBMS_LOB.GETLENGTH(S.SQL_TEXT), 0) <![CDATA[<=]]> 1000 THEN  S.SQL_TEXT
                                               ELSE ( TO_CLOB( DBMS_LOB.SUBSTR(S.SQL_TEXT, 500) || CHR(13)||CHR(10) ||'   (중략) ...   '||CHR(13)||CHR(10)|| DBMS_LOB.SUBSTR(S.SQL_TEXT ,500,DBMS_LOB.GETLENGTH(S.SQL_TEXT)-500) ))
                                          END) SQL_TEXT
                                    FROM ODS_HIST_SQLTEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID)
                             ELSE (
                                  SELECT (CASE WHEN NVL( DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT) , 0) <![CDATA[>=]]> 0 AND NVL( DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT), 0) <![CDATA[<=]]> 1000 THEN  S.SQL_FULLTEXT  
                                               ELSE ( TO_CLOB( DBMS_LOB.SUBSTR(S.SQL_FULLTEXT, 500) ||CHR(13)||CHR(10) ||'   (중략) ...   '||CHR(13)||CHR(10)|| DBMS_LOB.SUBSTR(S.SQL_FULLTEXT ,500 , DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT)-500) ))
                                          END) SQL_TEXT
                                    FROM VSQL_TEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                        END) AS SQL_TEXT
                     , E.ORIGINAL_DBID AS ORIGINAL_DBID
                     , E.PERF_CHECK_TARGET_DBID
                     , F.TUNING_NO
                     , A.SQL_AUTO_PERF_CHECK_ID
                     , A.PROJECT_ID
                     , E.PERF_CHECK_SQL_SOURCE_TYPE_CD                                                                                             /* 1: AWR, 2: 전체SQL */
                     , (CASE 
                             WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' THEN (SELECT MAX(S.PARSING_SCHEMA_NAME) FROM ODS_HIST_SQLSTAT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                             ELSE (SELECT MAX(S.PARSING_SCHEMA_NAME) FROM VSQL_TEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                        END) AS PARSING_SCHEMA_NAME
                     , (CASE 
                             WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' /* AWR */ THEN (SELECT MODULE FROM ODS_HIST_SQLSTAT ASQL WHERE ASQL.DBID = E.ORIGINAL_DBID AND ASQL.SQL_ID = A.SQL_ID AND ROWNUM = 1) 
                             ELSE /* VSQL */ (SELECT MODULE FROM VSQL_MODULE VSQL WHERE VSQL.DBID = E.ORIGINAL_DBID AND VSQL.SQL_ID = A.SQL_ID AND ROWNUM = 1) 
                        END) AS MODULE  
                     , A.PERF_IMPACT_TYPE_CD
                     , A.BEFORE_ELAPSED_TIME AS TOTAL_ASIS_ELAPSED_TIME
                     , A.BEFORE_BUFFER_GETS AS TOTAL_ASIS_BUFFER_GETS
                  FROM SQL_AUTO_PERF_CHK_TARGET A
                     , PROJECT B
                     , SQL_AUTO_PERF_CHK_ERROR C
                     , SQL_AUTO_PERF_CHK E
                     , (SELECT A.TUNING_NO
                             , A.PROJECT_ID
                             , A.SQL_AUTO_PERF_CHECK_ID
                             , A.TUNING_STATUS_CD
                             , CD2.CD_NM AS TUNING_STATUS_NM
                             , A.SQL_ID
                             , B.IMPRA_ELAP_TIME
                             , B.IMPRA_BUFFER_CNT
                          FROM TUNING_TARGET_SQL A
                             , SQL_TUNING B
                             , CD CD2
                         WHERE A.TUNING_NO = B.TUNING_NO(+)
                           AND A.TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                           AND A.TUNING_NO IN (SELECT MAX(TUNING_NO)
                                                 FROM TUNING_TARGET_SQL
                                                WHERE PROJECT_ID = ${project_id}
                                                  /* AND SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id} */
                                                AND TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                                                GROUP BY SQL_ID)
                           AND CD2.GRP_CD_ID(+) = '1004'
                           AND A.TUNING_STATUS_CD = CD2.CD(+)
                     ) F
                     , CD CD1
                 WHERE A.PROJECT_ID = ${project_id}
                   AND A.SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                   AND A.PROJECT_ID = B.PROJECT_ID
                   AND A.PROJECT_ID = C.PROJECT_ID(+)
                   AND A.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID(+)
                   AND A.SQL_ID = C.SQL_ID(+)
                   
                   AND E.PROJECT_ID = A.PROJECT_ID
                   AND E.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
                   AND E.DATABASE_KINDS_CD = '${database_kinds_cd}'
                   AND E.PERF_CHECK_EXEC_END_DT IS NOT NULL
                   
                   AND A.PROJECT_ID = F.PROJECT_ID(+)
                   /* AND A.SQL_AUTO_PERF_CHECK_ID = F.SQL_AUTO_PERF_CHECK_ID(+) */
                   AND A.SQL_ID = F.SQL_ID(+)
                   AND CD1.GRP_CD_ID(+) = '1025'
                   AND A.PERF_IMPACT_TYPE_CD = CD1.CD(+)
                   AND NVL(E.PERF_CHECK_FORCE_CLOSE_YN, 'N')  <![CDATA[<>]]> 'Y'  /* 강제완료처리 */
                   
                   AND A.SQL_ID <![CDATA[>]]> '${sql_id}'                         /* 1page =>' ', 2page부터는 최종 레코드의 sql_id */
                <choose>
                    <when test="select_yn != null and select_yn.equalsIgnoreCase('Y') and dml_yn != null and dml_yn.equalsIgnoreCase('Y')"></when>
                    <when test="select_yn != null and select_yn.equalsIgnoreCase('Y')">
                   /* SELECT 문 */ 
                   AND A.SQL_COMMAND_TYPE_CD = 'SELECT'
                    </when>
                    <when test="dml_yn != null and dml_yn.equalsIgnoreCase('Y')">
                   /* DML문 선택 (SELETE를 제외하고 TRUNCATE, CALL, OTHER 등이 포함) */
                   AND A.SQL_COMMAND_TYPE_CD <![CDATA[<>]]> 'SELECT'
                    </when>
                    <otherwise></otherwise>
                </choose>
                <if test="plan_change_yn != null and plan_change_yn.equalsIgnoreCase('Y')">
                   /* PLAN 변경 체크 */
                   AND A.PLAN_CHANGE_YN = 'Y'
                </if>
                <if test="perf_down_yn != null and perf_down_yn.equalsIgnoreCase('Y')">
                   /* 성능저하(BUFFER GETS 기준) */
                   AND A.BUFFER_INCREASE_RATIO <![CDATA[<]]> 0
                </if>
                <if test="notPerf_yn != null and notPerf_yn.equalsIgnoreCase('Y')">
                   /* 성능 부적합 체크 */
                   AND EXISTS (
                               SELECT 'Y'
                                 FROM SQL_AUTO_PERF_CHK_RESULT Z 
                                WHERE Z.PROJECT_ID = A.PROJECT_ID 
                                  AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID 
                                  AND Z.SQL_ID = A.SQL_ID
                                  AND Z.PERF_CHECK_RESULT_DIV_CD = 'B'
                                  AND ROWNUM = 1
                              )
                </if>
                <if test="fullScan_yn != null and fullScan_yn.equalsIgnoreCase('Y')">
                   /* FULL SCAN 체크 */
                   AND A.AFTER_FULLSCAN_YN = 'Y'
                </if>
                <if test="partition_yn != null and partition_yn.equalsIgnoreCase('Y')">
                   /* PARTITION ALL ACCESS 체크 */
                   AND A.AFTER_PARTITION_ALL_ACCESS_YN = 'Y'
                </if>
                <if test="error_yn != null and error_yn.equalsIgnoreCase('Y')">
                   /* 오류여부 체크 */
                   AND C.ERR_MSG IS NOT NULL
                </if>
                <if test="search_sql_id != null and search_sql_id != ''">
                    AND A.SQL_ID = '${search_sql_id}'
                </if>
                ) A 
                , SQL_AUTO_PERF_CHK_REVIEW B
                , SQL_AUTO_PERF_CHK_TGT_PROFILE C
<!--                 ,(SELECT LEVEL LVL FROM DUAL CONNECT BY LEVEL <![CDATA[<=]]> 200) -->
            WHERE 1 = 1
              AND A.ORIGINAL_DBID = B.DBID(+)
              AND A.SQL_ID = B.SQL_ID(+)
              AND A.PERF_CHECK_TARGET_DBID = C.DBID(+)
              AND A.SQL_ID = C.SQL_ID(+)
            
            <if test="error_yn != null and error_yn.equalsIgnoreCase('Y')">
               /* 오류여부 체크 */
               AND (A.PERF_IMPACT_TYPE_CD NOT IN ('4', '5') OR A.PERF_IMPACT_TYPE_CD IS NULL)  /* JMG : 2021-08-13 */
            </if>
            
            <if test="timeOut_yn != null and timeOut_yn.equalsIgnoreCase('Y')">
               /* Time-Out 체크 */
               AND A.PERF_IMPACT_TYPE_CD = '4'
            </if>
            
            <if test="maxFetch_yn != null and maxFetch_yn.equalsIgnoreCase('Y')">
               /* 최대 FETCH 초과 체크 */
               AND A.PERF_IMPACT_TYPE_CD = '5'
            </if>
            
            <choose>
                <when test="sql_profile_yn != null and sql_profile_yn.equalsIgnoreCase('Y') and not_sql_profile_yn != null and not_sql_profile_yn.equalsIgnoreCase('Y')"></when>
                <when test="sql_profile_yn != null and sql_profile_yn.equalsIgnoreCase('Y')">
                  /* SQL Profile 적용 */
                  AND C.SQL_PROFILE_NM IS NOT NULL
                </when>
                <when test="not_sql_profile_yn != null and not_sql_profile_yn.equalsIgnoreCase('Y')">
                  /* SQL Profile 미적용 */
                  AND C.SQL_PROFILE_NM IS NULL
                </when>
                <otherwise></otherwise>
            </choose>
            <choose>
                <when test="sql_review_yn != null and sql_review_yn.equalsIgnoreCase('Y') and not_sql_review_yn != null and not_sql_review_yn.equalsIgnoreCase('Y') "></when>
                <when test="sql_review_yn != null and sql_review_yn.equalsIgnoreCase('Y') ">
                  /* SQL 검토 */
                  AND B.REVIEW_SBST IS NOT NULL
                    <if test="review_keyword != null and review_keyword != ''">
                  /* SQL 검토 keyword 조회 */
                  AND B.REVIEW_SBST  LIKE '%'||'${review_keyword}'||'%'
                    </if>
                </when>
                <when test="not_sql_review_yn != null and not_sql_review_yn.equalsIgnoreCase('Y') ">
                  /* SQL 미검토 */
                  AND B.REVIEW_SBST IS NULL
                </when>
                <otherwise></otherwise>
            </choose>
            <if test="buffer_gets_1day != null and buffer_gets_1day != ''">
              /* BUFFER GETS(ASIS 일평균) */
              AND A.ASIS_BUFFER_GETS <![CDATA[>=]]> ${buffer_gets_1day}
            </if>
            <if test="asis_elapsed_time != null and asis_elapsed_time != ''">
              /* ELAPSED TIME(ASIS 일평균) */
              AND A.ASIS_ELAPSED_TIME <![CDATA[>=]]> ${asis_elapsed_time}
            </if>
            <if test="buffer_gets_regres != null and buffer_gets_regres != ''">
              /* Buffer Gets 성능저하 */
              AND (A.TOBE_BUFFER_GETS/DECODE(A.ASIS_BUFFER_GETS, 0, 1, A.ASIS_BUFFER_GETS)) <![CDATA[>=]]> ${buffer_gets_regres}
            </if>
            <if test="elapsed_time_regres != null and elapsed_time_regres != ''">
              /* Elapsed Time 성능저하 */
              AND (A.TOBE_ELAPSED_TIME/DECODE(A.ASIS_ELAPSED_TIME, 0, 1, A.ASIS_ELAPSED_TIME)) <![CDATA[>=]]> ${elapsed_time_regres}
            </if>
            
    </sql>
    
    <sql id="loadPerformanceResultOrderBy">
        <choose>
            <when test="line_up_cd != null and ( line_up_cd eq '00'.toString() ) ">
            /* TOTAL_ASIS_BUFFER_GETS */
            ORDER BY A.TOTAL_ASIS_BUFFER_GETS ${orderOf} , A.SQL_ID
            </when>
            <when test="line_up_cd != null and ( line_up_cd eq '01'.toString() ) ">
            /* TOTAL_ASIS_ELAPSED_TIME */
            ORDER BY A.TOTAL_ASIS_ELAPSED_TIME ${orderOf} , A.SQL_ID
            </when>
            <when test="line_up_cd != null and ( line_up_cd eq '02'.toString() ) ">
            /* ASIS_EXECUTIONS */
            ORDER BY A.ASIS_EXECUTIONS ${orderOf} , A.SQL_ID
            </when>
            <when test="line_up_cd != null and ( line_up_cd eq '03'.toString() ) ">
            /* ASIS_BUFFER_GETS */
            ORDER BY A.ASIS_BUFFER_GETS ${orderOf} , A.SQL_ID
            </when>
            <when test="line_up_cd != null and ( line_up_cd eq '04'.toString() ) ">
            /* ASIS_ELAPSED_TIME */
            ORDER BY A.ASIS_ELAPSED_TIME ${orderOf} , A.SQL_ID
            </when>
            <when test="line_up_cd != null and ( line_up_cd eq '05'.toString() ) ">
            /* SQL_ID */
            ORDER BY A.SQL_ID ${orderOf}
            </when>
            <when test="line_up_cd != null and ( line_up_cd eq '06'.toString() ) ">
            /* SQLTEXT */
            ORDER BY SQL_TEXT_WEB ${orderOf}
            </when>
            <otherwise>
            /* 기본값 */
            ORDER BY A.SQL_ID ASC
            </otherwise>
        </choose>
    </sql>
    
    <!--성능비교결과 TableList SQL-11 그리드 조회 -->
    <select id="loadPerformanceResultList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerformanceResultList */
        SELECT *
        FROM (
            SELECT ROWNUM RNUM, AA.*
            FROM (
                <include refid="loadPerformanceResultListRefId"/>
                
                <include refid="loadPerformanceResultOrderBy"/>
            ) AA
            WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
        ) AA
        WHERE AA.RNUM <![CDATA[>]]> ${pagePerCount} * (${currentPage} - 1)
    </select>

    <!-- 성능비교결과 > 튜닝대상선정 시 List 전체 -->
    <select id="loadPerformanceResultListAll" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerformanceResultListAll */
        SELECT *
          FROM (
            <include refid="loadPerformanceResultListRefId"/>
            <if test="sqlExclude != null and sqlExclude.equalsIgnoreCase('Y')">
                AND NOT EXISTS (
                                SELECT /*+ NO_UNNEST */ 1
                                  FROM TUNING_TARGET_SQL S1
                                 WHERE A.SQL_ID = S1.SQL_ID
                                   AND A.PROJECT_ID = S1.PROJECT_ID
                                   AND A.SQL_AUTO_PERF_CHECK_ID = S1.SQL_AUTO_PERF_CHECK_ID
                                )
            </if>
            <include refid="loadPerformanceResultOrderBy"/>
                )
    </select>
    
    <!-- SQLProfile적용/삭제/이관시 필요한 정보를 가져오기위한 List -->
    <select id="loadPerformanceResultListSqlIdAndHashValue" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerformanceResultListSqlIdAndHashValue */
        SELECT SQL_ID                                  /* SQL ID */
             , ASIS_PLAN_HASH_VALUE                    /* ASIS PLAN HASH_VALUE */
          FROM (
            <include refid="loadPerformanceResultListRefId"/>
            <if test="sqlExclude != null and sqlExclude.equalsIgnoreCase('Y')">
           AND NOT EXISTS (
                        SELECT /*+ NO_UNNEST */ 1
                          FROM TUNING_TARGET_SQL S1
                         WHERE A.SQL_ID = S1.SQL_ID
                           AND A.PROJECT_ID = S1.PROJECT_ID
                           AND A.SQL_AUTO_PERF_CHECK_ID = S1.SQL_AUTO_PERF_CHECK_ID
                        )
            </if>
            
            <include refid="loadPerformanceResultOrderBy"/>
             )
    </select>
    
    <select id="getPerformanceResultCount" parameterType="sqlAutoPerformanceCompare" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerformanceResultCount */
        SELECT COUNT(ROWNUM)
          FROM (
                <include refid="loadPerformanceResultListRefId"/>
                
                <include refid="loadPerformanceResultOrderBy"/>
               )
    </select>
    
    <select id="getTargetEqualCount" parameterType="sqlAutoPerformanceCompare" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.getTargetEqualCount */
        SELECT count(*)
          FROM TUNING_TARGET_SQL A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.SQL_ID = #{sql_id}
    </select>
    
    <!-- SQL-16 수행결과조회 -->
    <select id="loadPerfResultCount" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerfResultCount */
        SELECT A.PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID
             , '전체: '||COUNT(*) AS TOTAL_CNT
             , '수행완료: '||NVL(SUM(CASE WHEN (B.PROJECT_ID IS NULL OR A.PERF_IMPACT_TYPE_CD IN ('4', '5')) AND A.SQL_COMMAND_TYPE_CD IS NOT NULL THEN 1 ELSE 0 END), 0) AS COMPLETED_CNT
             , '오류: '||NVL(SUM(CASE WHEN B.PROJECT_ID IS NOT NULL AND (A.PERF_IMPACT_TYPE_CD IS NULL OR A.PERF_IMPACT_TYPE_CD IN ('1', '2', '3')) THEN 1 ELSE 0 END), 0) AS ERR_CNT
             , NVL(MAX(PERF_CHECK_FORCE_CLOSE_YN), 'N') AS PERF_CHECK_FORCE_CLOSE_YN
             , NVL(TO_CHAR(C.PERF_CHECK_EXEC_END_DT), 'N') AS PERF_CHECK_ERROR
          FROM SQL_AUTO_PERF_CHK_TARGET A
             , SQL_AUTO_PERF_CHK_ERROR B
             , SQL_AUTO_PERF_CHK C
         WHERE C.PROJECT_ID = #{project_id}
           AND C.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND C.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND A.PROJECT_ID = B.PROJECT_ID(+)
           AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID(+)
           AND A.SQL_ID = B.SQL_ID(+)
           AND A.PROJECT_ID = C.PROJECT_ID
           AND A.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID
           AND C.PERF_CHECK_EXEC_END_DT IS NOT NULL
           AND NVL(C.PERF_CHECK_FORCE_CLOSE_YN, 'N')  <![CDATA[<>]]> 'Y'            /* 강제완료처리 */
         GROUP BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID, C.PERF_CHECK_EXEC_END_DT
    </select>
    
    <select id="excelDownload" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AutoPerformanceCompareBetweenDbServiceDao.excelDownload */
        <include refid="loadPerformanceResultListRefId"/>
        
        <include refid="loadPerformanceResultOrderBy"/>
    </select>
    
    <update id="updateAutoPerfChkIsNull" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.updateAutoPerfChkIsNull */
        UPDATE SQL_AUTO_PERF_CHK
           SET ORIGINAL_DBID = NULL
             , PERF_CHECK_TARGET_DBID = NULL
             , TOPN_CNT = NULL
             , PERF_CHECK_RANGE_BEGIN_DT = NULL
             , PERF_CHECK_RANGE_END_DT = NULL
             , PERF_CHECK_EXECUTER_ID = NULL
             , PERF_CHECK_EXEC_BEGIN_DT = NULL
             , PERF_CHECK_EXEC_END_DT = NULL
             , PERF_CHECK_FORCE_CLOSE_YN = NULL
             , LITERAL_EXCEPT_YN = NULL
             , OWNER_LIST = NULL
             , MODULE_LIST = NULL
             , TABLE_NAME_LIST = NULL
             , ALL_SQL_YN = NULL
             , SQL_TIME_LIMT_CD = NULL
             , SQL_TIME_DIRECT_PREF_VALUE = NULL
             , MAX_FETCH_CNT = NULL
             , MULTIPLE_BIND_EXEC_CNT = NULL
             , MULTIPLE_EXEC_CNT = NULL
             , PARALLEL_DEGREE = NULL
             , DML_EXEC_YN = NULL
             , PERF_COMPARE_METH_CD = NULL
             , PERF_CHECK_SQL_SOURCE_TYPE_CD = NULL
             , EXTRA_FILTER_PREDICATION = NULL
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND DATABASE_KINDS_CD = #{database_kinds_cd}
    </update>
    
    <select id="selectTuningTargetSql" parameterType="tuningTargetSql" resultType="tuningTargetSql">
        /* AutoPerformanceCompareBetweenDbServiceDao.selectTuningTargetSql */
        SELECT /*+ LEADING(A B) */
               A.DBID                 AS DBID
             , A.SQL_ID                 AS SQL_ID
             , A.PLAN_HASH_VALUE     AS PLAN_HASH_VALUE
             , A.MODULE                 AS MODULE
             , A.PARSING_SCHEMA_NAME AS PARSING_SCHEMA_NAME
             , A.EXEC                 AS EXECUTIONS
             , A.AVG_BGET             AS AVG_BUFFER_GETS
             , A.MAX_BGET             AS MAX_BUFFER_GETS
             , A.BGET                 AS TOTAL_BUFFER_GETS
             , A.AVG_ELAP             AS AVG_ELAPSED_TIME
             , A.MAX_ELAP             AS MAX_ELAPSED_TIME
             , A.AVG_CPU             AS AVG_CPU_TIME
             , A.AVG_DRDS             AS AVG_DISK_READS
             , A.AVG_ROWS             AS AVG_ROW_PROCESSED
             , RATIO_BUFFER_GET_TOTAL
             , RATIO_CPU_TOTAL
             , RATIO_CPU_PER_EXECUTIONS
             , B.SQL_TEXT
          FROM (
                SELECT /*+ NO_MERGE LEADING(C B) USE_NL(B) INDEX(B WRH$_SQLSTAT_PK) */
                       B.DBID, B.SQL_ID, MAX(B.PLAN_HASH_VALUE) PLAN_HASH_VALUE, MAX(B.MODULE)  MODULE
                     , ROUND(SUM(B.ELAPSED_TIME_DELTA)/DECODE(SUM(B.EXECUTIONS_DELTA), 0, 1, SUM(B.EXECUTIONS_DELTA)) /1000000,2) AVG_ELAP
                     , ROUND(MAX(B.ELAPSED_TIME_DELTA/DECODE(B.EXECUTIONS_DELTA, 0, 1, B.EXECUTIONS_DELTA) )/1000000,2) MAX_ELAP
                     , ROUND(SUM(B.CPU_TIME_DELTA)/DECODE(SUM(B.EXECUTIONS_DELTA), 0, 1, SUM(B.EXECUTIONS_DELTA))/1000000,2) AVG_CPU
                     , TRUNC(SUM(B.BUFFER_GETS_DELTA)/DECODE(SUM(B.EXECUTIONS_DELTA), 0, 1, SUM(B.EXECUTIONS_DELTA))) AVG_BGET
                     , TRUNC(MAX(B.BUFFER_GETS_DELTA/DECODE(B.EXECUTIONS_DELTA, 0, 1, B.EXECUTIONS_DELTA))) MAX_BGET
                     , TRUNC(SUM(B.DISK_READS_DELTA)/DECODE(SUM(B.EXECUTIONS_DELTA), 0, 1, SUM(B.EXECUTIONS_DELTA))) AVG_DRDS
                     , TRUNC(SUM(B.ROWS_PROCESSED_DELTA)/DECODE(SUM(B.EXECUTIONS_DELTA), 0, 1, SUM(B.EXECUTIONS_DELTA))) AVG_ROWS
                     , ROUND(RATIO_TO_REPORT(SUM(B.BUFFER_GETS_DELTA)) OVER(), 4)*100 AS RATIO_BUFFER_GET_TOTAL
                     , ROUND(RATIO_TO_REPORT(SUM(B.CPU_TIME_DELTA)) OVER(), 4)*100 AS RATIO_CPU_TOTAL
                     , NULL AS RATIO_CPU_PER_EXECUTIONS
                     , SUM(B.BUFFER_GETS_DELTA) BGET
                     , SUM(B.EXECUTIONS_DELTA) EXEC
                     , SUM(B.ELAPSED_TIME_DELTA) ELAP
                     , SUM(B.PARSE_CALLS_DELTA) PARSE
                     , SUM(B.FETCHES_DELTA) FETCH
                     , MAX(C.BEGIN_INTERVAL_TIME) SNAP_TIME
                     , MAX(B.PARSING_SCHEMA_NAME) PARSING_SCHEMA_NAME
                  FROM (
                        SELECT /*+ NO_MERGE */ SNAP_ID, DBID, INSTANCE_NUMBER, BEGIN_INTERVAL_TIME
                          FROM ODS_HIST_SNAPSHOT
                         WHERE DBID = #{dbid}
                        ) C, ODS_HIST_SQLSTAT B
                 WHERE B.DBID = #{dbid}
                   AND B.SQL_ID = #{sql_id}
                   AND B.EXECUTIONS_DELTA <![CDATA[>]]> 0
                   AND C.SNAP_ID = B.SNAP_ID
                   AND C.DBID = B.DBID
                   AND C.INSTANCE_NUMBER = B.INSTANCE_NUMBER
                 GROUP BY B.DBID, B.SQL_ID
                ) A
             , ODS_HIST_SQLTEXT B
         WHERE A.SQL_ID = B.SQL_ID
           AND A.DBID = B.DBID    
    </select>
    
    <update id="insertTuningTargetSql" parameterType="tuningTargetSql">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTuningTargetSql */
        INSERT INTO TUNING_TARGET_SQL
             ( TUNING_NO                                        /* 튜닝번호 */
             , DBID                                             /* DBID */
             , SQL_ID                                           /* SQL_ID */
             , CHOICE_DIV_CD                                    /* 선정구분코드 */
             , TUNING_STATUS_CD                                 /* 튜닝상태코드 */
             , PERFR_ID                                         /* 성능담당자ID */
             , TUNING_REQUEST_DT                                /* 튜닝요청일시 */
             , PLAN_HASH_VALUE                                  /* PLAN_HASH_VALUE */
             , PARSING_SCHEMA_NAME                              /* PARSING_SCHEMA_NAME */
             , EXECUTIONS                                       /* EXECUTIONS */
             , AVG_BUFFER_GETS                                  /* AVG_BUFFER_GETS */
             , AVG_ELAPSED_TIME                                 /* AVG_BUFFER_GETS */
             , AVG_DISK_READS                                   /* AVG_DISK_READS */
             , AVG_ROW_PROCESSED                                /* AVG_ROW_PROCESSED */
             , SQL_TEXT                                         /* SQL_TEXT */
             , PROJECT_ID                                       /* 프로젝트ID */
             , SQL_AUTO_PERF_CHECK_ID                           /* SQL자동성능점검회차 */
             , DBIO                                             /* DBIO */
             , MODULE                                           /* MODULE */
             , TUNING_REQUESTER_ID                              /* 튜닝요청자 */
             , TUNING_REQUESTER_WRKJOB_CD                       /* 튜닝요청자업무코드 */
             , TUNING_REQUESTER_TEL_NUM                         /* 튜닝요청자전화번호 */
             )
             SELECT #{tuning_no}                                /* 튜닝번호 */
                  , B.ORIGINAL_DBID                             /* DBID */
<!--                   , B.PERF_CHECK_TARGET_DBID                    > DBID -->
                  , A.SQL_ID                                    /* SQL_ID */
                  , #{choice_div_cd}                            /* 선정구분코드(G:DB간성능자동비교) */
                  , #{tuning_status_cd}                         /* 튜닝상태코드 (3:튜닝대기) */
                  , #{perfr_id}                                 /* 성능담당자ID */
                  , SYSDATE                                     /* 튜닝요청일시 */
                  , A.AFTER_PLAN_HASH_VALUE                     /* PLAN_HASH_VALUE */
                  , #{parsing_schema_name}                      /* (OPENSIMUL) PARSING_SCHEMA_NAME */
                  , A.AFTER_EXECUTIONS                          /* EXECUTIONS */
                  , ROUND(A.AFTER_BUFFER_GETS/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AFTER_BUFFER_GETS                       /* AVG_BUFFER_GETS */
                  , ROUND(A.AFTER_ELAPSED_TIME/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)/1000000, 4) AFTER_ELAPSED_TIME          /* AVG_ELAPSED_TIME */
                  , ROUND(A.AFTER_DISK_READS/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AFTER_DISK_READS                         /* AVG_DISK_READS */
                  , ROUND(A.AFTER_ROWS_PROCESSED/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AFTER_ROWS_PROCESSED                 /* AVG_ROW_PROCESSED */
                  
                  , (CASE 
                          WHEN B.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' THEN (SELECT S.SQL_TEXT FROM ODS_HIST_SQLTEXT S WHERE S.DBID = B.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID)
                          ELSE (SELECT S.SQL_FULLTEXT FROM VSQL_TEXT S WHERE S.DBID = B.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                     END) AS SQL_FULLTEXT    
                  , A.PROJECT_ID                                /* 프로젝트ID */
                  , A.SQL_AUTO_PERF_CHECK_ID                    /* SQL자동성능점검회차 */
                  
                  , (CASE 
                          WHEN B.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' THEN FN_AWR_SQL_DBIO(B.ORIGINAL_DBID, A.SQL_ID) 
                          ELSE (SELECT S.DBIO FROM VSQL_TEXT S WHERE S.DBID = B.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                     END) AS DBIO
                  , #{module}
                  , #{tuning_requester_id}
                  , #{tuning_requester_wrkjob_cd}
                  , #{tuning_requester_tel_num}
               FROM SQL_AUTO_PERF_CHK_TARGET A
                  , SQL_AUTO_PERF_CHK B
              WHERE A.PROJECT_ID = #{project_id}
                AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                AND A.SQL_ID = #{sql_id}
                AND A.PROJECT_ID = B.PROJECT_ID
                AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
                AND B.DATABASE_KINDS_CD = #{database_kinds_cd}
                
    </update>
    
    <select id="getDuplicateSQLTuningTargetByProjectCount" parameterType="tuningTargetSql" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.getDuplicateSQLTuningTargetByDBCount */
        SELECT COUNT(*)
          FROM TUNING_TARGET_SQL
         WHERE SQL_ID = #{sql_id}
           AND PROJECT_ID = #{project_id}
           AND TUNING_STATUS_CD NOT IN ('4', '7', 'A')
    </select>
    
    <select id="getDuplicateSQLTuningTargetByProjectAndDBCount" parameterType="tuningTargetSql" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.getDuplicateSQLTuningTargetByDBCount */
        SELECT COUNT(*)
          FROM TUNING_TARGET_SQL
         WHERE SQL_ID = #{sql_id}
           AND PROJECT_ID = #{project_id}
           AND DBID = #{dbid}
           AND TUNING_STATUS_CD NOT IN ('4', '7', 'A')
    </select>
    
    <delete id="deleteTuningTargetSqlBind" parameterType="string">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteTuningTargetSqlBind */
        DELETE FROM TUNING_TARGET_SQL_BIND
         WHERE TUNING_NO = #{tuningNo}
    </delete>
    
    <select id="getBindSetSeq" parameterType="string" resultType="string">
        /* AutoPerformanceCompareBetweenDbServiceDao.getBindSetSeq */
        SELECT NVL(MAX(BIND_SET_SEQ),0)+1
          FROM TUNING_TARGET_SQL_BIND
         WHERE TUNING_NO = #{tuning_no}
    </select>
    
    <!-- SQL-37(3) 재사용 -->
    <insert id="insertTuningTargetSqlBindFromVsqlBindCapture" parameterType="tuningTargetSql" useGeneratedKeys="false">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTuningTargetSqlBindFromVsqlBindCapture */
        INSERT INTO TUNING_TARGET_SQL_BIND
             ( 
               TUNING_NO
             , BIND_SET_SEQ
             , BIND_SEQ
             , BIND_VAR_NM
             , BIND_VAR_VALUE
             , BIND_VAR_TYPE
             , MANDATORY_YN
             )
               SELECT #{tuning_no}
                    , #{bind_set_seq}
                    , POSITION
                    , NAME
                    , VALUE_STRING
                    , 'string'
                    , ''
                 FROM VSQL_BIND_CAPTURE A
                WHERE (A.DBID, A.SQL_ID) IN (
                                             SELECT B.ORIGINAL_DBID
                                                  , A.SQL_ID
                                               FROM SQL_AUTO_PERF_CHK_TARGET A
                                                  , SQL_AUTO_PERF_CHK B
                                              WHERE A.PROJECT_ID = #{project_id} 
                                                AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id} 
                                                AND A.SQL_ID = #{sql_id}
                                                AND A.PROJECT_ID = B.PROJECT_ID
                                                AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
                                                AND B.DATABASE_KINDS_CD = #{database_kinds_cd}
                                            )
        AND A.LAST_CAPTURED = (
                                SELECT MAX(LAST_CAPTURED) 
                                  FROM VSQL_BIND_CAPTURE S 
                                 WHERE S.DBID = A.DBID 
                                   AND S.SQL_ID = A.SQL_ID
                              )
        AND A.SNAP_TIME = (
                            SELECT MAX(SNAP_TIME) 
                              FROM VSQL_BIND_CAPTURE S 
                             WHERE S.DBID = A.DBID
                               AND S.SQL_ID = A.SQL_ID
                          )
        ORDER BY POSITION
    </insert>
    
    <!-- SQL-34:  TUNING_TARGET_SQL_BIND INSERT(튜닝대상선정 버튼 클릭 시) -->
    <insert id="insertTuningTargetSqlBindNew" parameterType="tuningTargetSql" useGeneratedKeys="false">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTuningTargetSqlBindNew */
        INSERT INTO TUNING_TARGET_SQL_BIND
             ( TUNING_NO
             , BIND_SET_SEQ
             , BIND_SEQ
             , BIND_VAR_NM
             , BIND_VAR_VALUE
             , BIND_VAR_TYPE
             , MANDATORY_YN
             )
               SELECT #{tuning_no}
                    , BIND_SET_SEQ
                    , BIND_SEQ
                    , BIND_VAR_NM
                    , BIND_VAR_VALUE
                    , BIND_VAR_TYPE
                    , ''
                 FROM SQL_AUTO_PERF_CHK_BIND A
                WHERE A.PROJECT_ID = #{project_id}
                  AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                  AND A.SQL_ID = #{sql_id}
    </insert>
    
    <!-- 튜닝SQL일괄검증 > 튜닝대상선정  TUNING_TARGET_SQL_BIND INSERT(튜닝대상선정 버튼 클릭 시) -->
    <insert id="insertTuningTargetSqlBindForVerify" parameterType="tuningTargetSql" useGeneratedKeys="false">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTuningTargetSqlBindForVerify */
        INSERT INTO TUNING_TARGET_SQL_BIND
             ( TUNING_NO
             , BIND_SET_SEQ
             , BIND_SEQ
             , BIND_VAR_NM
             , BIND_VAR_VALUE
             , BIND_VAR_TYPE
             , MANDATORY_YN
             )
        SELECT #{tuning_no}
             , #{bind_set_seq}
             , BIND_SEQ
             , BIND_VAR_NM
             , BIND_VAR_VALUE
             , BIND_VAR_TYPE
             , ''
          FROM TUNING_TARGET_SQL_BIND
         WHERE TUNING_NO = #{before_tuning_no}
    </insert>
    
    <!-- SQL-12 그리드 조회 -->
    <sql id="loadSqlPerformancePacListRefId">
        SELECT A.PERF_CHECK_NAME AS PERF_CHECK_NAME                                         /* SQL점검팩명 */
             , A.PERF_CHECK_DESC AS PERF_CHECK_DESC                                         /* SQL점검팩 설명 */
             , DB1.DB_NAME AS ORIGINAL_DB_NAME                                              /* 원천DB(ASIS) */
             , DB2.DB_NAME AS PERF_CHECK_TARGET_DB_NAME                                     /* 대상DB(TOBE) */
             , TO_CHAR(A.PERF_CHECK_RANGE_BEGIN_DT, 'YYYY-MM-DD') ||' ~ '||
               TO_CHAR(A.PERF_CHECK_RANGE_END_DT, 'YYYY-MM-DD') AS CHECK_RANGE_PERIOD       /* 수집기간 */
             , A.ALL_SQL_YN AS ALL_SQL_YN
             , CASE WHEN A.ALL_SQL_YN = 'Y' THEN '전체'
                    ELSE TO_CHAR(A.TOPN_CNT)
                END AS TOPN_CNT                                                             /* TOP N */
             , A.LITERAL_EXCEPT_YN AS LITERAL_EXCEPT_YN                                     /* Literal 제외 */
             /* DML 실행 */
             , CASE WHEN SQL_TIME_LIMT_CD = '99' THEN TO_CHAR(SQL_TIME_DIRECT_PREF_VALUE)
                    ELSE CD1.CD_NM
                END AS SQL_TIME_LIMT_NM                                                     /* SQL Time Limit(분) */
             , A.OWNER_LIST AS OWNER_LIST                                                   /* OWNER */
             , A.MODULE_LIST AS MODULE_LIST                                                 /* MODULE */
             , A.TABLE_NAME_LIST AS TABLE_NAME_LIST                                         /* Table Name */
             , A.PERF_COMPARE_METH_CD AS PERF_COMPARE_METH_CD                               /* PERF_COMPARE_METH_CD */
             , A.PARALLEL_DEGREE AS PARALLEL_DEGREE                                         /* PARALLEL_DEGREE */
             , A.DML_EXEC_YN AS DML_EXEC_YN                                                 /* DML_EXEC_YN */
             , A.MULTIPLE_EXEC_CNT AS MULTIPLE_EXEC_CNT                                     /* MULTIPLE_EXEC_CNT */
             , A.MULTIPLE_BIND_EXEC_CNT AS MULTIPLE_BIND_EXEC_CNT                           /* MULTIPLE_BIND_EXEC_CNT */
             , A.SQL_TIME_LIMT_CD AS SQL_TIME_LIMT_CD                                       /* SQL_TIME_LIMT_CD */
             , A.MAX_FETCH_CNT AS MAX_FETCH_CNT                                             /* MAX_FETCH_CNT */
             , TO_CHAR(A.PERF_CHECK_EXEC_BEGIN_DT, 'YYYY-MM-DD') AS PERF_CHECK_EXEC_END_DT  /* 최종수행일시 */
             , CASE WHEN FLOOR((A.PERF_CHECK_EXEC_END_DT - A.PERF_CHECK_EXEC_BEGIN_DT)*24) = 0 THEN
                    TRUNC(((A.PERF_CHECK_EXEC_END_DT - A.PERF_CHECK_EXEC_BEGIN_DT)*24 - 
                    FLOOR((A.PERF_CHECK_EXEC_END_DT - A.PERF_CHECK_EXEC_BEGIN_DT)*24) )*60)||'분'
               WHEN FLOOR((A.PERF_CHECK_EXEC_END_DT - A.PERF_CHECK_EXEC_BEGIN_DT)*24) <![CDATA[>]]> 0 THEN
                    FLOOR((A.PERF_CHECK_EXEC_END_DT - A.PERF_CHECK_EXEC_BEGIN_DT)*24)||'시간 '||
                    TRUNC(((A.PERF_CHECK_EXEC_END_DT - A.PERF_CHECK_EXEC_BEGIN_DT)*24 - 
                    FLOOR((A.PERF_CHECK_EXEC_END_DT - A.PERF_CHECK_EXEC_BEGIN_DT)*24) )*60)||'분'
               ELSE ''
               END AS PERF_CHECK_EXEC_TIME                                                  /* 수행시간 */
             , A.PERF_CHECK_FORCE_CLOSE_YN AS PERF_CHECK_FORCE_CLOSE_YN                     /* 강제완료처리 */
             , U1.USER_NM AS USER_NM                                                        /* 수행자명 */
             /* HIDDEN */
             , A.PROJECT_ID AS PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID AS SQL_AUTO_PERF_CHECK_ID
          FROM SQL_AUTO_PERF_CHK A
             , USERS U1
             , CD CD1
             , DATABASE DB1
             , DATABASE DB2
         WHERE A.PROJECT_ID = #{project_id}
        <if test="sql_auto_perf_check_id != null and sql_auto_perf_check_id != ''">
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
        </if>
        <if test="original_dbid != null and original_dbid != ''">
           AND A.ORIGINAL_DBID = #{original_dbid}
        </if>
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND A.PERF_CHECK_EXECUTER_ID = U1.USER_ID(+)
           AND CD1.GRP_CD_ID(+) = '1082'
           AND CD1.CD(+) = A.SQL_TIME_LIMT_CD
           AND A.ORIGINAL_DBID = DB1.DBID(+)
           AND A.PERF_CHECK_TARGET_DBID = DB2.DBID(+)
           AND A.PERF_CHECK_TYPE_CD = #{perf_check_type_cd}
        ORDER BY SQL_AUTO_PERF_CHECK_ID
    </sql>
    
    <!-- SQL-12 그리드 조회 -->
    <select id="loadSqlPerformancePacList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadSqlPerformancePacList */
        SELECT AA.*
        FROM (
            SELECT ROWNUM RNUM, AA.*
            FROM (
                <include refid="loadSqlPerformancePacListRefId"/>
            ) AA
            WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
        ) AA
        WHERE AA.RNUM <![CDATA[>]]> ${pagePerCount} * (${currentPage} - 1)
    </select>
    
    <!-- SQL-13 DELETE TABLE 추가 -->
    <delete id="deleteSqlAutoPerformanceChk" parameterType="sqlAutoPerformanceCompare" >
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlAutoPerformanceChk */
        DELETE SQL_AUTO_PERF_CHK A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
    </delete>
    <!-- SQL-8: DELETE TABLE 중복 된 코드 사용 -->
    
    <!-- SQL-14 튜닝실적 검색 -->
    <sql id="loadTuningPerformanceListRefId">
        SELECT
               C.PERF_CHECK_NAME              /* SQL점검팩명 */
             , A.SQL_ALL_CNT                  /* SQL수 */
             , A.TUNING_SELECTION_CNT         /* 튜닝선정 */
             , A.PLAN_CHANGE_CNT              /* Plan 변경 */
             , A.ELAPSED_TIME_STD_CNT         /* 수행시간(성능저하 SQLs) */
             , A.BUFFER_STD_CNT               /* 버퍼(성능저하 SQLs) */
             , A.TUNING_END_CNT               /* 완료(튜닝 SQLs) */
             , A.TUNING_CNT                   /* 진행중(튜닝 SQLs) */
             , A.ELAP_TIME_IMPR_RATIO         /* 수행시간(개선실적(평균 %)) */
             , A.BUFFER_IMPR_RATIO            /* 버퍼(개선실적(평균 %)) */
             , B.PROJECT_NM                   /* 프로젝트명 */
             /* HIDDEN */
             , A.PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID
          FROM (
                SELECT A.PROJECT_ID
                     , A.SQL_AUTO_PERF_CHECK_ID
                     , COUNT(*) AS SQL_ALL_CNT
                    
                     , SUM(CASE WHEN B.TUNING_STATUS_CD IS NOT NULL AND A.PLAN_CHANGE_YN = 'Y' THEN 1 ELSE 0 END) AS PLAN_CHANGE_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD IS NOT NULL THEN 1 ELSE 0 END) AS TUNING_SELECTION_CNT
                     
                     , SUM(CASE WHEN B.TUNING_STATUS_CD IS NOT NULL AND A.ELAPSED_TIME_INCREASE_RATIO <![CDATA[<]]> 0 THEN 1 ELSE 0 END) AS ELAPSED_TIME_STD_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD IS NOT NULL AND A.BUFFER_INCREASE_RATIO <![CDATA[<]]> 0 THEN 1 ELSE 0 END) AS BUFFER_STD_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD = '8' THEN 1 ELSE 0 END) AS TUNING_END_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD <![CDATA[<>]]> '8' THEN 1 ELSE 0 END) AS TUNING_CNT
                     , NVL(ROUND(AVG(B.ELAP_TIME_IMPR_RATIO), 2), 0) AS ELAP_TIME_IMPR_RATIO
                     , NVL(ROUND(AVG(B.BUFFER_IMPR_RATIO), 2), 0) AS BUFFER_IMPR_RATIO
                  FROM SQL_AUTO_PERF_CHK_TARGET A
                     , (SELECT A.PROJECT_ID
                             , A.SQL_AUTO_PERF_CHECK_ID
                             , A.TUNING_STATUS_CD
                             , B.ELAP_TIME_IMPR_RATIO
                             , B.BUFFER_IMPR_RATIO
                             , A.SQL_ID
                          FROM TUNING_TARGET_SQL A
                             , SQL_TUNING B
                         WHERE A.TUNING_NO = B.TUNING_NO(+)
                           AND A.TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                           AND (A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID, A.SQL_ID, A.TUNING_NO) IN 
                               (
                                SELECT PROJECT_ID
                                     , SQL_AUTO_PERF_CHECK_ID
                                     , SQL_ID
                                     , MAX(TUNING_NO)
                                  FROM TUNING_TARGET_SQL
                                 WHERE PROJECT_ID = ${project_id}
                                    <if test="sql_auto_perf_check_id != null and sql_auto_perf_check_id != ''">
                                   AND SQL_AUTO_PERF_CHECK_ID = '${sql_auto_perf_check_id}'
                                    </if>
                                   AND CHOICE_DIV_CD = '${choice_div_cd}'
                                 GROUP BY PROJECT_ID
                                        , SQL_AUTO_PERF_CHECK_ID
                                        , SQL_ID)
                       ) B
                 WHERE A.PROJECT_ID = B.PROJECT_ID(+)
                   AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID(+)
                   AND A.SQL_ID = B.SQL_ID(+)
                   AND A.PROJECT_ID = ${project_id}
                <if test="sql_auto_perf_check_id != null and sql_auto_perf_check_id != ''">
                   AND A.SQL_AUTO_PERF_CHECK_ID = '${sql_auto_perf_check_id}'
                </if> 
                 GROUP BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID
               ) A
             , PROJECT B
             , SQL_AUTO_PERF_CHK C
         WHERE A.PROJECT_ID = B.PROJECT_ID
           AND A.PROJECT_ID = C.PROJECT_ID
           AND A.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID
        <if test="original_dbid != null and original_dbid != ''">
           AND C.ORIGINAL_DBID = ${original_dbid}
        </if>
           AND C.PERF_CHECK_TYPE_CD = ${perf_check_type_cd}
           AND C.DATABASE_KINDS_CD = '${database_kinds_cd}'
         ORDER BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID
    </sql>
    
    <!-- SQL-14 튜닝실적 검색 -->
    <!-- N-3: 상단 그리드 -->
    <select id="loadTuningPerformanceList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadTuningPerformanceList */
        <include refid="loadTuningPerformanceListRefId"/>
    </select>
    
    <!-- SQL-15 튜닝실적 클릭시 상세검색 -->
    <!-- N-4: 하단 그리드 -->
    <sql id="loadTuningPerformanceDetailListRefId">
    SELECT 
           A.TABLE_LIST
         , A.TUNING_STATUS_NM
         , A.BUFFER_INCREASE_RATIO
         , A.ELAPSED_TIME_INCREASE_RATIO
         , A.PERF_CHECK_RESULT_YN
         , A.PLAN_CHANGE_YN
         , A.SQL_ID
         , A.ASIS_PLAN_HASH_VALUE
         , DECODE(A.ASIS_ELAPSED_TIME, 0, 0.0001, A.ASIS_ELAPSED_TIME) AS ASIS_ELAPSED_TIME                 /* ASIS ELAPSED TIME */
         , A.ASIS_BUFFER_GETS
         , A.TOBE_PLAN_HASH_VALUE
         , DECODE(A.TOBE_ELAPSED_TIME, 0, 0.0001, A.TOBE_ELAPSED_TIME) AS TOBE_ELAPSED_TIME                 /* TOBE ELAPSED TIME */
         , A.TOBE_BUFFER_GETS
         , A.IMPRA_ELAP_TIME
         , A.IMPRA_BUFFER_CNT
         , DBMS_LOB.SUBSTR(A.SQL_TEXT, 200, 1) AS SQL_TEXT_WEB                /* SQL TEXT(FOR WEB) */
         , A.SQL_TEXT AS SQL_TEXT_EXCEL                                       /* SQL TEXT(FOR EXCEL) */
         , A.TUNING_NO
         , A.MODULE
         , A.PROJECT_NM
         , A.PERF_CHECK_NAME
      FROM ( 
        SELECT /*+ LEADING(A) USE_NL(E C B F CD1) PUSH_PRED(F) */
               B.PROJECT_NM AS PROJECT_NM                                     /* 프로젝트명 */
             , E.PERF_CHECK_NAME AS PERF_CHECK_NAME                           /* SQL점검팩명 */
             , (SELECT LISTAGG(S1.TABLE_NAME, ',') WITHIN GROUP(ORDER BY S1.TABLE_NAME)
                  FROM TABLE_CHG_PERF_CHK_TARGET_SQL S1
                 WHERE S1.PROJECT_ID = A.PROJECT_ID
                   AND S1.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
                   AND S1.SQL_ID = A.SQL_ID) AS TABLE_LIST                    /* 테이블 */
             , CD1.CD_NM AS TUNING_STATUS_NM                                  /* 튜닝상태 */
             , A.BUFFER_INCREASE_RATIO AS BUFFER_INCREASE_RATIO               /* 버퍼 임팩트(%) */
             , A.ELAPSED_TIME_INCREASE_RATIO AS ELAPSED_TIME_INCREASE_RATIO   /* 수행시간 임팩트(%) */
             , CASE WHEN C.ERR_CODE IS NOT NULL THEN NULL
                    WHEN (
                            SELECT COUNT(*)
                              FROM SQL_AUTO_PERF_CHK_RESULT Z
                             WHERE Z.PROJECT_ID = A.PROJECT_ID
                               AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
                               AND Z.SQL_ID = A.SQL_ID
                               AND Z.PERF_CHECK_RESULT_DIV_CD = 'B'
                               AND ROWNUM = 1) = 1 THEN '부적합' ELSE '적합' END AS PERF_CHECK_RESULT_YN     /* 성능점검결과 */
             , A.PLAN_CHANGE_YN AS PLAN_CHANGE_YN                                                         /* Plan변경여부 */
             , A.SQL_ID AS SQL_ID                                                                         /* SQL ID */
             , A.BEFORE_PLAN_HASH_VALUE AS ASIS_PLAN_HASH_VALUE                                           /* ASIS PLAN HASH VALUE */
             , A.AFTER_PLAN_HASH_VALUE AS TOBE_PLAN_HASH_VALUE                                            /* TOBE PLAN HASH VALUE */
             , ROUND(A.BEFORE_ELAPSED_TIME/1000000/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS), 4) AS ASIS_ELAPSED_TIME      /* ASIS ELAPSED TIME */
             , ROUND(A.AFTER_ELAPSED_TIME/1000000/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS), 4) AS TOBE_ELAPSED_TIME         /* TOBE ELAPSED TIME */
             , F.IMPRA_ELAP_TIME AS IMPRA_ELAP_TIME                                                                                     /* TUNING ELAPSED TIME */
             , FN_ZERO_TO_DECIMAL_4_POINT(ROUND(A.BEFORE_BUFFER_GETS/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS))) AS ASIS_BUFFER_GETS                   /* ASIS BUFFER GETS */
             , FN_ZERO_TO_DECIMAL_4_POINT(ROUND(A.AFTER_BUFFER_GETS/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS))) AS TOBE_BUFFER_GETS                      /* TOBE BUFFER GETS */
             , F.IMPRA_BUFFER_CNT AS IMPRA_BUFFER_CNT                                                                                   /* TUNING BUFFER GETS */
             , (CASE 
                     WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' /* AWR */ THEN (
                          SELECT (CASE WHEN NVL( DBMS_LOB.GETLENGTH(S.SQL_TEXT), 0) <![CDATA[>=]]> 0 AND NVL( DBMS_LOB.GETLENGTH(S.SQL_TEXT), 0) <![CDATA[<=]]> 1000 THEN  S.SQL_TEXT  
                                       ELSE ( TO_CLOB( DBMS_LOB.SUBSTR(S.SQL_TEXT, 500) || CHR(13)||CHR(10) ||'   (중략) ...   '||CHR(13)||CHR(10)|| DBMS_LOB.SUBSTR(S.SQL_TEXT ,500,DBMS_LOB.GETLENGTH(S.SQL_TEXT)-500) ))
                                  END) SQL_TEXT
                            FROM ODS_HIST_SQLTEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID)
                     ELSE /* VSQL */ (
                          SELECT (CASE WHEN NVL( DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT), 0) <![CDATA[>=]]> 0 AND NVL( DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT), 0) <![CDATA[<=]]> 1000 THEN  S.SQL_FULLTEXT  
                                       ELSE ( TO_CLOB( DBMS_LOB.SUBSTR(S.SQL_FULLTEXT, 500) ||CHR(13)||CHR(10) ||'   (중략) ...   '||CHR(13)||CHR(10)|| DBMS_LOB.SUBSTR(S.SQL_FULLTEXT ,500 , DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT)-500) ))
                                  END) SQL_TEXT
                            FROM VSQL_TEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                END) AS SQL_TEXT
             
             , F.TUNING_NO         /* 튜닝번호 */
             , (CASE WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' /* AWR */ THEN (SELECT MODULE FROM ODS_HIST_SQLSTAT ASQL WHERE ASQL.DBID = E.ORIGINAL_DBID AND ASQL.SQL_ID = A.SQL_ID AND ROWNUM = 1)
                     ELSE /* VSQL */ (SELECT MODULE FROM VSQL_MODULE VSQL WHERE VSQL.DBID = E.ORIGINAL_DBID AND VSQL.SQL_ID = A.SQL_ID AND ROWNUM = 1) 
                 END) AS MODULE
          FROM SQL_AUTO_PERF_CHK_TARGET A
             , PROJECT B
             , SQL_AUTO_PERF_CHK_ERROR C
             , SQL_AUTO_PERF_CHK E
             , (
                SELECT /*+ INDEX(A IX_TUNING_TARGET_SQL_02) */
                       A.PROJECT_ID
                     , A.SQL_AUTO_PERF_CHECK_ID
                     , A.TUNING_NO
                     , A.TUNING_STATUS_CD
                     , A.SQL_ID
                     , B.IMPRA_ELAP_TIME
                     , B.IMPRA_BUFFER_CNT
                     , ROW_NUMBER() OVER(PARTITION BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID, A.SQL_ID ORDER BY A.TUNING_NO DESC) MAX_TUNING_NO
                  FROM TUNING_TARGET_SQL A
                     , SQL_TUNING B
                 WHERE A.TUNING_NO = B.TUNING_NO(+)
                   AND A.TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                   AND A.CHOICE_DIV_CD IN ('G', 'J') /* G : DB 변경 성능 영향도 분석, J : 테이블 변경 성능 영향도 분석 */
                
        <if test="tuning_end_cnt != null and tuning_end_cnt.equalsIgnoreCase('Y')">
                   /* 완료 클릭 */
                   AND A.TUNING_STATUS_CD = '8'
        </if>
        <if test="tuning_cnt != null and tuning_cnt.equalsIgnoreCase('Y')">
                   /* 진행중 클릭 */
                   AND A.TUNING_STATUS_CD <![CDATA[<>]]> '8'
        </if>
                   ) F
             , CD CD1
         WHERE A.PROJECT_ID = ${project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
           AND A.PROJECT_ID = B.PROJECT_ID
           AND A.PROJECT_ID = C.PROJECT_ID(+)
           AND A.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID(+)
           AND A.SQL_ID = C.SQL_ID(+)
           AND E.PROJECT_ID = A.PROJECT_ID
           AND E.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
           AND E.DATABASE_KINDS_CD = '${database_kinds_cd}'
           AND E.PERF_CHECK_EXEC_END_DT IS NOT NULL
           AND A.PROJECT_ID = F.PROJECT_ID
           AND A.SQL_AUTO_PERF_CHECK_ID = F.SQL_AUTO_PERF_CHECK_ID
           AND A.SQL_ID = F.SQL_ID
           AND CD1.GRP_CD_ID(+) = '1004'
           AND F.TUNING_STATUS_CD = CD1.CD(+)
           
           AND F.MAX_TUNING_NO = 1
           AND A.SQL_ID <![CDATA[>]]> '${sql_id}'
           
        <if test="plan_change_cnt != null and plan_change_cnt.equalsIgnoreCase('Y')">
           /* PLAN 변경 클릭 */
           AND A.PLAN_CHANGE_YN = 'Y'
        </if>
        <if test="elapsed_time_std_cnt != null and elapsed_time_std_cnt.equalsIgnoreCase('Y')">
           /* 성능저하 SQLs-수행시간 */
           AND ELAPSED_TIME_INCREASE_RATIO <![CDATA[<]]> 0
        </if>
        <if test="buffer_std_cnt != null and buffer_std_cnt.equalsIgnoreCase('Y')">
           /* 성능저하 SQLs-버퍼 */
           AND A.BUFFER_INCREASE_RATIO <![CDATA[<]]> 0
        </if>
        )A
        ORDER BY BUFFER_INCREASE_RATIO DESC
<!--         ORDER BY BUFFER_INCREASE_RATIO DESC -->
    </sql>
    
    <!-- SQL-15 튜닝실적 클릭시 상세검색 -->
    <!-- N-4: 하단 그리드 -->
    <select id="loadTuningPerformanceDetailList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadTuningPerformanceDetailList */
        SELECT *
        FROM (
            SELECT ROWNUM RNUM, AA.*
            FROM (
                <include refid="loadTuningPerformanceDetailListRefId"/>
            ) AA
            WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
        ) AA
        WHERE AA.RNUM <![CDATA[>]]> ${pagePerCount} * (${currentPage} - 1)
    </select>
    
    <select id="excelTuningDownload" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AutoPerformanceCompareBetweenDbServiceDao.excelTuningDownload */
        <include refid="loadTuningPerformanceListRefId" />
    </select>
    
    <select id="excelTuningDownload_ex" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AutoPerformanceCompareBetweenDbServiceDao.excelTuningDownload */
        <include refid="loadTuningPerformanceListRefId" />
    </select>
    
    <select id="excelTuningDetailDownload" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AutoPerformanceCompareBetweenDbServiceDao.excelTuningDetailDownload */
        <include refid="loadTuningPerformanceDetailListRefId"/>
        
    </select>
    
    <select id="excelTuningDetailDownload_ex" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AutoPerformanceCompareBetweenDbServiceDao.excelTuningDetailDownload */
        <include refid="loadTuningPerformanceDetailListRefId"/>
    </select>
    
    <!-- 튜닝선정된 점검팩 조회 -->
    <select id="getTuningTargetCount" parameterType="sqlAutoPerformanceCompare" resultType="int">
        SELECT COUNT(*) AS CNT
          FROM TUNING_TARGET_SQL A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
    </select>
    
    <!-- SQL-20 : SQL점검팩 콤보 조회2 - 신규 -->
    <select id="getTobeSqlPerfPacName" resultType="sqlAutoPerformanceCompare" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.getTobeSqlPerfPacName */
        SELECT A.PERF_CHECK_NAME AS PERF_CHECK_NAME
            /* HIDDEN */
             , A.PROJECT_ID AS PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID AS SQL_AUTO_PERF_CHECK_ID
             , CASE WHEN A.ORIGINAL_DBID IS NOT NULL THEN 'Y' ELSE 'N' END AS DATA_YN
             , B.PROJECT_ID AS VERIFY_PROJECT_ID
             , B.SQL_AUTO_PERF_CHECK_ID AS VERIFY_SQL_AUTO_PERF_CHECK_ID
          FROM SQL_AUTO_PERF_CHK A
             , SQL_AUTO_PERF_CHK B
         WHERE A.PROJECT_ID = #{project_id}
           AND A.PERF_CHECK_TYPE_CD = '1'
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND B.PARENT_PROJECT_ID(+) = A.PROJECT_ID
           AND B.PARENT_SQL_AUTO_PERF_CHECK_ID(+) = A.SQL_AUTO_PERF_CHECK_ID
           AND B.PERF_CHECK_TYPE_CD(+) = '2'
         ORDER BY A.PERF_CHECK_NAME
    </select>
    
    <!-- 튜닝SQL일괄검증 자식점검팩 조회 -->
    <select id="getVeritySqlAutoPerfCheckId" parameterType="sqlAutomaticPerformanceCheck" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.getVeritySqlAutoPerfCheckId */
        SELECT PROJECT_ID
             , SQL_AUTO_PERF_CHECK_ID
          FROM SQL_AUTO_PERF_CHK
         WHERE PARENT_PROJECT_ID = #{project_id}
           AND PARENT_SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND DATABASE_KINDS_CD = #{database_kinds_cd}
    </select>
    
    <!-- SQL-21: 상단 그리드 Area - 신규 -->
    <sql id="loadTuningBatchValidationNorthListRefId">
        SELECT
               A.SQL_ALL_CNT                       /* 전체 SQL수 */
             , A.TUNING_SELECTION_CNT              /* 튜닝선정 */
             , A.PLAN_CHANGE_CNT                   /* Plan 변경 */
             , A.ELAPSED_TIME_STD_CNT              /* 수행시간(성능저하 SQLs) */
             , A.BUFFER_STD_CNT                    /* 버퍼(성능저하 SQLs) */
             , A.TUNING_END_CNT                    /* 완료(튜닝 SQLs) */
             , A.TUNING_CNT                        /* 진행중(튜닝 SQLs) */
             , A.TUNING_ELAP_TIME_IMPR_RATIO       /* 수행시간(개선실적(평균 %)) */
             , A.TUNING_BUFFER_IMPR_RATIO          /* 버퍼(개선실적(평균 %)) */
             , A.VERIFY_ELAP_TIME_IMPR_RATIO       /* 수행시간(일괄검증 성능(평균 %)) */
             , A.VERIFY_BUFFER_IMPR_RATIO          /* 버퍼(일괄검증 성능(평균 %)) */
             , B.PROJECT_NM                        /* 프로젝트명 */
             , C.PERF_CHECK_NAME                   /* SQL점검팩명 */
               /* HIDDEN */
             , A.PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID
             , A.VERITY_PROJECT_ID
             , A.VERYFY_SQL_AUTO_PERF_CHECK_ID
          FROM (
                SELECT A.PROJECT_ID
                     , A.SQL_AUTO_PERF_CHECK_ID
                     , COUNT(*) AS SQL_ALL_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD IS NOT NULL AND A.PLAN_CHANGE_YN = 'Y' THEN 1 ELSE 0 END) AS PLAN_CHANGE_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD IS NOT NULL THEN 1 ELSE 0 END) AS TUNING_SELECTION_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD IS NOT NULL AND A.ELAPSED_TIME_INCREASE_RATIO  <![CDATA[<]]>  0 THEN 1 ELSE 0 END) AS ELAPSED_TIME_STD_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD IS NOT NULL AND A.BUFFER_INCREASE_RATIO  <![CDATA[<]]>  0 THEN 1 ELSE 0 END) AS BUFFER_STD_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD = '8' THEN 1 ELSE 0 END) AS TUNING_END_CNT
                     , SUM(CASE WHEN B.TUNING_STATUS_CD  <![CDATA[<>]]>  '8' THEN 1 ELSE 0 END) AS TUNING_CNT
                     , NVL(ROUND(AVG(B.ELAP_TIME_IMPR_RATIO), 2), 0) AS TUNING_ELAP_TIME_IMPR_RATIO
                     , NVL(ROUND(AVG(B.BUFFER_IMPR_RATIO), 2), 0) AS TUNING_BUFFER_IMPR_RATIO
                     , NVL(ROUND(AVG(C.ELAPSED_TIME_INCREASE_RATIO), 2), 0) AS VERIFY_ELAP_TIME_IMPR_RATIO
                     , NVL(ROUND(AVG(C.BUFFER_INCREASE_RATIO), 2), 0) AS VERIFY_BUFFER_IMPR_RATIO
                     , MAX(C.VERITY_PROJECT_ID) AS VERITY_PROJECT_ID
                     , MAX(C.VERYFY_SQL_AUTO_PERF_CHECK_ID) AS VERYFY_SQL_AUTO_PERF_CHECK_ID
                  FROM SQL_AUTO_PERF_CHK_TARGET A
                     , (SELECT A.PROJECT_ID
                             , A.SQL_AUTO_PERF_CHECK_ID
                             , A.TUNING_STATUS_CD
                             , B.ELAP_TIME_IMPR_RATIO
                             , B.BUFFER_IMPR_RATIO
                             , A.SQL_ID
                          FROM TUNING_TARGET_SQL A
                             , SQL_TUNING B
                         WHERE A.TUNING_NO = B.TUNING_NO(+)
                           AND A.TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                           AND A.TUNING_NO IN (SELECT MAX(TUNING_NO)
                                                 FROM TUNING_TARGET_SQL
                                                WHERE PROJECT_ID = ${project_id}
                                                  AND SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                                                  AND CHOICE_DIV_CD='G'
                                                GROUP BY SQL_ID)
                       ) B
                     , (SELECT /* 튜닝 SQL 일괄 검증 SET */
                               A.PARENT_PROJECT_ID
                             , A.PARENT_SQL_AUTO_PERF_CHECK_ID
                             , A.PROJECT_ID AS VERITY_PROJECT_ID
                             , A.SQL_AUTO_PERF_CHECK_ID AS VERYFY_SQL_AUTO_PERF_CHECK_ID
                             , B.SQL_ID
                             , ROUND((B.AFTER_ELAPSED_TIME/DECODE(AFTER_EXECUTIONS, 0, 1, AFTER_EXECUTIONS)/1000000), 4) AS AFTER_ELAPSED_TIME
                             , ROUND(B.AFTER_BUFFER_GETS/DECODE(AFTER_EXECUTIONS, 0, 1, AFTER_EXECUTIONS)) AS AFTER_BUFFER_GETS
                             , ROUND(((BEFORE_BUFFER_GETS/DECODE(BEFORE_EXECUTIONS, 0, 1, BEFORE_EXECUTIONS)) - (AFTER_BUFFER_GETS/DECODE(AFTER_EXECUTIONS, 0, 1, AFTER_EXECUTIONS))) / (BEFORE_BUFFER_GETS/DECODE(BEFORE_EXECUTIONS, 0, 1, BEFORE_EXECUTIONS)) * 100, 2) BUFFER_INCREASE_RATIO
                             , ROUND(((BEFORE_ELAPSED_TIME/DECODE(BEFORE_EXECUTIONS, 0, 1, BEFORE_EXECUTIONS))  - (AFTER_ELAPSED_TIME/DECODE(AFTER_EXECUTIONS, 0, 1, AFTER_EXECUTIONS))) / (BEFORE_ELAPSED_TIME/DECODE(BEFORE_EXECUTIONS, 0, 1, BEFORE_EXECUTIONS)) * 100, 2) ELAPSED_TIME_INCREASE_RATIO
                          FROM SQL_AUTO_PERF_CHK A
                             , SQL_AUTO_PERF_CHK_TARGET B
                         WHERE A.PARENT_PROJECT_ID = ${project_id}
                           AND A.PARENT_SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                           AND A.DATABASE_KINDS_CD = '${database_kinds_cd}'
                           AND A.PERF_CHECK_TYPE_CD = '2'
                           AND A.PROJECT_ID = B.PROJECT_ID
                           AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
                       ) C
                 WHERE A.PROJECT_ID = ${project_id}
                   AND A.SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                   AND A.PROJECT_ID = B.PROJECT_ID(+)
                   AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID(+)
                   AND A.SQL_ID = B.SQL_ID(+)
                   AND A.PROJECT_ID = C.PARENT_PROJECT_ID(+)
                   AND A.SQL_AUTO_PERF_CHECK_ID = C.PARENT_SQL_AUTO_PERF_CHECK_ID(+)
                   AND A.SQL_ID = C.SQL_ID(+)
                 GROUP BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID
               ) A
             , PROJECT B
             , SQL_AUTO_PERF_CHK C
         WHERE A.PROJECT_ID = B.PROJECT_ID
           AND A.PROJECT_ID = C.PROJECT_ID
           AND A.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID
           AND C.DATABASE_KINDS_CD = '${database_kinds_cd}'
         ORDER BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID
    </sql>
    
    <select id="loadTuningBatchValidationNorthList" resultType="sqlAutoPerformanceCompare" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadTuningBatchValidationNorthList */
        <include refid="loadTuningBatchValidationNorthListRefId"/>
    </select>
    
    <!-- 튜닝SQL일괄검증_상단그리드 excel 다운 -->
    <select id="excelNorthDownload" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AutoPerformanceCompareBetweenDbServiceDao.excelNorthDownload */
        <include refid="loadTuningBatchValidationNorthListRefId"/>
        
    </select>
    
    <!-- SQL-22 하단 그리드 Area- 신규 -->
    <sql id="loadTuningBatchValidationSouthListRefId">
        SELECT 
               A.TUNING_STATUS_NM                    /* 튜닝상태 */
             , A.BUFFER_INCREASE_RATIO               /* 버퍼 임팩트(배)-일괄검증결과 */
             , A.ELAPSED_TIME_INCREASE_RATIO         /* 수행시간 임팩트(배)-일괄검증결과 */
             , (CASE WHEN A.ERR_CODE IS NOT NULL THEN NULL
                     WHEN (
                          SELECT COUNT(*)
                            FROM SQL_AUTO_PERF_CHK_RESULT Z
                           WHERE Z.PROJECT_ID = A.VERIFY_PROJECT_ID
                             AND Z.SQL_AUTO_PERF_CHECK_ID = A.VERIFY_SQL_AUTO_PERF_CHECK_ID
                             AND Z.SQL_ID = A.SQL_ID) = 0 THEN NULL
                     WHEN (
                          SELECT COUNT(*)
                            FROM SQL_AUTO_PERF_CHK_RESULT Z
                           WHERE Z.PROJECT_ID = A.VERIFY_PROJECT_ID
                             AND Z.SQL_AUTO_PERF_CHECK_ID = A.VERIFY_SQL_AUTO_PERF_CHECK_ID
                             AND Z.SQL_ID = A.SQL_ID
                             AND Z.PERF_CHECK_RESULT_DIV_CD = 'B'
                             AND ROWNUM = 1) = 1 THEN '부적합'
                     ELSE '적합' 
                END ) AS PERF_CHECK_RESULT_YN        /* 성능점검결과 */
             , A.PLAN_CHANGE_YN                      /* Plan변경여부 */
             , A.ASIS_SQL_ID                         /* ASIS SQL ID */
             , A.ASIS_PLAN_HASH_VALUE                /* ASIS PLAN HASH VALUE */
             , DECODE(A.ASIS_ELAPSED_TIME, 0, 0.0001, A.ASIS_ELAPSED_TIME) AS ASIS_ELAPSED_TIME                   /* ASIS ELAPSED TIME */
             , A.ASIS_BUFFER_GETS                    /* ASIS BUFFER GETS */
             , A.TOBE_PLAN_HASH_VALUE                /* TOBE PLAN HASH VALUE */
             , DECODE(A.TOBE_ELAPSED_TIME, 0, 0.0001, A.TOBE_ELAPSED_TIME) AS TOBE_ELAPSED_TIME                   /* TOBE ELAPSED TIME */
             , A.TOBE_BUFFER_GETS                    /* TOBE BUFFER GETS */
             , A.TUNING_ELAPSED_TIME                 /* TUNING ELAPSED TIME */
             , A.TUNING_BUFFER_GETS                  /* TUNING BUFFER GETS */
             , A.VERIFY_SQL_ID                       /* 일괄검증 SQL_ID */
             , A.VERIFY_ELAPSED_TIME                 /* 일괄검증 ELAPSED TIME */
             , A.VERIFY_BUFFER_GETS                  /* 일괄검증 BUFFER GETS */
             
             , A.ERR_CODE                            /* 에러코드 */
             , A.ERR_MSG                             /* 에러메시지 */
             , A.SQL_TEXT_WEB
             , A.SQL_TEXT_EXCEL                      /* SQL_TEXT */
             , A.VERIFY_TUNING_NO                    /* 일괄검증 튜닝번호 */
             , A.BEFORE_TUNING_NO                    /* 성능비교 튜닝번호 */
             , A.PROJECT_NM                          /* 프로젝트명 */
             , A.PERF_CHECK_NAME                     /* SQL점검팩명 */
            
             /* HIDDEN */
             , A.PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID
             , A.ORIGINAL_DBID
             , A.VERIFY_PROJECT_ID
             , A.VERIFY_SQL_AUTO_PERF_CHECK_ID
             , A.MODULE
             , A.PARSING_SCHEMA_NAME
          FROM (
                SELECT /*+ LEADING(G A) USE_NL(A B C E F  H CD1) NO_MERGE(F) NO_MERGE(H) PUSH_PRED(F) PUSH_PRED(H)  */ 
                       B.PROJECT_NM AS PROJECT_NM                                     /* 프로젝트명 */
                     , E.PERF_CHECK_NAME AS PERF_CHECK_NAME                           /* SQL점검팩명 */
                     , CD1.CD_NM AS TUNING_STATUS_NM                                  /* 튜닝상태 */
                     , G.BUFFER_INCREASE_RATIO AS BUFFER_INCREASE_RATIO               /* 버퍼 임팩트(배)-일괄검증결과 */
                     , G.ELAPSED_TIME_INCREASE_RATIO AS ELAPSED_TIME_INCREASE_RATIO   /* 수행시간 임팩트(배)-일괄검증결과 */
                     , G.PLAN_CHANGE_YN AS PLAN_CHANGE_YN                             /* Plan변경여부 */
                    
                     , A.SQL_ID AS ASIS_SQL_ID                                        /* ASIS SQL ID */
                     , A.BEFORE_PLAN_HASH_VALUE AS ASIS_PLAN_HASH_VALUE               /* ASIS PLAN HASH VALUE */
                     , ROUND(A.BEFORE_ELAPSED_TIME/DECODE(BEFORE_EXECUTIONS, 0, 1, BEFORE_EXECUTIONS)/1000000, 4) AS ASIS_ELAPSED_TIME    /* ASIS ELAPSED TIME */
                     , FN_ZERO_TO_DECIMAL_4_POINT(ROUND(A.BEFORE_BUFFER_GETS/DECODE(BEFORE_EXECUTIONS, 0, 1, BEFORE_EXECUTIONS))) AS ASIS_BUFFER_GETS                 /* ASIS BUFFER GETS */
                     
                     , A.AFTER_PLAN_HASH_VALUE AS TOBE_PLAN_HASH_VALUE                                                                    /* TOBE PLAN HASH VALUE */
                     , ROUND(A.AFTER_ELAPSED_TIME/DECODE(AFTER_EXECUTIONS, 0, 1, AFTER_EXECUTIONS)/1000000, 4) AS TOBE_ELAPSED_TIME       /* TOBE ELAPSED TIME */
                     , FN_ZERO_TO_DECIMAL_4_POINT(ROUND(A.AFTER_BUFFER_GETS/DECODE(AFTER_EXECUTIONS, 0, 1, AFTER_EXECUTIONS))) AS TOBE_BUFFER_GETS                    /* TOBE BUFFER GETS */
                     
                     , (CASE WHEN F.TUNING_ELAPSED_TIME > 0 AND F.TUNING_ELAPSED_TIME <![CDATA[<]]> 0.0001 THEN 0.0001 ELSE F.TUNING_ELAPSED_TIME END) AS TUNING_ELAPSED_TIME   /* TUNING ELAPSED TIME */
                     , FN_ZERO_TO_DECIMAL_4_POINT(F.TUNING_BUFFER_GETS) AS TUNING_BUFFER_GETS                                                                                   /* TUNING BUFFER GETS */
                     
                     , G.VERIFY_SQL_ID                                                                                        /* 일괄검증 SQL_ID */
                     , DECODE(G.VERIFY_ELAPSED_TIME, 0, 0.0001, G.VERIFY_ELAPSED_TIME) AS VERIFY_ELAPSED_TIME                 /* 일괄검증 ELAPSED TIME */
                     , FN_ZERO_TO_DECIMAL_4_POINT(G.VERIFY_BUFFER_GETS) AS VERIFY_BUFFER_GETS                                                                                   /* 일괄검증 BUFFER GETS */
                     
                     , C.ERR_CODE                              /* 에러코드 */
                     , C.ERR_MSG                               /* 에러메시지 */
                     , DBMS_LOB.SUBSTR(F.SQL_TEXT, 200, 1) AS SQL_TEXT_WEB
                     , F.SQL_TEXT AS SQL_TEXT_EXCEL            /* SQL_TEXT */
                     , H.TUNING_NO AS VERIFY_TUNING_NO         /* 일괄검증 튜닝번호 */
                     , F.TUNING_NO AS BEFORE_TUNING_NO         /* 성능비교 튜닝번호 */
                     /* HIDDEN */
                     , A.PROJECT_ID
                     , A.SQL_AUTO_PERF_CHECK_ID
                     , G.ORIGINAL_DBID
                     , G.VERIFY_PROJECT_ID
                     , G.VERIFY_SQL_AUTO_PERF_CHECK_ID
                     , G.SQL_ID
                     , (CASE 
                             WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' THEN (SELECT MAX(S.PARSING_SCHEMA_NAME) FROM ODS_HIST_SQLSTAT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                             ELSE (SELECT MAX(S.PARSING_SCHEMA_NAME) FROM VSQL_TEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                        END) AS PARSING_SCHEMA_NAME
                     , (CASE 
                             WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' /* AWR */ THEN (SELECT MODULE FROM ODS_HIST_SQLSTAT ASQL WHERE ASQL.DBID = E.ORIGINAL_DBID AND ASQL.SQL_ID = A.SQL_ID AND ROWNUM = 1)
                             ELSE /* VSQL */ (SELECT MODULE FROM VSQL_MODULE VSQL WHERE VSQL.DBID = E.ORIGINAL_DBID AND VSQL.SQL_ID = A.SQL_ID AND ROWNUM = 1) 
                        END) AS MODULE  
                  FROM SQL_AUTO_PERF_CHK_TARGET A
                     , PROJECT B
                     , SQL_AUTO_PERF_CHK_ERROR C
                     , SQL_AUTO_PERF_CHK E
                     , ( /* 성능비교 튜닝 SQL SET */
                         SELECT A.PROJECT_ID
                             , A.SQL_AUTO_PERF_CHECK_ID
                             , A.TUNING_NO
                             , A.TUNING_STATUS_CD
                             , A.SQL_ID
                             , B.IMPRA_ELAP_TIME AS TUNING_ELAPSED_TIME
                             , B.IMPRA_BUFFER_CNT AS TUNING_BUFFER_GETS
                             , (
                                 CASE WHEN NVL( DBMS_LOB.GETLENGTH(B.IMPR_SQL_TEXT), 0) <![CDATA[>=]]> 0 AND NVL( DBMS_LOB.GETLENGTH(B.IMPR_SQL_TEXT), 0) <![CDATA[<=]]> 1000 THEN  B.IMPR_SQL_TEXT
                                     ELSE ( TO_CLOB( DBMS_LOB.SUBSTR(B.IMPR_SQL_TEXT, 500) ||CHR(13)||CHR(10) ||'   (중략) ...   '||CHR(13)||CHR(10)|| DBMS_LOB.SUBSTR(B.IMPR_SQL_TEXT ,500 , DBMS_LOB.GETLENGTH(B.IMPR_SQL_TEXT)-500) ))
                                 END
                               ) SQL_TEXT
                             , ROW_NUMBER() OVER(PARTITION BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID, A.SQL_ID ORDER BY A.TUNING_NO DESC) MAX_TUNING_NO
                          FROM TUNING_TARGET_SQL A
                             , SQL_TUNING B
                         WHERE A.TUNING_NO = B.TUNING_NO(+)
                           AND A.TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                           AND A.PROJECT_ID = ${project_id}
                           AND A.SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                           AND A.CHOICE_DIV_CD = 'G'
                       ) F
                       , (SELECT /* 튜닝 SQL 일괄 검증 SET */
                                /*+  LEADING(A) USE_NL(B) */
                                 A.PARENT_PROJECT_ID
                               , A.PARENT_SQL_AUTO_PERF_CHECK_ID
                               , A.ORIGINAL_DBID
                               , A.PROJECT_ID AS VERIFY_PROJECT_ID
                               , A.SQL_AUTO_PERF_CHECK_ID AS VERIFY_SQL_AUTO_PERF_CHECK_ID
                               , B.SQL_ID
                               , B.AFTER_SQL_ID AS VERIFY_SQL_ID
                               , ROUND((B.AFTER_ELAPSED_TIME/DECODE(AFTER_EXECUTIONS, 0, 1, AFTER_EXECUTIONS)/1000000), 4) AS VERIFY_ELAPSED_TIME
                               , ROUND(B.AFTER_BUFFER_GETS/DECODE(AFTER_EXECUTIONS, 0, 1, AFTER_EXECUTIONS)) AS VERIFY_BUFFER_GETS
                               , PLAN_CHANGE_YN
                               , BUFFER_INCREASE_RATIO
                               , ELAPSED_TIME_INCREASE_RATIO
                               , B.SQL_COMMAND_TYPE_CD 
                            FROM SQL_AUTO_PERF_CHK A
                               , SQL_AUTO_PERF_CHK_TARGET B
                           WHERE A.PARENT_PROJECT_ID = ${project_id}
                             AND A.PARENT_SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                             AND A.DATABASE_KINDS_CD = '${database_kinds_cd}'
                             AND A.PERF_CHECK_TYPE_CD = '2'
                             AND A.PROJECT_ID = B.PROJECT_ID
                             AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
                             
                             AND B.SQL_ID <![CDATA[>]]> '${sql_id}'
                           ORDER BY B.SQL_ID 
                        ) G
                     , ( /* 일괄검증 튜닝 SQL SET */
                        SELECT A.PROJECT_ID
                             , A.SQL_AUTO_PERF_CHECK_ID
                             , A.TUNING_NO
                             , A.TUNING_STATUS_CD
                             , A.SQL_ID
                             , B.IMPRA_ELAP_TIME AS TUNING_ELAPSED_TIME
                             , B.IMPRA_BUFFER_CNT AS TUNING_BUFFER_GETS
                             , A.SQL_TEXT
                             , ROW_NUMBER() OVER(PARTITION BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID, A.SQL_ID ORDER BY A.TUNING_NO DESC) MAX_TUNING_NO
                          FROM TUNING_TARGET_SQL A
                             , SQL_TUNING B
                         WHERE A.TUNING_NO = B.TUNING_NO(+)
                           AND A.TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                           AND A.PROJECT_ID = ${project_id}
                           AND A.SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                           AND A.CHOICE_DIV_CD = 'H'
                       ) H
                     , CD CD1
                 WHERE A.PROJECT_ID = B.PROJECT_ID
        
                   AND E.PROJECT_ID = A.PROJECT_ID
                   AND E.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
                   AND E.PERF_CHECK_EXEC_END_DT IS NOT NULL
                   AND E.DATABASE_KINDS_CD = '${database_kinds_cd}'
        
                   AND A.PROJECT_ID = F.PROJECT_ID
                   AND A.SQL_AUTO_PERF_CHECK_ID = F.SQL_AUTO_PERF_CHECK_ID
                   AND A.SQL_ID = F.SQL_ID
        
                   AND A.PROJECT_ID = G.PARENT_PROJECT_ID
                   AND A.SQL_AUTO_PERF_CHECK_ID = G.PARENT_SQL_AUTO_PERF_CHECK_ID
                   AND A.SQL_ID = G.SQL_ID
        
                   AND G.VERIFY_PROJECT_ID = C.PROJECT_ID(+)
                   AND G.VERIFY_SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID(+)
                   AND G.SQL_ID = C.SQL_ID(+)
        
                   AND G.PARENT_PROJECT_ID = H.PROJECT_ID(+)
                   AND G.PARENT_SQL_AUTO_PERF_CHECK_ID = H.SQL_AUTO_PERF_CHECK_ID(+)
                   AND (CASE WHEN G.SQL_COMMAND_TYPE_CD = 'SELECT' THEN G.VERIFY_SQL_ID ELSE G.SQL_ID END) = H.SQL_ID(+)
        
                   AND CD1.GRP_CD_ID(+) = '1004'
                   AND H.TUNING_STATUS_CD = CD1.CD(+)
                   
                   AND F.MAX_TUNING_NO = 1
                   AND H.MAX_TUNING_NO(+) = 1
                 ORDER BY G.SQL_ID
             ) A
             WHERE 1 = 1
            <if test="asis_perf_degrade_versus_yn != null and asis_perf_degrade_versus_yn.equalsIgnoreCase('Y')">
                   /* ASIS 대비 성능저하 */
                   AND A.VERIFY_BUFFER_GETS <![CDATA[>]]> A.ASIS_BUFFER_GETS
            </if>
            <if test="tuning_perf_degrade_versus_yn != null and tuning_perf_degrade_versus_yn.equalsIgnoreCase('Y')">
                   /* 튜닝 대비 성능저하 */
                   AND A.VERIFY_BUFFER_GETS <![CDATA[>]]> A.TUNING_BUFFER_GETS
            </if>
            <if test="verify_buffer_gets != null and verify_buffer_gets != ''">
                   /* 일괄검증성능 BUFFER GETS */
                   AND A.VERIFY_BUFFER_GETS <![CDATA[>=]]> ${verify_buffer_gets}
            </if>
            <if test="verify_elapsed_time != null and verify_elapsed_time != ''">
                   /* 일괄검증성능 ELAPSED TIME */
                   AND A.VERIFY_ELAPSED_TIME <![CDATA[>=]]> ${verify_elapsed_time}
            </if>
            <if test="error_yn != null and error_yn.equalsIgnoreCase('Y')">
                   /* 오류여부 체크 */
                   AND A.ERR_MSG IS NOT NULL
            </if>
    </sql>
    
    <!-- SQL-22 하단 그리드 Area- 신규 -->
    <select id="loadTuningBatchValidationSouthList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadTuningBatchValidationSouthList */
        SELECT *
        FROM (
            SELECT ROWNUM RNUM, AA.*
            FROM (
                <include refid="loadTuningBatchValidationSouthListRefId"/>
            ) AA
            WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
        ) AA
        WHERE AA.RNUM <![CDATA[>]]> ${pagePerCount} * (${currentPage} - 1)
    </select>
    
    <!-- 튜닝SQL 일괄검증 > 튜닝대상선정 List 전체선택시  -->
    <select id="loadTuningBatchValidationSouthListAll" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadTuningBatchValidationSouthListAll */
            SELECT *
              FROM (
                <include refid="loadTuningBatchValidationSouthListRefId"/>
                    ) A
                <if test="sqlExclude != null and sqlExclude.equalsIgnoreCase('Y')">
             WHERE 1=1
               AND A.VERIFY_TUNING_NO IS NULL /* 이전튜닝대상 선전 제외 */
                </if>
    </select>
    
    <!-- 튜닝SQL일괄검증_하단그리드 excel 다운 -->
    <select id="excelSouthDownload" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AutoPerformanceCompareBetweenDbServiceDao.excelSouthDownload */
        <include refid="loadTuningBatchValidationSouthListRefId"/>
        
    </select>
    
    <!-- SQL-30 SQL_AUTO_PERF_CHK INSERT(튜닝SQL 일괄검증)-신규 -->
    <update id="insertTuningSqlAutoPerfChk" parameterType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTuningSqlAutoPerfChk */
        INSERT INTO SQL_AUTO_PERF_CHK
             ( PROJECT_ID
             , SQL_AUTO_PERF_CHECK_ID
             , ORIGINAL_DBID
             , PERF_CHECK_TARGET_DBID
             , PERF_CHECK_EXECUTER_ID
             , PERF_CHECK_EXEC_BEGIN_DT
             , PERF_CHECK_EXEC_END_DT
             , PERF_CHECK_FORCE_CLOSE_YN
             , PERF_CHECK_NAME
             , PERF_CHECK_DESC
             , SQL_TIME_LIMT_CD
             , SQL_TIME_DIRECT_PREF_VALUE
             , PERF_CHECK_TYPE_CD 
             , PARENT_PROJECT_ID
             , PARENT_SQL_AUTO_PERF_CHECK_ID
             , PERF_CHECK_SQL_SOURCE_TYPE_CD
             , PERF_COMPARE_METH_CD
             , PARALLEL_DEGREE
             , MULTIPLE_EXEC_CNT
             , MULTIPLE_BIND_EXEC_CNT
             , DML_EXEC_YN 
             , DATABASE_KINDS_CD
             )
        SELECT #{project_id}
            <choose>
                <when test="verify_sql_auto_perf_check_id != null and verify_sql_auto_perf_check_id != '' ">
             , #{verify_sql_auto_perf_check_id}
                </when>
                <otherwise>
             , (
                 SELECT NVL(MAX(SQL_AUTO_PERF_CHECK_ID) + 1, 1)
                  FROM SQL_AUTO_PERF_CHK
                 WHERE PROJECT_ID = #{project_id} 
               )
                </otherwise>
            </choose>
             , ORIGINAL_DBID
             , PERF_CHECK_TARGET_DBID
             , #{perf_check_executer_id}
             , SYSDATE
             , NULL
             , NULL
             , #{perf_check_name}
             , #{perf_check_desc}
             , #{sql_time_limt_cd}
             , #{sql_time_direct_pref_value}
             , #{perf_check_type_cd}
             , PROJECT_ID
             , SQL_AUTO_PERF_CHECK_ID
             , PERF_CHECK_SQL_SOURCE_TYPE_CD
             , #{perf_compare_meth_cd}
             , #{parallel_degree}
             , #{multiple_exec_cnt}
             , #{multiple_bind_exec_cnt}
             , #{dml_exec_yn}
             , #{database_kinds_cd}
          FROM SQL_AUTO_PERF_CHK
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND DATABASE_KINDS_CD = #{database_kinds_cd}
    </update>
    
    <!-- SQL-31 SQL_AUTO_PERF_CHK_TARGET INSERT(튜닝SQL 일괄검증) -->
    <update id="insertTuningSqlAutoPerfChkTarget" parameterType="sqlAutomaticPerformanceCheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTuningSqlAutoPerfChkTarget */
        INSERT INTO  SQL_AUTO_PERF_CHK_TARGET                              /* SQL자동성능점검대상내역(TABLE) */
             ( PROJECT_ID                                                  /* 프로젝트ID */
             , SQL_AUTO_PERF_CHECK_ID                                      /* SQL자동성능점검회차 */
             , SQL_ID                                                      /* SQL_ID */
             , BEFORE_PLAN_HASH_VALUE                                      /* 이전실행계획해시값 */
             , BEFORE_EXECUTIONS                                           /* 이전실행수 */
             , BEFORE_ROWS_PROCESSED                                       /* 이전처리레코드수 */
             , BEFORE_ELAPSED_TIME                                         /* 이전수행시간 */
             , BEFORE_BUFFER_GETS                                          /* 이전버퍼획득수 */
             , BEFORE_DISK_READS                                           /* 이전디스크읽기수 */
             , BEFORE_FULLSCAN_YN                                          /* 이전FULLSCAN여부 */
             , BEFORE_PARTITION_ALL_ACCESS_YN                              /* 이전전체파티션엑세스여부 */
             )
        SELECT PROJECT_ID
             , SQL_AUTO_PERF_CHECK_ID
             , SQL_ID
             , BEFORE_PLAN_HASH_VALUE
             , BEFORE_EXECUTIONS
             , BEFORE_ROWS_PROCESSED
             , BEFORE_ELAPSED_TIME
             , BEFORE_BUFFER_GETS
             , BEFORE_DISK_READS
             , BEFORE_FULLSCAN_YN
             , BEFORE_PARTITION_ALL_ACCESS_YN
          FROM (
                SELECT #{verify_project_id} PROJECT_ID
                     , #{verify_sql_auto_perf_check_id} SQL_AUTO_PERF_CHECK_ID
                     , B.SQL_ID
                     , B.BEFORE_PLAN_HASH_VALUE
                     , B.BEFORE_EXECUTIONS
                     , B.BEFORE_ROWS_PROCESSED
                     , B.BEFORE_ELAPSED_TIME
                     , B.BEFORE_BUFFER_GETS
                     , B.BEFORE_DISK_READS
                     , B.BEFORE_FULLSCAN_YN
                     , B.BEFORE_PARTITION_ALL_ACCESS_YN
                     , ROW_NUMBER() OVER(PARTITION BY B.PROJECT_ID, B.SQL_AUTO_PERF_CHECK_ID, B.SQL_ID ORDER BY TUNING_NO DESC) RNUM
                  FROM TUNING_TARGET_SQL A
                     , SQL_AUTO_PERF_CHK_TARGET B
                 WHERE A.PROJECT_ID = #{project_id}
                   AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                   AND CHOICE_DIV_CD = 'G'
                   AND A.TUNING_STATUS_CD = '8'
                   AND A.PROJECT_ID = B.PROJECT_ID
                   AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
                   AND A.SQL_ID = B.SQL_ID
               ) 
         WHERE RNUM = 1
    </update>
    
    <select id="countTuningEndTms" parameterType="sqlAutoPerformanceCompare" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.countTuningEndTms */
        SELECT COUNT(*)
          FROM TUNING_TARGET_SQL A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.TUNING_STATUS_CD = '8'
    </select>
    
    <!-- SQL-32 -->
    <update id="insertTobeTuningTargetSql" parameterType="tuningTargetSql">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTobeTuningTargetSql */
        INSERT INTO TUNING_TARGET_SQL
             ( TUNING_NO                                        /* 튜닝번호 */
             , DBID                                             /* DBID */
             , SQL_ID                                           /* SQL_ID */
             , CHOICE_DIV_CD                                    /* 선정구분코드 */
             , TUNING_STATUS_CD                                 /* 튜닝상태코드 */
             , BEFORE_TUNING_NO                                 /* 이전튜닝번호 */ 
             , PERFR_ID                                         /* 성능담당자ID */
             , TUNING_REQUEST_DT                                /* 튜닝요청일시 */
             , PLAN_HASH_VALUE                                  /* PLAN_HASH_VALUE */
             , PARSING_SCHEMA_NAME                              /* PARSING_SCHEMA_NAME */
             , EXECUTIONS                                       /* EXECUTIONS */
             , AVG_BUFFER_GETS                                  /* AVG_BUFFER_GETS */
             , AVG_ELAPSED_TIME                                 /* AVG_BUFFER_GETS */
             , AVG_DISK_READS                                   /* AVG_DISK_READS */
             , AVG_ROW_PROCESSED                                /* AVG_ROW_PROCESSED */
             , SQL_TEXT                                         /* SQL_TEXT */
             , PROJECT_ID                                       /* 프로젝트ID */
             , SQL_AUTO_PERF_CHECK_ID                           /* SQL자동성능점검회차 */
             , DBIO                                             /* DBIO */
             , MODULE                                           /* MODULE */
             , TUNING_REQUESTER_ID                              /* 튜닝요청자 */
             , TUNING_REQUESTER_WRKJOB_CD                       /* 튜닝요청자업무코드 */
             , TUNING_REQUESTER_TEL_NUM                         /* 튜닝요청자전화번호 */
             )
             SELECT #{tuning_no}
                  , B.PERF_CHECK_TARGET_DBID
                  , (CASE WHEN SQL_COMMAND_TYPE_CD = 'SELECT' THEN A.AFTER_SQL_ID ELSE A.SQL_ID END) AFTER_SQL_ID
                  , #{choice_div_cd}
                  , #{tuning_status_cd}
                  , #{before_tuning_no}
                  , #{perfr_id}
                  , SYSDATE
                  , A.AFTER_PLAN_HASH_VALUE
                  , #{parsing_schema_name}
                  , A.AFTER_EXECUTIONS
                  , ROUND(A.AFTER_BUFFER_GETS/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AFTER_BUFFER_GETS                       /* AVG_BUFFER_GETS */
                  , ROUND(A.AFTER_ELAPSED_TIME/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)/1000000, 4) AFTER_ELAPSED_TIME          /* AVG_ELAPSED_TIME */
                  , ROUND(A.AFTER_DISK_READS/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AFTER_DISK_READS                         /* AVG_DISK_READS */
                  , ROUND(A.AFTER_ROWS_PROCESSED/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AFTER_ROWS_PROCESSED                 /* AVG_ROW_PROCESSED */
                  /*, C.SQL_FULLTEXT */
                  , E.SQL_TEXT
                  , #{project_id}
                  , #{sql_auto_perf_check_id}
                  , E.DBIO
                  , #{module}
                  , #{tuning_requester_id}
                  , #{tuning_requester_wrkjob_cd}
                  , #{tuning_requester_tel_num}
               FROM SQL_AUTO_PERF_CHK_TARGET A
                  , SQL_AUTO_PERF_CHK B
                  , (SELECT A.DBIO, B.IMPR_SQL_TEXT AS SQL_TEXT
                       FROM TUNING_TARGET_SQL A, SQL_TUNING B
                      WHERE A.TUNING_NO = B.TUNING_NO(+)
                        AND A.TUNING_NO = #{before_tuning_no}) E 
              WHERE A.PROJECT_ID = #{verify_project_id}
                AND A.SQL_AUTO_PERF_CHECK_ID = #{verify_sql_auto_perf_check_id}
                AND A.SQL_ID = #{sql_id}
                AND A.PROJECT_ID = B.PROJECT_ID
                AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
                AND B.DATABASE_KINDS_CD = #{database_kinds_cd}
                
    </update>
    
    <!-- SQL-34 -->
    <update id="insertTobeTuningTargetSqlBind" parameterType="tuningTargetSql" useGeneratedKeys="false">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertTobeTuningTargetSqlBind */
        INSERT INTO TUNING_TARGET_SQL_BIND
             ( 
               TUNING_NO
             , BIND_SET_SEQ
             , BIND_SEQ
             , BIND_VAR_NM
             , BIND_VAR_VALUE
             , BIND_VAR_TYPE
             , MANDATORY_YN
             )
        SELECT #{tuning_no}
             , A.BIND_SET_SEQ
             , A.POSITION
             , A.NAME
             , A.VALUE_STRING
             , A.BIND_VAR_TYPE
             , ''
          FROM SQL_AUTO_PERF_CHK_BIND A
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.SQL_ID = #{sql_id}
    </update>
    
    <!-- SQL-35 : 운영 SQL성능 추적 - 운영DB 콤보박스 -->
    <select id="getOperationDB" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare" >
        /* AutoPerformanceCompareBetweenDbServiceDao.getOperationDB */
        SELECT A.DBID
             , A.DB_NAME
             , A.ORDERING
             , NVL(A.EXADATA_YN, 'N') AS EXADATA_YN
          FROM DATABASE A
             , USER_DB_PRIVILEGE B
             , USERS C
         WHERE A.USE_YN = 'Y'
           AND A.DBID = B.DBID
           AND B.USER_ID = C.USER_ID
           AND C.USER_ID = #{user_id}
           AND A.DB_OPERATE_TYPE_CD = #{db_operate_type_cd}
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND SYSDATE BETWEEN TO_DATE(B.PRIVILEGE_START_DAY,'YYYYMMDD') AND TO_DATE(B.PRIVILEGE_END_DAY,'YYYYMMDD')
         ORDER BY ORDERING ASC
    </select>
    
    <!--  SQL-36: 운영 SQL 성능 추적 - 검색 버튼 -->
    <sql id="loadOperationSqlPerfTrackListRefId">
        WITH TOP_WRKJOB_CD AS (
        /* 최상위업무 가지고 오는 SQL을 SP_SPOP_PROJECT_PERF_CHECK와 동일하게 구현 */
            SELECT WRKJOB_CD
              FROM (
                    SELECT WRKJOB_CD, UPPER_WRKJOB_CD
                      FROM WRKJOB_CD
                     START WITH WRKJOB_CD = (
                                             SELECT WRKJOB_CD
                                               FROM (
                                                     SELECT B.WRKJOB_CD, B.DBID
                                                       FROM SQL_AUTO_PERF_CHK A
                                                          , WRKJOB_DB B
                                                      WHERE A.PERF_CHECK_TARGET_DBID = B.DBID
                                                        AND A.PROJECT_ID = ${project_id}
                                                        AND A.SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                                                        AND A.DATABASE_KINDS_CD = '${database_kinds_cd}'
                                                      ORDER BY B.WRKJOB_CD
                                                    )
                                              WHERE ROWNUM = 1)
                   CONNECT BY WRKJOB_CD = PRIOR UPPER_WRKJOB_CD
                   )
             WHERE UPPER_WRKJOB_CD IS NULL
        )
        , TOP_WJ_PERF_CHK_INDC AS (
         /* 최상위 업무의 기준 지표값 SET */
            SELECT
                   B.PERF_CHECK_INDC_NM
                 , A.PASS_MAX_VALUE
                 , A.PERF_CHECK_INDC_ID
              FROM WJ_PERF_CHK_INDC A
                 , DEPLOY_PERF_CHK_INDC B
             WHERE A.WRKJOB_CD IN (
                                   SELECT WRKJOB_CD
                                     FROM TOP_WRKJOB_CD
                                  )
               AND A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
               AND A.PERF_CHECK_PROGRAM_DIV_CD = 'S'
               AND A.INDC_APPLY_YN = 'Y'
               AND B.INDC_USE_YN = 'Y'   
        )
        SELECT
               A.SQL_ID
             , CASE WHEN A.PERF_CHECK_RESULT_YN = 'Y' THEN '적합'
                    WHEN A.PERF_CHECK_RESULT_YN = 'N' THEN '부적합'
                END PERF_CHECK_RESULT
             , A.PLAN_CHANGE_YN
             , A.ASIS_PLAN_HASH_VALUE
             , A.OPERATION_PLAN_HASH_VALUE
             , DECODE(A.ASIS_ELAPSED_TIME, 0, 0.0001, A.ASIS_ELAPSED_TIME) AS ASIS_ELAPSED_TIME
             , DECODE(A.OPERATION_ELAPSED_TIME, 0, 0.0001, A.OPERATION_ELAPSED_TIME) AS OPERATION_ELAPSED_TIME
             , A.ELAPSED_TIME_ACTIVITY
             , A.ASIS_BUFFER_GETS
             , A.OPERATION_BUFFER_GETS
             , A.BUFFER_GETS_ACTIVITY
             , A.OPERATION_EXECUTIONS
             , A.OPERATION_ROWS_PROCESSED
             , DBMS_LOB.SUBSTR(A.SQL_TEXT, 200, 1) AS SQL_TEXT_WEB
             , A.SQL_TEXT AS SQL_TEXT_EXCEL
             , A.SQL_PROFILE_NM
             , A.TUNING_NO
             , A.PROJECT_NM
             , A.PERF_CHECK_NAME
             /* HIDDEN */
             , A.PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID
             , A.OPERATION_DBID
             , A.ORIGINAL_DBID
             , A.OPERATION_PARSING_SCHEMA_NAME
             , A.PERF_CHECK_SQL_SOURCE_TYPE_CD
             , A.MODULE
          FROM (
                SELECT A.PROJECT_NM
                     , A.PERF_CHECK_NAME
                     , A.SQL_ID
                     , CASE WHEN B.ELAPSED_TIME_THRESHOLD IS NULL 
                                AND B.BUFFER_GETS_THRESHOLD IS NULL
                                AND B.ROWS_PROCESSED_THRESHOLD IS NULL
                                AND B.FULLSCAN_THRESHOLD IS NULL
                                AND B.PARTITION_THRESHOLD IS NULL THEN ''
                            WHEN (B.ELAPSED_TIME_THRESHOLD  <![CDATA[<]]>  A.OPERATION_ELAPSED_TIME) 
                                OR (B.BUFFER_GETS_THRESHOLD  <![CDATA[<]]>  A.OPERATION_BUFFER_GETS)
                                OR (B.ROWS_PROCESSED_THRESHOLD  <![CDATA[>]]>  0 AND A.OPERATION_ROWS_PROCESSED = 0)
                                OR (B.ROWS_PROCESSED_THRESHOLD  <![CDATA[>]]>  0 AND B.ROWS_PROCESSED_THRESHOLD <![CDATA[<]]> A.OPERATION_ROWS_PROCESSED)
                                OR (A.BIG_TABLE_FULLSCAN_YN = 'Y' AND B.FULLSCAN_THRESHOLD = '2')
                                OR (A.PLAN_PART_ALL_ACCESS_YN = 'Y' AND B.PARTITION_THRESHOLD = '2') THEN 'N'
                            ELSE 'Y'
                        END AS PERF_CHECK_RESULT_YN
                     , A.PLAN_CHANGE_YN
                     , A.ASIS_PLAN_HASH_VALUE
                     , A.OPERATION_PLAN_HASH_VALUE
                     , A.ASIS_ELAPSED_TIME
                     , A.OPERATION_ELAPSED_TIME
                     , A.ELAPSED_TIME_ACTIVITY
                     , A.ASIS_BUFFER_GETS
                     , A.OPERATION_BUFFER_GETS
                     , A.BUFFER_GETS_ACTIVITY
                     , A.OPERATION_EXECUTIONS
                     , A.OPERATION_ROWS_PROCESSED
                     , (
                        SELECT (CASE WHEN NVL( DBMS_LOB.GETLENGTH(SQL_FULLTEXT) , 0) <![CDATA[>=]]> 0 AND NVL( DBMS_LOB.GETLENGTH(SQL_FULLTEXT), 0) <![CDATA[<=]]> 1000 THEN SQL_FULLTEXT
                                     ELSE ( TO_CLOB( DBMS_LOB.SUBSTR(SQL_FULLTEXT, 500) || CHR(13)||CHR(10) ||'   (중략) ...   '||CHR(13)||CHR(10)|| DBMS_LOB.SUBSTR(SQL_FULLTEXT ,500,DBMS_LOB.GETLENGTH(SQL_FULLTEXT)-500) ))
                                 END) SQL_TEXT
                          FROM VSQL_TEXT VS
                         WHERE VS.DBID = A.OPERATION_DBID
                           AND VS.SQL_ID = A.SQL_ID
                           AND ROWNUM = 1
                        <if test="sql_full_text != null and sql_full_text != ''">
                           /* SQL TEXT가 입력되면 */
                           AND SQL_FULLTEXT LIKE '%'||'${sql_full_text}'||'%'
                        </if>
                       ) SQL_TEXT
                     , (SELECT MAX(MODULE) FROM VSQL_MODULE VM WHERE VM.DBID = A.OPERATION_DBID AND VM.SQL_ID = A.SQL_ID) MODULE
                     , A.TUNING_NO
                     , A.PROJECT_ID
                     , A.SQL_AUTO_PERF_CHECK_ID
                     , A.OPERATION_DBID
                     , A.ORIGINAL_DBID
                     , A.BIG_TABLE_FULLSCAN_YN
                     , A.PLAN_PART_ALL_ACCESS_YN
                     , A.OPERATION_PARSING_SCHEMA_NAME
                     , A.SQL_PROFILE_NM
                     , A.PERF_CHECK_SQL_SOURCE_TYPE_CD
                  FROM (
                        SELECT /*+ LEADING(A C D) USE_NL(C D) PUSH_PRED(C) */
                               D.PROJECT_NM
                             , A.PERF_CHECK_NAME
                             , A.SQL_ID
                             , CASE WHEN A.ASIS_PLAN_HASH_VALUE <![CDATA[<>]]> A.OPERATION_PLAN_HASH_VALUE THEN 'Y' ELSE 'N' END AS PLAN_CHANGE_YN
                             , A.ASIS_PLAN_HASH_VALUE
                             , A.OPERATION_PLAN_HASH_VALUE
                             , ROUND(A.ASIS_ELAPSED_TIME/DECODE(A.ASIS_EXECUTIONS, 0, 1, ASIS_EXECUTIONS)/1000000, 4) AS ASIS_ELAPSED_TIME
                             , ROUND((A.OPERATION_ELAPSED_TIME/1000000)/DECODE(NVL(A.OPERATION_EXECUTIONS, 0), 0, 1, NVL(A.OPERATION_EXECUTIONS, 0)), 4) AS OPERATION_ELAPSED_TIME
                             , DECODE(A.ELAPSED_TIME_ACTIVITY, 0, 0.0001, A.ELAPSED_TIME_ACTIVITY) AS ELAPSED_TIME_ACTIVITY                                                      /* 수행시간 Activity(%) */
                             , ROUND(A.ASIS_BUFFER_GETS/DECODE(A.ASIS_EXECUTIONS, 0, 1, ASIS_EXECUTIONS)) AS ASIS_BUFFER_GETS
                             , ROUND(A.OPERATION_BUFFER_GETS/DECODE(NVL(A.OPERATION_EXECUTIONS, 0), 0, 1, NVL(A.OPERATION_EXECUTIONS, 0))) AS OPERATION_BUFFER_GETS
                             , DECODE(A.BUFFER_GETS_ACTIVITY, 0, 0.0001, A.BUFFER_GETS_ACTIVITY) AS BUFFER_GETS_ACTIVITY                                                         /* 블럭수 Activity(%) */
                             , A.OPERATION_EXECUTIONS
                             /* , B.SQL_FULLTEXT AS SQL_TEXT */
                             , ROUND(A.OPERATION_ROWS_PROCESSED/DECODE(NVL(A.OPERATION_EXECUTIONS, 0), 0, 1, NVL(A.OPERATION_EXECUTIONS, 0))) AS OPERATION_ROWS_PROCESSED
                             , FN_PLAN_BIG_TABLE_FULLSCAN_YN(A.OPERATION_DBID, A.SQL_ID, A.OPERATION_PLAN_HASH_VALUE) AS BIG_TABLE_FULLSCAN_YN
                             , FN_PLAN_PART_ALL_ACCESS_YN(A.OPERATION_DBID, A.SQL_ID, A.OPERATION_PLAN_HASH_VALUE) AS PLAN_PART_ALL_ACCESS_YN
                             , A.PROJECT_ID
                             , A.SQL_AUTO_PERF_CHECK_ID
                             , A.OPERATION_DBID
                             , A.ORIGINAL_DBID
                             , A.OPERATION_PARSING_SCHEMA_NAME
                             , C.TUNING_NO
                             , A.SQL_PROFILE_NM
                             , A.PERF_CHECK_SQL_SOURCE_TYPE_CD
                          FROM (
                                SELECT /*+ LEADING(A C B D) USE_NL(C B D) */
                                       A.PROJECT_ID
                                     , A.SQL_AUTO_PERF_CHECK_ID
                                     , A.SQL_ID
                                     , MIN(B.DBID) AS OPERATION_DBID
                                     , MIN(A.BEFORE_PLAN_HASH_VALUE) AS ASIS_PLAN_HASH_VALUE
                                     , MIN(A.BEFORE_EXECUTIONS) AS ASIS_EXECUTIONS
                                     , MIN(A.BEFORE_ELAPSED_TIME) AS ASIS_ELAPSED_TIME
                                     , MIN(A.BEFORE_BUFFER_GETS) AS ASIS_BUFFER_GETS
                                     , SUM(B.EXECUTIONS) AS OPERATION_EXECUTIONS
                                     , SUM(B.ELAPSED_TIME) AS OPERATION_ELAPSED_TIME
                                     , SUM(B.BUFFER_GETS) AS OPERATION_BUFFER_GETS
                                     , SUM(B.ROWS_PROCESSED) AS OPERATION_ROWS_PROCESSED
                                     , ROUND((RATIO_TO_REPORT(SUM(B.ELAPSED_TIME)) OVER())* 100, 4) AS ELAPSED_TIME_ACTIVITY
                                     , ROUND((RATIO_TO_REPORT(SUM(B.BUFFER_GETS)) OVER()) * 100, 4) AS BUFFER_GETS_ACTIVITY
                                     , MIN(C.PERF_CHECK_NAME) AS PERF_CHECK_NAME
                                     , MIN(C.ORIGINAL_DBID) AS ORIGINAL_DBID
                                    
                                     , MIN(C.PERF_CHECK_SQL_SOURCE_TYPE_CD) AS PERF_CHECK_SQL_SOURCE_TYPE_CD
                                     , MIN(D.PLAN_HASH_VALUE) AS OPERATION_PLAN_HASH_VALUE
                                     , MIN(D.SNAP_TIME) AS SNAP_TIME
                                     , MIN(D.PARSING_SCHEMA_NAME) AS OPERATION_PARSING_SCHEMA_NAME
                                     , MIN(D.SQL_PROFILE) AS SQL_PROFILE_NM
                                     , MIN(D.PLAN_HASH_VALUE) KEEP(DENSE_RANK FIRST ORDER BY D.SNAP_TIME DESC) PLAN_HASH_VALUE
<!--                                      , C.PERF_CHECK_SQL_SOURCE_TYPE_CD -->
                                  FROM SQL_AUTO_PERF_CHK_TARGET A
                                     , VSQL_STATS B
                                     , SQL_AUTO_PERF_CHK C
                                     , VSQL_TEXT D
                                 WHERE A.PROJECT_ID = ${project_id}
                                   AND A.SQL_AUTO_PERF_CHECK_ID = ${sql_auto_perf_check_id}
                                <if test="sql_id_text != null and sql_id_text != ''">
                                   /* SQL_ID가 입력되면 */
                                   AND A.SQL_ID = '${sql_id_text}'
                                </if>
                                   AND B.DBID = ${operation_dbid}
                                   AND B.SQL_ID = A.SQL_ID
                                   AND B.LAST_ACTIVE_TIME BETWEEN TO_TIMESTAMP( '${strStartDt}' || '00:00:00.000000', 'YYYY-MM-DD HH24:MI:SS.FF6')
                                                              AND TO_TIMESTAMP( '${strEndDt}' || '23:59:59.999999', 'YYYY-MM-DD HH24:MI:SS.FF6')
                                   AND C.PROJECT_ID = A.PROJECT_ID
                                   AND C.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
                                   AND C.DATABASE_KINDS_CD = '${database_kinds_cd}'
                                   AND B.DBID = D.DBID
                                   AND A.SQL_ID = D.SQL_ID
                                   AND A.SQL_ID > '${sql_id}'
                                 GROUP BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID, A.SQL_ID
                                 ORDER BY A.PROJECT_ID, A.SQL_AUTO_PERF_CHECK_ID, A.SQL_ID
                               ) A
                             , ( /* 튜닝 SQL SET */
                                 SELECT A.DBID
                                      , A.TUNING_NO
                                      , A.TUNING_STATUS_CD
                                      , A.SQL_ID
                                      , ROW_NUMBER() OVER (PARTITION BY A.SQL_ID ORDER BY A.TUNING_NO DESC) RNUM
                                   FROM TUNING_TARGET_SQL A
                                  WHERE A.DBID = ${operation_dbid}
                                    AND A.CHOICE_DIV_CD = 'I'
                                    AND A.TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                               ) C
                             , PROJECT D
                         WHERE C.DBID(+) = A.OPERATION_DBID
                           AND C.SQL_ID(+) = A.SQL_ID
                           AND C.RNUM(+) = 1
                        
                           AND D.PROJECT_ID = A.PROJECT_ID
                       ) A
                     , ( /*  최상위 업무의 기준 지표값 SET */
                         SELECT
                                MAX(CASE WHEN A.PERF_CHECK_INDC_ID = 1 THEN A.PASS_MAX_VALUE END) AS ELAPSED_TIME_THRESHOLD
                              , MAX(CASE WHEN A.PERF_CHECK_INDC_ID = 2 THEN A.PASS_MAX_VALUE END) AS BUFFER_GETS_THRESHOLD
                              , MAX(CASE WHEN A.PERF_CHECK_INDC_ID = 3 THEN A.PASS_MAX_VALUE END) AS ROWS_PROCESSED_THRESHOLD
                              , MAX(CASE WHEN A.PERF_CHECK_INDC_ID = 5 THEN A.YN_DECIDE_DIV_CD END) AS FULLSCAN_THRESHOLD
                              , MAX(CASE WHEN A.PERF_CHECK_INDC_ID = 6 THEN A.YN_DECIDE_DIV_CD END) AS PARTITION_THRESHOLD
                           FROM WJ_PERF_CHK_INDC A
                              , DEPLOY_PERF_CHK_INDC B
                          WHERE A.WRKJOB_CD IN (SELECT WRKJOB_CD FROM TOP_WRKJOB_CD)
                            AND A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
                            AND A.PERF_CHECK_PROGRAM_DIV_CD = 'S'
                            AND A.INDC_APPLY_YN = 'Y'
                            AND B.INDC_USE_YN = 'Y'
                            AND B.PERF_CHECK_INDC_ID IN (1, 2, 3, 5, 6) /* 4: 메모리사용량 제외 사유- 메모리사용량을 알려면 STATISTICS ALL을 사용하여야 하나 운영 성능에 영향을 미치므로 제외 */
                       ) B
               ) A
         WHERE 1 = 1
        <if test="sql_profile_yn != null and sql_profile_yn.equalsIgnoreCase('Y')">
           /* SQL Profile 적용여부 검색조건 체크시 조건 추가 */
           AND A.SQL_PROFILE_NM IS NOT NULL  
        </if>
        <if test="plan_change_yn != null and plan_change_yn.equalsIgnoreCase('Y')">
           /* PLAN 변경 */
           AND A.PLAN_CHANGE_YN = 'Y'
        </if>
        <if test="perf_down_yn != null and perf_down_yn.equalsIgnoreCase('Y')">
           /* 성능저하(BUFFER GETS 기준) */
           AND A.ASIS_BUFFER_GETS <![CDATA[<]]> A.OPERATION_BUFFER_GETS
        </if>
        <if test="notPerf_yn != null and notPerf_yn.equalsIgnoreCase('Y')">
           /* 성능 부적합 */
           AND A.PERF_CHECK_RESULT_YN = 'Y'
        </if>
        <if test="buffer_gets_1day != null and buffer_gets_1day != ''">
           /* BUFFER GETS(ASIS 평균) */
           AND A.ASIS_BUFFER_GETS <![CDATA[>=]]> ${buffer_gets_1day}
        </if>
        <if test="asis_elapsed_time != null and asis_elapsed_time != ''">
           /* ELAPSED TIME(ASIS 평균) */
           AND A.ASIS_ELAPSED_TIME <![CDATA[>=]]> ${asis_elapsed_time}
        </if>
        <if test="buffer_gets_regres != null and buffer_gets_regres != ''">
           /* BUFFER GETS 성능저하 */
           AND A.OPERATION_BUFFER_GETS/DECODE(A.ASIS_BUFFER_GETS, 0, 1, A.ASIS_BUFFER_GETS)  <![CDATA[>=]]> ${buffer_gets_regres}
        </if>
        <if test="elapsed_time_regres != null and elapsed_time_regres != ''">
           /* ELAPSED TIME 성능저하 */
           AND A.OPERATION_ELAPSED_TIME/DECODE(A.ASIS_ELAPSED_TIME, 0, 1, A.ASIS_ELAPSED_TIME) <![CDATA[>=]]> ${elapsed_time_regres}
        </if>
         ORDER BY A.SQL_ID
    </sql>
    
    <!-- SQL-36  운영 SQL 성능 추적 - 검색 버튼 -->
    <select id="loadOperationSqlPerfTrackList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadOperationSqlPerfTrackList */
        SELECT *
        FROM (
            SELECT ROWNUM RNUM, AA.*
            FROM (
                <include refid="loadOperationSqlPerfTrackListRefId"/>
            ) AA
            WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
        ) AA
        WHERE AA.RNUM <![CDATA[>]]> ${pagePerCount} * (${currentPage} - 1)
    </select>
    
    <!-- SQL-37(  운영 SQL 성능 추적 ListAll )-->
    <select id="loadOperationSqlPerfTrackListAll" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadOperationSqlPerfTrackListAll */
        SELECT *
          FROM (
            <include refid="loadOperationSqlPerfTrackListRefId"/>
             ) A
            <if test="sqlExclude != null and sqlExclude.equalsIgnoreCase('Y')">
         WHERE 1=1
           AND A.TUNING_NO IS NULL /* 이전튜닝대상 제외 */
            </if>
    </select>
    
    <select id="operationExcelDownload" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AutoPerformanceCompareBetweenDbServiceDao.operationExcelDownload */
        SELECT A.*
          FROM (
                <include refid="loadOperationSqlPerfTrackListRefId"/>
             ) A
        WHERE ROWNUM <![CDATA[<=]]> 100
    </select>
    
    <select id="loadPerfCheckResultList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerfCheckResultList */
        WITH TOP_WRKJOB_CD AS (
        /* 최상위업무의 지표 가지고 오는 SQL을 SP_SPOP_PROJECT_PERF_CHECK와 동일하게 구현 */
            SELECT WRKJOB_CD
              FROM (
                    SELECT WRKJOB_CD, UPPER_WRKJOB_CD
                    FROM WRKJOB_CD
                    START WITH WRKJOB_CD = (SELECT WRKJOB_CD
                                              FROM (SELECT B.WRKJOB_CD, B.DBID
                                                      FROM SQL_AUTO_PERF_CHK A
                                                         , WRKJOB_DB B
                                                     WHERE A.PERF_CHECK_TARGET_DBID = B.DBID
                                                       AND A.PROJECT_ID = #{project_id}
                                                       AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                                                       AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
                                                    ORDER BY B.WRKJOB_CD)
                                              WHERE ROWNUM = 1)
                    CONNECT BY WRKJOB_CD = PRIOR UPPER_WRKJOB_CD
                    )
             WHERE UPPER_WRKJOB_CD IS NULL
        ), TOP_WJ_PERF_CHK_INDC AS (
         /* 최상위 업무의 기준 지표값 SET */
            SELECT
                   B.PERF_CHECK_INDC_NM
                 , A.PASS_MAX_VALUE
                 , A.PERF_CHECK_INDC_ID
              FROM WJ_PERF_CHK_INDC A
                 , DEPLOY_PERF_CHK_INDC B
             WHERE A.WRKJOB_CD IN (
                                   SELECT WRKJOB_CD
                                     FROM TOP_WRKJOB_CD
                                  )
               AND A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
               AND A.PERF_CHECK_PROGRAM_DIV_CD = 'S'
               AND A.INDC_APPLY_YN = 'Y'
               AND B.INDC_USE_YN = 'Y'
        )
        SELECT A.PERF_CHECK_INDC_NM                               /* 점검 지표 */
             , A.PASS_MAX_VALUE                                   /* 적합 */
             , A.EXEC_RESULT_VALUE                                /* 성능 점검 결과값 */
             , NVL(CD1.CD_NM, 'N/A') AS PERF_CHECK_RESULT_DIV_NM  /* 성능 점검 결과     */
             , A.PERF_CHECK_RESULT_DESC                           /* 성능 점검 결과내용 */
          FROM (
                SELECT A.PERF_CHECK_INDC_NM
                     , A.PASS_MAX_VALUE
                     , CASE WHEN A.PERF_CHECK_INDC_ID IN (1, 2, 3) THEN
                                 (CASE WHEN INSTR(NVL(B.EXEC_RESULT_VALUE_NUM, 0),'.',1) <![CDATA[>]]> 0 THEN TO_CHAR(NVL(B.EXEC_RESULT_VALUE_NUM, 0), 'FM999999999999999990.9999')
                                       ELSE TO_CHAR(NVL(B.EXEC_RESULT_VALUE_NUM, 0))
                                   END)
                            WHEN A.PERF_CHECK_INDC_ID IN (4, 5, 6) THEN
                                 B.EXEC_RESULT_VALUE_CHAR
                        END AS EXEC_RESULT_VALUE
                     , CASE WHEN A.PERF_CHECK_INDC_ID IN (1, 2) THEN
                                 (CASE WHEN A.PASS_MAX_VALUE <![CDATA[<]]> B.EXEC_RESULT_VALUE_NUM THEN 'B' ELSE 'A' END)
                            WHEN A.PERF_CHECK_INDC_ID = 3 THEN
                                 (CASE WHEN A.PASS_MAX_VALUE = 0 THEN 'A'
                                       WHEN A.PASS_MAX_VALUE <![CDATA[>]]> 0 AND B.EXEC_RESULT_VALUE_NUM = 0 THEN 'B'
                                       WHEN A.PASS_MAX_VALUE <![CDATA[>]]> 0 AND A.PASS_MAX_VALUE <![CDATA[<]]>  B.EXEC_RESULT_VALUE_NUM THEN 'B'
                                   END)
                            WHEN A.PERF_CHECK_INDC_ID IN (5, 6) THEN
                                 (CASE WHEN B.EXEC_RESULT_VALUE_CHAR = 'N' THEN 'A'
                                       WHEN B.EXEC_RESULT_VALUE_CHAR = 'Y' THEN 'B'
                                   END)
                         END AS PERF_CHECK_RESULT_DIV_CD
                     , CASE WHEN A.PERF_CHECK_INDC_ID = 1 AND A.PASS_MAX_VALUE <![CDATA[<]]> TO_NUMBER(B.EXEC_RESULT_VALUE_NUM) THEN
                                 'SQL 수행시간 : ' || TO_CHAR(B.EXEC_RESULT_VALUE_NUM, 'FM999999999999999990.9999') || '초 ==> ' || TO_CHAR(A.PASS_MAX_VALUE, 'FM999999999999999990.9999') || '초 이하로 개선 필요'
                            WHEN A.PERF_CHECK_INDC_ID = 2 AND A.PASS_MAX_VALUE <![CDATA[<]]> B.EXEC_RESULT_VALUE_NUM THEN
                                 '블럭수 : ' || TO_CHAR(B.EXEC_RESULT_VALUE_NUM) || ' ==> ' || A.PASS_MAX_VALUE || ' 이하로 개선 필요'
                            WHEN A.PERF_CHECK_INDC_ID = 3 THEN
                                 (CASE WHEN A.PASS_MAX_VALUE <![CDATA[<>]]> 0 AND A.PASS_MAX_VALUE <![CDATA[<]]> B.EXEC_RESULT_VALUE_NUM THEN '처리건수 : ' || TO_CHAR(B.EXEC_RESULT_VALUE_NUM) || '건, ' || A.PASS_MAX_VALUE || '건 이하로 처리(조회)되도록 개선 필요'
                                       WHEN A.PASS_MAX_VALUE <![CDATA[<>]]> 0 AND B.EXEC_RESULT_VALUE_NUM = 0 THEN '처리건수 : 0건 ==> 데이터를 조회할 수 있는 바인드 값으로 변경하여 재 수행 필요'
                                       WHEN A.PASS_MAX_VALUE = 0 THEN '지표 설정값이 0건인 경우 처리건수와 상관없이 항상 적합처리됨'
                                       ELSE ''
                                   END)
                            WHEN A.PERF_CHECK_INDC_ID = 4 THEN
                                 '운영DB 수집 부하를 줄이기 위하여 메모리사용량은 수집하지 않음'
                            WHEN A.PERF_CHECK_INDC_ID = 5 AND B.EXEC_RESULT_VALUE_CHAR = 'Y' THEN
                                 'TABLE FULL SCAN ==> INDEX 추가 검토'
                            WHEN A.PERF_CHECK_INDC_ID = 6 AND B.EXEC_RESULT_VALUE_CHAR = 'Y' THEN
                                 '전체 파티션 탐색 ==> WHERE에 파티션 키 컬럼 추가 필요'
                        END AS PERF_CHECK_RESULT_DESC
                     /* HIDDEN */
                     , A.PERF_CHECK_INDC_ID
                  FROM TOP_WJ_PERF_CHK_INDC A
                     , (
                        SELECT C.LV AS PERF_CHECK_INDC_ID
                             , CASE WHEN C.LV = 1 THEN
                                         ROUND((A.OPERATION_ELAPSED_TIME/1000000)/DECODE(NVL(A.OPERATION_EXECUTIONS, 0), 0, 1, NVL(A.OPERATION_EXECUTIONS, 0)), 4)
                                    WHEN C.LV = 2 THEN
                                         ROUND(A.OPERATION_BUFFER_GETS/DECODE(NVL(A.OPERATION_EXECUTIONS, 0), 0, 1, NVL(A.OPERATION_EXECUTIONS, 0)))
                                    WHEN C.LV = 3 THEN
                                         ROUND(A.OPERATION_ROWS_PROCESSED/DECODE(NVL(A.OPERATION_EXECUTIONS, 0), 0, 1, NVL(A.OPERATION_EXECUTIONS, 0)))
                                END AS EXEC_RESULT_VALUE_NUM
                             , CASE WHEN LV = 4 THEN
                                         'N/A'
                                    WHEN C.LV = 5 THEN
                                         FN_PLAN_BIG_TABLE_FULLSCAN_YN(A.OPERATION_DBID, A.SQL_ID, B.OPERATION_PLAN_HASH_VALUE)
                                    WHEN C.LV = 6 THEN
                                         FN_PLAN_PART_ALL_ACCESS_YN(A.OPERATION_DBID, A.SQL_ID, B.OPERATION_PLAN_HASH_VALUE)
                               END AS EXEC_RESULT_VALUE_CHAR
                          FROM (
                                SELECT
                                       A.SQL_ID
                                     , MIN(A.DBID) AS OPERATION_DBID
                                     , SUM(A.EXECUTIONS) AS OPERATION_EXECUTIONS
                                     , SUM(A.ELAPSED_TIME) AS OPERATION_ELAPSED_TIME
                                     , SUM(A.BUFFER_GETS) AS OPERATION_BUFFER_GETS
                                     , SUM(A.ROWS_PROCESSED) AS OPERATION_ROWS_PROCESSED
                                  FROM VSQL_STATS A
                                     , SQL_AUTO_PERF_CHK_TARGET B
                                 WHERE A.DBID = #{operation_dbid}
                                   AND A.SQL_ID = #{sql_id}
                                   AND A.LAST_ACTIVE_TIME BETWEEN TO_TIMESTAMP( #{strStartDt} || '00:00:00.000000', 'YYYY-MM-DD HH24:MI:SS.FF6')
                                                              AND TO_TIMESTAMP( #{strEndDt} || '23:59:59.999999', 'YYYY-MM-DD HH24:MI:SS.FF6')
                                   AND B.PROJECT_ID = #{project_id}
                                   AND B.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                                   AND B.SQL_ID = A.SQL_ID
                                GROUP BY A.SQL_ID
                              ) A
                              , (
                                 SELECT DBID
                                      , SQL_ID
                                      , PLAN_HASH_VALUE AS OPERATION_PLAN_HASH_VALUE
                                      , ROW_NUMBER() OVER(PARTITION BY DBID, SQL_ID ORDER BY SNAP_TIME DESC, PLAN_HASH_VALUE) RNUM  /* JMG : 20210126 */
                                   FROM VSQL_TEXT
                                 ) B
                              , (SELECT LEVEL LV FROM DUAL CONNECT BY LEVEL <![CDATA[<=]]> 6) C
                         WHERE B.DBID = A.OPERATION_DBID
                           AND B.SQL_ID = A.SQL_ID
                           AND B.RNUM = 1
                        ) B
                 WHERE A.PERF_CHECK_INDC_ID = B.PERF_CHECK_INDC_ID
                 ) A
             , CD CD1
         WHERE CD1.GRP_CD_ID(+) = '1055'
           AND A.PERF_CHECK_RESULT_DIV_CD = CD1.CD(+)
         ORDER BY A.PERF_CHECK_INDC_ID
    </select>
    
    <select id="loadExplainBindValueNew" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadExplainBindValueNew */
        SELECT BIND_VAR_NM
             , BIND_VAR_VALUE
             , BIND_VAR_TYPE
          FROM SQL_AUTO_PERF_CHK_BIND
         WHERE PROJECT_ID = #{project_id}
           AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND SQL_ID = #{sql_id}
        ORDER BY BIND_SEQ
    </select>
    
    <select id="loadExplainInfoBindValue" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadExplainInfoBindValue */
        SELECT B.RANK AS NO
             , A.BIND_VAR_NM
             , A.BIND_VAR_VALUE
             , DECODE(B.PLAN_HASH_VALUE, -1, '', B.PLAN_HASH_VALUE) PLAN_HASH_VALUE  /* PLAN_HASH_VALUE 가 -1 이면 SQL 오류를 의미함 */
             , DECODE(B.ELAPSED_TIME, 0, 0.0001, B.ELAPSED_TIME) ELAPSED_TIME
             , B.BUFFER_GETS
             , B.ROWS_PROCESSED
          FROM SQL_AUTO_PERF_CHK_BIND A
             , (SELECT B.PROJECT_ID, B.SQL_AUTO_PERF_CHECK_ID, B.SQL_ID, B.BIND_SET_SEQ, B.PLAN_HASH_VALUE 
                     , ROUND(SUM(C.ELAPSED_TIME)/DECODE(SUM(C.EXECUTIONS), 0, 1, SUM(C.EXECUTIONS))/1000000, 4) ELAPSED_TIME
                     , FN_ZERO_TO_DECIMAL_4_POINT(ROUND(SUM(C.BUFFER_GETS)/DECODE(SUM(C.EXECUTIONS), 0, 1, SUM(C.EXECUTIONS)))) BUFFER_GETS
                     , ROUND(SUM(D.ROWS_PROCESSED)/DECODE(SUM(D.EXECUTIONS), 0, 1, SUM(D.EXECUTIONS))) ROWS_PROCESSED
                     /* Buffer Gets 역순으로 랭킹부여 */
                     , ROW_NUMBER() OVER(PARTITION BY B.PROJECT_ID, B.SQL_AUTO_PERF_CHECK_ID, B.SQL_ID ORDER BY ROUND(SUM(C.BUFFER_GETS)/DECODE(SUM(C.EXECUTIONS), 0, 1, SUM(C.EXECUTIONS))) DESC) RANK
                  FROM SQL_AUTO_PERF_CHK_BIND_PLAN B
                     , (SELECT A.PROJECT_ID
                            , A.SQL_AUTO_PERF_CHECK_ID
                            , A.SQL_ID
                            , A.PLAN_HASH_VALUE
                            , MAX(EXECUTIONS) EXECUTIONS
                            , MAX(A.CR_BUFFER_GETS + CU_BUFFER_GETS) BUFFER_GETS
                            , MAX(A.ELAPSED_TIME) ELAPSED_TIME
                        FROM SQL_AUTO_PERF_SQL_PLAN A
                        WHERE A.PROJECT_ID = #{project_id}                                  /* 프로젝트ID */
                        AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}            /* SQL자동성능점검회차 */
                        AND A.SQL_ID = #{sql_id}                                            /* SQL_ID */
                        GROUP BY A.PROJECT_ID
                            , A.SQL_AUTO_PERF_CHECK_ID
                            , A.SQL_ID
                            , A.PLAN_HASH_VALUE
                     ) C
                    , SQL_AUTO_PERF_SQL_STAT D
                 WHERE B.PROJECT_ID = C.PROJECT_ID(+)
                   AND B.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID(+)
                   AND B.SQL_ID = C.SQL_ID(+)
                   AND B.PLAN_HASH_VALUE = C.PLAN_HASH_VALUE(+)
                   AND B.PROJECT_ID = D.PROJECT_ID(+)
                   AND B.SQL_AUTO_PERF_CHECK_ID = D.SQL_AUTO_PERF_CHECK_ID(+)
                   AND B.SQL_ID = D.SQL_ID(+)
                   AND B.PLAN_HASH_VALUE = D.PLAN_HASH_VALUE(+)
                   AND B.PROJECT_ID = #{project_id}
                   AND B.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                   AND B.SQL_ID = #{sql_id}
                 GROUP BY B.PROJECT_ID, B.SQL_AUTO_PERF_CHECK_ID, B.SQL_ID, B.BIND_SET_SEQ, B.PLAN_HASH_VALUE 
               ) B
         WHERE A.PROJECT_ID = B.PROJECT_ID
           AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
           AND A.SQL_ID = B.SQL_ID
           AND A.BIND_SET_SEQ = B.BIND_SET_SEQ
           AND A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.SQL_ID = #{sql_id}
         ORDER BY B.RANK, A.BIND_SEQ
    </select>
    
    <!-- SQL-42: 성능비교 결과 탭 AfterPlan-Select문 -->
    <select id="loadAfterSelectTextPlanListAll" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadAfterSelectTextPlanListAll */
            WITH TUN AS
            (
                SELECT *
                  FROM SQL_AUTO_PERF_SQL_PLAN
                 WHERE PROJECT_ID = #{project_id}
                   AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                   AND SQL_ID = #{sql_id}
                   AND PLAN_HASH_VALUE = #{plan_hash_value}
            )
            SELECT TO_CHAR(ID,'9999')||' '||LPAD(' ',2*LEVEL) 
                || OPERATION
                || DECODE(OPTIONS, NULL, '', ' ' || OPTIONS)
                || DECODE(OBJECT_NAME, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME)
                || DECODE(OBJECT_TYPE, NULL, '', '(' || OBJECT_TYPE || ')')
                || NVL((CASE WHEN ID = 0 THEN ' OPTIMIZER=' || OPTIMIZER ELSE '' END)
                  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN '(' ELSE '' END)
                  || (CASE WHEN COST IS NOT NULL THEN 'COST=' || COST ELSE '' END)
                  || (CASE WHEN CARDINALITY IS NOT NULL THEN ' ' || 'CARD=' || CARDINALITY ELSE '' END)
                  || (CASE WHEN BYTES IS NOT NULL THEN ' ' || 'BYTES=' || BYTES ELSE '' END)
                  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN ')' ELSE '' END), ' ')
                AS EXECUTION_PLAN
                  FROM TUN
               CONNECT BY PRIOR ID = NVL(CASE WHEN PARENT_ID=0 
                                              THEN
                                                   CASE WHEN DEPTH=0 THEN -1
                                                        ELSE PARENT_ID
                                                    END
                                              ELSE PARENT_ID
                                          END, '-1')
                 START WITH ID = 0
                 ORDER BY ID
    </select>
    
    <!-- SQL-42: 성능비교 결과 탭 AfterPlan-DML문 -->
    <select id="loadAfterDMLTextPlanListAll" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadAfterDMLTextPlanListAll */
            WITH TUN AS 
            (
                SELECT *
                  FROM SQL_AUTO_PERF_CHK_PLAN_TABLE
                 WHERE PROJECT_ID = #{project_id}
                   AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                   AND SQL_ID = #{sql_id}
            )
            SELECT TO_CHAR(ID,'9999')||' '||LPAD(' ',2*LEVEL) 
                || OPERATION
                || DECODE(OPTIONS, NULL, '', ' ' || OPTIONS)
                || DECODE(OBJECT_NAME, NULL, '', ' OF ' || OBJECT_OWNER || '.' ||  OBJECT_NAME)
                || DECODE(OBJECT_TYPE, NULL, '', '(' || OBJECT_TYPE || ')')
                || NVL((CASE WHEN ID = 0 THEN ' OPTIMIZER=' || OPTIMIZER ELSE '' END)
                  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN '(' ELSE '' END)
                  || (CASE WHEN COST IS NOT NULL THEN 'COST=' || COST ELSE '' END)
                  || (CASE WHEN CARDINALITY IS NOT NULL THEN ' ' || 'CARD=' || CARDINALITY ELSE '' END)
                  || (CASE WHEN BYTES IS NOT NULL THEN ' ' || 'BYTES=' || BYTES ELSE '' END)
                  || (CASE WHEN COST IS NOT NULL OR CARDINALITY IS NOT NULL OR BYTES IS NOT NULL THEN ')' ELSE '' END), ' ')
                AS EXECUTION_PLAN
              FROM TUN
            CONNECT BY PRIOR ID = NVL(CASE WHEN PARENT_ID=0 
                                           THEN
                                                CASE WHEN DEPTH=0 THEN -1
                                                ELSE PARENT_ID
                                            END
                                      ELSE PARENT_ID
                                       END, '-1')
             START WITH ID = 0
             ORDER BY ID
    </select>
    
    <select id="getTobeSQLPlanCnt" parameterType="tuningTargetSql" resultType="int">
        /* AutoPerformanceCompareBetweenDbServiceDao.getTobeSQLPlanCnt */
        SELECT COUNT(*)
          FROM SQL_AUTO_PERF_SQL_PLAN A
         WHERE 1 = 1
           AND A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.SQL_ID = #{sql_id}
           AND A.PLAN_HASH_VALUE = #{plan_hash_value}
    </select>
    
    <!-- DB변경성능영향도분석 튜닝대상선정 시 실행계획 플랜정보 가져오기 -->
    <select id="getTobeSQLPlan" parameterType="tuningTargetSql" resultType="String">
        /* AutoPerformanceCompareBetweenDbServiceDao.getTobeSQLPlan */
        WITH EXECUTION_PLAN AS
            (
            SELECT A.ID AS "Id"
                 , (CASE WHEN ID = 0 THEN NULL ELSE A.PARENT_ID END) PARENT_ID
                 , A.OPERATION || ' ' || A.OPTIONS AS "Operation"
                 , (CASE 
                         WHEN TRIM(A.OBJECT_OWNER) IS NOT NULL THEN TRIM(A.OBJECT_OWNER) || '.'
                         ELSE ''
                     END) || 
                     (CASE 
                         WHEN A.OBJECT_NAME IS NOT NULL THEN A.OBJECT_NAME 
                         ELSE ''
                     END) AS "Name"
                 , (CASE 
                     WHEN A.STARTS <![CDATA[<]]> 1000*100 THEN TO_CHAR(A.STARTS)
                         WHEN A.STARTS <![CDATA[<]]> 1000*1000*100 THEN ROUND(A.STARTS/1000) || 'K'
                         WHEN A.STARTS <![CDATA[<]]> 1000*1000*1000*100 THEN ROUND(A.STARTS/1000/1000) || 'M'
                         WHEN A.STARTS <![CDATA[>=]]> 1000*1000*1000*100 THEN ROUND(A.STARTS/1000/1000/1000) || 'G'
                         ELSE TO_CHAR(A.STARTS)
                     END) AS "Starts"
                 , (CASE 
                     WHEN A.OUTPUT_ROWS <![CDATA[<]]> 1000*100 THEN TO_CHAR(A.OUTPUT_ROWS) 
                         WHEN A.OUTPUT_ROWS <![CDATA[<]]> 1000*1000*100 THEN ROUND(A.OUTPUT_ROWS/1000) || 'K'
                         WHEN A.OUTPUT_ROWS <![CDATA[<]]> 1000*1000*1000*100 THEN ROUND(A.OUTPUT_ROWS/1000/1000) || 'M'
                         WHEN A.OUTPUT_ROWS <![CDATA[>=]]> 1000*1000*1000*100 THEN ROUND(A.OUTPUT_ROWS/1000/1000/1000) || 'G'
                         ELSE TO_CHAR(A.OUTPUT_ROWS)
                     END) AS "A-Rows"
                 , (CASE 
                     WHEN (A.CR_BUFFER_GETS + A.CU_BUFFER_GETS) <![CDATA[<]]> 1000*100 THEN TO_CHAR(ROUND(A.CR_BUFFER_GETS + A.CU_BUFFER_GETS))
                         WHEN (A.CR_BUFFER_GETS + A.CU_BUFFER_GETS) <![CDATA[<]]> 1000*1000*100 THEN ROUND((A.CR_BUFFER_GETS + A.CU_BUFFER_GETS)/1000) || 'K'
                         WHEN (A.CR_BUFFER_GETS + A.CU_BUFFER_GETS) <![CDATA[<]]> 1000*1000*1000*100 THEN ROUND((A.CR_BUFFER_GETS + A.CU_BUFFER_GETS)/1000/1000) || 'M'
                         WHEN (A.CR_BUFFER_GETS + A.CU_BUFFER_GETS) <![CDATA[>=]]> 1000*1000*1000*100 THEN ROUND((A.CR_BUFFER_GETS + A.CU_BUFFER_GETS)/1000/1000/1000) || 'G'
                         ELSE TO_CHAR(A.CR_BUFFER_GETS + A.CU_BUFFER_GETS)
                     END) AS "Buffers"
                 , DECODE(ROUND(A.ELAPSED_TIME/1000000, 4), 0, 0.0001, ROUND(A.ELAPSED_TIME/1000000, 4))  AS "A-Time"
                 , (CASE 
                     WHEN A.DISK_READS <![CDATA[<]]> 1000*100 THEN TO_CHAR(ROUND(A.DISK_READS))
                         WHEN A.DISK_READS <![CDATA[<]]> 1000*1000*100 THEN ROUND(A.DISK_READS/1000) || 'K'
                         WHEN A.DISK_READS <![CDATA[<]]> 1000*1000*1000*100 THEN ROUND(A.DISK_READS/1000/1000) || 'M'
                         WHEN A.DISK_READS <![CDATA[>=]]> 1000*1000*1000*100 THEN ROUND(A.DISK_READS/1000/1000/1000) || 'G'
                         ELSE TO_CHAR(A.DISK_READS)
                     END) AS "Reads"
                 , (CASE 
                         WHEN LAST_MEMORY_USED <![CDATA[<]]> 1024*100 THEN TO_CHAR(LAST_MEMORY_USED)
                         WHEN LAST_MEMORY_USED <![CDATA[<]]> 1024*1024*100 THEN ROUND(LAST_MEMORY_USED/1024) || 'K'
                         WHEN LAST_MEMORY_USED <![CDATA[<]]> 1024*1024*1024*100 THEN ROUND(LAST_MEMORY_USED/1024/1024) || 'M'
                         WHEN LAST_MEMORY_USED <![CDATA[>=]]> 1024*1024*1024*100 THEN ROUND(LAST_MEMORY_USED/1024/1024/1024) || 'G'
                         ELSE TO_CHAR(LAST_MEMORY_USED)
                     END) AS "Used-Mem"
                 , (CASE 
                         WHEN MAX_TEMPSEG_SIZE <![CDATA[<]]> 1024*100 THEN TO_CHAR(MAX_TEMPSEG_SIZE) 
                         WHEN MAX_TEMPSEG_SIZE <![CDATA[<]]> 1024*1024*100 THEN ROUND(MAX_TEMPSEG_SIZE/1024) || 'K'
                         WHEN MAX_TEMPSEG_SIZE <![CDATA[<]]> 1024*1024*1024*100 THEN ROUND(MAX_TEMPSEG_SIZE/1024/1024) || 'M'
                         WHEN MAX_TEMPSEG_SIZE <![CDATA[>=]]> 1024*1024*1024*100 THEN ROUND(MAX_TEMPSEG_SIZE/1024/1024/1024) || 'G'
                         ELSE TO_CHAR(MAX_TEMPSEG_SIZE)
                     END) AS "Temp"
                 , DEPTH
              FROM SQL_AUTO_PERF_SQL_PLAN A
             WHERE 1 = 1
               AND A.PROJECT_ID = #{project_id}
               AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
               AND A.SQL_ID = #{sql_id}
               AND A.PLAN_HASH_VALUE = #{plan_hash_value}
            ) 
            , EXECUTION_PLAN_LENGTH AS 
            (
            SELECT (CASE WHEN MAX(LENGTH(TO_CHAR("Id"))) + 3 <![CDATA[<]]> 5 THEN 5 ELSE NVL(MAX(LENGTH(TO_CHAR("Id"))) + 3, 5) END) AS ID_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("Operation"))) + MAX(DEPTH) + 3 <![CDATA[<]]> 12 THEN 12 ELSE NVL(MAX(LENGTH(TO_CHAR("Operation"))) + MAX(DEPTH) + 3, 12) END)  AS OPERATION_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("Name"))) + 3 <![CDATA[<]]> 7 THEN 7 ELSE NVL(MAX(LENGTH(TO_CHAR("Name"))) + 3, 7) END) AS NAME_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("Starts"))) + 3 <![CDATA[<]]> 9 THEN 9 ELSE NVL(MAX(LENGTH(TO_CHAR("Starts"))) + 3, 9) END) AS STARTS_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("A-Rows"))) + 3 <![CDATA[<]]> 9 THEN 9 ELSE NVL(MAX(LENGTH(TO_CHAR("A-Rows"))) + 3, 9) END)  AS AROWS_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("A-Time"))) + 3 <![CDATA[<]]> 9 THEN 9 ELSE NVL(MAX(LENGTH(TO_CHAR("A-Time"))) + 3, 9) END) AS ATIME_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("Buffers"))) + 3 <![CDATA[<]]> 10 THEN 10 ELSE NVL(MAX(LENGTH(TO_CHAR("Buffers"))) + 3, 10) END) AS BUFFERS_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("Reads"))) + 3 <![CDATA[<]]> 8 THEN 8 ELSE NVL(MAX(LENGTH(TO_CHAR("Reads"))) + 3, 8) END) AS READS_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("Used-Mem"))) + 3 <![CDATA[<]]> 11 THEN 11 ELSE NVL(MAX(LENGTH(TO_CHAR("Used-Mem"))) + 3, 11) END) AS USEDMEM_LENGTH
                 , (CASE WHEN MAX(LENGTH(TO_CHAR("Temp"))) + 3 <![CDATA[<]]> 7 THEN 7 ELSE NVL(MAX(LENGTH(TO_CHAR("Temp"))) + 3, 7) END) AS TEMP_LENGTH
              FROM EXECUTION_PLAN
            )
            , EXECUTION_PLAN_LINE AS
            (
            SELECT RPAD('-', ID_LENGTH+2, '-') ID_LINE
                 , RPAD('-', OPERATION_LENGTH+2, '-') OPERATION_LINE
                 , RPAD('-', NAME_LENGTH+2, '-') NAME_LINE
                 , RPAD('-', STARTS_LENGTH+2, '-') STARTS_LINE
                 , RPAD('-', AROWS_LENGTH+2, '-') AROWS_LINE
                 , RPAD('-', ATIME_LENGTH+2, '-') ATIME_LINE
                 , RPAD('-', BUFFERS_LENGTH+2, '-') BUFFERS_LINE
                 , RPAD('-', READS_LENGTH+2, '-') READS_LINE
                 , RPAD('-', USEDMEM_LENGTH+2, '-') USEDMEM_LINE
                 , RPAD('-', TEMP_LENGTH+2, '-') TEMP_LINE
              FROM EXECUTION_PLAN_LENGTH
            )
            , EXECUTION_PLAN_TITLE AS
            (
                SELECT ID_LINE || OPERATION_LINE || NAME_LINE || STARTS_LINE || AROWS_LINE || ATIME_LINE || BUFFERS_LINE || READS_LINE || USEDMEM_LINE || TEMP_LINE AS PLAN
                  FROM EXECUTION_PLAN_LINE
                 UNION ALL
                SELECT '|' || RPAD(' Id', ID_LENGTH, ' ') || '|'
                    || RPAD(' Operation', OPERATION_LENGTH, ' ') || ' |'
                    || RPAD(' Name', NAME_LENGTH, ' ') || ' |'
                    || RPAD(' Starts', STARTS_LENGTH, ' ') || ' |'
                    || RPAD(' A-Rows', AROWS_LENGTH, ' ') || ' |'
                    || RPAD(' A-Time', ATIME_LENGTH, ' ') || ' |'
                    || RPAD(' Buffers', BUFFERS_LENGTH, ' ') || ' |'
                    || RPAD(' Reads', READS_LENGTH, ' ') || ' |'
                    || RPAD(' Used-Mem', USEDMEM_LENGTH, ' ') || ' |'
                    || RPAD(' Temp', TEMP_LENGTH, ' ') || ' |'
                  FROM DUAL, (SELECT * FROM EXECUTION_PLAN_LENGTH)
                 UNION ALL
                SELECT ID_LINE || OPERATION_LINE || NAME_LINE || STARTS_LINE || AROWS_LINE || ATIME_LINE || BUFFERS_LINE || READS_LINE || USEDMEM_LINE || TEMP_LINE
                  FROM EXECUTION_PLAN_LINE
            )
            , EXECUTION_PLAN_TREE AS 
            (
                SELECT "Id"
                     , LPAD(' ',2*(LEVEL-1)) || "Operation" AS "Operation"
                     , "Name"
                     , "Starts"
                     , "A-Rows"
                     , "A-Time"
                     , "Buffers"
                     , "Reads"
                     , "Used-Mem"
                     , "Temp"
                FROM EXECUTION_PLAN
                CONNECT BY PRIOR "Id" = PARENT_ID
                START WITH "Id" = 0
                ORDER BY "Id"
            )
            , EXECUTION_PLAN_ONLINE AS
            (
                SELECT '|' || LPAD("Id", ID_LENGTH-1, ' ')|| ' | '
                     || RPAD("Operation", OPERATION_LENGTH, ' ') || '| '
                     || RPAD(NVL("Name", ' '), NAME_LENGTH, ' ') || '|'
                     || LPAD(NVL("Starts", ' '), STARTS_LENGTH, ' ') || ' |'
                     || LPAD(NVL("A-Rows", ' '), AROWS_LENGTH, ' ') || ' |'
                     || LPAD(NVL(FN_NUMPOINT_TO_CHAR_FORMAT("A-Time"), ' '), ATIME_LENGTH, ' ') || ' |'
                     || LPAD(NVL(TO_CHAR("Buffers"), ' '), BUFFERS_LENGTH, ' ') || ' |'
                     || LPAD(NVL(TO_CHAR("Reads"), ' '), READS_LENGTH, ' ') || ' |'
                     || LPAD(NVL("Used-Mem", ' '), USEDMEM_LENGTH, ' ') || ' |'
                     || LPAD(NVL("Temp", ' '), TEMP_LENGTH, ' ') || ' |' AS OPERATOINS
                  FROM EXECUTION_PLAN_TREE, EXECUTION_PLAN_LENGTH
            )
            SELECT * FROM EXECUTION_PLAN_TITLE
            UNION ALL
            SELECT *
            FROM EXECUTION_PLAN_ONLINE
            UNION ALL
            SELECT ID_LINE || OPERATION_LINE || NAME_LINE || STARTS_LINE || AROWS_LINE || ATIME_LINE || BUFFERS_LINE || READS_LINE || USEDMEM_LINE || TEMP_LINE
            FROM EXECUTION_PLAN_LINE
    </select>
    
    <insert id="insertPlanInSQLTuning" parameterType="tuningTargetSql">
        /* AutoPerformanceCompareBetweenDbServiceDao.insertPlanInSQLTuning */
        INSERT INTO SQL_TUNING
             ( TUNING_NO
             , IMPRB_EXEC_PLAN
             ) 
              VALUES 
             (
               #{tuning_no}
             , #{executions}
             )
    </insert>
    
    <!-- N-1: 좌측 그리드(테이블별 현황) -->
    <select id="loadTableCHGPerfChkTargetLeftList" parameterType="sqlAutoPerformanceCompare" resultType="sqlPerfImplAnalTable">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadTableCHGPerfChkTargetLeftList */
        SELECT ROW_NUMBER() OVER(ORDER BY A.TABLE_OWNER, A.TABLE_NAME) AS RNUM
             , A.TABLE_OWNER
             , A.TABLE_NAME
             , COUNT(*) AS SQL_CNT
             , SUM(CASE WHEN B.PLAN_CHANGE_YN = 'Y' THEN 1 ELSE 0 END) AS PLAN_CHANGE_YN_CNT
             , SUM(CASE WHEN B.PERF_IMPACT_TYPE_CD = '2' THEN 1 ELSE 0 END) AS PERF_IMPACT_TYPE_CD_CNT
          FROM TABLE_CHG_PERF_CHK_TARGET_SQL A
             , SQL_AUTO_PERf_CHK_TARGET B
             , SQL_AUTO_PERF_CHK C
         WHERE A.PROJECT_ID = #{project_id}
           AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
           AND A.PROJECT_ID = B.PROJECT_ID
           AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID
           AND A.SQL_ID = B.SQL_ID
           AND B.PROJECT_ID = C.PROJECT_ID
           AND B.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID
           AND C.PERF_CHECK_EXEC_END_DT IS NOT NULL
           AND C.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND NVL(C.PERF_CHECK_FORCE_CLOSE_YN, 'N') <![CDATA[<>]]> 'Y'
        GROUP BY A.TABLE_OWNER, A.TABLE_NAME
        ORDER BY A.TABLE_OWNER, A.TABLE_NAME
    </select>
    
    <!-- N-2: 우측 그리드 -->
    <select id="loadTableCHGPerfChkTargetRightList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadTableCHGPerfChkTargetRightList */
        SELECT *
        FROM (
            SELECT ROWNUM RNUM, AA.*
            FROM (
                <include refid="loadTableCHGPerfChkTargetDetailList"/>
            ) AA
            WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
        ) AA
        WHERE AA.RNUM <![CDATA[>]]> ${pagePerCount} * (${currentPage} - 1)
    </select>
    
    <select id="tableCHGPerfChkExcelDownload" parameterType="sqlAutoPerformanceCompare" resultType="java.util.LinkedHashMap">
        /* AnalyzeImpactChangeTableDao.tableCHGPerfChkExcelDownload */
        <include refid="loadTableCHGPerfChkTargetDetailList"/>
    </select>
    
    <select id="getTableCHGPerfChkResultCount" parameterType="sqlAutoPerformanceCompare" resultType="int">
        /* AnalyzeImpactChangeTableDao.loadPerformanceResultCount */
        SELECT COUNT(ROWNUM)
          FROM (
                <include refid="loadTableCHGPerfChkTargetDetailList"/>
               )
    </select>
    
    <select id="tableCHGPerfChkTargetAll" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AnalyzeImpactChangeTableDao.tableCHGPerfChkTargetAll */
        <include refid="loadTableCHGPerfChkTargetDetailList"/>
    </select>
    
    <!-- N-2: 테이블변경 성능영향도 분석 우측 그리드 -->
    <sql id="loadTableCHGPerfChkTargetDetailList">
        SELECT 
               (SELECT LISTAGG(S1.TABLE_NAME, ',') WITHIN GROUP(ORDER BY S1.TABLE_NAME)
                  FROM TABLE_CHG_PERF_CHK_TARGET_SQL S1
                 WHERE S1.PROJECT_ID = A.PROJECT_ID
                   AND S1.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
                   AND S1.SQL_ID = A.SQL_ID) AS TABLE_NAME  /* 테이블 */
             , A.TUNING_STATUS_NM                           /*튜닝상태 */
            
             , A.PERF_IMPACT_TYPE_NM                        /* 성능임팩트유형 */
             , A.BUFFER_INCREASE_RATIO                      /* 버퍼 임팩트(배) */
             , A.ELAPSED_TIME_INCREASE_RATIO                /* 수행시간 임팩트(배) */
             , A.PERF_CHECK_RESULT_YN                       /* 성능점검결과 */
             , A.PLAN_CHANGE_YN                             /* Plan변경여부 */
             , A.SQL_ID                                     /* SQL ID */
             , A.ASIS_PLAN_HASH_VALUE                       /* ASIS PLAN HASH_VALUE */
             , A.TOBE_PLAN_HASH_VALUE                       /* TOBE PLAN HASH VALUE */
             , A.ASIS_EXECUTIONS                            /* ASIS EXECUTIONS */
             , A.TOBE_EXECUTIONS                            /* TOBE EXECUTIONS */
             , A.ASIS_ROWS_PROCESSED                        /* ASIS ROWS PROCESSED */
             , A.TOBE_ROWS_PROCESSED                        /* TOBE ROWS PROCESSED */
             , DECODE(A.ASIS_ELAPSED_TIME, 0, 0.0001, A.ASIS_ELAPSED_TIME) AS ASIS_ELAPSED_TIME                 /* ASIS ELAPSED TIME */
             , DECODE(A.TOBE_ELAPSED_TIME, 0, 0.0001, A.TOBE_ELAPSED_TIME) AS TOBE_ELAPSED_TIME                 /* TOBE ELAPSED TIME */
             , A.ASIS_BUFFER_GETS                           /* ASIS BUFFER GETS */
             , A.TOBE_BUFFER_GETS                           /* TOBE BUFFER GETS */
             , A.ASIS_FULLSCAN_YN                           /* ASIS FULLSCAN Y/N */
             , A.TOBE_FULLSCAN_YN                           /* TOBE FULLSCAN Y/N */
             , A.ASIS_PARTITION_ALL_ACCESS_YN               /* ASIS PARTITION ALL ACCESS YN */
             , A.TOBE_PARTITION_ALL_ACCESS_YN               /* TOBE PARTITION ALL ACCESS YN */
             , A.SQL_COMMAND_TYPE_CD                        /* SQL 명령 유형 */
             , A.ERR_CODE                                   /* 에러코드 */
             , A.ERR_MSG                                    /* 에러메시지 */
             , DBMS_LOB.SUBSTR(A.SQL_TEXT, 40, 1) SQL_TEXT_WEB    /* SQL TEXT(FOR WEB) */
             , A.SQL_TEXT SQL_TEXT_EXCEL                    /* SQL TEXT(FOR EXCEL) */
             , A.TUNING_NO                                  /* 튜닝번호 */
             , A.PERF_CHECK_NAME                            /* SQL점검팩명 */
             /* HIDDEN */
             , A.ORIGINAL_DBID                              /* ORIGINAL_DBID */
             , A.PROJECT_ID
             , A.SQL_AUTO_PERF_CHECK_ID
             , A.PERF_CHECK_SQL_SOURCE_TYPE_CD
             , A.PARSING_SCHEMA_NAME
             , A.MODULE
          FROM (
                SELECT B.PROJECT_NM AS PROJECT_NM                                        /* 프로젝트명 */ 
                     , E.PERF_CHECK_NAME AS PERF_CHECK_NAME                              /* SQL점검팩명 */
                     , F.TUNING_STATUS_NM                                                /* 튜닝상태 */
                     , CD1.CD_NM AS PERF_IMPACT_TYPE_NM
                     , A.BUFFER_INCREASE_RATIO AS BUFFER_INCREASE_RATIO                  /* 버퍼개선율 */
                     , A.ELAPSED_TIME_INCREASE_RATIO AS ELAPSED_TIME_INCREASE_RATIO      /* 수행시간개선율 */
                     , CASE WHEN C.ERR_CODE IS NOT NULL THEN NULL
                            WHEN (
                                    SELECT COUNT(*) 
                                      FROM SQL_AUTO_PERF_CHK_RESULT Z 
                                     WHERE Z.PROJECT_ID = A.PROJECT_ID 
                                       AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID 
                                       AND Z.SQL_ID = A.SQL_ID
                                       AND Z.PERF_CHECK_RESULT_DIV_CD = 'B'
                                       AND ROWNUM = 1
                                 ) = 1 THEN '부적합' ELSE '적합' END AS PERF_CHECK_RESULT_YN                                                     /* 성능점검결과 */
                     , A.PLAN_CHANGE_YN AS PLAN_CHANGE_YN                                                                                     /* Plan 변경여부 */
                     , A.SQL_ID AS SQL_ID                                                                                                     /* SQL_ID */
                     , A.BEFORE_PLAN_HASH_VALUE AS ASIS_PLAN_HASH_VALUE                                                                       /* ASIS PLAN HASH VALUE */
                     , A.AFTER_PLAN_HASH_VALUE AS TOBE_PLAN_HASH_VALUE                                                                        /* TOBE PLAN HASH VALUE */
                     , A.BEFORE_EXECUTIONS AS ASIS_EXECUTIONS                                                                                 /* ASIS EXECUTIONS */
                     , A.AFTER_EXECUTIONS AS TOBE_EXECUTIONS                                                                                  /* TOBE EXECUTIONS */
                     , ROUND(A.BEFORE_ROWS_PROCESSED/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS)) AS ASIS_ROWS_PROCESSED           /* ASIS ROWS PROCESSED */
                     , ROUND(A.AFTER_ROWS_PROCESSED/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AS TOBE_ROWS_PROCESSED              /* TOBE ROWS PROCESSED */
                     , ROUND(A.BEFORE_ELAPSED_TIME/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS)/1000000, 4) AS ASIS_ELAPSED_TIME    /* ASIS ELAPSED TIME */
                     , ROUND(A.AFTER_ELAPSED_TIME/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)/1000000, 4) AS TOBE_ELAPSED_TIME       /* TOBE ELAPSED TIME */
                     , ROUND(A.BEFORE_BUFFER_GETS/DECODE(A.BEFORE_EXECUTIONS, 0, 1, A.BEFORE_EXECUTIONS)) AS ASIS_BUFFER_GETS                 /* ASIS BUFFER GETS */
                     , ROUND(A.AFTER_BUFFER_GETS/DECODE(A.AFTER_EXECUTIONS, 0, 1, A.AFTER_EXECUTIONS)) AS TOBE_BUFFER_GETS                    /* TOBE BUFFER GETS */
                     , A.BEFORE_FULLSCAN_YN AS ASIS_FULLSCAN_YN                                                                               /* ASIS FULLSCAN Y/N */
                     , A.AFTER_FULLSCAN_YN AS TOBE_FULLSCAN_YN                                                                                /* TOBE FULLSCAN Y/N */
                     , A.BEFORE_PARTITION_ALL_ACCESS_YN AS ASIS_PARTITION_ALL_ACCESS_YN                                                       /* ASIS PARTITION_ALL ACCESS Y/N */
                     , A.AFTER_PARTITION_ALL_ACCESS_YN AS TOBE_PARTITION_ALL_ACCESS_YN                                                        /* TOBE PARTITION_ALL ACCESS Y/N */
                     , A.SQL_COMMAND_TYPE_CD AS SQL_COMMAND_TYPE_CD                                                                           /* SQL 명령 유형 */
                     , (CASE WHEN A.PERF_IMPACT_TYPE_CD IS NOT NULL THEN NULL ELSE C.ERR_CODE END) AS ERR_CODE                                /* JMG : 2021-11-05 */
                     , (CASE WHEN A.PERF_IMPACT_TYPE_CD IS NOT NULL THEN NULL ELSE C.ERR_MSG END) AS ERR_MSG                                  /* JMG : 2021-11-05 */
                     , (CASE 
                             WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' /* AWR */ THEN (
                                  SELECT (CASE WHEN NVL( DBMS_LOB.GETLENGTH(S.SQL_TEXT) , 0) <![CDATA[>=]]> 0 AND NVL( DBMS_LOB.GETLENGTH(S.SQL_TEXT), 0) <![CDATA[<=]]> 1000 THEN  S.SQL_TEXT  
                                               ELSE ( TO_CLOB( DBMS_LOB.SUBSTR(S.SQL_TEXT, 500) || CHR(13)||CHR(10) ||'   (중략) ...   '||CHR(13)||CHR(10)|| DBMS_LOB.SUBSTR(S.SQL_TEXT ,500,DBMS_LOB.GETLENGTH(S.SQL_TEXT)-500) ))
                                          END) SQL_TEXT
                                    FROM ODS_HIST_SQLTEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID)
                             ELSE (
                                  SELECT (CASE WHEN NVL( DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT) , 0) <![CDATA[>=]]> 0 AND NVL( DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT), 0) <![CDATA[<=]]> 1000 THEN  S.SQL_FULLTEXT  
                                               ELSE ( TO_CLOB( DBMS_LOB.SUBSTR(S.SQL_FULLTEXT, 500) ||CHR(13)||CHR(10) ||'   (중략) ...   '||CHR(13)||CHR(10)|| DBMS_LOB.SUBSTR(S.SQL_FULLTEXT ,500 , DBMS_LOB.GETLENGTH(S.SQL_FULLTEXT)-500) ))
                                          END) SQL_TEXT
                                    FROM VSQL_TEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                        END) AS SQL_TEXT
                     , E.ORIGINAL_DBID AS ORIGINAL_DBID
                     , F.TUNING_NO
                     , A.SQL_AUTO_PERF_CHECK_ID
                     , A.PROJECT_ID
                     , E.PERF_CHECK_SQL_SOURCE_TYPE_CD
                     , (CASE 
                             WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' THEN (SELECT MAX(S.PARSING_SCHEMA_NAME) FROM ODS_HIST_SQLSTAT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                             ELSE (SELECT MAX(S.PARSING_SCHEMA_NAME) FROM VSQL_TEXT S WHERE S.DBID = E.ORIGINAL_DBID AND S.SQL_ID = A.SQL_ID AND S.PLAN_HASH_VALUE = A.BEFORE_PLAN_HASH_VALUE)
                        END) AS PARSING_SCHEMA_NAME
                     , (CASE 
                             WHEN E.PERF_CHECK_SQL_SOURCE_TYPE_CD = '1' /* AWR */ THEN (SELECT MODULE FROM ODS_HIST_SQLSTAT ASQL WHERE ASQL.DBID = E.ORIGINAL_DBID AND ASQL.SQL_ID = A.SQL_ID AND ROWNUM = 1) 
                             ELSE /* VSQL */ (SELECT MODULE FROM VSQL_MODULE VSQL WHERE VSQL.DBID = E.ORIGINAL_DBID AND VSQL.SQL_ID = A.SQL_ID AND ROWNUM = 1) 
                        END) AS MODULE 
                  FROM SQL_AUTO_PERF_CHK_TARGET A
                     , PROJECT B
                     , SQL_AUTO_PERF_CHK_ERROR C
                     , SQL_AUTO_PERF_CHK E
                     , (SELECT A.TUNING_NO
                             , A.PROJECT_ID
                             , A.SQL_AUTO_PERF_CHECK_ID
                             , A.TUNING_STATUS_CD
                             , CD2.CD_NM AS TUNING_STATUS_NM
                             , A.SQL_ID
                             , B.IMPRA_ELAP_TIME
                             , B.IMPRA_BUFFER_CNT
                          FROM TUNING_TARGET_SQL A
                             , SQL_TUNING B
                             , CD CD2
                         WHERE A.TUNING_NO = B.TUNING_NO(+)
                           AND A.TUNING_STATUS_CD NOT IN ('4', '7', 'A')  /* 튜닝반려, 적용반려, 요청취소 건 제외 */
                           AND A.TUNING_NO IN (SELECT MAX(TUNING_NO)
                                                 FROM TUNING_TARGET_SQL
                                                WHERE PROJECT_ID = #{project_id}
                                                  AND SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                                                GROUP BY SQL_ID)
                           AND CD2.GRP_CD_ID(+) = '1004'
                           AND A.TUNING_STATUS_CD = CD2.CD(+)
                     ) F
                     , CD CD1
                 WHERE A.PROJECT_ID = #{project_id}
                   AND A.SQL_AUTO_PERF_CHECK_ID = #{sql_auto_perf_check_id}
                   AND A.PROJECT_ID = B.PROJECT_ID
                   AND A.PROJECT_ID = C.PROJECT_ID(+)
                   AND A.SQL_AUTO_PERF_CHECK_ID = C.SQL_AUTO_PERF_CHECK_ID(+)
                   AND A.SQL_ID = C.SQL_ID(+)
                   AND E.PROJECT_ID = A.PROJECT_ID
                   AND E.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
                   AND E.PERF_CHECK_EXEC_END_DT IS NOT NULL
                   AND E.DATABASE_KINDS_CD = #{database_kinds_cd}
                   AND A.PROJECT_ID = F.PROJECT_ID(+)
                   AND A.SQL_AUTO_PERF_CHECK_ID = F.SQL_AUTO_PERF_CHECK_ID(+)
                   AND A.SQL_ID = F.SQL_ID(+)
                   AND CD1.GRP_CD_ID(+) = '1025'
                   AND A.PERF_IMPACT_TYPE_CD = CD1.CD(+)
                   AND NVL(E.PERF_CHECK_FORCE_CLOSE_YN, 'N') <![CDATA[<>]]> 'Y'                  /* 강제완료처리 */
                   AND ( /* SELECT 문 */ 
                        (
                         /* 전체 체크 */
                         A.SQL_COMMAND_TYPE_CD IN ('SELECT', 'OTHER')
                    <if test="plan_change_yn != null and plan_change_yn.equalsIgnoreCase('Y')">
                         /* PLAN 변경 체크 */
                         AND A.PLAN_CHANGE_YN = 'Y'
                    </if>
                    <if test="perf_down_yn != null and perf_down_yn.equalsIgnoreCase('Y')">
                         /* 성능저하(BUFFER GETS 기준) */
                         AND A.BUFFER_INCREASE_RATIO <![CDATA[<]]> 0
                    </if>
                    <if test="notPerf_yn != null and notPerf_yn.equalsIgnoreCase('Y')">
                         /* 성능 부적합 체크 */
                         AND EXISTS (
                                      SELECT 'Y'
                                       FROM SQL_AUTO_PERF_CHK_RESULT Z 
                                      WHERE Z.PROJECT_ID = A.PROJECT_ID 
                                        AND Z.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID 
                                        AND Z.SQL_ID = A.SQL_ID
                                        AND Z.PERF_CHECK_RESULT_DIV_CD = 'B'
                                        AND ROWNUM = 1
                                    )
                    </if>
                    <if test="error_yn != null and error_yn.equalsIgnoreCase('Y')">
                         /* 오류여부 체크 */
                         AND C.ERR_MSG IS NOT NULL
                    </if>
                        ) 
                     <if test="dml_yn != null and dml_yn.equalsIgnoreCase('Y')">
                        OR /* DML문 */
                        (
                         /* DML문 선택  - 필수조건 */
                         A.SQL_COMMAND_TYPE_CD IN ('UPDATE', 'INSERT', 'DELETE', 'MERGE', 'TRUNCATE')
                         <if test="fullScan_yn != null and fullScan_yn.equalsIgnoreCase('Y')">
                         /* FULL SCAN 체크 */
                         AND A.AFTER_FULLSCAN_YN = 'Y'
                        </if>
                        <if test="partition_yn != null and partition_yn.equalsIgnoreCase('Y')">
                         /* PARTITION ALL ACCESS 체크 */
                         AND A.AFTER_PARTITION_ALL_ACCESS_YN = 'Y'
                        </if>
                        <if test="error_dml_yn != null and error_dml_yn.equalsIgnoreCase('Y')">
                         /* DML문 오류여부 체크 */
                         AND C.ERR_MSG IS NOT NULL
                        </if>
                        )
                     </if>
                    )
                <if test="table_owner != null and table_owner != '' and table_name != null and table_name != '' ">
                  /* 좌측 테이블 그리드 클릭 시 */
                   AND A.SQL_ID IN (SELECT B.SQL_ID
                                      FROM TABLE_CHG_PERF_CHK_TARGET_SQL B
                                     WHERE B.PROJECT_ID = A.PROJECT_ID
                                       AND B.SQL_AUTO_PERF_CHECK_ID = A.SQL_AUTO_PERF_CHECK_ID
                                       AND B.SQL_ID = A.SQL_ID
                                       AND B.TABLE_OWNER = #{table_owner}
                                       AND B.TABLE_NAME = #{table_name})
                </if>
                ) A 
            WHERE 1 = 1
            <if test="buffer_gets_1day != null and buffer_gets_1day != ''">
              /* BUFFER GETS(ASIS 일평균) */
              AND A.ASIS_BUFFER_GETS <![CDATA[>=]]> #{buffer_gets_1day}
            </if>
            <if test="asis_elapsed_time != null and asis_elapsed_time != ''">
              /* ELAPSED TIME(ASIS 일평균) */
              AND A.ASIS_ELAPSED_TIME <![CDATA[>=]]> #{asis_elapsed_time}
            </if>
            <if test="buffer_gets_regres != null and buffer_gets_regres != ''">
              /* Buffer Gets 성능저하 */
              AND (A.TOBE_BUFFER_GETS/DECODE(A.ASIS_BUFFER_GETS, 0, 1, A.ASIS_BUFFER_GETS)) <![CDATA[>=]]> #{buffer_gets_regres}
            </if>
            <if test="elapsed_time_regres != null and elapsed_time_regres != ''">
              /* Elapsed Time 성능저하 */
              AND (A.TOBE_ELAPSED_TIME/DECODE(A.ASIS_ELAPSED_TIME, 0, 1, A.ASIS_ELAPSED_TIME)) <![CDATA[>=]]> #{elapsed_time_regres}
            </if>
    </sql>
    <select id="loadPerformanceList" parameterType="sqlAutoPerformanceCompare" resultType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadPerformanceList */
        SELECT *
          FROM (
                SELECT ROWNUM RNUM
                     , AA.*
                  FROM (
                        <include refid="loadPerformanceListRefId"/>
                       ) AA
                 WHERE ROWNUM <![CDATA[<=]]> (${pagePerCount} * ${currentPage} + 1)
                   ) AA
         WHERE AA.RNUM <![CDATA[>]]> ${pagePerCount} * (${currentPage} - 1)
    </select>
    
    <sql id="loadPerformanceListRefId">
        SELECT PERF_CHECK_NAME
             , DB1.DB_NAME ASIS_DB_NAME
             , DB2.DB_NAME TOBE_DB_NAME
             , (CASE WHEN NVL(A.PERF_CHECK_FORCE_CLOSE_YN, 'N') = 'Y' THEN '강제완료'
                     WHEN NVL(A.PERF_CHECK_FORCE_CLOSE_YN, 'N') <![CDATA[<>]]> 'Y' AND A.PERF_CHECK_EXEC_END_DT IS NOT NULL THEN '완료'
                     ELSE '수행중'
               END) AS PERF_CHECK_FORCE_CLOSE_YN
             , TOTAL_CNT
             , COMPLETED_CNT
             , ERR_CNT
             , ROUND((COMPLETED_CNT+ERR_CNT)/TOTAL_CNT*100, 2) COMPLETE_PERCENT
             , PERF_CHECK_EXEC_BEGIN_DT
             , PERF_CHECK_EXEC_END_DT
             , (
                CASE WHEN PERF_CHECK_EXEC_END_DT IS NULL 
                     THEN TRUNC (((SYSDATE - PERF_CHECK_EXEC_BEGIN_DT) * 86400) / (60 * 60 * 24)) || '일 '
                             || LPAD (MOD (TRUNC (((SYSDATE - PERF_CHECK_EXEC_BEGIN_DT) * 86400) / (60 * 60)), 24), 2, 0) || '시 '
                             || LPAD (MOD (TRUNC (((SYSDATE - PERF_CHECK_EXEC_BEGIN_DT) * 86400) / 60), 60), 2, 0) || '분 '
                             || LPAD (TRUNC(MOD (((SYSDATE - PERF_CHECK_EXEC_BEGIN_DT) * 86400), 60)), 2, 0) || '초'
                     ELSE TRUNC (((PERF_CHECK_EXEC_END_DT - PERF_CHECK_EXEC_BEGIN_DT) * 86400) / (60 * 60 * 24)) || '일 '
                             || LPAD (MOD (TRUNC (((PERF_CHECK_EXEC_END_DT - PERF_CHECK_EXEC_BEGIN_DT) * 86400) / (60 * 60)), 24), 2, 0) || '시 '
                             || LPAD (MOD (TRUNC (((PERF_CHECK_EXEC_END_DT - PERF_CHECK_EXEC_BEGIN_DT) * 86400) / 60), 60), 2, 0) || '분 '
                             || LPAD (TRUNC(MOD (((PERF_CHECK_EXEC_END_DT - PERF_CHECK_EXEC_BEGIN_DT) * 86400), 60)), 2, 0) || '초'
                END
               ) AS EXEC_TIME
            /* HIDDEN */ 
             , A.SQL_AUTO_PERF_CHECK_ID
          FROM SQL_AUTO_PERF_CHK A
             , (
                SELECT A.SQL_AUTO_PERF_CHECK_ID
                     , COUNT(*) AS TOTAL_CNT
                     , NVL(SUM(CASE WHEN (B.PROJECT_ID IS NULL OR A.PERF_IMPACT_TYPE_CD IN ('4', '5')) AND A.SQL_COMMAND_TYPE_CD IS NOT NULL THEN 1 ELSE 0 END), 0) AS COMPLETED_CNT
                     , NVL(SUM(CASE WHEN B.PROJECT_ID IS NULL AND A.SQL_COMMAND_TYPE_CD IS NULL THEN 1 ELSE 0 END), 0) AS PERFORMING_CNT
                     , NVL(SUM(CASE WHEN B.PROJECT_ID IS NOT NULL AND (A.PERF_IMPACT_TYPE_CD IS NULL OR A.PERF_IMPACT_TYPE_CD IN ('1', '2', '3')) THEN 1 ELSE 0 END), 0) AS ERR_CNT
                  FROM SQL_AUTO_PERF_CHK_TARGET A
                     , SQL_AUTO_PERF_CHK_ERROR B
                 WHERE A.PROJECT_ID = B.PROJECT_ID(+)
                   AND A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID(+)
                   AND A.SQL_ID = B.SQL_ID(+)
                   AND A.PROJECT_ID = #{project_id}
                 GROUP BY A.SQL_AUTO_PERF_CHECK_ID
                HAVING COUNT(*) <![CDATA[>]]> 0
               ) B
             , DATABASE DB1
             , DATABASE DB2
         WHERE A.SQL_AUTO_PERF_CHECK_ID = B.SQL_AUTO_PERF_CHECK_ID(+)
           AND A.DATABASE_KINDS_CD = #{database_kinds_cd}
           AND A.ORIGINAL_DBID = DB1.DBID
           AND A.PERF_CHECK_TARGET_DBID = DB2.DBID
           AND A.PROJECT_ID = #{project_id}
           AND A.PERF_CHECK_TYPE_CD = '1'
        
        <choose>
            <when test="inProgress != null and inProgress.equalsIgnoreCase('Y') and completion != null and completion.equalsIgnoreCase('Y')">
               AND NVL(A.PERF_CHECK_FORCE_CLOSE_YN, 'N') = 'N'        /* 수행중, 완료 */
            </when>
            <when test="inProgress != null and inProgress.equalsIgnoreCase('Y')">
               AND A.PERF_CHECK_EXEC_END_DT IS NULL                   /* 수행중 */
            </when>
            <when test="completion != null and completion.equalsIgnoreCase('Y')">
               AND NVL(A.PERF_CHECK_FORCE_CLOSE_YN, 'N') <![CDATA[<>]]> 'Y' AND A.PERF_CHECK_EXEC_END_DT IS NOT NULL    /* 완료 */
            </when>
        </choose>
         ORDER BY PERF_CHECK_EXEC_BEGIN_DT DESC
    </sql>
        
    <!-- 성능 영향도분석 결과 > SQLInfo > SQLMemo 불러오기 -->
    <select id="getSqlMemo" parameterType="sqlAutoPerformanceCompare" resultType="String">
        /* AutoPerformanceCompareBetweenDbServiceDao.getSqlMemo */
        SELECT REVIEW_SBST
          FROM SQL_AUTO_PERF_CHK_REVIEW 
         WHERE DBID = #{dbid}            /* SQL_AUTO_PERF_CHK.ORIGINAL_DBID */
           AND SQL_ID = #{sql_id}        /* SQL_AUTO_PERF_CHK_TARGET.SQL_ID */
    </select>
    
    <!-- 성능 영향도분석 결과 > SQLInfo > SQLMemo 저장 -->
    <update id="updateSqlMemo" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.updateSqlMemo */
        MERGE INTO SQL_AUTO_PERF_CHK_REVIEW A
        USING (
                SELECT #{dbid} AS DBID               /* SQL_AUTO_PERF_CHK.ORIGINAL_DBID */
                     , #{sql_id} AS SQL_ID           /* SQL_AUTO_PERF_CHK_TARGET.SQL_ID */
                     , #{review_sbst} AS REVIEW_SBST 
                  FROM DUAL
              ) B
           ON (A.DBID = B.DBID AND A.SQL_ID = B.SQL_ID)
         WHEN NOT MATCHED
         THEN 
              INSERT 
                   ( A.DBID
                   , A.SQL_ID
                   , A.REVIEW_SBST
                   ) 
              VALUES
                   ( B.DBID
                   , B.SQL_ID
                   , B.REVIEW_SBST
                   )
         WHEN MATCHED 
         THEN UPDATE SET A.REVIEW_SBST = B.REVIEW_SBST
    </update>
    
    <!-- 성능 영향도분석 결과 > SQLInfo > SQLMemo 삭제 -->
    <delete id="deleteSqlMemo" parameterType="sqlAutoPerformanceCompare">
        /* AutoPerformanceCompareBetweenDbServiceDao.deleteSqlMemo */
        DELETE
          FROM SQL_AUTO_PERF_CHK_REVIEW 
         WHERE DBID = #{dbid}            /* SQL_AUTO_PERF_CHK.ORIGINAL_DBID */
           AND SQL_ID = #{sql_id}        /* SQL_AUTO_PERF_CHK_TARGET.SQL_ID */
    </delete>
    
    <!-- 성능 영향도 분석 원천DB 목표DB 조회 -->
    <select id="loadOriginalDb" parameterType="sqlAutomaticPerformanceCheck" resultType="sqlAutomaticPerformancecheck">
        /* AutoPerformanceCompareBetweenDbServiceDao.loadOriginalDb */
        <choose>
            <when test="original_dbid != null and original_dbid != ''">
            /* 대상DB조회 */
            SELECT B.PROJECT_NM
                 , DB2.DB_NAME AS PERF_CHECK_TARGET_DB_NAME
                 , A.PERF_CHECK_TARGET_DBID
                 , A.PROJECT_ID
                 , A.PARSING_SCHEMA_NAME
              FROM PROJECT_DB A
                 , PROJECT B
                 , DATABASE DB2
             WHERE A.PROJECT_ID = B.PROJECT_ID
               AND A.PERF_CHECK_TARGET_DBID = DB2.DBID
               AND A.PROJECT_ID = #{project_id}
               AND A.PERF_CHECK_ORIGINAL_DBID = #{original_dbid}
               AND A.PERF_CHECK_TARGET_YN = 'Y'
               AND DB2.DATABASE_KINDS_CD = #{database_kinds_cd}
             ORDER BY DB2.ORDERING
            </when>
            <otherwise>
            /* 원천DB조회 */
            SELECT DISTINCT 
                   B.PROJECT_NM
                 , DB1.DB_NAME AS ORIGINAL_DB_NAME
                 , A.PERF_CHECK_ORIGINAL_DBID AS ORIGINAL_DBID
                 , A.PROJECT_ID
                 , DB1.ORDERING
              FROM PROJECT_DB A
                 , PROJECT B
                 , DATABASE DB1
             WHERE A.PROJECT_ID = B.PROJECT_ID
               AND A.PERF_CHECK_ORIGINAL_DBID = DB1.DBID
               AND A.PROJECT_ID = #{project_id}
               AND A.PERF_CHECK_TARGET_YN = 'Y'
               AND DB1.DATABASE_KINDS_CD = #{database_kinds_cd}
             ORDER BY DB1.ORDERING
            </otherwise>
        </choose>
    </select>
</mapper>